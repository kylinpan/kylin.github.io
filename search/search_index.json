{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/","text":"\u4ecb\u7ecd \u8fd9\u662f\u4e00\u4e2a Go \u8bed\u8a00\u7684\u53c2\u8003\u624b\u518c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u8bbf\u95ee golang.org \u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u548c\u5176\u4ed6\u6587\u6863\u3002 Go \u662f\u5728\u8bbe\u8ba1\u65f6\u8003\u8651\u4e86\u7cfb\u7edf\u7f16\u7a0b\u7684\u901a\u7528\u578b\u7f16\u7a0b\u8bed\u8a00\u3002\u5b83\u662f\u5f3a\u7c7b\u578b\uff0c\u6709\u5783\u573e\u56de\u6536\u673a\u5236\u5e76\u539f\u751f\u652f\u6301\u5e76\u53d1\u7f16\u7a0b\u3002Go \u7a0b\u5e8f\u7531\u4e00\u4e2a\u6216\u591a\u4e2a package \u7ec4\u6210\uff0c\u8fd9\u6837\u53ef\u4ee5\u9ad8\u6548\u7684\u7ba1\u7406\u4f9d\u8d56\u3002 Go \u7684\u8bed\u6cd5\u7b80\u6d01\u4e14\u6709\u89c4\u5219\uff0c\u8fd9\u8ba9\u81ea\u52a8\u5316\u5de5\u5177\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5206\u6790\u4ee3\u7801\uff0c\u4f8b\u5982\uff1a\u96c6\u6210\u5f00\u53d1\u73af\u5883\u3002 \u6807\u8bb0 \u8bed\u6cd5\u91c7\u7528\u6269\u5c55\u5df4\u79d1\u65af\u8303\u5f0f\u3002 Production = production_name \"=\" [ Expression ] \".\" . Expression = Alternative { \"|\" Alternative } . Alternative = Term { Term } . Term = production_name | token [ \"\u2026\" token ] | Group | Option | Repetition . Group = \"(\" Expression \")\" . Option = \"[\" Expression \"]\" . Repetition = \"{\" Expression \"}\" . \u4ea7\u751f\u5f0f\u662f\u7531\u8bcd\u6cd5\u5355\u5143\u548c\u4ee5\u4e0b\u64cd\u4f5c\u7b26\u6784\u6210\u7684\u8868\u8fbe\u5f0f\uff08\u4f18\u5148\u7ea7\u4f9d\u6b21\u9012\u589e\uff09\uff1a | \u6216 () \u5206\u7ec4 [] \u53ef\u9009 (\u51fa\u73b0 0 \u6216 1 \u6b21) {} \u53ef\u91cd\u590d (\u51fa\u73b0 0 \u5230 n \u6b21) \u5c0f\u5199\u7684\u4ea7\u751f\u5f0f\u540d\u79f0\u7528\u6765\u4e0e\u8bcd\u6cd5\u5355\u5143\u533a\u5206\u3002\u975e\u7ec8\u7ed3\u7b26\u91c7\u7528\u9a7c\u5cf0\u5f0f\u3002\u8bcd\u6cd5\u5355\u5143\u7531\u53cc\u5f15\u53f7\u6216\u53cd\u5f15\u53f7\u7ec4\u6210\u3002 a...b \u8868\u793a\u4ece a \u5230 b \u4e4b\u95f4\u7684\u4efb\u610f\u5b57\u7b26\u3002\u7701\u7565\u53f7 ... \u4e5f\u53ef\u4ee5\u5728\u89c4\u8303\u4e2d\u8868\u793a\u5bf9\u66f4\u8be6\u7ec6\u7684\u679a\u4e3e\u548c\u4ee3\u7801\u7247\u6bb5\u7684\u7701\u7565\u3002\u5b57\u7b26 ... \u4e0d\u662f Go \u8bed\u8a00\u7684\u8bcd\u6cd5\u5355\u5143\u3002 \u6e90\u7801\u8868\u793a\u6cd5 Go \u7684\u6e90\u4ee3\u7801\u4f7f\u7528 UTF-8 \u7f16\u7801\u7684 Unicode \u6587\u672c\u3002\u4e0d\u8fc7\u5b83\u5e76\u4e0d\u662f\u5b8c\u5168\u89c4\u8303\u5316\u7684\uff0c\u5355\u91cd\u97f3\u7684\u4ee3\u7801\u70b9\u4e0e\u7531\u76f8\u540c\u5b57\u7b26\u548c\u97f3\u6807\u7ec4\u6210\u7684\u4ee3\u7801\u70b9\u662f\u4e0d\u540c\u7684\uff1b\u524d\u8005\u6211\u4eec\u8ba4\u4e3a\u5b83\u662f\u4e24\u4e2a\u4ee3\u7801\u70b9\u3002\u7b80\u5355\u6765\u8bb2\uff0c\u6587\u6863\u4f1a\u5728\u6e90\u4ee3\u7801\u6587\u672c\u4e2d\u4f7f\u7528\u975e\u89c4\u8303\u7684\u672f\u8bed\u5b57\u7b26\u6765\u8868\u793a\u4e00\u4e2a Unicode \u4ee3\u7801\u70b9\u3002 \u6bcf\u4e2a\u4ee3\u7801\u70b9\u90fd\u662f\u4e0d\u540c\u7684\uff1b\u76f8\u540c\u5b57\u7b26\u7684\u5927\u5199\u548c\u5c0f\u5199\u5f62\u5f0f\u8868\u793a\u4e0d\u540c\u7684\u5b57\u7b26\u3002 \u5b9e\u73b0\u9650\u5236\uff1a\u4e3a\u4e86\u517c\u5bb9\u5176\u4ed6\u5de5\u5177\uff0c\u7f16\u8bd1\u5668\u4e0d\u5141\u8bb8\u51fa\u73b0 Utf-8 \u7f16\u7801\u7684\u6e90\u6587\u672c\u4e2d\u7684 NUL \u5b57\u7b26\uff08U+0000\uff09\u3002 \u5b9e\u73b0\u9650\u5236\uff1a\u4e3a\u4e86\u517c\u5bb9\u5176\u4ed6\u5de5\u5177\uff0c\u5982\u679c\u6e90\u6587\u672c\u4e2d\u662f\u4ee5Utf-8 \u7f16\u7801\u7684\u5b57\u8282\u5e8f\u6807\u8bb0\uff08U+FEFF\uff09\u4e3a\u8d77\u59cb\u4ee3\u7801\u70b9\u3002\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565\u5b83\u3002\u5b57\u8282\u5e8f\u6807\u8bb0\u4e0d\u5e94\u51fa\u73b0\u5728\u6e90\u6587\u672c\u7684\u4efb\u4f55\u4f4d\u7f6e\u3002 \u5b57\u7b26 \u8fd9\u4e9b\u5355\u8bcd\u8868\u793a Unicode \u5b57\u7b26\u7684\u7c7b\u522b\uff1a newline = /* Unicode \u4ee3\u7801\u70b9 U+000A */ . unicode_char = /* \u6392\u9664\u6362\u884c\u4ee5\u5916\u7684\u4efb\u610f Unicode \u4ee3\u7801\u70b9 */ . unicode_letter = /* \u4e00\u4e2a\u5b57\u6bcd\uff08\"Letter\"\uff09\u7c7b\u578b\u7684 Unicode \u4ee3\u7801\u70b9 */ . unicode_digit = /* \u4e00\u4e2a\u6570\u5b57\uff08\"Number, decimal digit\"\uff09\u7c7b\u578b\u7684 Unicode \u4ee3\u7801\u70b9 */ . \u5728 Unicode8.0 \u6807\u51c6\u4e2d\uff0c\u7b2c 4.5 \u7ae0\u8282 \u201c\u4e00\u822c\u7c7b\u522b\u201d \u4e2d\u5b9a\u4e49\u4e86\u5b57\u7b26\u7684\u7c7b\u522b\u3002Go \u80fd\u591f\u5904\u7406\u4efb\u4f55\u5b57\u7b26\u96c6\uff0c\u5305\u62ec Lu\uff0cLi\uff0cLt\uff0cLm \u6216 Lo \u4f5c\u4e3a Unicode \u5b57\u6bcd\uff0c\u8fd8\u53ef\u4ee5\u628a\u6570\u5b57\u5b57\u7b26\u96c6 Nd \u5f53\u4f5c Unicode \u6570\u5b57\u5904\u7406\u3002 \u5b57\u6bcd\u548c\u6570\u5b57 \u6211\u4eec\u8ba4\u4e3a\u4e0b\u5212\u7ebf _ \uff08U+005F\uff09\u662f\u4e00\u4e2a\u5b57\u6bcd\uff1a letter = unicode_letter | \"_\" . decimal_digit = \"0\" \u2026 \"9\" . octal_digit = \"0\" \u2026 \"7\" . hex_digit = \"0\" \u2026 \"9\" | \"A\" \u2026 \"F\" | \"a\" \u2026 \"f\" . \u8bcd\u6c47\u5143\u7d20 \u6ce8\u91ca \u6ce8\u91ca\u662f\u7a0b\u5e8f\u7684\u8bf4\u660e\u6587\u6863\u3002\u5728 Go \u4e2d\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a \u5355\u884c\u6ce8\u91ca\u4ece // \u5f00\u59cb\u76f4\u5230\u884c\u672b\u7ed3\u675f\u3002 \u901a\u7528\u6ce8\u91ca\u4ece /* \u5f00\u59cb\u76f4\u5230 */ \u7ed3\u675f\u3002 \u6ce8\u91ca\u4e0d\u80fd\u5d4c\u5957\u5728\u5176\u4ed6\u6ce8\u91ca\u3001\u5b57\u7b26\u4e32\u548c rune \u7684\u5b57\u9762\u503c\u4e2d\u3002\u4e0d\u5305\u542b\u6362\u884c\u7b26\u7684\u901a\u7528\u6ce8\u91ca\u4e4b\u95f4\u901a\u8fc7\u7a7a\u683c\u7b26\u8fde\u63a5\uff0c\u5176\u4ed6\u60c5\u51b5\u4e0b\u6bcf\u6bb5\u6ce8\u91ca\u90fd\u4f1a\u53e6\u8d77\u4e00\u884c\u3002 \u8bcd\u6c47\u5143\u7d20 \u8bcd\u6c47\u5143\u7d20\u6784\u6210\u4e86 Go \u8bed\u8a00\u7684\u8bcd\u6c47\u8868\u3002\u5b83\u6709\u56db\u79cd\u7c7b\u578b\uff1a\u6807\u8bc6\u7b26\u3001\u5173\u952e\u5b57\u3001\u64cd\u4f5c\u7b26/\u6807\u70b9\u7b26\u53f7\u3001\u5b57\u9762\u503c\u3002\u7a7a\u767d\u7b26\u53ef\u4ee5\u662f\u7a7a\u683c\uff08U+0020\uff09\u3001\u6c34\u5e73\u5236\u8868\u7b26\uff08U+0009\uff09\u3001\u6362\u884c\u7b26\uff08U+000D\uff09\u6216\u6362\u884c\u7b26\uff08U+000A\uff09\u3002\u5b83\u672c\u8eab\u4f1a\u88ab\u5ffd\u7565\uff0c\u4e00\u822c\u7528\u6765\u533a\u5206\u4e0d\u540c\u7684\u8bcd\u6c47\u5143\u7d20\u3002\u6362\u884c\u7b26\u6216\u6587\u4ef6\u7ec8\u6b62\u7b26\uff08EOF\uff09\u8fd8\u53ef\u80fd\u89e6\u53d1\u7f16\u8bd1\u7a0b\u5e8f\u5728\u6e90\u4ee3\u7801\u7684\u884c\u672b\u6216\u6587\u4ef6\u672b\u5c3e\u8ffd\u52a0\u5206\u53f7\u3002\u5728\u5206\u89e3\u6e90\u4ee3\u7801\u7684\u8bcd\u6c47\u5143\u7d20\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u628a\u5f53\u524d\u53ef\u4ee5\u5f62\u6210\u6709\u6548\u8bcd\u6c47\u5143\u7d20\u7684\u6700\u957f\u5b57\u7b26\u5e8f\u5217\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u8bcd\u6c47\u5143\u7d20\u3002 \u5206\u53f7 \u6b63\u89c4\u8bed\u6cd5\u5728\u5f88\u591a\u4ea7\u751f\u5f0f\u4e2d\u4f7f\u7528\u5206\u53f7 \";\" \u4f5c\u4e3a\u7ec8\u7ed3\u7b26\u3002Go \u7a0b\u5e8f\u4e2d\u9075\u5faa\u4e0b\u9762\u4e24\u6761\u89c4\u5219\u7701\u7565\u4e86\u5927\u90e8\u5206\u7684\u5206\u53f7\uff1a \u5f53\u67d0\u884c\u7684\u6700\u540e\u4e00\u4e2a\u8bcd\u6c47\u5143\u7d20\u662f\u4ee5\u4e0b\u5143\u7d20\u65f6\u81ea\u52a8\u8865\u5168\u5206\u53f7\uff1a \u4e00\u4e2a\u6807\u8bc6\u7b26\u3002 \u4e00\u4e2a\u6574\u6570\uff0c\u6d6e\u70b9\u6570\uff0c\u865a\u6570\uff0crune \u6216\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u3002 \u5173\u952e\u5b57 break \u3001 continue \u3001 fallthrough \u548c return \u5176\u4e2d\u4e4b\u4e00\u3002 \u64cd\u4f5c\u7b26/\u6807\u70b9\u7b26\u53f7 ++ \uff0c -- \uff0c ) \uff0c ] \u548c } \u5176\u4e2d\u4e4b\u4e00\u3002 \u4e3a\u4e86\u652f\u6301\u72ec\u5360\u4e00\u884c\u7684\u590d\u6742\u8bed\u53e5\uff0c\u4f1a\u7701\u7565\u4e0e \")\" \u6216 \"}\" \u76f8\u90bb\u7684\u5206\u53f7\u3002 \u4e3a\u4e86\u53cd\u5e94\u60ef\u7528\u7528\u9014\uff0c\u672c\u7bc7\u6587\u6863\u7684\u6240\u6709\u4f8b\u5b50\u90fd\u57fa\u4e8e\u4ee5\u4e0a\u89c4\u5219\u7701\u7565\u5206\u53f7\u3002 \u6807\u8bc6\u7b26 \u6807\u8bc6\u7b26\u8868\u793a\u7a0b\u5e8f\u5b9e\u4f53\u5355\u5143\uff0c\u4f8b\u5982\uff1a\u53d8\u91cf\u3001\u7c7b\u578b\u3002\u4e00\u4e2a\u6807\u8bc6\u7b26\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u6bcd\u548c\u6570\u5b57\u7ec4\u6210\u3002\u6807\u8bc6\u7b26\u7684\u9996\u5b57\u7b26\u5fc5\u987b\u4e3a\u5b57\u6bcd\u3002 identifier = letter { letter | unicode_digit } . a _x9 ThisVariableIsExported \u03b1\u03b2 Go \u5df2\u7ecf\u9884\u5b9a\u4e49\u4e86\u4e00\u4e9b\u6807\u8bc6\u7b26\u3002 \u5173\u952e\u5b57 \u4ee5\u4e0b\u5173\u952e\u5b57\u662f\u9884\u7559\u7684\uff0c\u5b83\u4eec\u4e0d\u80fd\u4f5c\u4e3a\u6807\u8bc6\u7b26\uff1a break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var \u64cd\u4f5c\u7b26\u548c\u6807\u70b9\u7b26\u53f7 \u4ee5\u4e0b\u5b57\u7b26\u5e8f\u5217\u7528\u4e8e\u8868\u793a\u64cd\u4f5c\u7b26\uff08\u5305\u62ec\u8d4b\u503c\u8fd0\u7b97\u7b26\uff09\u548c\u6807\u70b9\u7b26\u53f7\uff1a + & += &= && == != ( ) - | -= |= || < <= [ ] * ^ *= ^= <- > >= { } / << /= <<= ++ = := , ; % >> %= >>= -- ! ... . : &^ &^= \u6574\u578b\u5b57\u9762\u503c \u6574\u578b\u5b57\u9762\u503c\u662f\u4e00\u4e2a\u6570\u5b57\u5e8f\u5217\uff0c\u76f8\u5f53\u4e8e\u6574\u578b\u5e38\u91cf\u3002\u53ef\u4ee5\u4f7f\u7528\u524d\u7f00\u6307\u5b9a\u975e\u5c0f\u6570\u8fdb\u5236\uff1a0 \u8868\u793a\u516b\u8fdb\u5236\uff0c0x/0X \u8868\u793a\u5341\u516d\u8fdb\u5236\u3002\u5728\u5341\u516d\u8fdb\u5236\u5b57\u9762\u503c\u4e2d\uff0c\u5b57\u6bcd a-f \u548c A-F \u90fd\u8868\u793a\u6570\u5b57 10-15\u3002 int_lit = decimal_lit | octal_lit | hex_lit . decimal_lit = ( \"1\" \u2026 \"9\" ) { decimal_digit } . octal_lit = \"0\" { octal_digit } . hex_lit = \"0\" ( \"x\" | \"X\" ) hex_digit { hex_digit } . 42 0600 0xBadFace 170141183460469231731687303715884105727 \u6d6e\u70b9\u5b57\u9762\u503c \u6d6e\u70b9\u5b57\u9762\u503c\u662f\u4e00\u4e2a\u5c0f\u6570\uff0c\u76f8\u5f53\u4e8e\u6d6e\u70b9\u6570\u5e38\u91cf\u3002\u5b83\u7531\u6574\u6570\u90e8\u5206\uff0c\u5c0f\u6570\u70b9\uff0c\u5c0f\u6570\u90e8\u5206\u548c\u6307\u6570\u90e8\u5206\u6784\u6210\u3002\u6574\u6570\u90e8\u5206\u548c\u5c0f\u6570\u90e8\u5206\u7528\u5c0f\u6570\u70b9\u94fe\u63a5\uff1b\u6307\u6570\u90e8\u5206\u7531 e / E \u5b57\u7b26\u540e\u63a5\u4e00\u4e2a\u6709\u7b26\u53f7\u6307\u6570\u6784\u6210\u3002\u6574\u6570\u90e8\u5206\u548c\u5c0f\u6570\u90e8\u5206\u53ef\u4ee5\u7701\u7565\u5176\u4e00\uff1b\u5c0f\u6570\u70b9\u548c\u6307\u6570\u90e8\u5206\u53ef\u4ee5\u7701\u7565\u5176\u4e00\u3002 float_lit = decimals \".\" [ decimals ] [ exponent ] | decimals exponent | \".\" decimals [ exponent ] . decimals = decimal_digit { decimal_digit } . exponent = ( \"e\" | \"E\" ) [ \"+\" | \"-\" ] decimals . 0. 72.40 072.40 // == 72.40 2.71828 1.e+0 6.67428e-11 1E6 .25 .12345E+5 \u865a\u6570\u5b57\u9762\u503c \u865a\u6570\u5b57\u9762\u503c\u662f\u4e00\u4e2a\u5c0f\u6570\uff0c\u76f8\u5f53\u4e8e\u590d\u6570\u5e38\u91cf\u4e2d\u7684\u865a\u6570\u90e8\u5206\u3002\u5b83\u7531\u6d6e\u70b9\u6570\u6216\u8005\u6574\u6570\u540e\u63a5\u5c0f\u5199\u5b57\u6bcd i \u6784\u6210\u3002 imaginary_lit = (decimals | float_lit) \"i\" . 0i 011i // == 11i 0.i 2.71828i 1.e+0i 6.67428e-11i 1E6i .25i .12345E+5i Rune \u5b57\u9762\u503c rune \u7c7b\u578b\u5b57\u9762\u503c\u76f8\u5f53\u4e8e\u4e00\u4e2a rune \u5e38\u91cf\u3002\u5b83\u662f\u4e00\u4e2a\u8868\u793a Unicode \u4ee3\u7801\u70b9\u7684\u6574\u6570\u3002rune \u7c7b\u578b\u5b57\u9762\u503c\u8868\u793a\u4e3a\u7528\u5355\u5f15\u53f7\u5305\u88f9\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\uff0c\u50cf 'x' \u6216 '\\n'\u3002\u5728\u5355\u5f15\u53f7\u4e2d\u9664\u4e86\u6362\u884c\u7b26\u548c\u672a\u8f6c\u4e49\u7684\u5355\u5f15\u53f7\u5176\u4ed6\u7684\u5b57\u7b26\u90fd\u53ef\u4ee5\u76f4\u63a5\u663e\u793a\u3002\u5355\u5f15\u53f7\u5305\u88f9\u7684\u5b57\u7b26\u7684\u503c\u548c\u5b57\u7b26\u5728 Unicode \u7f16\u7801\u4e2d\u7684\u503c\u76f8\u7b49\uff0c\u800c\u4ee5\u53cd\u659c\u7ebf\u5f00\u5934\u7684\u591a\u5b57\u7b26\u5e8f\u5217\u4f1a\u628a\u503c\u7ffb\u8bd1\u6210\u591a\u79cd\u683c\u5f0f\u3002 \u4f7f\u7528\u5f15\u53f7\u8868\u793a\u5355\u5b57\u7b26\u662f\u6700\u7b80\u5355\u7684\u65b9\u5f0f\uff1b\u56e0\u4e3a Go \u7684\u6e90\u6587\u672c\u662f UTF-8 \u7f16\u7801\uff0c\u4e00\u4e2a\u6574\u6570\u53ef\u80fd\u4ee3\u8868\u591a\u4e2a UTF-8 \u5b57\u8282\u3002\u4f8b\u5982\uff0c 'a' \u53ef\u4ee5\u4f7f\u7528\u5355\u5b57\u8282\u8868\u793a\u5b57\u7b26 a\uff0cUnicode \u7f16\u7801 U+0061\uff0c\u503c 0x61\uff0c\u800c '\u00e4' \u662f\u4e24\u5b57\u8282\u8868\u793a\u5206\u97f3\u7b26\u7684 a\uff0cUnicode \u7f16\u7801 U+00E4\uff0c\u503c 0xe4\u3002 \u53cd\u659c\u7ebf\u80fd\u5c06\u4efb\u610f\u503c\u7f16\u7801\u6210 ASCII \u6587\u672c\u3002\u6709\u56db\u79cd\u65b9\u5f0f\u5c06\u6574\u6570\u503c\u8868\u793a\u4e3a\u6570\u5b57\u5e38\u91cf\uff1a \\x \u540e\u63a5\u4e24\u4e2a\u5341\u516d\u8fdb\u5236\u6570\uff1b \\u \u540e\u63a5\u56db\u4e2a\u5341\u516d\u8fdb\u5236\u6570\uff1b \\U \u540e\u63a5\u516b\u4e2a\u5341\u516d\u8fdb\u5236\u6570\u3002 \\ \u540e\u63a5\u4e09\u4e2a\u516b\u8fdb\u5236\u6570\u3002\u6bcf\u79cd\u60c5\u51b5\u4e0b\u90fd\u4f7f\u7528\u76f8\u5e94\u8fdb\u5236\u6765\u8868\u793a\u5b57\u9762\u91cf\u7684\u6574\u6570\u503c\u3002 \u867d\u7136\u8fd9\u56db\u79cd\u65b9\u5f0f\u90fd\u4ee5\u6574\u6570\u8868\u793a\uff0c\u4f46\u5b83\u4eec\u7684\u6709\u6548\u533a\u95f4\u5e76\u4e0d\u76f8\u540c\u3002\u516b\u8fdb\u5236\u53ea\u80fd\u8868\u793a 0 - 255 \u4ee5\u5185\u7684\u6574\u6570\u3002\u5341\u516d\u8fdb\u5236\u6ee1\u53ef\u4ee5\u6ee1\u8db3\u9700\u6c42\u3002 \\u \u548c \\U \u90fd\u53ef\u4ee5\u8868\u793a Unicode \u4ee3\u7801\u70b9\uff0c\u4e0d\u8fc7\u5176\u4e2d\u7684\u4e00\u4e9b\u503c\u662f\u65e0\u6548\u7684\uff0c\u7279\u522b\u662f 0x10FFFF \u4ee5\u4e0a\u7684\u503c\u3002 \u53cd\u659c\u7ebf\u7ed3\u5408\u4ee5\u4e0b\u5b57\u7b26\u5177\u6709\u7279\u6b8a\u542b\u4e49\uff1a \\a U+0007 alert or bell \\b U+0008 \u9000\u683c\u7b26 \\f U+000C form feed \\n U+000A line feed or newline \\r U+000D carriage return \\t U+0009 \u6c34\u5e73\u5236\u8868\u7b26 \\v U+000b \u5782\u76f4\u5236\u8868\u7b26 \\\\ U+005c \u53cd\u659c\u7ebf \\' U+0027 \u5355\u5f15\u53f7 (\u53ea\u5728 rune \u5b57\u9762\u503c\u4e2d\u6709\u6548) \\\" U+0022 \u53cc\u5f15\u53f7 (\u53ea\u5728\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e2d\u6709\u6548) \u5176\u4ed6\u6240\u6709\u4ee5\u53cd\u659c\u7ebf\u5f00\u5934\u7684\u5e8f\u5217\u5728 rune \u7684\u89c4\u5219\u4e2d\u90fd\u662f\u975e\u6cd5\u7684\u3002 rune_lit = \"'\" ( unicode_value | byte_value ) \"'\" . unicode_value = unicode_char | little_u_value | big_u_value | escaped_char . byte_value = octal_byte_value | hex_byte_value . octal_byte_value = `\\` octal_digit octal_digit octal_digit . hex_byte_value = `\\` \"x\" hex_digit hex_digit . little_u_value = `\\` \"u\" hex_digit hex_digit hex_digit hex_digit . big_u_value = `\\` \"U\" hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit . escaped_char = `\\` ( \"a\" | \"b\" | \"f\" | \"n\" | \"r\" | \"t\" | \"v\" | `\\` | \"'\" | `\"` ) . 'a' '\u00e4' '\u672c' '\\t' '\\000' '\\007' '\\377' '\\x07' '\\xff' '\\u12e4' '\\U00101234' '\\'' // \u5305\u542b\u5355\u5f15\u53f7\u7684 rune \u5b57\u9762\u503c 'aa' // \u65e0\u6548: \u592a\u591a\u5b57\u7b26 '\\xa' // \u65e0\u6548: \u7f3a\u5c11\u5341\u516d\u8fdb\u5236\u6570 '\\0' // \u65e0\u6548: \u7f3a\u5c11\u516b\u8fdb\u5236\u6570 '\\uDFFF' // \u65e0\u6548: surrogate half '\\U00110000' // \u65e0\u6548: \u975e\u6cd5\u7684 Unicode \u4ee3\u7801\u70b9 \u5b57\u7b26\u4e32\u5b57\u9762\u91cf \u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u8868\u793a\u4ece\u5b57\u7b26\u5e8f\u5217\u4e2d\u83b7\u53d6\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u3002\u5b83\u6709\u4e24\u79cd\u683c\u5f0f\uff1a\u539f\u59cb\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u548c\u89e3\u91ca\u578b\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u3002 \u539f\u59cb\u5b57\u7b26\u4e32\u662f\u7531\u53cd\u5f15\u53f7\u5305\u88f9\uff08 foo \uff09\u3002\u5b57\u7b26\u4e32\u4e2d\u9664\u53cd\u5f15\u53f7\u4ee5\u5916\u7684\u5176\u4ed6\u5b57\u7b26\u90fd\u4f1a\u663e\u793a\u51fa\u6765\u3002\u539f\u751f\u5b57\u7b26\u4e32\u7531\u53cd\u5f15\u53f7\u4e4b\u95f4\u7684\uff08\u9ed8\u8ba4 UTF-8 \u7f16\u7801\uff09\u7684\u5b57\u7b26\u7ec4\u6210\u3002\u5b83\u7684\u503c\u4e3a\u5f15\u53f7\u5185\u672a\u7ecf\u89e3\u91ca\uff08\u9ed8\u8ba4 UTF-8 \u7f16\u7801\uff09\u6240\u6709\u5b57\u7b26\uff1b\u5c24\u5176\u662f\uff0c\u53cd\u659c\u7ebf\u518d\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u7279\u6b8a\u610f\u4e49\u5e76\u4e14\u5b57\u7b26\u4e32\u4e2d\u4fdd\u7559\u6362\u884c\u7b26\u3002\u5728\u539f\u59cb\u5b57\u7b26\u4e32\u7684\u503c\u4e2d\u4f1a\u4e22\u5f03\u56de\u8f66\u952e\u8fd4\u56de '\\r' \u5b57\u7b26\u3002 \u89e3\u91ca\u578b\u5b57\u7b26\u4e32\u7531\u53cc\u5f15\u53f7\u4e4b\u95f4\u7684\u5b57\u7b26\u7ec4\u6210\uff08\"bar\"\uff09\u3002\u9664\u4e86\u6362\u884c\u7b26\u548c\u53cc\u5f15\u53f7\u5176\u4ed6\u5b57\u7b26\u90fd\u4f1a\u663e\u793a\u51fa\u6765\u3002\u53cc\u5f15\u53f7\u4e4b\u95f4\u7684\u6587\u672c\u7ec4\u6210\u5b57\u9762\u91cf\u7684\u503c\u3002\u53cd\u659c\u7ebf\u7684\u8f6c\u4e49\u89c4\u5219\u4e0e rune \u5b57\u9762\u91cf\u57fa\u672c\u76f8\u540c\uff08\u4e0d\u540c\u7684\u662f \\\u2019 \u975e\u6cd5\uff0c\u800c \\\" \u5408\u6cd5\uff09\u3002\u4e09\u4f4d\u516b\u8fdb\u5236\u6570\uff08\\nnn\uff09\u548c\u4e24\u4f4d\u5341\u516d\u8fdb\u5236\u6570\uff08\\xnn\uff09\u6362\u7801\u7b26\u7684\u503c\u8868\u793a\u76f8\u5e94\u5b57\u7b26\u4e32\u7684\u5b57\u8282\u3002\u5176\u4ed6\u7684\u6362\u7801\u7b26\u90fd\u8868\u793a\u5b57\u7b26\u5404\u81ea\u7684 UTF-8 \u7f16\u7801\uff08\u53ef\u80fd\u662f\u591a\u5b57\u8282\uff09\u3002\u56e0\u6b64\u5b57\u7b26\u4e32 \\377 \u548c \\xFF \u90fd\u8868\u793a\u503c\u4e3a 0xFF=255 \u7684\u5355\u4e2a\u5b57\u8282\uff0c\u800c \u00ff , \\u00FF , \\U000000FF \u548c \\xc3\\xbf \u8868\u793a UTF-8 \u7f16\u7801\u5b57\u7b26 U+00FF \u7684\u4e24\u4e2a\u5b57\u8282 0xc3 0xbf\u3002 string_lit = raw_string_lit | interpreted_string_lit . raw_string_lit = \"`\" { unicode_char | newline } \"`\" . interpreted_string_lit = `\"` { unicode_value | byte_value } `\"` . `abc` // \u7b49\u4ef7\u4e8e \"abc\" `\\n \\n` // \u7b49\u4ef7\u4e8e \"\\\\n\\n\\\\n\" \"\\n\" \"\\\"\" // \u7b49\u4ef7\u4e8e `\"` \"Hello, world!\\n\" \"\u65e5\u672c\u8a9e\" \"\\u65e5\u672c\\U00008a9e\" \"\\xff\\u00FF\" \"\\uD800\" // \u65e0\u6548: surrogate half \"\\U00110000\" // \u65e0\u6548: \u65e0\u6548\u7684 Unicode \u4ee3\u7801\u70b9 \u8fd9\u4e9b\u4f8b\u5b50\u90fd\u8868\u793a\u76f8\u540c\u7684\u5b57\u7b26\u4e32\uff1a \"\u65e5\u672c\u8a9e\" // UTF-8 \u6587\u672c `\u65e5\u672c\u8a9e` // UTF-8 \u6587\u672c\u4f5c\u4e3a\u539f\u751f\u5b57\u9762\u503c \"\\u65e5\\u672c\\u8a9e\" // \u786e\u5b9a\u7684 Unicode \u4ee3\u7801\u70b9 \"\\U000065e5\\U0000672c\\U00008a9e\" // \u786e\u5b9a\u7684 Unicode \u4ee3\u7801\u70b9 \"\\xe6\\x97\\xa5\\xe6\\x9c\\xac\\xe8\\xaa\\x9e\" // \u786e\u5b9a\u7684 UTF-8 \u5b57\u8282 \u5982\u679c\u6e90\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e24\u4e2a\u4ee3\u7801\u70b9\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f8b\u5982\u5e26\u97f3\u6807\u7684\u5b57\u6bcd\uff0c\u628a\u5b83\u653e\u5728 rune \u4e2d\u4f1a\u62a5\u9519\uff08\u5b83\u4e0d\u662f\u5355\u4ee3\u7801\u70b9\uff09\u3002\u5e76\u4e14\u5728\u5b57\u7b26\u4e32\u4e2d\u4f1a\u663e\u793a\u4e24\u4e2a\u4ee3\u7801\u70b9\u3002 \u5e38\u91cf \u5e38\u91cf\u5206\u4e3a\uff1a\u5e03\u5c14\u578b\uff0crune\u578b\uff0c\u6574\u578b\uff0c\u6d6e\u70b9\u578b\uff0c\u590d\u6570\u578b\uff0c\u5b57\u7b26\u4e32\u578b\u3002\u5176\u4e2d rune\uff0c\u6574\u578b\uff0c\u6d6e\u70b9\u578b\uff0c\u590d\u6570\u578b\u7edf\u79f0\u4e3a\u6570\u5b57\u5e38\u91cf\u3002 \u5e38\u91cf\u7684\u503c\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a rune\u5b57\u9762\u91cf\uff0c\u6574\u6570\u5b57\u9762\u91cf\uff0c\u6d6e\u70b9\u6570\u5b57\u9762\u91cf\uff0c\u865a\u6570\u5b57\u9762\u91cf\uff0c\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\uff0c\u8868\u793a\u5e38\u91cf\u7684\u6807\u8bc6\u7b26\uff0c\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u4e00\u4e2a\u8f6c\u6362\u7ed3\u679c\u4e3a\u5e38\u91cf\u7684\u7c7b\u578b\u8f6c\u6362\uff0c\u548c\u4e00\u4e9b\u8fd4\u56de\u503c\u4e3a\u5e38\u91cf\u7684\u5185\u7f6e\u51fd\u6570(\u63a5\u53d7\u4efb\u4f55\u503c\u7684 unsafe.Sizeof \uff0c\u63a5\u53d7\u90e8\u5206\u8868\u8fbe\u5f0f\u7684 cap \u6216 len \uff0c\u63a5\u53d7\u865a\u6570\u5e38\u91cf\u7684 real \u548c imag \uff0c\u63a5\u53d7\u6570\u5b57\u5e38\u91cf\u7684 complex )\u3002\u5e03\u5c14\u7c7b\u578b\u7684\u503c\u4e3a\u9884\u5b9a\u4e49\u5e38\u91cf true \u6216 false \uff0c\u9884\u5b9a\u4e49\u7684\u6807\u8bc6\u7b26 iota \u8868\u793a\u4e00\u4e2a\u6574\u578b\u5e38\u91cf\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\u590d\u6570\u5e38\u91cf\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u4e00\u79cd\u5f62\u5f0f\u3002\u4f1a\u5728\u5e38\u91cf\u8868\u8fbe\u5f0f\u7ae0\u8282\u8be6\u7ec6\u8ba8\u8bba\u3002 \u6570\u5b57\u5e38\u91cf\u53ef\u4ee5\u8868\u793a\u4efb\u610f\u7cbe\u5ea6\u7684\u786e\u5b9a\u503c\u800c\u4e14\u4e0d\u4f1a\u6ea2\u51fa\u3002\u56e0\u6b64\uff0c\u6ca1\u6709\u5e38\u91cf\u53ef\u4ee5\u8868\u793a\u975e 0\uff0c\u65e0\u7a77\u5927\u548c\u975e\u6570\u5b57\u503c\u3002 \u5e38\u91cf\u53ef\u4ee5\u6307\u5b9a\u7c7b\u578b\u4e5f\u53ef\u4ee5\u4e0d\u6307\u5b9a\u7c7b\u578b\u3002\u5b57\u9762\u503c\u5e38\u91cf\uff0c true \uff0c false \uff0c iota \uff0c\u548c\u53ea\u5305\u542b\u65e0\u7c7b\u578b\u5e38\u91cf\u64cd\u4f5c\u7684\u5e38\u91cf\u8868\u8fbe\u5f0f\u662f\u65e0\u7c7b\u578b\u7684\u3002 \u5e38\u91cf\u53ef\u4ee5\u901a\u8fc7\u5e38\u91cf\u58f0\u660e\u548c\u8f6c\u6362\u65f6\u663e\u5f0f\u7684\u6307\u5b9a\u5177\u4f53\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u9690\u5f0f\u7684\u5728\u53d8\u91cf\u58f0\u660e\u3001\u8d4b\u503c\u6216\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u64cd\u4f5c\u5143\u65f6\u9690\u5f0f\u7684\u6307\u5b9a\u5177\u4f53\u7c7b\u578b\u3002\u5982\u679c\u5e38\u91cf\u7684\u503c\u548c\u4ed6\u7684\u7c7b\u578b\u4e0d\u5339\u914d\uff0c\u4f1a\u62a5\u9519\u3002 \u65e0\u7c7b\u578b\u5e38\u91cf\u7531\u4e00\u4e2a\u9ed8\u8ba4\u7684\u7c7b\u578b\uff0c\u8fd9\u4e2a\u7c7b\u578b\u4f1a\u6839\u636e\u4f7f\u7528\u5e38\u91cf\u65f6\u7684\u4e0a\u4e0b\u6587\u8fdb\u884c\u9690\u5f0f\u8f6c\u6362\u3002\u4f8b\u5982\uff1a\u77ed\u53d8\u91cf\u58f0\u660e i := 0 \u6ca1\u6709\u6307\u5b9a i \u7684\u7c7b\u578b\u3002\u65e0\u7c7b\u578b\u5e38\u91cf\u7684\u9ed8\u8ba4\u7c7b\u578b\u53ef\u4ee5\u662f\uff1a bool \uff0c rune \uff0c int \uff0c float64 \uff0c complex128 \u6216\u8005 string \uff0c\u5177\u4f53\u9009\u62e9\u54ea\u79cd\u7c7b\u578b\u7531\u5e38\u91cf\u7684\u503c\u51b3\u5b9a\u3002 \u5b9e\u73b0\u9650\u5236\uff1a\u867d\u7136\u6570\u5b57\u5e38\u91cf\u5728 Go \u4e2d\u662f\u4efb\u610f\u7cbe\u5ea6\uff0c\u4e0d\u8fc7\u7f16\u8bd1\u5668\u5728\u5b9e\u73b0\u65f6\u4f1a\u5728\u5185\u90e8\u9650\u5236\u7cbe\u5ea6\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u7f16\u8bd1\u5668\u5b9e\u73b0\u90fd\u8981\uff1a \u81f3\u5c11\u4fdd\u8bc1\u6574\u5f62\u5e38\u91cf\u6709 256 \u4f4d \u6d6e\u70b9\u6570\u5e38\u91cf\uff08\u5305\u62ec\u590d\u6570\u5e38\u91cf\uff09\u90fd\u8981\u4fdd\u8bc1\u81f3\u5c11 256 \u4f4d\u7684\u4e3b\u4f53\u90e8\u5206\u548c\u81f3\u5c11 16 \u4f4d\u7684\u6709\u7b26\u53f7\u6307\u6570\u90e8\u5206 \u5982\u679c\u4e0d\u80fd\u8868\u793a\u7ed9\u5b9a\u6574\u6570\u7684\u7cbe\u5ea6\u629b\u51fa\u9519\u8bef \u5982\u679c\u6d6e\u70b9\u6570\u6216\u590d\u6570\u6ea2\u51fa\u629b\u51fa\u9519\u8bef \u5982\u679c\u7531\u4e8e\u7cbe\u5ea6\u9650\u5236\u4e0d\u80fd\u8868\u793a\u6d6e\u70b9\u6570\u6216\u8005\u590d\u6570\u8fdb\u884c\u820d\u5165 \u8fd9\u4e9b\u8981\u6c42\u540c\u65f6\u4f5c\u7528\u4e8e\u5b57\u9762\u91cf\u5e38\u91cf\u989d\u548c\u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u3002 \u53d8\u91cf \u53d8\u91cf\u662f\u4e00\u4e2a\u7528\u6765\u50a8\u5b58\u503c\u7684\u4f4d\u7f6e\u3002\u6839\u636e\u4e0d\u540c\u7684\u53d8\u91cf\u7c7b\u578b\uff0c\u53ef\u4ee5\u4fdd\u5b58\u4e0d\u540c\u7684\u503c\u3002 \u53d8\u91cf\u58f0\u660e\uff0c\u51fd\u6570\u53c2\u6570\u548c\u8fd4\u56de\u503c\uff0c\u58f0\u660e\u7684\u51fd\u6570\u7b7e\u540d\uff0c\u51fd\u6570\u5b57\u9762\u503c\u90fd\u4f1a\u4e3a\u547d\u540d\u53d8\u91cf\u9884\u7559\u50a8\u5b58\u7a7a\u95f4\u3002\u8c03\u7528\u5185\u7f6e\u7684 new \u51fd\u6570\u6216\u83b7\u53d6\u590d\u5408\u5b57\u9762\u503c\u7684\u5730\u5740\u90fd\u4f1a\u5728\u8fd0\u884c\u65f6\u4e3a\u53d8\u91cf\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u3002\u8fd9\u79cd\u533f\u540d\u53d8\u91cf\u662f\u901a\u8fc7\uff08\u53ef\u80fd\u662f\u9690\u5f0f\u7684\uff09\u6307\u9488\u95f4\u63a5\u5f15\u7528\u7684\u3002 \u50cf\u6570\u7ec4\uff0c\u5207\u7247\u548c\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u5b83\u4eec\u5185\u90e8\u90fd\u5305\u542b\u5f88\u591a\u5143\u7d20\u6216\u5b57\u6bb5\uff0c\u800c\u4e14\u8fd9\u4e9b\u5143\u7d20\u548c\u5b57\u6bb5\u90fd\u53ef\u4ee5\u76f4\u63a5\u88ab\u8bbf\u95ee\u3002\u6570\u7ec4\u548c\u5207\u7247\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u884c\u4e3a\u548c\u5355\u72ec\u7684\u53d8\u91cf\u57fa\u672c\u76f8\u540c\u3002 \u53d8\u91cf\u7684\u9759\u6001\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7\u53d8\u91cf\u58f0\u660e\u3001\u63d0\u4f9b\u7ed9 new \u7684\u7c7b\u578b\u3001\u590d\u5408\u5b57\u9762\u503c\u3001\u7ed3\u6784\u4f53\u53d8\u91cf\u58f0\u660e\u7684\u5143\u7d20\u7c7b\u578b\u4ee5\u4e0a\u51e0\u79cd\u65b9\u5f0f\u786e\u5b9a\u3002\u901a\u8fc7new\u6216\u8005\u7c7b\u578b\u521d\u59cb\u5316\u3002\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf\u4e5f\u6709\u4e00\u4e2a\u660e\u786e\u7684\u52a8\u6001\u7c7b\u578b\uff0c\u8fd9\u4e2a\u52a8\u6001\u7c7b\u578b\u662f\u5728\u8fd0\u884c\u65f6\u8d4b\u503c\u7ed9\u53d8\u91cf\u7684\u5177\u4f53\u503c\u7c7b\u578b\uff08\u7279\u4f8b\uff1a\u9884\u58f0\u660e\u7684 nil \u662f\u65e0\u7c7b\u578b\u7684\uff09\u3002\u52a8\u6001\u7c7b\u578b\u5728\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u5e76\u4e0d\u76f8\u540c\uff0c\u4f46\u662f\u63a5\u53e3\u53d8\u91cf\u7684\u503c\u662f\u53ef\u4ee5\u5206\u914d\u7ed9\u76f8\u540c\u9759\u6001\u7c7b\u578b\u7684\u53d8\u91cf\u3002 var x interface{} // x \u7684\u9759\u6001\u7c7b\u578b\u4e3a interface{} \u503c\u4e3a nil var v *T // v \u7684\u9759\u6001\u7c7b\u578b\u4e3a *T \u503c\u4e3a nil x = 42 // x \u7684\u52a8\u6001\u7c7b\u578b\u4e3a int \u503c\u4e3a 42 x = v // x \u52a8\u6001\u7c7b\u578b\u4e3a *T \u503c\u4e3a (*T)(nil) \u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u53d8\u91cf\u53ef\u4ee5\u53d6\u51fa\u53d8\u91cf\u7684\u503c\uff1b\u8fd9\u4e2a\u503c\u5c31\u662f\u53d8\u91cf\u6700\u8fd1\u4e00\u6b21\u88ab\u8d4b\u4e88\u7684\u503c\u3002\u5982\u679c\u6ca1\u6709\u5bf9\u53d8\u91cf\u8d4b\u8fc7\u503c\uff0c\u90a3\u4e48\u4ed6\u7684\u503c\u662f\u8be5\u7c7b\u578b\u7684\u96f6\u503c\u3002 \u7c7b\u578b \u7c7b\u578b\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u96c6\u5408\u5305\u62ec\u503c\u548c\u9488\u5bf9\u503c\u7684\u64cd\u4f5c&\u65b9\u6cd5\u3002\u4e00\u4e2a\u7c7b\u578b\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u540d\u6765\u8868\u793a\u3002\u7c7b\u578b\u6709\u591a\u79cd\u8868\u73b0\u5f62\u5f0f\uff1a\u5982\u679c\u5b58\u5728\u7c7b\u578b\u540d\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u540d\u8868\u793a\uff0c\u6216\u8005\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6839\u636e\u5df2\u6709\u7c7b\u578b\u7ec4\u5408\u6210\u7684\u7c7b\u578b\u5b57\u9762\u503c\u3002 Type = TypeName | TypeLit | \"(\" Type \")\" . TypeName = identifier | QualifiedIdent . TypeLit = ArrayType | StructType | PointerType | FunctionType | InterfaceType | SliceType | MapType | ChannelType . Go \u5df2\u7ecf\u9884\u5148\u58f0\u660e\u4e86\u67d0\u4e9b\u7c7b\u578b\u7684\u540d\u79f0\u3002\u5e76\u5f15\u5165\u4e86\u7c7b\u578b\u58f0\u660e\u3002\u590d\u5408\u7c7b\u578b\uff08\u6570\u7ec4\u3001\u7ed3\u6784\u4f53\u3001\u6307\u9488\u3001\u51fd\u6570\u3001\u63a5\u53e3\u3001\u5207\u7247\u3001map\u3001channel\uff09\u53ef\u4ee5\u4f7f\u7528\u4ed6\u4eec\u7684\u7c7b\u578b\u5b57\u9762\u503c\u3002 \u6bcf\u4e2a\u7c7b\u578bT\u90fd\u6709\u4e00\u4e2a\u5e95\u5c42\u7c7b\u578b\u3002\u5982\u679cT\u662f\u9884\u5b9a\u4e49\u7c7b\u578b\u6216\u8005\u7c7b\u578b\u5b57\u9762\u503c\u3002\u90a3\u4e48\u5e95\u5c42\u7c7b\u578b\u5c31\u662f\u4ed6\u81ea\u8eab\u3002\u5426\u5219\uff0cT\u7684\u5e95\u5c42\u7c7b\u578b\u5c31\u662f\u5b83\u518d\u7c7b\u578b\u58f0\u660e\u65f6\u5f15\u7528\u5230\u7684\u7c7b\u578b\u3002 type ( A1 = string A2 = A1 ) type ( B1 string B2 B1 B3 []B1 B4 B3 ) string \uff0c A1 \uff0c A2 \uff0c B1 \uff0c B2 \u7684\u5e95\u5c42\u7c7b\u578b\u662f string \u3002 []B1 \uff0c B3 \uff0c B4 \u7684\u4e0b\u6e38\u7c7b\u578b\u662f[]B1\u3002 \u65b9\u6cd5\u96c6 \u7c7b\u578b\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a\u4e0e\u4e4b\u5173\u8054\u7684\u65b9\u6cd5\u96c6\u3002\u63a5\u53e3\u7c7b\u578b\u7684\u65b9\u6cd5\u96c6\u5c31\u53ef\u4ee5\u4f7f\u7528\u81ea\u8eab\u8868\u793a\u3002\u5bf9\u4e8e\u5176\u4ed6\u7c7b\u578b\uff0c\u7c7b\u578b T \u7684\u65b9\u6cd5\u96c6\u7531\u6240\u6709\u63a5\u6536\u8005\u7c7b\u578b\u4e3a T \u7684\u65b9\u6cd5\u7ec4\u6210\u3002\u800c\u5bf9\u5e94\u6307\u9488\u7c7b\u578b T \u7684\u65b9\u6cd5\u96c6\u7531\u6240\u6709\u63a5\u6536\u8005\u7c7b\u578b\u4e3a T \u6216 T \u7684\u65b9\u6cd5\u7ec4\u6210\u3002\u5982\u679c\u662f\u7ed3\u6784\u4f53\u7c7b\u578b\u4e14\u542b\u6709\u5d4c\u5165\u5b57\u6bb5\uff0c\u90a3\u4e48\u65b9\u6cd5\u96c6\u4e2d\u53ef\u80fd\u8fd8\u4f1a\u5305\u542b\u66f4\u591a\u7684\u65b9\u6cd5\uff0c\u5177\u4f53\u8bf7\u770b\u7ed3\u6784\u4f53\u7c7b\u578b\u7ae0\u8282\u3002\u5176\u4ed6\u7c7b\u578b\u7684\u65b9\u6cd5\u96c6\u90fd\u4e3a\u7a7a\u3002\u65b9\u6cd5\u96c6\u4e2d\u7684\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u6709\u552f\u4e00\u4e14\u4e0d\u4e3a\u7a7a\u7684\u65b9\u6cd5\u540d\u3002 \u7c7b\u578b\u7684\u65b9\u6cd5\u96c6\u7528\u6765\u786e\u5b9a\u7c7b\u578b\u5b9e\u73b0\u7684\u63a5\u53e3\u548c\u4ee5\u7c7b\u578b\u4f5c\u4e3a\u63a5\u6536\u8005\u80fd\u591f\u8c03\u7528\u7684\u65b9\u6cd5\u3002 \u5e03\u5c14\u7c7b\u578b \u5e03\u5c14\u7c7b\u578b\u8868\u793a\u9884\u5b9a\u4e49\u5e38\u91cf true \u548c false \u8868\u793a\u5e03\u5c14\u771f\u5b9e\u503c\u7684\u96c6\u5408\u3002\u9884\u5b9a\u4e49\u7684\u5e03\u5c14\u7c7b\u578b\u4e3a bool \uff1b\u5b83\u662f\u901a\u8fc7\u7c7b\u578b\u58f0\u660e\u521b\u5efa\u7684\u3002 \u6570\u5b57\u7c7b\u578b \u4e00\u4e2a\u6570\u5b57\u7c7b\u578b\u76f8\u5f53\u4e8e\u6574\u578b\u548c\u6d6e\u70b9\u578b\u7684\u6240\u6709\u503c\u7684\u96c6\u5408\u3002\u9884\u5b9a\u4e49\u7684\u6570\u5b57\u7c7b\u578b\u5305\u62ec\uff1a uint8 8 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u96c6\u5408 (0 to 255) uint16 16 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u96c6\u5408 (0 to 65535) uint32 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u96c6\u5408 (0 to 4294967295) uint64 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u96c6\u5408 (0 to 18446744073709551615) int8 8 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u96c6\u5408 (-128 to 127) int16 16 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u96c6\u5408 (-32768 to 32767) int32 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u96c6\u5408 (-2147483648 to 2147483647) int64 64 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u96c6\u5408 (-9223372036854775808 to 9223372036854775807) float32 IEEE-754 32 \u4f4d\u6d6e\u70b9\u6570\u96c6\u5408 float64 IEEE-754 64 \u4f4d\u6d6e\u70b9\u6570\u96c6\u5408 complex64 \u5b9e\u90e8\u865a\u90e8\u90fd\u4e3a float32 \u7684\u590d\u6570\u96c6\u5408 complex128 \u5b9e\u90e8\u865a\u90e8\u90fd\u4e3a float64 \u7684\u590d\u6570\u96c6\u5408 byte uint8 \u7684\u522b\u540d rune int32 \u7684\u522b\u540d n \u4f4d\u6574\u6570\u7684\u503c\u5177\u6709 n \u6bd4\u7279\u7684\u5bbd\u5ea6\u5e76\u7528\u8865\u7801\u8868\u793a\u3002 \u4ee5\u4e0b\u51e0\u79cd\u9884\u5b9a\u4e49\u7c7b\u578b\u7531\u5177\u4f53\u5e73\u53f0\u5b9e\u73b0\u6307\u5b9a\u957f\u5ea6\uff1a uint 32 \u6216 64 \u4f4d int \u548c uint \u4f4d\u6570\u76f8\u540c uintptr \u80fd\u591f\u5bb9\u7eb3\u6307\u9488\u503c\u7684\u65e0\u7b26\u53f7\u6574\u6570 \u4e3a\u4e86\u907f\u514d\u79fb\u690d\u6027\u95ee\u9898\uff0c\u9664\u4e86\u88ab uint8 \u7684\u522b\u540d byte \u548c int32 \u7684\u522b\u540d rune\uff0c\u5176\u4ed6\u6240\u6709\u7684\u6570\u5b57\u7c7b\u578b\u90fd\u662f\u901a\u8fc7\u7c7b\u578b\u58f0\u660e\u5b9a\u4e49\u3002\u5f53\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u4e0d\u540c\u7684\u6570\u5b57\u7c7b\u578b\u9700\u8981\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u3002\u4f8b\u5982\uff1aint32 \u548c int \u4e0d\u662f\u76f8\u540c\u7684\u7c7b\u578b\uff0c\u5373\u4f7f\u4ed6\u4eec\u5728\u6307\u5b9a\u7684\u5e73\u53f0\u4e0a\u662f\u76f8\u7b49\u7684\u3002 \u5b57\u7b26\u4e32\u7c7b\u578b \u5b57\u7b26\u4e32\u7c7b\u578b\u8868\u793a\u5b57\u7b26\u4e32\u7684\u503c\u7c7b\u578b\u3002\u5b57\u7b26\u4e32\u7684\u503c\u662f\u4e00\u4e2a\u5b57\u8282\u5e8f\u5217\uff08\u6709\u53ef\u80fd\u4e3a\u7a7a\uff09\u3002\u5b57\u7b26\u4e32\u4e00\u65e6\u521b\u5efa\u5c31\u65e0\u6cd5\u4fee\u6539\u5b83\u7684\u503c\u3002\u9884\u5b9a\u4e49\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u662f string \uff0c\u5b83\u662f\u901a\u8fc7\u7c7b\u578b\u58f0\u660e\u5b9a\u4e49\u7684\u3002 \u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u51fd\u6570 len \u83b7\u53d6\u5b57\u7b26\u4e32\u957f\u5ea6\u3002\u5982\u679c\u5b57\u7b26\u4e32\u662f\u5e38\u91cf\u90a3\u4e48\u5b83\u7684\u957f\u5ea6\u5728\u7f16\u8bd1\u65f6\u4e5f\u4e3a\u5e38\u91cf\u3002\u53ef\u4ee5\u901a\u8fc7\u6570\u5b57\u4e0b\u6807 0\uff5elen(s)-1 \u8bbf\u95ee\u5b57\u7b26\u4e32\u5b57\u8282\u3002\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u5730\u5740\u662f\u975e\u6cd5\u64cd\u4f5c\uff1b\u5982\u679c s[i] \u662f\u5b57\u7b26\u4e32\u7684\u7b2c i \u4e2a\u5b57\u8282\uff0c\u90a3\u4e48 &s[i] \u662f\u65e0\u6548\u7684\u3002 \u6570\u7ec4\u7c7b\u578b \u6570\u7ec4\u662f\u4e00\u5b9a\u6570\u91cf\u7684\u5355\u4e00\u7c7b\u578b\u5143\u7d20\u5e8f\u5217\uff0c\u800c\u8fd9\u4e2a\u5355\u4e00\u7c7b\u578b\u53eb\u505a\u5143\u7d20\u7c7b\u578b\u3002\u5143\u7d20\u7684\u4e2a\u6570\u8868\u793a\u5143\u7d20\u7684\u957f\u5ea6\uff0c\u5b83\u6c38\u8fdc\u4e0d\u662f\u8d1f\u6570\u3002 ArrayType = \"[\" ArrayLength \"]\" ElementType . ArrayLength = Expression . ElementType = Type . \u957f\u5ea6\u662f\u6570\u7ec4\u7c7b\u578b\u7684\u4e00\u90e8\u5206\uff1b\u5b83\u662f\u4e00\u4e2a\u7c7b\u578b\u4e3a int \u7684\u975e\u8d1f\u5e38\u91cf\u3002\u53ef\u4ee5\u7528\u5185\u7f6e\u51fd\u6570 len \u83b7\u53d6\u6570\u7ec4\u7684\u957f\u5ea6\u3002\u5143\u7d20\u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807 0\uff5elen(a)-1 \u8bbf\u95ee\u3002\u6570\u7ec4\u4e00\u822c\u90fd\u662f\u4e00\u7ef4\u7684\uff0c\u4e0d\u8fc7\u4e5f\u53ef\u4ee5\u662f\u591a\u7ef4\u7684\u3002 [32]byte [2*N] struct { x, y int32 } [1000]*float64 [3][5]int [2][2][2]float64 // same as [2]([2]([2]float64)) \u5207\u7247\u7c7b\u578b \u5207\u7247\u63cf\u8ff0\u4e86\u5e95\u5c42\u6570\u7ec4\u7684\u4e00\u4e2a\u8fde\u7eed\u7247\u6bb5\u5e76\u63d0\u4f9b\u5bf9\u8fde\u7eed\u7247\u6bb5\u5185\u5143\u7d20\u7684\u8bbf\u95ee\u3002\u5207\u7247\u7c7b\u578b\u8868\u793a\u5143\u7d20\u7c7b\u578b\u7684\u6570\u7ec4\u7684\u6240\u6709\u5207\u7247\u7684\u96c6\u5408\u3002\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u7684\u5207\u7247\u7528 nil \u8868\u793a\u3002 SliceType = \"[\" \"]\" ElementType . \u4e0e\u6570\u7ec4\u4e00\u6837\uff0c\u5207\u7247\u7684\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u5e76\u4e14\u6709\u957f\u5ea6\uff0c\u5207\u7247\u7684\u957f\u5ea6\u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u7684 len \u51fd\u6570\u83b7\u53d6\uff1b\u4e0e\u6570\u7ec4\u4e0d\u540c\u7684\u662f\u5b83\u7684\u957f\u5ea6\u5728\u8fd0\u884c\u65f6\u662f\u53ef\u4ee5\u53d8\u5316\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807 0\uff5elen(s)-1 \u6765\u8bbf\u95ee\u5207\u7247\u5185\u7684\u5143\u7d20\u3002\u5207\u7247\u7684\u7d22\u5f15\u53ef\u80fd\u4f1a\u5c0f\u4e8e\u76f8\u540c\u5143\u7d20\u518d\u5e95\u5c42\u6570\u7ec4\u7684\u7d22\u5f15\u3002 \u5207\u7247\u4e00\u65e6\u521d\u59cb\u5316\uff0c\u90a3\u4e48\u5c31\u6709\u4e00\u4e2a\u4e0e\u4e4b\u5bf9\u5e94\u7684\u5e95\u5c42\u6570\u7ec4\u4fdd\u5b58\u5207\u7247\u4e2d\u7684\u5143\u7d20\u3002\u5207\u7247\u548c\u5e95\u5c42\u7684\u6570\u7ec4\u8fd8\u6709\u5176\u4ed6\u6307\u5411\u8be5\u6570\u7ec4\u7684\u5207\u7247\u5171\u4eab\u76f8\u540c\u7684\u50a8\u5b58\u7a7a\u95f4\uff1b\u800c\u4e0d\u540c\u7684\u6570\u7ec4\u603b\u662f\u6709\u7740\u4e0d\u540c\u7684\u5b58\u50a8\u7a7a\u95f4\u3002 \u5207\u7247\u7684\u5e95\u5c42\u6570\u7ec4\u53ef\u80fd\u4f1a\u5ef6\u4f38\u5230\u5207\u7247\u672b\u5c3e\u4ee5\u5916\uff0c\u5207\u7247\u7684\u5bb9\u79ef\u7b49\u4e8e\u5207\u7247\u73b0\u5728\u7684\u957f\u5ea6\u52a0\u4e0a\u6570\u7ec4\u4e2d\u5207\u7247\u8fd8\u6ca1\u4f7f\u7528\u7684\u957f\u5ea6\uff1b\u53ef\u4ee5\u4ece\u539f\u59cb\u5207\u7247\u4e2d\u5207\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e0e\u5bb9\u91cf\u76f8\u7b49\u7684\u5207\u7247\u3002\u5207\u7247\u7684\u5bb9\u91cf\u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u7684 cap(a) \u51fd\u6570\u6765\u83b7\u53d6\u3002\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570 make \u6765\u521b\u5efa\u4e00\u4e2aT\u7c7b\u578b\u7684\u65b0\u5207\u7247\u3002 \u4f7f\u7528\u5185\u7f6e\u51fd\u6570 make \u53ef\u4ee5\u51fa\u5b9e\u8bdd\u7ed9\u5b9a\u5143\u7d20\u7c7b\u578b T \u7684\u5207\u7247\u3002 make \u51fd\u6570\u63a5\u6536\u4e09\u4e2a\u53c2\u6570\uff1a\u5207\u7247\u7c7b\u578b\u3001\u5207\u7247\u957f\u5ea6\u3001\u5207\u7247\u5bb9\u79ef\uff0c\u5176\u4e2d\u5207\u7247\u5bb9\u79ef\u662f\u53ef\u9009\u53c2\u6570\u3002 make \u521b\u5efa\u7684\u5207\u7247\u4f1a\u5728\u5e95\u5c42\u5206\u914d\u4e00\u4e2a\u5207\u7247\u6240\u5f15\u7528\u7684\u65b0\u6570\u7ec4\u3002 make([]T, length, capacity) make \u7684\u4f5c\u7528\u5c31\u662f\u521b\u5efa\u65b0\u6570\u7ec4\u5e76\u5207\u5206\u5b83\uff0c\u6240\u4ee5\u4e0b\u9762\u4e24\u79cd\u5199\u6cd5\u662f\u7b49\u4ef7\u7684\uff1a make([]int, 50, 100) new([100]int)[0:50] \u4e0e\u6570\u7ec4\u76f8\u540c\uff0c\u5207\u7247\u4e00\u822c\u662f\u4e00\u7ef4\u7684\uff0c\u4e0d\u8fc7\u4e5f\u53ef\u4ee5\u590d\u5408\u6210\u591a\u7ef4\u3002\u6570\u7ec4\u4e2d\u7684\u6570\u7ec4\u90fd\u5fc5\u987b\u662f\u76f8\u540c\u7684\u957f\u5ea6\uff0c\u4f46\u662f\u5207\u7247\u4e2d\u7684\u5207\u7247\u957f\u5ea6\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u4e0d\u8fc7\u5207\u7247\u4e2d\u7684\u5207\u7247\u9700\u8981\u5355\u72ec\u521d\u59cb\u5316\u3002 \u7ed3\u6784\u4f53\u7c7b\u578b \u7ed3\u6784\u4f53\u662f\u4e00\u4e2a\u547d\u540d\u5143\u7d20\u5e8f\u5217\uff0c\u547d\u540d\u5143\u7d20\u4e5f\u53eb\u505a\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u5bf9\u5e94\u4e00\u4e2a\u540d\u79f0\u548c\u7c7b\u578b\uff0c\u5b57\u6bb5\u7684\u540d\u5b57\u53ef\u4ee5\u662f\u663e\u5f0f\u6307\u5b9a\u7684\uff08\u6807\u8bc6\u7b26\u5217\u8868\uff09\u4e5f\u53ef\u4ee5\u662f\u9690\u5f0f\u7684\uff08\u5d4c\u5165\u5b57\u6bb5\uff09\u3002\u5728\u7ed3\u6784\u4f53\u4e2d\u975e\u7a7a\u5b57\u6bb5\u5177\u6709\u552f\u4e00\u6027\u3002 StructType = \"struct\" \"{\" { FieldDecl \";\" } \"}\" . FieldDecl = (IdentifierList Type | EmbeddedField) [ Tag ] . EmbeddedField = [ \"*\" ] TypeName . Tag = string_lit . // \u7a7a\u7ed3\u6784\u4f53. struct {} // 6\u4e2a\u5b57\u6bb5\u7684\u7ed3\u6784\u4f53. struct { x, y int u float32 _ float32 // padding A *[]int F func() } \u4e00\u4e2a\u6307\u5b9a\u4e86\u7c7b\u578b\u800c\u6ca1\u6709\u6307\u5b9a\u540d\u79f0\u7684\u5b57\u6bb5\u53eb\u505a\u5d4c\u5165\u5b57\u6bb5\uff0c\u5d4c\u5165\u5b57\u6bb5\u5fc5\u987b\u6307\u5b9a\u7c7b\u578b\u540d T \u6216\u6307\u5411\u975e\u63a5\u53e3\u7c7b\u578b\u7684\u6307\u9488\u7c7b\u578b *T\uff0c\u5176\u4e2d T \u4e0d\u80fd\u4e3a\u6307\u9488\u7c7b\u578b\u3002\u6216\u8005\u4e00\u4e2a\u975e\u63a5\u53e3\u7c7b\u578b\u7684\u6307\u9488\u3002\u5e76\u4e14T\u672c\u8eab\u4e0d\u80fd\u4e3a\u6307\u9488\u7c7b\u578b\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f1a\u628a\u7c7b\u578b\u540d\u4f5c\u4e3a\u5b57\u6bb5\u7684\u540d\u5b57\u3002 // \u4e00\u4e2a\u5305\u542b 4 \u4e2a\u5d4c\u5165\u5b57\u6bb5 T1, *T2, P.T3 \u548c *P.T4 \u7684\u7ed3\u6784\u4f53 struct { T1 // \u5b57\u6bb5\u540d\u4e3a T1 *T2 // \u5b57\u6bb5\u540d\u4e3a T2 P.T3 // \u5b57\u6bb5\u540d\u4e3a T3 *P.T4 // \u5b57\u6bb5\u540d\u4e3a T4 x, y int // \u5b57\u6bb5\u540d\u4e3a x \u548c y } \u4ee5\u4e0b\u58f0\u660e\u662f\u9519\u8bef\u7684\u56e0\u4e3a\u5b57\u6bb5\u540d\u79f0\u5fc5\u987b\u552f\u4e00\u3002 struct { T // \u5d4c\u5165\u5b57\u6bb5 *T \u4e0e *P.T \u51b2\u7a81 *T // \u5d4c\u5165\u5b57\u6bb5 T \u4e0e *P.T \u51b2\u7a81 *P.T // \u5d4c\u5165\u5b57\u6bb5 T \u4e0e *T \u51b2\u7a81 } \u5982\u679c x.f \u662f\u8868\u793a\u8be5\u5b57\u6bb5\u6216\u65b9\u6cd5 f \u7684\u5408\u6cd5\u9009\u62e9\u5668\uff0c\u5219\u4f1a\u8c03\u7528\u7ed3\u6784 x \u4e2d\u5d4c\u5165\u5b57\u6bb5\u7684\u5b57\u6bb5\u6216\u65b9\u6cd5 f \u3002 \u4ece\u5d4c\u5165\u5b57\u6bb5\u7ec4\u5408\u6765\u7684\u5b57\u6bb5\u4e0e\u7ed3\u6784\u4f53\u539f\u6765\u7684\u5b57\u6bb5\u884c\u4e3a\u57fa\u672c\u76f8\u540c\uff0c\u53ea\u662f\u4e0d\u80fd\u5728\u7ed3\u6784\u4f53\u7684\u590d\u5408\u5b57\u9762\u503c\u4e2d\u76f4\u63a5\u4f7f\u7528\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u7ed3\u6784\u4f53 S \u548c\u4e00\u4e2a\u7c7b\u578b T\uff0c\u4f9d\u636e\u4ee5\u4e0b\u89c4\u5219\u751f\u6210\u7ec4\u5408\u540e\u7684\u65b9\u6cd5\u96c6\uff1a \u5982\u679c S \u5305\u542b\u5d4c\u5165\u5b57\u6bb5 T\uff0c\u5219 S \u548c S \u7684\u65b9\u6cd5\u96c6\u5305\u62ec\u63a5\u6536\u8005\u4e3a T \u7684\u65b9\u6cd5\u96c6\uff0c\u800c S \u5305\u62ec \u63a5\u6536\u8005\u4e3a *T \u7684\u65b9\u6cd5\u96c6\u3002 \u5982\u679c S \u5305\u542b\u5b57\u6bb5 T\u3002\u90a3\u4e48S\u548c S\u5747\u5305\u542b\u63a5\u6536\u8005\u4e3a T \u548c *T \u7684\u6240\u6709\u65b9\u6cd5\u96c6\u3002 \u58f0\u660e\u5b57\u6bb5\u65f6\u53ef\u4ee5\u7ed9\u8be5\u5b57\u6bb5\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684 tag\u3002\u8fd9\u4e2a tag \u5c06\u4f1a\u6210\u4e3a\u5b83\u6240\u5bf9\u5e94\u5b57\u6bb5\u7684\u4e00\u4e2a\u5c5e\u6027\u3002\u7a7a tag \u548c\u7f3a\u7701 tag \u662f\u76f8\u540c\u7684\u3002tag \u7684\u503c\u53ef\u4ee5\u901a\u8fc7\u53cd\u5c04\u7684\u63a5\u53e3\u83b7\u53d6\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u578b\u7ed3\u6784\u4f53\u7684\u7c7b\u578b\u5b9a\u4e49\u7684\u4e00\u90e8\u5206\uff0c\u4e5f\u53ef\u4ee5\u5ffd\u7565\u3002 struct { x, y float64 \"\" // \u7a7a tag \u548c\u7f3a\u7701 tag \u76f8\u540c name string \"any string is permitted as a tag\" _ [4]byte \"ceci n'est pas un champ de structure\" } // \u7ed3\u6784\u4f53\u5bf9\u5e94\u4e00\u4e2a TimeStamp \u7684 protocol buffer. // tag \u5b57\u7b26\u4e32\u4e2d\u5b9a\u4e49\u4e86 protocol buffer \u5b57\u6bb5\u5bf9\u5e94\u7684\u6570\u5b57; // \u4e00\u822c\u4f7f\u7528 reflect \u5305\u8bfb\u53d6\u4ed6\u4eec. struct { microsec uint64 `protobuf:\"1\"` serverIP6 uint64 `protobuf:\"2\"` } \u6307\u9488\u7c7b\u578b \u6307\u9488\u7c7b\u578b\u8868\u793a\u6240\u6709\u6307\u5411\u7ed9\u5b9a\u7c7b\u578b\u53d8\u91cf\u7684\u6307\u9488\u96c6\u5408\u3002\u8fd9\u4e2a\u6307\u5b9a\u7684\u7c7b\u578b\u53eb\u505a\u6307\u9488\u7684\u57fa\u7840\u7c7b\u578b\u3002\u6ca1\u6709\u521d\u59cb\u5316\u7684\u6307\u9488\u503c\u4e3anil\u3002 PointerType = \"*\" BaseType . BaseType = Type . *Point *[4]int \u51fd\u6570\u7c7b\u578b \u51fd\u6570\u7c7b\u578b\u53ef\u4ee5\u8868\u793a\u6240\u6709\u5177\u6709\u76f8\u540c\u53c2\u6570\u7c7b\u578b\u548c\u8fd4\u56de\u503c\u7c7b\u578b\u7684\u51fd\u6570\u3002\u672a\u521d\u59cb\u5316\u7684\u51fd\u6570\u7c7b\u578b\u503c\u4e3a nil\u3002 FunctionType = \"func\" Signature . Signature = Parameters [ Result ] . Result = Parameters | Type . Parameters = \"(\" [ ParameterList [ \",\" ] ] \")\" . ParameterList = ParameterDecl { \",\" ParameterDecl } . ParameterDecl = [ IdentifierList ] [ \"...\" ] Type . \u5728\u53c2\u6570\u548c\u8fd4\u56de\u503c\u5217\u8868\u4e2d\uff0c\u6807\u8bc6\u7b26\u5217\u8868\u5fc5\u987b\u540c\u65f6\u5b58\u5728\u6216\u7f3a\u7701\u3002\u5982\u679c\u5b58\u5728\uff0c\u90a3\u4e48\u6bcf\u4e2a\u540d\u5b57\u90fd\u8868\u793a\u6307\u5b9a\u7c7b\u578b\u7684\u4e00\u4e2a\u53c2\u6570/\u8fd4\u56de\u503c\uff0c\u8fd9\u4e9b\u6807\u8bc6\u7b26\u5fc5\u987b\u975e\u7a7a\u5e76\u4e14\u4e0d\u80fd\u91cd\u590d\u3002\u5982\u679c\u7f3a\u7701\uff0c\u6307\u5b9a\u7c7b\u578b\u7684\u53c2\u6570/\u8fd4\u56de\u503c\u4f7f\u7528\u5bf9\u5e94\u7684\u7c7b\u578b\u8868\u793a\u3002\u53c2\u6570\u5217\u8868\u548c\u8fd4\u56de\u503c\u5217\u8868\u4e00\u822c\u90fd\u662f\u9700\u8981\u52a0\u62ec\u53f7\uff0c\u4e0d\u8fc7\u5728\u53ea\u6709\u4e00\u4e2a\u7f3a\u7701\u8fd4\u56de\u503c\u65f6\uff0c\u5b83\u53ef\u4ee5\u4e0d\u4f7f\u7528\u62ec\u53f7\u3002 \u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u6dfb\u52a0\u524d\u7f00 ... \u3002\u5305\u542b\u8fd9\u79cd\u53c2\u6570\u7684\u51fd\u6570\u53eb\u505a\u53d8\u53c2\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u63a5\u6536\u96f6\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\u3002 func() func(x int) int func(a, _ int, z float32) bool func(a, b int, z float32) (bool) func(prefix string, values ...int) func(a, b int, z float64, opt ...interface{}) (success bool) func(int, int, float64) (float64, *[]int) func(n int) func(p *T) \u63a5\u53e3\u7c7b\u578b \u63a5\u53e3\u7c7b\u578b\u6307\u5b9a\u4e86\u4e00\u4e2a\u65b9\u6cd5\u96c6\u3002\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u53d8\u91cf\u53ef\u4ee5\u4fdd\u5b58\u4efb\u4f55\u65b9\u6cd5\u96c6\u662f\u8be5\u63a5\u53e3\u8d85\u96c6\u7684\u7c7b\u578b\u3002\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u7c7b\u578b\u5b9e\u73b0\u4e86\u63a5\u53e3\u3002\u6ca1\u6709\u521d\u59cb\u5316\u7684\u63a5\u53e3\u7c7b\u578b\u503c\u4e3a nil\u3002 InterfaceType = \"interface\" \"{\" { MethodSpec \";\" } \"}\" . MethodSpec = MethodName Signature | InterfaceTypeName . MethodName = identifier . InterfaceTypeName = TypeName . \u5728\u63a5\u53e3\u7c7b\u578b\u7684\u65b9\u6cd5\u96c6\u4e2d\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u7684\u540d\u79f0\u5fc5\u987b\u662f\u975e\u7a7a\u4e14\u552f\u4e00\u3002 // A simple File interface interface { Read(b Buffer) bool Write(b Buffer) bool Close() } \u63a5\u53e3\u53ef\u4ee5\u7531\u591a\u4e2a\u7c7b\u578b\u5b9e\u73b0\uff0c\u4f8b\u5982\uff1a\u7c7b\u578b S1 \u548c\u7c7b\u578b S2 \u90fd\u6709\u4ee5\u4e0b\u65b9\u6cd5\u96c6\uff1a func (p T) Read(b Buffer) bool { return \u2026 } func (p T) Write(b Buffer) bool { return \u2026 } func (p T) Close() { \u2026 } \uff08\u8fd9\u91cc\u7684\u7c7b\u578b T \u53ef\u4ee5\u8868\u793a S1 \u4e5f\u53ef\u4ee5\u8868\u793a S2 \uff09 S1 \u548c S2 \u90fd\u5b9e\u73b0\u4e86\u63a5\u53e3 File \uff0c\u800c\u4e0d\u7528\u7ba1\u7c7b\u578b\u662f\u5426\u8fd8\u6709\u5176\u4ed6\u65b9\u6cd5\u3002 \u4e00\u4e2a\u7c7b\u578b\u5b9e\u73b0\u4e86\u4efb\u4f55\u65b9\u6cd5\u96c6\u7684\u4e3a\u5176\u5b50\u96c6\u7684\u63a5\u53e3\u3002\u56e0\u6b64\u5b83\u53ef\u80fd\u5b9e\u73b0\u4e86\u591a\u4e2a\u4e0d\u540c\u63a5\u53e3\u3002\u4f8b\u5982\uff1a\u6240\u6709\u7684\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u7a7a\u63a5\u53e3\uff1a interface{} \u4e0e\u4e4b\u76f8\u4f3c\uff0c\u601d\u8003\u4e0b\u9762\u8fd9\u4e2a\u5b9a\u4e49\u4e3a Locker \u7684\u63a5\u53e3\uff1a type Locker interface { Lock() Unlock() } \u5982\u679c S1 \u548c S2 \u4e5f\u5b9e\u73b0\u4e86\u5b83\uff1a func (p T) Lock() { \u2026 } func (p T) Unlock() { \u2026 } \u90a3\u5b83\u4eec\u5c31\u5b9e\u73b0\u4e86\u4e24\u4e2a\u63a5\u53e3 Locker \u548c File \u3002 \u4e00\u4e2a\u63a5\u53e3 T \u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u4e2a\u63a5\u53e3 E \u6765\u6307\u5b9a\u65b9\u6cd5\u3002\u8fd9\u79cd\u65b9\u5f0f\u53eb\u505a\u5c06\u63a5\u53e3 E \u5d4c\u5165\u8fdb\u63a5\u53e3 T\u3002\u5b83\u628a E \u4e2d\u6240\u6709\u7684\u65b9\u6cd5\uff08\u5305\u62ec\u5bfc\u51fa\u548c\u672a\u5bfc\u51fa\u7684\u65b9\u6cd5\uff09\u5168\u90e8\u6dfb\u52a0\u8fdb\u63a5\u53e3 T\u3002 type ReadWriter interface { Read(b Buffer) bool Write(b Buffer) bool } type File interface { ReadWriter // \u4e0e\u6dfb\u52a0 ReadWriter \u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u662f\u7b49\u4ef7\u7684 Locker // \u4e0e\u6dfb\u52a0 Locker \u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u662f\u7b49\u4ef7\u7684 Close() } type LockedFile interface { Locker File // \u65e0\u6548: Lock, Unlock \u4e0d\u662f\u552f\u4e00\u7684 Lock() // \u65e0\u6548: Lock \u4e0d\u662f\u552f\u4e00\u7684 } \u63a5\u53e3 T \u4e0d\u80fd\u9012\u5f52\u7684\u5d4c\u5165\u8fdb\u81ea\u5df1\u6216\u5df2\u7ecf\u5d4c\u5165\u8fc7\u5b83\u7684\u63a5\u53e3\u3002 // \u65e0\u6548: Bad \u4e0d\u80fd\u5d4c\u5165\u5b83\u81ea\u5df1 type Bad interface { Bad } // \u65e0\u6548: Bad1 \u4e0d\u80fd\u5d4c\u5165\u5df2\u7ecf\u5f15\u7528\u5b83\u7684 Bad2 type Bad1 interface { Bad2 } type Bad2 interface { Bad1 } Map\u7c7b\u578b map \u7c7b\u578b\u662f\u4e00\u79cd\u4ee5\u552f\u4e00\u503c\u4f5c\u4e3a\u952e\u7684\u65e0\u5e8f\u96c6\u5408\u3002 MapType = \"map\" \"[\" KeyType \"]\" ElementType . KeyType = Type . map\u7684\u952e\u7c7b\u578b\u5fc5\u987b\u80fd\u4f7f\u7528\u6bd4\u8f83\u8fd0\u7b97\u7b26 == \u548c != \u8fdb\u884c\u6bd4\u8f83\u3002\u56e0\u6b64\u5b83\u7684\u952e\u7c7b\u578b\u4e0d\u80fd\u662f\u51fd\u6570\uff0cmap\uff0c\u6216\u8005\u5207\u7247\u3002\u5982\u679c\u952e\u662f\u63a5\u53e3\u7c7b\u578b\uff0c\u90a3\u4e48\u6bd4\u8f83\u8fd0\u7b97\u7b26\u5fc5\u987b\u80fd\u6bd4\u8f83\u4ed6\u7684\u52a8\u6001\u503c\u3002\u5982\u679c\u4e0d\u80fd\u4f1a\u629b\u51fa\u4e00\u4e2a\u8fd0\u884c\u65f6\u9519\u8bef\u3002 map[string]int map[*T]struct{ x, y float64 } map[string]interface{} map\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u53eb\u505a\u5b83\u7684\u957f\u5ea6\u3002\u5bf9\u4e8e\u4e00\u4e2amap m \u3002\u5b83\u7684\u957f\u5ea6\u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u51fd\u6570 len \u83b7\u5f97\uff0c\u800c\u4e14\u5b83\u7684\u957f\u5ea6\u53ef\u80fd\u518d\u8fd0\u884c\u65f6\u53d1\u751f\u53d8\u5316\u3002map \u53ef\u4ee5\u518d\u8fd0\u884c\u65f6\u6dfb\u52a0\u548c\u53d6\u56de\u5143\u7d20\uff0c\u9875\u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u51fd\u6570 delete \u79fb\u9664\u5143\u7d20\u3002 \u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u51fd\u6570 make \u521d\u59cb\u5316\u4e00\u4e2a\u65b0\u7684\u4e14\u4e3a\u7a7a\u7684 map\u3002\u5b83\u80fd\u6307\u5b9a map \u7684\u7c7b\u578b\u548c\u9884\u7559\u7684\u7a7a\u95f4\uff1a make(map[string]int) make(map[string]int, 100) map \u7684\u9884\u7559\u7a7a\u95f4\u4e0d\u4f1a\u56fa\u5b9a\u4f4f map \u7684\u957f\u5ea6\uff1b\u5b83\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u4e00\u5b9a\u6570\u91cf\u7684\u5143\u7d20\u6765\u589e\u52a0\u81ea\u5df1\u7684\u957f\u5ea6\uff08nil map \u4e0d\u80fd\u6dfb\u52a0\u5143\u7d20\uff09\u3002nil map \u548c\u7a7a map \u662f\u76f8\u7b49\u7684\uff0c\u53ea\u662f nil map \u4e0d\u80fd\u6dfb\u52a0\u5143\u7d20\u3002 Channel\u7c7b\u578b channel\u63d0\u4f9b\u4e00\u79cd\u624b\u6bb5\u5728\u5e76\u53d1\u6267\u884c\u7684\u51fd\u6570\u95f4\u53d1\u9001\u548c\u63a5\u6536\u6307\u5b9a\u7c7b\u578b\u7684\u503c\u3002\u6ca1\u6709\u521d\u59cb\u5316\u7684 channel \u662fnil\u3002 ChannelType = ( \"chan\" | \"chan\" \"<-\" | \"<-\" \"chan\" ) ElementType . \u64cd\u4f5c\u7b26 <- \u53ef\u4ee5\u6307\u5b9a channel \u7684\u6570\u636e\u6d41\u52a8\u65b9\u5411\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u65b9\u5411\uff0cchannel \u9ed8\u8ba4\u662f\u53cc\u5411\u7684\u3002channel \u53ef\u4ee5\u901a\u8fc7\u8f6c\u6362\u548c\u8d4b\u503c\u6765\u9650\u5236\u53ea\u8bfb\u548c\u53ea\u5199\u3002 chan T // \u53ef\u4ee5\u63a5\u6536\u548c\u53d1\u9001 T \u7c7b\u578b\u7684\u6570\u636e chan<- float64 // \u53ea\u80fd\u53d1\u9001 float64 \u7c7b\u578b\u7684\u503c <-chan int // \u53ea\u80fd\u63a5\u6536 <- \u4e0e\u6700\u5de6\u4fa7\u7684 chan \u5173\u8054\uff1a chan<- chan int // \u7b49\u4ef7\u4e8e chan<- (chan int) chan<- <-chan int // \u7b49\u4ef7\u4e8e chan<- (<-chan int) <-chan <-chan int // \u7b49\u4ef7\u4e8e <-chan (<-chan int) chan (<-chan int) \u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u7684 make \u51fd\u6570\u521d\u59cb\u5316 channel\u3002 make \u51fd\u6570\u53ef\u4ee5\u6307\u5b9achannel\u7684\u7c7b\u578b\u548c\u5bb9\u91cf\u3002 make(chan int, 100) \u5bb9\u91cf\u662f\u8bbe\u7f6e\u4e86\u6700\u5927\u80fd\u7f13\u5b58\u5143\u7d20\u7684\u6570\u91cf\u3002\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u5bb9\u91cf\u6216\u503c\u4e3a 0\uff0cchannel \u5c31\u662f\u6ca1\u6709\u7f13\u5b58\u7684\uff0c\u8fd9\u65f6\u53ea\u6709\u5f53\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\u90fd\u51c6\u5907\u597d\u540e\u624d\u4f1a\u4f20\u8f93\u6570\u636e\u3002\u800c\u5e26\u7f13\u5b58\u7684 channel \u5728\u7f13\u5b58\u6ca1\u6709\u6ee1\u7684\u65f6\u5019\u4f9d\u7136\u53ef\u4ee5\u6210\u529f\u53d1\u9001\u6570\u636e\uff0c\u5f53\u7f13\u5b58\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\u53ef\u4ee5\u6210\u529f\u63a5\u6536\u5230\u6570\u636e\uff0c\u503c\u4e3a nil \u7684 channel \u4e0d\u80fd\u4f20\u8f93\u6570\u636e\u3002 \u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u51fd\u6570 close \u5173\u95ed channel\u3002\u5728\u63a5\u6536\u7aef\u7684\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\u53ef\u4ee5\u7528\u6765\u63d0\u793a\u63a5\u6536\u8005\u5728\u5173\u95ed\u7684 channel \u662f\u5426\u8fd8\u5305\u542b\u6570\u636e\u3002 channel \u53ef\u4ee5\u5728\u53d1\u9001\u8bed\u53e5\uff0c\u63a5\u6536\u64cd\u4f5c\u4e2d\u4f7f\u7528\u3002\u53ef\u4ee5\u4e0d\u8003\u8651\u540c\u6b65\u6027\u76f4\u63a5\u5728\u591a\u4e2a goroutine \u4e2d\u5bf9 channel \u8c03\u7528\u5185\u7f6e\u51fd\u6570 len \u548c cap \u3002channel \u7684\u884c\u4e3a\u548c FIFO \u961f\u5217\u76f8\u540c\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2a goruntine \u53d1\u9001\u6570\u636e\uff0c\u53e6\u4e00\u4e2a goruntine \u63a5\u6536\u4ed6\u4eec\uff0c\u63a5\u6536\u6570\u636e\u7684\u987a\u5e8f\u548c\u53d1\u9001\u6570\u636e\u7684\u987a\u5e8f\u662f\u76f8\u540c\u7684\u3002 \u7c7b\u578b\u7684\u5c5e\u6027\u548c\u503c \u7c7b\u578b\u6807\u8bc6 \u4e24\u4e2a\u7c7b\u578b\u53ef\u80fd\u76f8\u540c\u4e5f\u53ef\u80fd\u4e0d\u540c\u3002 \u5b9a\u4e49\u7684\u7c7b\u578b\u90fd\u662f\u4e0d\u540c\u7c7b\u578b\u3002\u5982\u679c\u4e24\u4e2a\u7c7b\u578b\u7684\u5e95\u5c42\u7c7b\u578b\u5728\u7ed3\u6784\u4e0a\u662f\u76f8\u540c\u7684\uff0c\u90a3\u5b83\u4eec\u4e5f\u662f\u76f8\u7b49\u7684\u3002\u603b\u7684\u6765\u8bf4\uff1a 2 \u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u548c\u5143\u7d20\u7c7b\u578b\u76f8\u540c\uff0c\u90a3\u4e48\u5b83\u4eec\u5c31\u662f\u76f8\u540c\u7c7b\u578b\u3002 \u5982\u679c\u4e24\u4e2a\u5207\u7247\u7684\u5143\u7d20\u7c7b\u578b\u76f8\u540c\u90a3\u4e48\u5b83\u4eec\u5c31\u662f\u76f8\u540c\u7c7b\u578b\u3002 \u5982\u679c\u4e24\u4e2a\u7ed3\u6784\u4f53\u5b57\u6bb5\u987a\u5e8f\u76f8\u540c\uff0c\u5e76\u4e14\u5b57\u6bb5\u540d\u79f0\u3001\u5b57\u6bb5\u7c7b\u578b\u548c tag \u90fd\u76f8\u540c\u90a3\u4e48\u5b83\u4eec\u5c31\u662f\u76f8\u7b49\u7684\u3002\u975e\u5bfc\u51fa\u5b57\u6bb5\u7684\u5b57\u6bb5\u540d\u5728\u4e0d\u540c\u7684\u5305\u4e2d\u603b\u662f\u4e0d\u540c\u7684\u3002 \u5982\u679c\u4e24\u4e2a\u6307\u9488\u7684\u57fa\u7840\u7c7b\u578b\u76f8\u540c\u90a3\u4e48\u4ed6\u4eec\u5177\u6709\u76f8\u540c\u7c7b\u578b\u3002 \u5982\u679c\u4e24\u4e2a\u51fd\u6570\u5177\u6709\u76f8\u540c\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u5217\u8868\uff0c\u5e76\u4e14\u4ed6\u4eec\u7684\u7c7b\u578b\u76f8\u540c\u90a3\u4e48\u4ed6\u4eec\u5c31\u662f\u76f8\u540c\u7684\uff0c\u53c2\u6570\u7684\u540d\u79f0\u4e0d\u4e00\u5b9a\u8981\u76f8\u540c\u3002 \u5982\u679c\u4e24\u4e2a\u63a5\u53e3\u7684\u65b9\u6cd5\u96c6\u5b8c\u5168\u76f8\u540c\uff08\u65b9\u6cd5\u7684\u987a\u5e8f\uff09\u3002 \u5982\u679c\u4e24\u4e2a map \u7c7b\u578b\u7684\u952e\u7c7b\u578b\u548c\u503c\u7c7b\u578b\u76f8\u540c\u90a3\u5b83\u4eec\u5c31\u662f\u76f8\u7b49\u7684\u3002 \u5982\u679c\u4e24\u4e2a channel \u7c7b\u578b\u5305\u542b\u7684\u5bf9\u8c61\u7c7b\u578b\u548c channel \u7684\u65b9\u5411\u90fd\u662f\u76f8\u540c\u7684\u90a3\u5b83\u4eec\u5c31\u662f\u76f8\u540c\u7684\u3002 \u7ed9\u51fa\u4e0b\u5217\u58f0\u660e\uff1a type ( A0 = []string A1 = A0 A2 = struct{ a, b int } A3 = int A4 = func(A3, float64) *A0 A5 = func(x int, _ float64) *[]string ) type ( B0 A0 B1 []string B2 struct{ a, b int } B3 struct{ a, c int } B4 func(int, float64) *B0 B5 func(x int, y float64) *A1 ) type C0 = B0 \u8fd9\u4e9b\u7c7b\u578b\u662f\u76f8\u7b49\u7684\uff1a A0, A1, and []string A2 and struct{ a, b int } A3 and int A4, func(int, float64) *[]string, and A5 B0, B0, and C0 []int and []int struct{ a, b *T5 } and struct{ a, b *T5 } func(x int, y float64) *[]string, func(int, float64) (result *[]string), and A5 B0 \u548c B1 \u4e0d\u662f\u4e00\u79cd\u7c7b\u578b\u56e0\u4e3a\u5b83\u4eec\u662f\u901a\u8fc7\u7c7b\u578b\u5b9a\u4e49\u65b9\u5f0f\u5206\u522b\u5b9a\u4e49\u7684\uff1b func(int, float64) *B0 \u548c func(x int, y float64) *[]string \u662f\u4e0d\u540c\u7684\uff0c\u56e0\u4e3a B0 \u548c []string \u4e0d\u662f\u76f8\u540c\u7c7b\u578b\u3002 \u53ef\u5206\u914d\u6027 \u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5c06 x \u5206\u914d\u7ed9\u7c7b\u578b\u4e3a T \u7684\u53d8\u91cf\uff08\u628a x \u5206\u914d\u7ed9 T\uff09\uff1a x \u7684\u7c7b\u578b\u4e3a T x \u7684\u7c7b\u578b V \u548c T \u6709\u76f8\u540c\u7684\u5e95\u5c42\u7c7b\u578b\u5e76\u4e14\u7c7b\u578b T \u6216 V \u81f3\u5c11\u4e00\u4e2a\u5b9a\u4e49\u7684\u7c7b\u578b T \u662f\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u5e76\u4e14 x \u5b9e\u73b0\u4e86 T x \u662f\u4e00\u4e2a channel\uff0c\u5e76\u4e14 T \u662fchannel\u7c7b\u578b\uff0c\u7c7b\u578bV\u548c\u7c7b\u578bT\u6709\u76f8\u540c\u7684\u5143\u7d20\u7c7b\u578b\uff0c\u5e76\u4e14 2 \u79cd\u7c7b\u578b\u81f3\u5c11\u6709\u4e00\u79cd\u4e0d\u662f\u5b9a\u4e49\u7684\u7c7b\u578b x \u7b49\u4e8e nil \u5e76\u4e14 T \u662f\u4e00\u4e2a\u6307\u9488\uff0c\u51fd\u6570\uff0c\u5207\u7247\uff0cmap\uff0cchannel \u6216\u63a5\u53e3\u7c7b\u578b x \u662f\u4e00\u4e2a\u53ef\u4ee5\u8868\u793a T \u7c7b\u578b\u503c\u7684\u65e0\u7c7b\u578b\u5e38\u91cf \u4ee3\u8868\u6027 \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u65f6\u53ef\u4ee5\u7528 T \u7c7b\u578b\u7684\u503c\u8868\u793a\u5e38\u91cf x\uff1a T \u503c\u7684\u96c6\u5408\u5305\u62ec x T \u662f\u6d6e\u70b9\u578b\uff0c\u800c x \u5728\u6ca1\u6709\u6ea2\u51fa\u7684\u60c5\u51b5\u4e0b\u80fd\u591f\u8fd1\u4f3c\u6210 T \u7c7b\u578b\u3002\u8fd1\u4f3c\u89c4\u5219\u4f7f\u7528 IEEE 754 round-to-even \uff0c\u8d1f\u96f6\u548c\u65e0\u7b26\u53f7\u7684\u96f6\u76f8\u540c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e38\u91cf\u7684\u503c\u4e0d\u4f1a\u4e3a\u8d1f\u96f6\uff0cNaN\uff0c\u6216\u65e0\u9650\u503c\u3002 T \u4e3a\u590d\u6570\u7c7b\u578b\uff0c\u5e76\u4e14 x \u7684 real(x) \u548c imag(x) \u90e8\u5206\u7531\u590d\u6570\u7c7b\u578b\u5bf9\u5e94\u7684\u6d6e\u70b9\u7c7b\u578b\uff08 float32 \u6216 float64 \uff09\u7ec4\u6210\u3002 x T x \u53ef\u4ee5\u8868\u793a T \u7684\u503c\uff0c\u56e0\u4e3a\uff1a 'a' byte 97 \u5728 byte \u7c7b\u578b\u503c\u7684\u96c6\u5408\u4e2d 97 rune rune \u662f int32 \u7684\u522b\u540d\uff0c97 \u5728 32 \u4f4d\u6574\u578b\u503c\u7684\u96c6\u5408\u4e2d \"foo\" string \"foo\" \u5728\u5b57\u7b26\u4e32\u503c\u7684\u96c6\u5408\u4e2d 1024 int16 1024 \u5728 16 \u4f4d\u6574\u578b\u503c\u7684\u96c6\u5408\u4e2d 42.0 byte 42 \u5728 8 \u4f4d\u65e0\u7b26\u53f7\u6574\u578b\u503c\u7684\u96c6\u5408\u4e2d 1e10 uint64 10000000000 \u5728 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u578b\u503c\u7684\u96c6\u5408\u4e2d 2.718281828459045 float32 2.718281828459045 \u7684\u8fd1\u4f3c\u503c 2.7182817 \u5728 float32 \u7c7b\u578b\u503c\u7684\u96c6\u5408\u4e2d -1e-1000 float64 -1e-1000 \u7684\u8fd1\u89c6\u503c IEEE -0.0\uff0c\u7b49\u4e8e 0 0i int 0 \u662f\u6574\u578b\u503c (42 + 0i) float32 42.0 (0 \u865a\u90e8) \u5728 float32 \u7c7b\u578b\u503c\u7684\u96c6\u5408\u4e2d x T x \u4e0d\u80fd\u8868\u793a T \u7684\u503c\uff0c\u56e0\u4e3a\uff1a 0 bool 0 \u4e0d\u5728\u5e03\u5c14\u503c\u7684\u96c6\u5408\u4e2d 'a' string 'a' \u662f rune \u7c7b\u578b, \u5b83\u4e0d\u5728\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u503c\u96c6\u5408\u4e2d 1024 byte 1024 \u4e0d\u5728 8 \u4f4d\u65e0\u7b26\u53f7\u6574\u578b\u503c\u7684\u96c6\u5408\u4e2d -1 uint16 -1 \u4e0d\u5728 16 \u4f4d\u65e0\u7b26\u53f7\u6574\u578b\u503c\u7684\u96c6\u5408\u4e2d 1.1 int 1.1 \u4e0d\u662f\u6574\u578b\u503c 42i float32 (0 + 42i) \u4e0d\u5728 float32 \u7c7b\u578b\u503c\u7684\u96c6\u5408\u4e2d 1e1000 float64 1e1000 \u53d6\u8fd1\u4f3c\u503c\u65f6\u4f1a\u6ea2\u51fa\u6210 IEEE \u4ee3\u7801\u5757 \u4ee3\u7801\u5757\u662f\u7528\u5927\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u58f0\u660e\u548c\u8bed\u53e5\u3002 Block = \"{\" StatementList \"}\" . StatementList = { Statement \";\" } . \u9664\u4e86\u6e90\u7801\u4e2d\u663e\u5f0f\u7684\u4ee3\u7801\u5757\uff0c\u4e5f\u6709\u4e00\u4e9b\u9690\u5f0f\u7684\u4ee3\u7801\u5757\u3002 \u5305\u542b\u6240\u6709\u7684Go\u4ee3\u7801\u7684\u5168\u5c40\u4ee3\u7801\u5757\u3002 \u5305\u542b\u6240\u6709\u5305\u7684\u4ee3\u7801\u7684\u5305\u4ee3\u7801\u5757\u3002 \u5305\u542b\u6587\u4ef6\u5185\u7684\u6240\u6709\u4ee3\u7801\u7684\u6587\u4ef6\u4ee3\u7801\u5757\u3002 \u6bcf\u4e2a if\uff0cswitch\u548c for \u7684\u8303\u56f4\u90fd\u4f1a\u5f62\u6210\u9690\u5f0f\u7684\u5757\u3002 \u6bcf\u4e2a switch \u548c select \u6761\u4ef6\u90fd\u6709\u81ea\u5df1\u7684\u4ee3\u7801\u5757\u3002 \u4ee3\u7801\u5757\u53ef\u4ee5\u5d4c\u5957\u5e76\u4e14\u5f71\u54cd\u4f5c\u7528\u57df\u3002 \u58f0\u660e\u548c\u4f5c\u7528\u57df \u4e00\u6bb5\u58f0\u660e\u53ef\u4ee5\u7ed9\u5e38\u91cf\uff0c\u7c7b\u578b\uff0c\u53d8\u91cf\uff0c\u51fd\u6570\uff0c\u6807\u7b7e\uff0c\u548c\u5305\u7ed1\u5b9a\u6807\u8bc6\u7b26\u3002\u7a0b\u5e8f\u4e2d\u6bcf\u4e2a\u6807\u8bc6\u7b26\u90fd\u9700\u8981\u58f0\u660e\u3002\u76f8\u540c\u6807\u8bc6\u7b26\u4e0d\u80fd\u5728\u540c\u4e00\u4e2a\u4ee3\u7801\u5757\u4e2d\u58f0\u660e2\u6b21\u3002\u5e76\u4e14\u76f8\u540c\u6807\u8bc6\u7b26\u4e0d\u80fd\u540c\u65f6\u5728\u6587\u4ef6\u548c package \u4ee3\u7801\u5757\u4e2d\u58f0\u660e\u3002 \u7a7a\u6807\u8bc6\u7b26\u53ef\u4ee5\u548c\u5176\u4ed6\u6807\u8bc6\u7b26\u4e00\u6837\u5728\u58f0\u660e\u4e2d\u4f7f\u7528\u3002\u4e0d\u8fc7\u5b83\u4e0d\u7ed1\u5b9a\u6807\u8bc6\u7b26\uff0c\u7b49\u4e8e\u6ca1\u6709\u58f0\u660e\u3002\u5728 package \u4ee3\u7801\u5757\u4e2d init \u6807\u8bc6\u7b26\u53ea\u80fd\u7528\u505a init \u51fd\u6570\u7684\u6807\u8bc6\u7b26\uff0c\u5c31\u50cf\u7a7a\u6807\u8bc6\u7b26\u4e00\u6837\uff0c\u5b83\u4e0d\u4f1a\u5f15\u5165\u65b0\u7684\u7ed1\u5b9a\u3002 Declaration = ConstDecl | TypeDecl | VarDecl . TopLevelDecl = Declaration | FunctionDecl | MethodDecl . \u58f0\u660e\u8fc7\u7684\u6807\u8bc6\u7b26\u7684\u4f5c\u7528\u57df\u5c31\u662f\u58f0\u660e\u6807\u8bc6\u7b26\u6240\u5728\u7684\u4f5c\u7528\u57df\u3002 go\u4f7f\u7528\u5757\u6765\u89c4\u5b9a\u8bcd\u6c47\u7684\u65b9\u4f4d\uff1a \u9884\u5b9a\u4e49\u7684\u6807\u8bc6\u7b26\u5177\u6709\u5168\u5c40\u4f5c\u7528\u57df\u3002 \u6240\u6709\u5b9a\u4e49\u7684\u9876\u7ea7\u6807\u8bc6\u7b26\u5177\u6709\u5305\u4f5c\u7528\u57df\u3002 import\u8fdb\u6765\u7684\u5305\u7684\u540d\u5b57\u6807\u8bc6\u7b26\u5177\u6709\u6587\u4ef6\u4f5c\u7528\u57df\u3002 \u65b9\u6cd5\u7684\u63a5\u6536\u8005\uff0c\u51fd\u6570\u53c2\u6570\uff0c\u8fd4\u56de\u503c\u53d8\u91cf\u5177\u6709\u51fd\u6570\u4f5c\u7528\u57df\u3002 \u51fd\u6570\u5185\u5b9a\u4e49\u7684\u53c2\u91cf\u548c\u53d8\u91cf\u6807\u8bc6\u7b26\u7684\u4f5c\u7528\u57df\u662f\u6807\u8bc6\u7b26\u88ab\u58f0\u660e\u5230\u5bb9\u7eb3\u4ed6\u7684\u5757\u7ed3\u675f\u3002 \u4e00\u4e2a\u4ee3\u7801\u5757\u4e2d\u58f0\u660e\u7684\u6807\u8bc6\u7b26\u53ef\u4ee5\u5728\u5b83\u5185\u90e8\u7684\u4ee3\u7801\u5757\u4e2d\u91cd\u65b0\u58f0\u660e\u3002\u5728\u5185\u90e8\u4ee3\u7801\u5757\u7684\u4f5c\u7528\u57df\u4e2d\u6807\u8bc6\u7b26\u8868\u793a\u5728\u5185\u90e8\u4ee3\u7801\u5757\u4e2d\u58f0\u660e\u7684\u5b9e\u4f53\u3002 pakcage \u8bed\u53e5\u4e0d\u5c5e\u4e8e\u58f0\u660e\u3002\u5305\u540d\u4e0d\u4f1a\u51fa\u73b0\u5728\u4efb\u4f55\u7684\u4f5c\u7528\u57df\u4e2d\u3002\u5b83\u7684\u4f5c\u7528\u53ea\u662f\u7528\u6765\u6807\u8bc6\u5c5e\u4e8e\u76f8\u540c\u5305\u7684\u591a\u4e2a\u6587\u4ef6\u5e76\u5728\u5bfc\u5165\u65f6\u6307\u5b9a\u9ed8\u8ba4\u5305\u540d\u3002 \u6807\u7b7e\u7684\u4f5c\u7528\u57df \u53ef\u4ee5\u4f7f\u7528\u6807\u7b7e\u8bed\u53e5\u6765\u58f0\u660e\u6807\u7b7e\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728 break \uff0c continue \uff0c goto \u8bed\u6cd5\u4e2d\u4f7f\u7528\u3002\u5982\u679c\u53ea\u58f0\u660e\u4f46\u6ca1\u6709\u4f7f\u7528\u6807\u7b7e\u65f6\u975e\u6cd5\u7684\u3002\u6807\u7b7e\u7684\u4f5c\u7528\u57df\u53ea\u6709\u5b9a\u4e49\u65f6\u7684\u51fd\u6570\u4f53\uff0c\u65e9\u9012\u5f52\u51fd\u6570\u4f53\u4e2d\u6ca1\u6709\u4f5c\u7528\u3002 \u7a7a\u6807\u8bc6\u7b26 \u7a7a\u6807\u8bc6\u7b26\u4f7f\u7528\u4e0b\u5212\u7ebf _ \u4ee3\u8868\u3002\u4e0e\u4e00\u822c\u7684\u975e\u7a7a\u6807\u8bc6\u7b26\u4e0d\u540c\uff0c\u5b83\u4f5c\u4e3a\u533f\u540d\u6807\u8bc6\u7b26\u5728\u58f0\u660e\uff0c\u8fd0\u7b97\u5143\u548c\u8d4b\u503c\u8bed\u53e5\u4e2d\u90fd\u6709\u7279\u6b8a\u542b\u4e49\u3002 \u9884\u5b9a\u4e49\u7684\u6807\u8bc6\u7b26 \u4ee5\u4e0b\u6807\u8bc6\u7b26\u5df2\u7ecf\u5728\u5168\u5c40\u4f5c\u7528\u57df\u4e2d\u9884\u5148\u58f0\u660e\uff1a Types: bool byte complex64 complex128 error float32 float64 int int8 int16 int32 int64 rune string uint uint8 uint16 uint32 uint64 uintptr Constants: true false iota Zero value: nil Functions: append cap close complex copy delete imag len make new panic print println real recover \u5bfc\u51fa\u6807\u8bc6\u7b26 \u6807\u8bc6\u7b26\u53ef\u4ee5\u5bfc\u51fa\u4f9b\u5176\u4ed6\u5305\u4f7f\u7528\u3002\u5728\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\u540c\u65f6\u6ee1\u8db3\u65f6\u6807\u8bc6\u7b26\u662f\u5bfc\u51fa\u7684\uff1a \u6807\u8bc6\u7b26\u7684\u9996\u5b57\u6bcd\u662f\u5927\u5199\uff08Unicode \u7684 Lu \u7c7b\uff09 \u6807\u8bc6\u7b26\u58f0\u660e\u5728\u5305\u4f5c\u7528\u57df\u6216\u8005\u5b83\u662f\u5b57\u6bb5\u540d/\u65b9\u6cd5\u540d\u3002 \u5176\u4ed6\u4efb\u4f55\u6807\u8bc6\u7b26\u90fd\u4e0d\u662f\u5bfc\u51fa\u7684\u3002 \u6807\u8bc6\u7b26\u7684\u552f\u4e00\u6027 \u7ed9\u5b9a\u4e00\u4e2a\u6807\u8bc6\u7b26\u96c6\u5408\uff0c\u4e00\u4e2a\u6807\u8bc6\u7b26\u4e0e\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u6807\u8bc6\u7b26\u90fd\u4e0d\u76f8\u540c\uff0c\u90a3\u5c31\u8ba4\u4e3a\u8fd9\u4e2a\u6807\u8bc6\u7b26\u662f\u552f\u4e00\u7684\u3002\u5047\u8bbe\u6709\u4e24\u4e2a\u6807\u8bc6\u7b26\uff0c\u5982\u679c\u5b83\u4eec\u7684\u62fc\u5199\u4e0d\u540c\uff0c\u6216\u8005\u5b83\u4eec\u5728\u4e0d\u540c\u7684\u5305\u4e2d\u5e76\u6ca1\u6709\u5bfc\u51fa\uff0c\u90a3\u5b83\u4eec\u5c31\u662f\u4e0d\u540c\u6807\u8bc6\u7b26\u3002\u76f8\u53cd\uff0c\u5176\u4ed6\u60c5\u51b5\u4e0b\u90fd\u8ba4\u4e3a\u6807\u8bc6\u7b26\u662f\u76f8\u540c\u7684\u3002 \u5e38\u91cf\u58f0\u660e \u5e38\u91cf\u58f0\u660e\u4f7f\u7528\u5e38\u91cf\u8868\u8fbe\u5f0f\u7ed1\u5b9a\u4e00\u7cfb\u5217\u6807\u8bc6\u7b26\u3002\u6807\u8bc6\u7b26\u7684\u6570\u91cf\u5fc5\u987b\u7b49\u4e8e\u8868\u8fbe\u5f0f\u7684\u6570\u91cf\u3002\u5de6\u4fa7\u7b2c n \u4e2a\u6807\u8bc6\u7b26\u7ed1\u5b9a\u53f3\u4fa7\u7b2c n \u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u3002 ConstDecl = \"const\" ( ConstSpec | \"(\" { ConstSpec \";\" } \")\" ) . ConstSpec = IdentifierList [ [ Type ] \"=\" ExpressionList ] . IdentifierList = identifier { \",\" identifier } . ExpressionList = Expression { \",\" Expression } . \u5982\u679c\u7ed9\u5b9a\u7c7b\u578b\uff0c\u5e38\u91cf\u4f1a\u6307\u5b9a\u7c7b\u578b\uff0c\u5e76\u4e14\u8868\u8fbe\u5f0f\u7684\u503c\u5fc5\u987b\u80fd\u5bf9\u8fd9\u4e2a\u7c7b\u578b\u8fdb\u884c\u8d4b\u503c\u3002 \u5982\u679c\u6ca1\u6709\u7ed9\u5b9a\u7c7b\u578b\u3002\u5e38\u91cf\u4f1a\u8f6c\u6362\u6210\u76f8\u5e94\u7684\u8868\u8fbe\u5f0f\u7c7b\u578b\u3002\u5982\u679c\u8868\u8fbe\u5f0f\u7684\u503c\u662f\u65e0\u7c7b\u578b\u5e38\u91cf\uff0c\u90a3\u4e48\u58f0\u660e\u7684\u5e38\u91cf\u4e5f\u662f\u65e0\u7c7b\u578b\u7684\uff0c\u5e76\u4e14\u5e38\u91cf\u7684\u6807\u8bc6\u7b26\u4ee3\u8868\u5e38\u91cf\u7684\u503c\u3002\u4f8b\u5982\uff1a\u5373\u4f7f\u5c0f\u6570\u90e8\u5206\u662f 0\uff0c\u53ea\u8981\u8868\u8fbe\u5f0f\u662f\u6d6e\u70b9\u6570\u5b57\u9762\u503c\uff0c\u5e38\u91cf\u6807\u8bc6\u7b26\u4e5f\u8868\u793a\u4e3a\u6d6e\u70b9\u6570\u5e38\u91cf\u3002 const Pi float64 = 3.14159265358979323846 const zero = 0.0 // \u65e0\u7c7b\u578b\u6d6e\u70b9\u6570\u5e38\u91cf const ( size int64 = 1024 eof = -1 // \u65e0\u7c7b\u578b\u6574\u578b\u5e38\u91cf ) const a, b, c = 3, 4, \"foo\" // a = 3, b = 4, c = \"foo\", \u65e0\u7c7b\u578b\u6574\u578b\u548c\u5b57\u7b26\u4e32\u5e38\u91cf const u, v float32 = 0, 3 // u = 0.0, v = 3.0 \u62ec\u53f7\u5185\u7684\u5e38\u91cf\u58f0\u660e\u5217\u8868\u7684\u8868\u8fbe\u5f0f\u9664\u4e86\u7b2c\u4e00\u4e2a\u5fc5\u987b\u58f0\u660e\u5176\u4ed6\u8868\u8fbe\u5f0f\u53ef\u4ee5\u4e0d\u5199\u3002\u7a7a\u7684\u8868\u8fbe\u5f0f\u5217\u8868\u7684\u503c\u548c\u7c7b\u578b\u90fd\u548c\u524d\u9762\u7684\u975e\u7a7a\u8868\u8fbe\u5f0f\u76f8\u540c\u3002\u7f3a\u7701\u7684\u8868\u8fbe\u5f0f\u5217\u8868\u7b49\u4ef7\u4e8e\u91cd\u590d\u4e4b\u524d\u7684\u8868\u8fbe\u5f0f\u3002\u6807\u8bc6\u7b26\u7684\u6570\u91cf\u5fc5\u987b\u7b49\u4e8e\u8868\u8fbe\u5f0f\u7684\u6570\u91cf\u3002 iota \u5e38\u91cf\u751f\u6210\u5668\u662f\u4e00\u4e2a\u53ef\u4ee5\u5feb\u901f\u751f\u6210\u5e8f\u5217\u503c\u7684\u673a\u5236\u3002 const ( Sunday = iota Monday Tuesday Wednesday Thursday Friday Partyday numberOfDays // \u975e\u5bfc\u51fa\u5e38\u91cf ) Iota \u5728\u5e38\u91cf\u58f0\u660e\u4e2d\uff0c\u9884\u5b9a\u4e49\u7684\u6807\u8bc6\u7b26 iota \u8868\u793a\u8fde\u7eed\u7684\u65e0\u7c7b\u578b\u6574\u578b\u5e38\u91cf\u3002\u5b83\u7684\u503c\u4e3a\u5e38\u91cf\u58f0\u660e\u4e2d\u6bcf\u4e2a\u5e38\u91cf\u5b9a\u4e49\u7684\u4f4d\u7f6e\uff08\u4ece\u96f6\u5f00\u59cb\uff09\u3002\u5b83\u80fd\u591f\u7528\u6765\u751f\u6210\u4e00\u4e2a\u5173\u8054\u5e38\u91cf\u96c6\u5408\uff1a const ( // iota is reset to 0 c0 = iota // c0 == 0 c1 = iota // c1 == 1 c2 = iota // c2 == 2 ) const ( // iota is reset to 0 a = 1 << iota // a == 1 b = 1 << iota // b == 2 c = 3 // c == 3 (\u6ca1\u6709\u4f7f\u7528 iota \u4e0d\u8fc7\u5b83\u7684\u503c\u4f9d\u7136\u9012\u589e) d = 1 << iota // d == 8 ) const ( // iota is reset to 0 u = iota * 42 // u == 0 (\u65e0\u7c7b\u578b\u6574\u578b\u5e38\u91cf) v float64 = iota * 42 // v == 42.0 (float64 \u7c7b\u578b\u5e38\u91cf) w = iota * 42 // w == 84 (\u65e0\u7c7b\u578b\u6574\u578b\u5e38\u91cf) ) const x = iota // x == 0 (iota \u88ab\u91cd\u7f6e) const y = iota // y == 0 (iota \u88ab\u91cd\u7f6e) \u6839\u636e\u5b9a\u4e49\uff0c\u5728\u540c\u4e00\u4e2a\u5e38\u91cf\u5b9a\u4e49\u4e2d\u591a\u6b21\u4f7f\u7528 iota \u4f1a\u5f97\u5230\u76f8\u540c\u7684\u503c\uff1a const ( bit0, mask0 = 1 << iota, 1<<iota - 1 // bit0 == 1, mask0 == 0 (iota == 0) bit1, mask1 // bit1 == 2, mask1 == 1 (iota == 1) _, _ // (iota == 2, unused) bit3, mask3 // bit3 == 8, mask3 == 7 (iota == 3) ) \u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\u5229\u7528\u4e86\u6700\u540e\u4e00\u4e2a\u975e\u7a7a\u8868\u8fbe\u5f0f\u5217\u8868\u7684\u9690\u5f0f\u91cd\u590d\u3002 \u7c7b\u578b\u58f0\u660e \u7c7b\u578b\u58f0\u660e\u4e3a\u7c7b\u578b\u7ed1\u5b9a\u4e00\u4e2a\u6807\u8bc6\u7b26\u3002\u7c7b\u578b\u58f0\u660e\u67092\u79cd\u65b9\u5f0f\uff1a\u7c7b\u578b\u58f0\u660e\u548c\u522b\u540d\u58f0\u660e\u3002 TypeDecl = \"type\" ( TypeSpec | \"(\" { TypeSpec \";\" } \")\" ) . TypeSpec = AliasDecl | TypeDef . Alias\u58f0\u660e \u522b\u540d\u58f0\u660e\u7ed9\u6307\u5b9a\u7c7b\u578b\u7ed1\u5b9a\u4e00\u4e2a\u6807\u8bc6\u7b26\u540d\u79f0\u3002 AliasDecl = identifier \"=\" Type . \u5728\u6807\u8bc6\u7b26\u4f5c\u7528\u57df\u5185\uff0c\u5b83\u4f5c\u4e3a\u7c7b\u578b\u7684\u522b\u540d\u3002 type ( nodeList = []*Node // nodeList \u548c []*Node \u662f\u76f8\u540c\u7c7b\u578b Polar = polar // Polar \u548c polar \u8868\u793a\u76f8\u540c\u7c7b\u578b ) Type \u5b9a\u4e49 \u7c7b\u578b\u5b9a\u4e49\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7c7b\u578b\u5e76\u7ed1\u5b9a\u4e00\u4e2a\u6807\u8bc6\u7b26\uff0c\u65b0\u7c7b\u578b\u4e0e\u7ed9\u5b9a\u7c7b\u578b\u5177\u6709\u76f8\u540c\u7684\u5e95\u5c42\u7c7b\u578b\u548c\u64cd\u4f5c\u3002 TypeDef = identifier Type . \u8fd9\u4e2a\u7c7b\u578b\u53eb\u505a\u5b9a\u4e49\u7c7b\u578b\uff0c\u5b83\u548c\u5176\u4ed6\u6240\u6709\u7c7b\u578b\u90fd\u4e0d\u76f8\u540c\uff0c\u5305\u62ec\u521b\u5efa\u5b83\u7684\u7c7b\u578b\u3002 type ( Point struct{ x, y float64 } // Point \u548c struct{ x, y float64 } \u662f\u4e0d\u540c\u7c7b\u578b polar Point // polar \u548c Point \u8868\u793a\u4e0d\u540c\u7c7b\u578b ) type TreeNode struct { left, right *TreeNode value *Comparable } type Block interface { BlockSize() int Encrypt(src, dst []byte) Decrypt(src, dst []byte) } \u5b9a\u4e49\u7c7b\u578b\u53ef\u4ee5\u5173\u8054\u8be5\u7c7b\u578b\u7684\u65b9\u6cd5\u3002\u5b83\u4e0d\u4f1a\u7ee7\u627f\u539f\u6765\u7c7b\u578b\u7684\u4efb\u4f55\u65b9\u6cd5\u3002\u4f46\u662f\u63a5\u53e3\u7c7b\u578b\u7684\u65b9\u6cd5\u96c6\u548c\u7c7b\u578b\u7684\u7ed3\u6784\u6ca1\u6709\u6539\u53d8\u3002 // Mutex \u662f\u4e00\u4e2a\u62e5\u6709 Lock \u548c Unlock \u4e24\u4e2a\u65b9\u6cd5\u7684\u6570\u636e\u7c7b\u578b\u3002 type Mutex struct { /* Mutex fields */ } func (m *Mutex) Lock() { /* Lock implementation */ } func (m *Mutex) Unlock() { /* Unlock implementation */ } // NewMutex \u4e0e Mutex \u7ed3\u6784\u76f8\u540c\u4e0d\u8fc7\u65b9\u6cd5\u96c6\u4e3a\u7a7a\u3002 type NewMutex Mutex // PtrMutex \u7684\u5e95\u5c42\u7c7b\u578b *Mutex \u7684\u65b9\u6cd5\u96c6\u6ca1\u6709\u6539\u53d8\uff0c // \u4f46\u662f PtrMutex \u7684\u65b9\u6cd5\u96c6\u4e3a\u7a7a\u3002 type PtrMutex *Mutex // *PrintableMutex \u5305\u542b\u5d4c\u5165\u5b57\u6bb5 Mutex \u7684 Lock \u548c Unlock \u65b9\u6cd5\u3002 type PrintableMutex struct { Mutex } // MyBlock \u662f\u4e0e Block \u6709\u76f8\u540c\u65b9\u6cd5\u96c6\u7684\u63a5\u53e3\u7c7b\u578b type MyBlock Block \u7c7b\u578b\u5b9a\u4e49\u53ef\u4ee5\u5b9a\u4e49\u65b9\u6cd5\u96c6\u4e0d\u540c\u7684\u5e03\u5c14\u503c\u3001\u6570\u5b57\u548c\u5b57\u7b26\u4e32\u7c7b\u578b\uff1a type TimeZone int const ( EST TimeZone = -(5 + iota) CST MST PST ) func (tz TimeZone) String() string { return fmt.Sprintf(\"GMT%+dh\", tz) } \u53d8\u91cf\u58f0\u660e \u53d8\u91cf\u58f0\u660e\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\uff0c\u5e76\u7ed1\u5b9a\u5bf9\u5e94\u7684\u6807\u8bc6\u7b26\u3001\u6307\u5b9a\u7c7b\u578b\u548c\u521d\u59cb\u503c\u3002 VarDecl = \"var\" ( VarSpec | \"(\" { VarSpec \";\" } \")\" ) . VarSpec = IdentifierList ( Type [ \"=\" ExpressionList ] | \"=\" ExpressionList ) . var i int var U, V, W float64 var k = 0 var x, y float32 = -1, -2 var ( i int u, v, s = 2.0, 3.0, \"bar\" ) var re, im = complexSqrt(-1) var _, found = entries[name] // map lookup; only interested in \"found\" \u5982\u679c\u7ed9\u5b9a\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5217\u8868\u3002\u53d8\u91cf\u4f1a\u6839\u636e\u8d4b\u503c\u89c4\u5219\u4f7f\u7528\u8868\u8fbe\u5f0f\u8fdb\u884c\u521d\u59cb\u5316\u3002\u5426\u5219\uff0c\u6bcf\u4e2a\u53d8\u91cf\u90fd\u4f1a\u521d\u59cb\u5316\u6210\u53d8\u91cf\u7c7b\u578b\u7684\u96f6\u503c\u3002 \u5982\u679c\u6307\u5b9a\u7c7b\u578b\uff0c\u53d8\u91cf\u4f1a\u4e3a\u6307\u5b9a\u7c7b\u578b\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7c7b\u578b\uff0c\u53d8\u91cf\u4f1a\u4f7f\u7528\u5206\u914d\u7684\u521d\u59cb\u503c\u7c7b\u578b\u3002\u5982\u679c\u521d\u59cb\u503c\u4e3a\u65e0\u7c7b\u578b\u5e38\u91cf\uff0c\u5b83\u4f1a\u8f6c\u6362\u6210\u521d\u59cb\u503c\u7684\u9ed8\u8ba4\u7c7b\u578b\u3002\u5982\u679c\u662f\u4e00\u4e2a\u65e0\u7c7b\u578b\u5e03\u5c14\u503c\uff0c\u90a3\u4e48\u53d8\u91cf\u7684\u7c7b\u578b\u5c31\u662f bool \u3002\u503c nil \u4e0d\u80fd\u7ed9\u6ca1\u6709\u6307\u5b9a\u7c7b\u578b\u7684\u53d8\u91cf\u8d4b\u503c\u3002 var d = math.Sin(0.5) // d is float64 var i = 42 // i is int var t, ok = x.(T) // t is T, ok is bool var n = nil // illegal \u5b9e\u73b0\u7684\u9650\u5236\uff1a\u5728\u51fd\u6570\u4f53\u5185\u58f0\u660e\u7684\u53d8\u91cf\u5982\u679c\u6ca1\u6709\u4f7f\u7528\u8fc7\u7f16\u8bd1\u5668\u9700\u8981\u62a5\u9519\u3002 \u77ed\u53d8\u91cf\u58f0\u660e \u77ed\u53d8\u91cf\u58f0\u660e\u7684\u8bed\u6cd5: ShortVarDecl = IdentifierList \":=\" ExpressionList . \u5b83\u6bd4\u6b63\u5e38\u4f7f\u7528\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u8fdb\u884c\u53d8\u91cf\u58f0\u660e\u7684\u65b9\u5f0f\u8981\u77ed\uff0c\u800c\u4e14\u4e0d\u6307\u5b9a\u7c7b\u578b\uff1a \"var\" IdentifierList = ExpressionList . i, j := 0, 10 f := func() int { return 7 } ch := make(chan int) r, w := os.Pipe(fd) // os.Pipe() \u8fd4\u56de\u4e24\u4e2a\u503c _, y, _ := coord(p) // coord() \u8fd4\u56de\u4e09\u4e2a\u503c\uff0c\u6211\u4eec\u53ea\u5173\u6ce8 y \u548c\u5e38\u89c4\u53d8\u91cf\u58f0\u660e\u4e0d\u540c\uff0c\u5373\u4f7f\u4e4b\u524d\u5728\u76f8\u540c\u4ee3\u7801\u5757\u4e2d\u58f0\u660e\u8fc7\u7684\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u5728\u77ed\u53d8\u91cf\u91cd\u65b0\u58f0\u660e\u76f8\u540c\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u5e76\u4e14\u4fdd\u8bc1\u81f3\u5c11\u4f1a\u6709\u4e00\u4e2a\u65b0\u7684\u975e\u7a7a\u53d8\u91cf\u3002\u603b\u4e4b\uff0c\u53ea\u5e94\u8be5\u5728\u591a\u53d8\u91cf\u77ed\u58f0\u660e\u7684\u65f6\u5019\u91cd\u65b0\u58f0\u660e\u53d8\u91cf\uff0c\u91cd\u65b0\u58f0\u660e\u5e76\u4e0d\u4f1a\u4f7f\u7528\u65b0\u7684\u53d8\u91cf\uff0c\u800c\u662f\u7ed9\u53d8\u91cf\u5206\u914d\u65b0\u503c\u3002 field1, offset := nextField(str, 0) field2, offset := nextField(str, offset) // \u91cd\u65b0\u58f0\u660e offset a, a := 1, 2 // \u975e\u6cd5\uff1a\u58f0\u660e\u4e86 a \u4e24\u6b21\u5e76\u4e14\u6ca1\u6709\u65b0\u7684\u53d8\u91cf \u77ed\u53d8\u91cf\u58f0\u660e\u53ea\u80fd\u5728\u51fd\u6570\u4e2d\u4f7f\u7528\uff0c\u4f8b\u5982\u5728 if \u3001 for \u3001 switch \u8bed\u53e5\u7684\u4e0a\u4e0b\u6587\u4e2d\u58f0\u660e\u4e34\u65f6\u53d8\u91cf\u3002 \u51fd\u6570\u58f0\u660e \u51fd\u6570\u58f0\u660e\u4e3a\u51fd\u6570\u7ed1\u5b9a\u6807\u8bc6\u7b26\u3002 FunctionDecl = \"func\" FunctionName Signature [ FunctionBody ] . FunctionName = identifier . FunctionBody = Block . \u5982\u679c\u51fd\u6570\u6307\u5b9a\u4e86\u8fd4\u56de\u53c2\u6570\u3002\u51fd\u6570\u4f53\u7684\u8bed\u53e5\u5fc5\u987b\u4ee5\u7ec8\u6b62\u8bed\u53e5\u7ed3\u675f\u3002 func IndexRune(s string, r rune) int { for i, c := range s { if c == r { return i } } // \u65e0\u6548\uff1a\u7f3a\u5c11 return \u8bed\u53e5 } \u51fd\u6570\u58f0\u660e\u53ef\u4ee5\u6ca1\u6709\u51fd\u6570\u4f53\u3002\u8fd9\u6837\u7684\u58f0\u660e\u63d0\u4f9b\u4e00\u4e2a\u51fd\u6570\u58f0\u660e\uff0c\u5e76\u7531\u5176\u4ed6\u5916\u90e8\u5b9e\u73b0\uff0c\u4f8b\u5982\u6c47\u7f16\u811a\u672c\u3002 func min(x int, y int) int { if x < y { return x } return y } func flushICache(begin, end uintptr) // \u7531\u5916\u90e8\u5b9e\u73b0 \u65b9\u6cd5\u58f0\u660e \u65b9\u6cd5\u662f\u4e00\u4e2a\u5e26\u63a5\u6536\u8005\u7684\u51fd\u6570\uff0c\u65b9\u6cd5\u58f0\u660e\u4e3a\u65b9\u6cd5\u7ed1\u5b9a\u6807\u8bc6\u7b26\u4f5c\u4e3a\u65b9\u6cd5\u540d\u5e76\u6307\u5b9a\u65b9\u6cd5\u5bf9\u5e94\u7684\u63a5\u6536\u8005\u7c7b\u578b\u3002 MethodDecl = \"func\" Receiver MethodName Signature [ FunctionBody ] . Receiver = Parameters . \u63a5\u6536\u8005\u901a\u8fc7\u5728\u65b9\u6cd5\u589e\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\u6765\u6307\u5b9a\u3002\u8fd9\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u975e\u53ef\u53d8\u53c2\u6570\u3002\u5b83\u7684\u7c7b\u578b\u5fc5\u987b\u662f T \u6216\u8005 T \u7684\u6307\u9488\uff08\u53ef\u80fd\u5305\u542b\u62ec\u53f7\uff09\u3002T \u88ab\u79f0\u4f5c\u63a5\u6536\u8005\u7684\u57fa\u7840\u7c7b\u578b\uff1b\u5b83\u4e0d\u80fd\u662f\u6307\u9488\u6216\u63a5\u53e3\u7c7b\u578b\uff0c\u5e76\u4e14\u53ea\u80fd\u5728\u540c\u4e00\u4e2a\u5305\u4e2d\u5b9a\u4e49\u65b9\u6cd5\u3002\u58f0\u660e\u540e\uff0c\u6211\u4eec\u8ba4\u4e3a\u65b9\u6cd5\u7ed1\u5b9a\u4e86\u57fa\u7840\u7c7b\u578b\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 T \u6216 *T \u9009\u62e9\u5668\u8bbf\u95ee\u65b9\u6cd5\u540d\u3002 \u975e\u7a7a\u7684\u63a5\u6536\u8005\u6807\u8bc6\u7b26\u5728\u65b9\u6cd5\u7b7e\u540d\u4e2d\u5fc5\u987b\u662f\u552f\u4e00\u7684\u3002\u5982\u679c\u63a5\u6536\u8005\u7684\u503c\u6ca1\u6709\u5728\u8be5\u65b9\u6cd5\u4e2d\u4f7f\u7528\uff0c\u90a3\u4e48\u63a5\u6536\u8005\u6807\u8bc6\u7b26\u53ef\u4ee5\u7701\u7565\u3002\u51fd\u6570\u548c\u65b9\u6cd5\u7684\u53c2\u6570\u4e5f\u662f\u4e00\u6837\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u57fa\u7840\u7c7b\u578b\u3002\u7ed1\u5b9a\u7684\u975e\u7a7a\u7684\u65b9\u6cd5\u540d\u5fc5\u987b\u662f\u552f\u4e00\u7684\u3002\u5982\u679c\u57fa\u7840\u7c7b\u578b\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u975e\u7a7a\u7684\u65b9\u6cd5\u540d\u4e5f\u4e0d\u80fd\u4e0e\u7ed3\u6784\u4f53\u5b57\u6bb5\u91cd\u590d\u3002 \u7ed9\u5b9a\u4e00\u4e2a Point \u7c7b\u578b\u3002\u58f0\u660e\uff1a func (p *Point) Length() float64 { return math.Sqrt(p.x * p.x + p.y * p.y) } func (p *Point) Scale(factor float64) { p.x *= factor p.y *= factor } \u4e3a\u7c7b\u578b *Point \u7ed1\u5b9a\u4e862\u4e2a\u65b9\u6cd5 Length \u548c Scale \u3002 \u65b9\u6cd5\u7684\u7c7b\u578b\u5c31\u662f\u4ee5\u63a5\u6536\u8005\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u51fd\u6570\u7c7b\u578b\uff0c\u4f8b\u5982 Scale \u65b9\u6cd5\uff1a func(p *Point, factor float64) \u4f46\u662f\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u58f0\u660e\u7684\u51fd\u6570\u5e76\u4e0d\u662f\u65b9\u6cd5\u3002 \u8868\u8fbe\u5f0f \u8868\u8fbe\u5f0f\u901a\u8fc7\u9488\u5bf9\u8fd0\u7b97\u5143\u4f7f\u7528\u8fd0\u7b97\u7b26\u548c\u51fd\u6570\u6765\u83b7\u53d6\u8ba1\u7b97\u503c\u3002 \u8fd0\u7b97\u5143 \u8fd0\u7b97\u5143\u4ee3\u8868\u8868\u8fbe\u5f0f\u4e2d\u7684\u4e00\u4e2a\u7b80\u5355\u7684\u3002\u8fd0\u7b97\u5143\u53ef\u4ee5\u662f\u5b57\u9762\u503c\uff0c\u975e\u7a7a\u6807\u8bc6\u7b26\u3002\u6216\u62ec\u53f7\u8868\u8fbe\u5f0f\u3002 \u7a7a\u6807\u8bc6\u7b26\u53ea\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u58f0\u660e\u7684\u5de6\u4fa7\u3002 Operand = Literal | OperandName | MethodExpr | \"(\" Expression \")\" . Literal = BasicLit | CompositeLit | FunctionLit . BasicLit = int_lit | float_lit | imaginary_lit | rune_lit | string_lit . OperandName = identifier | QualifiedIdent. \u4fee\u9970\u6807\u8bc6\u7b26 \u4fee\u9970\u6807\u8bc6\u7b26\u662f\u4ee5\u5305\u540d\u4f5c\u4e3a\u524d\u7f00\u4fee\u9970\u7684\u6807\u8bc6\u7b26\u3002\u5305\u540d\u548c\u6807\u8bc6\u7b26\u90fd\u4e0d\u80fd\u4e3a\u7a7a\u3002 QualifiedIdent = PackageName \".\" identifier . \u4fee\u9970\u6807\u8bc6\u7b26\u53ef\u4ee5\u7528\u6765\u8bbf\u95ee\u4e0d\u540c\u5305\uff08\u9700\u8981\u5148\u5bfc\u5165\uff09\u4e2d\u7684\u6807\u8bc6\u7b26\u3002\u6807\u8bc6\u7b26\u5fc5\u987b\u662f\u5bfc\u51fa\u7684\u5e76\u5728\u5305\u7ea7\u4ee3\u7801\u5757\u58f0\u660e\u624d\u80fd\u591f\u88ab\u8bbf\u95ee\u3002 math.Sin // \u8868\u793a math \u5305\u4e2d\u7684 Sin \u51fd\u6570 \u590d\u5408\u5b57\u9762\u503c \u590d\u5408\u5b57\u9762\u503c\u80fd\u4e3a\u7ed3\u6784\u4f53\u3001\u6570\u7ec4\u3001\u5207\u7247\u548c map \u521d\u59cb\u5316\u503c\u3002\u5b83\u6bcf\u6b21\u53ea\u80fd\u521b\u5efa\u4e00\u4e2a\u503c\u3002\u5b57\u9762\u503c\u7531\u4e00\u4e2a\u5b57\u9762\u503c\u7c7b\u578b\u548c\u4f7f\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u5143\u7d20\u5217\u8868\u7ec4\u6210\u3002\u5143\u7d20\u524d\u4e5f\u53ef\u4ee5\u58f0\u660e\u5143\u7d20\u5bf9\u5e94\u7684\u952e\u3002 CompositeLit = LiteralType LiteralValue . LiteralType = StructType | ArrayType | \"[\" \"...\" \"]\" ElementType | SliceType | MapType | TypeName . LiteralValue = \"{\" [ ElementList [ \",\" ] ] \"}\" . ElementList = KeyedElement { \",\" KeyedElement } . KeyedElement = [ Key \":\" ] Element . Key = FieldName | Expression | LiteralValue . FieldName = identifier . Element = Expression | LiteralValue . \u5b57\u9762\u503c\u7c7b\u578b\u7684\u5e95\u5c42\u7c7b\u578b\u5fc5\u987b\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u6570\u7ec4\uff0c\u5207\u7247\u6216 map \u7c7b\u578b\uff08\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7c7b\u578b\u540d\u5c31\u4f1a\u5f3a\u5236\u6267\u884c\u8fd9\u4e2a\u7ea6\u675f\uff09\u3002\u5143\u7d20\u7684\u7c7b\u578b\u548c\u952e\u90fd\u5fc5\u987b\u80fd\u591f\u5206\u914d\u7ed9\u76f8\u5e94\u7684\u5b57\u6bb5\u7684\u5143\u7d20\u548c\u952e\u7c7b\u578b\uff1b\u6ca1\u6709\u989d\u5916\u7684\u7c7b\u578b\u8f6c\u6362\u3002\u952e\u53ef\u4ee5\u8868\u793a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u540d\uff0c\u5207\u7247\u548c\u6570\u7ec4\u7684\u7d22\u5f15\uff0cmap \u7c7b\u578b\u7684\u952e\u3002\u5bf9\u4e8e map \u5b57\u9762\u503c\uff0c\u6240\u6709\u7684\u5143\u7d20\u90fd\u5fc5\u987b\u6709\u952e\u3002\u5982\u679c\u76f8\u540c\u5b57\u6bb5\u540d\u6216\u5e38\u91cf\u503c\u7684\u952e\u5bf9\u5e94\u591a\u4e2a\u5143\u7d20\u5c31\u4f1a\u62a5\u9519\u3002\u5982\u679c map \u7c7b\u578b\u7684\u952e\u4e3a\u975e\u5e38\u91cf\u7c7b\u578b\uff0c\u8bf7\u770b\u6c42\u503c\u987a\u5e8f\u7ae0\u8282\u3002 \u7ed3\u6784\u4f53\u5b57\u9762\u503c\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a \u5728\u7ed3\u6784\u4f53\u4e2d\uff0c\u952e\u5fc5\u987b\u662f\u5b83\u7684\u5b57\u6bb5\u540d\u3002 \u4e0d\u5305\u542b\u4efb\u4f55\u952e\u7684\u5143\u7d20\u5217\u8868\u7684\u987a\u5e8f\u9700\u8981\u4e0e\u7ed3\u6784\u4f53\u5b57\u6bb5\u7684\u58f0\u660e\u987a\u5e8f\u76f8\u540c\u3002 \u5982\u679c\u4e00\u4e2a\u5143\u7d20\u6307\u5b9a\u4e86\u952e\uff0c\u90a3\u4e48\u6240\u6709\u7684\u5143\u7d20\u90fd\u5fc5\u987b\u6307\u5b9a\u952e\u3002 \u5305\u542b\u952e\u7684\u5143\u7d20\u5217\u8868\u4e0d\u9700\u8981\u6307\u5b9a\u7ed3\u6784\u4f53\u7684\u6bcf\u4e2a\u5b57\u5b57\u6bb5\uff0c\u7f3a\u7701\u5b57\u6bb5\u4f1a\u4f7f\u7528\u5b57\u6bb5\u7c7b\u578b\u7684\u96f6\u503c\u3002 \u5b57\u9762\u503c\u53ef\u4ee5\u4e0d\u6307\u5b9a\u5143\u7d20\uff1b\u8fd9\u6837\u7684\u5b57\u9762\u503c\u7b49\u4e8e\u8be5\u7c7b\u578b\u7684\u96f6\u503c\u3002 \u6307\u5b9a\u975e\u672c\u5305\u7684\u975e\u5bfc\u51fa\u5b57\u6bb5\u4f1a\u62a5\u9519\u3002 \u7ed9\u5b9a\u58f0\u660e\uff1a type Point3D struct { x, y, z float64 } type Line struct { p, q Point3D } \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u5199\u6cd5\uff1a origin := Point3D{} // Point3D \u7684\u96f6\u503c line := Line{origin, Point3D{y: -4, z: 12.3}} // line.q.x \u7684\u96f6\u503c \u6570\u7ec4\u548c\u5207\u7247\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a \u6bcf\u4e2a\u5143\u7d20\u90fd\u5173\u8054\u4e00\u4e2a\u6570\u5b57\u7d22\u5f15\u6807\u8bb0\u5143\u7d20\u518d\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u3002 \u7ed9\u5143\u7d20\u6307\u5b9a\u7684\u952e\u4f1a\u4f5c\u4e3a\u5b83\u7684\u7d22\u5f15\u3002\u952e\u5fc5\u987b\u662f\u80fd\u591f\u8868\u793a\u975e\u8d1f\u7684 int \u7c7b\u578b\u503c\u7684\u5e38\u91cf\uff1b\u5982\u679c\u662f\u6307\u5b9a\u7c7b\u578b\u7684\u5e38\u91cf\uff0c\u90a3\u4e48\u5e38\u91cf\u5fc5\u987b\u662f\u6574\u578b\u3002 \u5143\u7d20\u6ca1\u6709\u6307\u5b9a\u952e\u65f6\u4f1a\u4f7f\u7528\u4e4b\u524d\u7684\u7d22\u5f15\u52a0\u4e00\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u5143\u7d20\u6ca1\u6709\u6307\u5b9a\u952e\uff0c\u5b83\u7684\u7d22\u5f15\u4e3a\u96f6\u3002 \u5bf9\u590d\u5408\u5b57\u9762\u503c\u53d6\u5740\u4f1a\u751f\u6210\u6307\u5411\u7531\u5b57\u9762\u91cf\u521d\u59cb\u5316\u7684\u53d8\u91cf\u7684\u6307\u9488\u3002 var pointer *Point3D = &Point3D{y: 1000} \u6570\u7ec4\u5b57\u9762\u503c\u9700\u8981\u5728\u7c7b\u578b\u4e2d\u6307\u5b9a\u6570\u7ec4\u7684\u957f\u5ea6\u3002\u5982\u679c\u63d0\u4f9b\u7684\u5143\u7d20\u5c11\u4e8e\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u7f3a\u5c11\u5143\u7d20\u7684\u4f4d\u7f6e\u5c06\u4f1a\u4f7f\u7528\u5143\u7d20\u7c7b\u578b\u7684\u96f6\u503c\u66ff\u4ee3\u3002\u5982\u679c\u7d22\u5f15\u8d85\u8fc7\u6570\u7ec4\u7684\u957f\u5ea6\u4f1a\u62a5\u9519\u3002 \u2026 \u8868\u793a\u6570\u7ec4\u7684\u957f\u5ea6\u7b49\u4e8e\u6700\u5927\u5143\u7d20\u7d22\u5f15\u52a0\u4e00\u3002 buffer := [10]string{} // len(buffer) == 10 intSet := [6]int{1, 2, 3, 5} // len(intSet) == 6 days := [...]string{\"Sat\", \"Sun\"} // len(days) == 2 \u5207\u7247\u5b57\u9762\u503c\u5e95\u5c42\u5176\u5b9e\u5c31\u662f\u6570\u7ec4\u5b57\u9762\u503c\u3002\u56e0\u6b64\u5b83\u7684\u957f\u5ea6\u548c\u5bb9\u91cf\u90fd\u662f\u5143\u7d20\u7684\u6700\u5927\u7d22\u5f15\u52a0\u4e00\u3002\u5207\u7247\u5b57\u9762\u503c\u7684\u683c\u5f0f\u4e3a\uff1a []T{x1, x2, \u2026 xn} \u53ef\u4ee5\u5728\u6570\u7ec4\u4e0a\u8fdb\u884c\u5207\u7247\u64cd\u4f5c\u4ece\u800c\u83b7\u5f97\u5207\u7247\uff1a tmp := [n]T{x1, x2, \u2026 xn} tmp[0 : n] \u5728\u4e00\u4e2a\u6570\u7ec4\u3001\u5207\u7247\u6216 map \u7c7b\u578b T \u4e2d\u3002\u5143\u7d20\u6216\u8005 map \u7684\u952e\u53ef\u80fd\u6709\u81ea\u5df1\u7684\u5b57\u9762\u503c\u7c7b\u578b\uff0c\u5982\u679c\u5b57\u9762\u503c\u7c7b\u578b\u548c\u5143\u7d20\u6216\u8005\u952e\u7c7b\u578b\u76f8\u540c\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u7c7b\u578b\u6807\u8bc6\u7b26\u53ef\u4ee5\u7701\u7565\u3002\u4e0e\u4e4b\u7c7b\u4f3c\uff0c\u5982\u679c\u5143\u7d20\u6216\u952e\u7684\u7c7b\u578b\u4e3a *T \uff0c\u90a3\u4e48\u5b83\u4eec\u7684 &T \u4e5f\u53ef\u4ee5\u7701\u7565\u3002 [...]Point{{1.5, -3.5}, {0, 0}} // same as [...]Point{Point{1.5, -3.5}, Point{0, 0}} [][]int{{1, 2, 3}, {4, 5}} // same as [][]int{[]int{1, 2, 3}, []int{4, 5}} [][]Point{{{0, 1}, {1, 2}}} // same as [][]Point{[]Point{Point{0, 1}, Point{1, 2}}} map[string]Point{\"orig\": {0, 0}} // same as map[string]Point{\"orig\": Point{0, 0}} map[Point]string{{0, 0}: \"orig\"} // same as map[Point]string{Point{0, 0}: \"orig\"} type PPoint *Point [2]*Point{{1.5, -3.5}, {}} // same as [2]*Point{&Point{1.5, -3.5}, &Point{}} [2]PPoint{{1.5, -3.5}, {}} // same as [2]PPoint{PPoint(&Point{1.5, -3.5}), PPoint(&Point{})} \u5f53\u590d\u5408\u5b57\u9762\u503c\u4f7f\u7528\u5b57\u9762\u503c\u7c7b\u578b\u7684\u7c7b\u578b\u540d\u683c\u5f0f\u51fa\u73b0\u5728 if \u3001 for \u6216 switch \u8bed\u53e5\u7684\u5173\u952e\u5b57\u548c\u62ec\u53f7\u4e4b\u95f4\u5e76\u4e14\u6ca1\u6709\u4f7f\u7528\u5706\u62ec\u53f7\u5305\u88f9\u7684\u65f6\u5019\uff0c\u4f1a\u5f15\u53d1\u8bed\u6cd5\u6b67\u4e49\u3002\u5728\u8fd9\u79cd\u7279\u6b8a\u7684\u60c5\u51b5\u4e0b\u5b57\u9762\u503c\u7684\u62ec\u53f7\u4f1a\u88ab\u8ba4\u4e3a\u662f\u8bed\u53e5\u7684\u4ee3\u7801\u5757\u3002\u4e3a\u4e86\u907f\u514d\u6b67\u4e49\uff0c\u590d\u5408\u5b57\u9762\u503c\u5fc5\u987b\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u3002 if x == (T{a,b,c}[i]) { \u2026 } if (x == T{a,b,c}[i]) { \u2026 } \u4e0b\u9762\u662f\u5408\u6cd5\u7684\u6570\u7ec4\u3001\u5207\u7247\u548c map \u7684\u4f8b\u5b50\uff1a // list of prime numbers primes := []int{2, 3, 5, 7, 9, 2147483647} // vowels[ch] is true if ch is a vowel vowels := [128]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true, 'y': true} // the array [10]float32{-1, 0, 0, 0, -0.1, -0.1, 0, 0, 0, -1} filter := [10]float32{-1, 4: -0.1, -0.1, 9: -1} // frequencies in Hz for equal-tempered scale (A4 = 440Hz) noteFrequency := map[string]float32{ \"C0\": 16.35, \"D0\": 18.35, \"E0\": 20.60, \"F0\": 21.83, \"G0\": 24.50, \"A0\": 27.50, \"B0\": 30.87, } \u51fd\u6570\u5b57\u9762\u503c \u51fd\u6570\u5b57\u9762\u503c\u8868\u793a\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u3002 FunctionLit = \"func\" Function . func(a, b int, z float64) bool { return a*b < int(z) } \u51fd\u6570\u5b57\u9762\u503c\u80fd\u5206\u914d\u7ed9\u53d8\u91cf\u6216\u76f4\u63a5\u8c03\u7528\u3002 \u51fd\u6570\u5b57\u9762\u503c\u662f\u4e00\u4e2a\u95ed\u5305\u3002\u5b83\u53ef\u4ee5\u5f15\u7528\u5305\u88f9\u51fd\u6570\u4e2d\u7684\u53d8\u91cf\uff0c\u8fd9\u4e9b\u53d8\u91cf\u5728\u5305\u88f9\u51fd\u6570\u548c\u51fd\u6570\u5b57\u9762\u503c\u4e4b\u95f4\u662f\u5171\u4eab\u7684\u3002\u5e76\u4e14\u5b83\u4f1a\u4e00\u76f4\u5b58\u5728\u76f4\u5230\u751f\u547d\u5468\u671f\u7ed3\u675f\u3002 \u4e3b\u8981\u8868\u8fbe\u5f0f \u4e3b\u8981\u8868\u8fbe\u5f0f\u662f\u4e00\u5143\u548c\u4e8c\u5143\u8868\u8fbe\u5f0f\u7684\u8fd0\u7b97\u5143\u3002 PrimaryExpr = Operand | Conversion | PrimaryExpr Selector | PrimaryExpr Index | PrimaryExpr Slice | PrimaryExpr TypeAssertion | PrimaryExpr Arguments . Selector = \".\" identifier . Index = \"[\" Expression \"]\" . Slice = \"[\" [ Expression ] \":\" [ Expression ] \"]\" | \"[\" [ Expression ] \":\" Expression \":\" Expression \"]\" . TypeAssertion = \".\" \"(\" Type \")\" . Arguments = \"(\" [ ( ExpressionList | Type [ \",\" ExpressionList ] ) [ \"...\" ] [ \",\" ] ] \")\" . x 2 (s + \".txt\") f(3.1415, true) Point{1, 2} m[\"foo\"] s[i : j + 1] obj.color f.p[i].x() \u9009\u62e9\u5668 \u5bf9\u4e8e\u4e00\u4e2a x \u4e0d\u662f\u5305\u540d\u7684\u4e3b\u8981\u8868\u8fbe\u5f0f\uff0c\u9009\u62e9\u5668\u8868\u8fbe\u5f0f\uff1a x.f \u8868\u793a x \u7684\u5b57\u6bb5\u6216\u65b9\u6cd5 f\uff08\u6709\u65f6\u4e3a *x\uff09\u3002\u6807\u8bc6\u7b26 f \u53eb\u505a\uff08\u5b57\u6bb5/\u65b9\u6cd5\uff09\u9009\u62e9\u5668\u3002\u5b83\u4e0d\u80fd\u662f\u7a7a\u6807\u8bc6\u7b26\u3002\u9009\u62e9\u5668\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u5c31\u662f f \u7684\u7c7b\u578b\u3002\u5982\u679c x \u662f\u5305\u540d\u3002\u8bf7\u53c2\u8003\u4fee\u9970\u6807\u8bc6\u7b26\u3002 \u9009\u62e9\u5668 f \u53ef\u4ee5\u8868\u793a\u7c7b\u578b T \u7684\u65b9\u6cd5\u6216\u5b57\u6bb5 f\u3002\u4e5f\u53ef\u4ee5\u8868\u793a\u7c7b\u578b T \u7684\u5d4c\u5165\u65b9\u6cd5\u6216\u5b57\u6bb5 f\u3002\u8bbf\u95ee f \u6240\u9700\u7a7f\u8fc7\u7684\u5d4c\u5957\u5c42\u6570\u53eb\u505a\u5b83\u5728\u7c7b\u578b T \u4e2d\u7684\u6df1\u5ea6\u3002\u58f0\u660e\u5728 T \u4e2d\u7684\u5b57\u6bb5\u6216\u65b9\u6cd5\u7684\u6df1\u5ea6\u4e3a 0\u3002\u58f0\u660e\u5728 T \u7684\u5d4c\u5165\u5b57\u6bb5 A \u4e2d\u7684\u65b9\u6cd5\u6216\u5b57\u6bb5\u7684\u6df1\u5ea6\u7b49\u4e8e f \u5728 A \u4e2d\u7684\u6df1\u5ea6\u52a0\u4e00\u3002 \u9009\u62e9\u5668\u9075\u5faa\u4ee5\u4e0b\u539f\u5219\uff1a \u5bf9\u4e8e\u975e\u6307\u9488/\u63a5\u53e3\u7c7b\u578b T/*T \u7684\u503c x\uff0cx.f \u8868\u793a\u7b2c\u4e00\u5c42\u7684\u65b9\u6cd5/\u5b57\u6bb5\u3002\u5982\u679c\u5728\u7b2c\u4e00\u5c42\u6ca1\u6709\u5bf9\u5e94\u7684 f\uff0c\u9009\u62e9\u5668\u8868\u8fbe\u5f0f\u5c31\u662f\u975e\u6cd5\u7684\u3002 \u5bf9\u4e8e\u63a5\u53e3\u7c7b\u578b I \u7684\u503c x\uff0c x.f \u8868\u793a\u52a8\u6001\u503c x \u7684\u65b9\u6cd5\u540d f\u3002\u5982\u679c\u63a5\u53e3 I \u7684\u65b9\u6cd5\u96c6\u4e2d\u6ca1\u6709 f \u65b9\u6cd5\uff0c\u9009\u62e9\u5668\u5c31\u662f\u975e\u6cd5\u7684\u3002 \u4f5c\u4e3a\u4f8b\u5916\uff0c\u5982\u679c x \u662f\u4e00\u4e2a\u6307\u9488\u7c7b\u578b\u5e76\u4e14 ( x).f \u662f\u5408\u6cd5\u7684\u9009\u62e9\u5668\u8868\u8fbe\u5f0f\uff08\u53ea\u80fd\u8868\u793a\u5b57\u6bb5\uff0c\u4e0d\u80fd\u8868\u793a\u65b9\u6cd5\uff09\u3002\u90a3\u4e48( x).f \u53ef\u4ee5\u7b80\u5199\u6210 x.f\u3002 \u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0cx.f \u90fd\u662f\u975e\u6cd5\u7684\u3002 \u5982\u679cx\u662f\u6307\u9488\u7c7b\u578b\uff0c\u5e76\u4e14\u503c\u4e3a nil\uff0c\u5176\u4e2d f \u4e3a\u7ed3\u6784\u4f53\u5b57\u6bb5\u3002\u8d4b\u503c\u6216\u53d6\u503c x.f \u4f1a\u5f15\u8d77\u8fd0\u884c\u65f6\u6050\u614c\u3002 \u5982\u679cx\u662f\u63a5\u53e3\u7c7b\u578b\uff0c\u5e76\u4e14\u503c\u4e3a nil\u3002\u8c03\u7528 x.f \u4f1a\u5f15\u8d77\u8fd0\u884c\u65f6\u6050\u614c\u3002 \u4f8b\u5982\u7ed9\u5b9a\u58f0\u660e\uff1a type T0 struct { x int } func (*T0) M0() type T1 struct { y int } func (T1) M1() type T2 struct { z int T1 *T0 } func (*T2) M2() type Q *T2 var t T2 // with t.T0 != nil var p *T2 // with p != nil and (*p).T0 != nil var q Q = p \u7ed3\u679c\uff1a t.z // t.z t.y // t.T1.y t.x // (*t.T0).x p.z // (*p).z p.y // (*p).T1.y p.x // (*(*p).T0).x q.x // (*(*q).T0).x (*q).x is a valid field selector p.M0() // ((*p).T0).M0() M0 expects *T0 receiver p.M1() // ((*p).T1).M1() M1 expects T1 receiver p.M2() // p.M2() M2 expects *T2 receiver t.M2() // (&t).M2() M2 expects *T2 receiver, see section on Calls \u4f46\u662f\u4e0b\u9762\u8fd9\u79cd\u65b9\u5f0f\u662f\u4e0d\u5408\u6cd5\u7684\uff1a q.M0() // (*q).M0 is valid but not a field selector \u65b9\u6cd5\u8868\u8fbe\u5f0f \u5982\u679c M \u5728\u7c7b\u578b T \u7684\u65b9\u6cd5\u96c6\u4e2d\u3002\u90a3\u4e48 T.M \u5c31\u662f\u80fd\u591f\u6b63\u5e38\u8c03\u7528\u7684\u51fd\u6570\u3002\u4f7f\u7528\u4e0e M \u76f8\u540c\u7684\u53c2\u6570\u53ea\u662f\u5728\u53c2\u6570\u5217\u8868\u7684\u6700\u524d\u9762\u589e\u52a0\u4e86\u63a5\u6536\u8005\u53c2\u6570\u3002 MethodExpr = ReceiverType \".\" MethodName . ReceiverType = TypeName | \"(\" \"*\" TypeName \")\" | \"(\" ReceiverType \")\" . \u5047\u8bbe\u7ed3\u6784\u4f53 T \u6709\u4e24\u4e2a\u65b9\u6cd5\u3002\u63a5\u6536\u8005\u7c7b\u578b\u4e3a T \u7684 Mv \u65b9\u6cd5\u548c\u63a5\u6536\u8005\u7c7b\u578b\u4e3a *T \u7684 Mp \u65b9\u6cd5\uff1a type T struct { a int } func (tv T) Mv(a int) int { return 0 } // value receiver func (tp *T) Mp(f float32) float32 { return 1 } // pointer receiver var t T \u8868\u8fbe\u5f0f T.Mv \u5c06\u4f1a\u751f\u6210\u4e00\u4e2a\u7b49\u4ef7\u4e8e Mv \u65b9\u6cd5\u53ea\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u663e\u5f0f\u58f0\u660e\u63a5\u53d7\u8005\u7684\u51fd\u6570\u3002\u5b83\u7684\u7b7e\u540d\u4e3a\uff1a func(tv T, a int) int \u8fd9\u4e2a\u51fd\u6570\u80fd\u591f\u901a\u8fc7\u63a5\u6536\u8005\u6b63\u5e38\u8c03\u7528\uff0c\u4ee5\u4e0b5\u79cd\u65b9\u5f0f\u662f\u7b49\u4ef7\u7684\uff1a t.Mv(7) T.Mv(t, 7) (T).Mv(t, 7) f1 := T.Mv; f1(t, 7) f2 := (T).Mv; f2(t, 7) \u4e0e\u4e4b\u7c7b\u4f3c\uff1a (*T).Mp \u751f\u6210\u8868\u793a Mp \u7684\u51fd\u6570\u7b7e\u540d\uff1a func(tp *T, f float32) float32 \u5bf9\u4e8e\u4e00\u4e2a\u628a\u503c\u4f5c\u4e3a\u63a5\u6536\u8005\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u663e\u5f0f\u7684\u4ece\u6307\u9488\u63a5\u6536\u8005\u83b7\u5f97\u51fd\u6570\uff1a (*T).Mv \u751f\u6210\u8868\u793a Mv \u7684\u51fd\u6570\u7b7e\u540d\uff1a func(tv *T, a int) int \u8fd9\u6837\u7684\u51fd\u6570\u4f1a\u901a\u8fc7\u63a5\u6536\u8005\u95f4\u63a5\u7684\u521b\u5efa\u4e00\u4e2a\u503c\u4f5c\u4e3a\u63a5\u6536\u8005\u4f20\u5165\u5e95\u5c42\u65b9\u6cd5\u4e2d\u3002\u65b9\u6cd5\u5185\u4e0d\u80fd\u4fee\u6539\u63a5\u6536\u8005\u7684\u503c\uff0c\u56e0\u4e3a\u5b83\u7684\u5730\u5740\u662f\u5728\u51fd\u6570\u7684\u8c03\u7528\u6808\u91cc\u9762\u3002 \u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\u3002\u628a\u503c\u4f5c\u4e3a\u63a5\u6536\u8005\u51fd\u6570\u5f53\u505a\u6307\u9488\u4f5c\u4e3a\u63a5\u6536\u8005\u7684\u65b9\u6cd5\u662f\u975e\u6cd5\u7684\uff0c\u56e0\u4e3a\u6307\u9488\u63a5\u6536\u8005\u7684\u65b9\u6cd5\u96c6\u4e2d\u4e0d\u5305\u542b\u503c\u7c7b\u578b\u7684\u65b9\u6cd5\u96c6\u3002 \u901a\u8fc7\u51fd\u6570\u8c03\u7528\u8bed\u6cd5\u4ece\u65b9\u6cd5\u4e2d\u83b7\u53d6\u51fd\u6570\u7684\u503c\u3002\u63a5\u6536\u8005\u4f5c\u4e3a\u8c03\u7528\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002\u7ed9\u5b9a f :=T.Mv \uff0cf \u4f5c\u4e3a f(t,7) \u8fdb\u884c\u8c03\u7528\u800c\u4e0d\u662f t.f(7) \u3002\u60f3\u521b\u5efa\u4e00\u4e2a\u7ed1\u5b9a\u63a5\u6536\u8005\u7684\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u5b57\u9762\u503c\u6216\u8005\u65b9\u6cd5\u503c\u3002 \u5728\u63a5\u53e3\u7c7b\u578b\u4e2d\u5b9a\u4e49\u51fd\u6570\u83b7\u53d6\u51fd\u6570\u503c\u662f\u5408\u6cd5\u7684\u3002\u6700\u7ec8\u7684\u51fd\u6570\u8c03\u7528\u4f1a\u4f7f\u7528\u63a5\u53e3\u7c7b\u578b\u4f5c\u4e3a\u63a5\u6536\u8005\u3002 \u65b9\u6cd5\u503c \u5982\u679c\u8868\u8fbe\u5f0f x \u62e5\u6709\u9759\u6001\u7c7b\u578b T \u5e76\u4e14 M \u5728\u7c7b\u578b T \u7684\u65b9\u6cd5\u96c6\u4e2d\u3002x.M \u53eb\u505a\u65b9\u6cd5\u503c\u3002\u65b9\u6cd5\u503c x.M \u662f\u4e00\u4e2a\u51fd\u6570\u503c\uff0c\u8fd9\u4e2a\u51fd\u6570\u548c x.M \u62e5\u6709\u76f8\u540c\u7684\u53c2\u6570\u5217\u8868\u3002\u8868\u8fbe\u5f0f x \u5728\u8ba1\u7b97\u65b9\u6cd5\u503c\u65f6\u4f1a\u88ab\u4fdd\u5b58\u548c\u8ba1\u7b97\uff0c\u8fd9\u4e2a\u62f7\u8d1d\u7684\u526f\u672c\u4f1a\u4f5c\u4e3a\u4efb\u4f55\u63a5\u4e0b\u6765\u8c03\u7528\u7684\u63a5\u6536\u8005\u3002 \u7c7b\u578b T \u53ef\u80fd\u662f\u63a5\u53e3\u7c7b\u578b\u4e5f\u53ef\u80fd\u4e0d\u662f\u63a5\u53e3\u7c7b\u578b\u3002 \u4e0e\u65b9\u6cd5\u8868\u8fbe\u5f0f\u4e2d\u8bb2\u8fc7\u7684\u4e00\u6837\uff0c\u5047\u8bbe\u7c7b\u578b T \u6709\u4e24\u4e2a\u65b9\u6cd5\uff1a\u63a5\u6536\u8005\u7c7b\u578b\u4e3a T \u7684 Mv \u548c\u63a5\u53d7\u8005\u7c7b\u578b\u4e3a *T \u7684 Mp \uff1a type T struct { a int } func (tv T) Mv(a int) int { return 0 } // value receiver func (tp *T) Mp(f float32) float32 { return 1 } // pointer receiver var t T var pt *T func makeT() T \u8868\u8fbe\u5f0f\uff1a t.Mv \u751f\u6210\u4e00\u4e2a\u7c7b\u578b\u7684\u51fd\u6570\u503c\uff1a func(int) int \u4ee5\u4e0b\u4e24\u79cd\u8c03\u7528\u662f\u7b49\u4ef7\u7684\uff1a t.Mv(7) f := t.Mv; f(7) \u76f8\u4f3c\u7684\uff0c\u8868\u8fbe\u5f0f\uff1a pt.Mp \u751f\u6210\u4e00\u4e2a\u7c7b\u578b\u7684\u51fd\u6570\u503c\uff1a func(float32) float32 \u4e0e\u9009\u62e9\u5668\u76f8\u540c\uff0c\u4f7f\u7528\u6307\u9488\u8c03\u7528\u4ee5\u503c\u4f5c\u4e3a\u63a5\u6536\u8005\u7684\u975e\u63a5\u53e3\u65b9\u6cd5\u4f1a\u81ea\u52a8\u5c06\u6307\u9488\u89e3\u5f15\u7528\uff1a pt.Mv \u7b49\u4ef7\u4e8e (*pt).Mv \u3002 \u4e0e\u65b9\u6cd5\u8c03\u7528\u76f8\u540c\uff0c\u4f7f\u7528\u503c\u8c03\u7528\u4ee5\u6307\u9488\u4f5c\u4e3a\u63a5\u6536\u8005\u7684\u975e\u63a5\u53e3\u65b9\u6cd5\u4f1a\u81ea\u52a8\u5bf9\u503c\u53d6\u5740\uff1a pt.Mv \u7b49\u4ef7\u4e8e (&pt).Mv \u3002 f := t.Mv; f(7) // like t.Mv(7) f := pt.Mp; f(7) // like pt.Mp(7) f := pt.Mv; f(7) // like (*pt).Mv(7) f := t.Mp; f(7) // like (&t).Mp(7) f := makeT().Mp // invalid: result of makeT() is not addressable \u5c3d\u7ba1\u4e0a\u9762\u4f7f\u7528\u7684\u90fd\u662f\u975e\u63a5\u53e3\u7c7b\u578b\u7684\u4f8b\u5b50\uff0c\u4e0d\u8fc7\u5bf9\u4e8e\u63a5\u53e3\u7c7b\u578b\u540c\u6837\u9002\u7528\u3002 var i interface { M(int) } = myVal f := i.M; f(7) // like i.M(7) index\u8868\u8fbe\u5f0f \u4e3b\u8981\u8868\u8fbe\u5f0f\u683c\u5f0f\uff1a a[x] \u53ef\u4ee5\u8868\u793a\u6570\u7ec4\u5143\u7d20\u3001\u6570\u7ec4\u7684\u6307\u9488\u3001\u5207\u7247\u3001\u5b57\u7b26\u4e32\u6216 map \u7c7b\u578b a \u7d22\u5f15 x \u5bf9\u5e94\u7684\u503c\u3002x \u79f0\u4f5c\u7d22\u5f15\u6216\u8005 map \u7684\u952e\u3002\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a \u5982\u679ca\u4e0d\u662f map \u7c7b\u578b\uff1a \u7d22\u5f15 x \u5fc5\u987b\u662f\u6574\u578b\u6216\u65e0\u7c7b\u578b\u5e38\u91cf\u3002 \u5e38\u91cf\u7d22\u5f15\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u4e14\u53ef\u4ee5\u4f7f\u7528 int \u7c7b\u578b\u8868\u793a\u3002 \u65e0\u7c7b\u578b\u7684\u5e38\u91cf\u7d22\u5f15\u4f1a\u4f5c\u4e3a int \u578b\u7684\u503c\u3002 \u7d22\u5f15 x \u7684\u8303\u56f4\u5728 0<=x<len(a) \u5185\uff0c\u5426\u5219\u5c31\u662f\u8d8a\u754c\u3002 \u5bf9\u4e8e\u6570\u7ec4\u7c7b\u578b A\uff1a \u5e38\u91cf\u7d22\u5f15\u5fc5\u987b\u5728\u5408\u6cd5\u8303\u56f4\u5185\u3002 \u5982\u679c x \u5728\u8fd0\u884c\u65f6\u8d8a\u754c\u4f1a\u5f15\u8d77\u8fd0\u884c\u65f6\u6050\u614c\u3002 a[x] \u8868\u793a\u6570\u7ec4\u5728\u7d22\u5f15 x \u5904\u7684\u5143\u7d20\u3002 a[x] \u7684\u7c7b\u578b\u5c31\u662f A \u7684\u5143\u7d20\u7c7b\u578b\u3002 \u5bf9\u4e8e\u6570\u7ec4\u7684\u6307\u9488\u7c7b\u578b\uff1a \u53ef\u4ee5\u4f7f\u7528 a[x] \u8868\u793a (*a)[x] \u3002 \u5bf9\u4e8e\u5207\u7247\u7c7b\u578b S\uff1a \u5982\u679c x \u5728\u8fd0\u884c\u65f6\u8d8a\u754c\u4f1a\u5f15\u8d77\u8fd0\u884c\u65f6\u6050\u614c\u3002 a[x] \u8868\u793a\u5207\u7247\u5728\u7d22\u5f15 x \u5904\u7684\u5143\u7d20\u3002 a[x] \u7684\u7c7b\u578b\u5c31\u662f S \u7684\u5143\u7d20\u7c7b\u578b\u3002 \u5bf9\u4e8e\u5b57\u7b26\u4e32\u7c7b\u578b\uff1a \u5982\u679c\u5b57\u7b26\u4e32 a \u4e3a\u5e38\u91cf\uff0c\u90a3\u4e48\u5e38\u91cf\u7d22\u5f15\u5fc5\u987b\u5728\u5408\u6cd5\u8303\u56f4\u5185\u3002 \u5982\u679c x \u5728\u8fd0\u884c\u65f6\u8d8a\u754c\u4f1a\u5f15\u8d77\u8fd0\u884c\u65f6\u6050\u614c\u3002 a[x] \u8868\u793a\u7d22\u5f15 x \u5904\u7684\u975e\u5e38\u91cf\u5b57\u8282\uff0c\u5b83\u662fbyte\u7c7b\u578b\u3002 \u4e0d\u80fd\u5bf9 a[x] \u5206\u914d\u503c\u3002 \u5bf9\u4e8e map \u7c7b\u578b M\uff1a \u5fc5\u987b\u4fdd\u8bc1 x \u7684\u7c7b\u578b\u80fd\u591f\u7ed9 M \u7684\u952e\u5206\u914d\u503c\u3002 \u5982\u679cmap\u5305\u542b\u952e\u4e3a x \u7684\u503c\uff0ca[x] \u5c31\u662f map \u4e2d\u952e x \u5bf9\u5e94\u7684\u503c\uff0c\u5b83\u7684\u7c7b\u578b\u5c31\u662f M \u7684\u5143\u7d20\u7c7b\u578b\u3002 \u5982\u679c map \u503c\u4e3a nil \u6216\u4e0d\u5305\u542b\u8fd9\u4e2a\u5b9e\u4f53\uff0c\u90a3\u4e48 a[x] \u4e3a M \u5143\u7d20\u7c7b\u578b\u7684\u96f6\u503c\u3002 \u5426\u5219 a[x] \u5c31\u662f\u975e\u6cd5\u7684\u3002 \u57fa\u4e8e map[K]V \u7c7b\u578b a \u7684\u7d22\u5f15\u8868\u8fbe\u5f0f\u53ef\u4ee5\u4f7f\u7528\u7279\u6b8a\u683c\u5f0f\u7684\u8d4b\u503c\u548c\u521d\u59cb\u5316\u8bed\u6cd5\u3002 v, ok = a[x] v, ok := a[x] var v, ok = a[x] \u5b83\u4f1a\u989d\u5916\u751f\u6210\u4e00\u4e2a\u65e0\u7c7b\u578b\u7684\u5e03\u5c14\u503c\u3002\u5982\u679c ok \u662f true\uff0c\u90a3\u4e48\u4ee3\u8868\u5728map\u4e2d\u6709\u8be5\u952e\uff0c\u5982\u679c\u6ca1\u6709 ok \u4e3a false\u3002 \u7ed9\u4e00\u4e2a\u503c\u4e3a nil \u7684 map \u7c7b\u578b\u53d8\u91cf\u8d4b\u503c\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u6050\u614c\u3002 \u5207\u7247\u8868\u8fbe\u5f0f \u5207\u7247\u8868\u8fbe\u5f0f\u53ef\u4ee5\u57fa\u4e8e\u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u3001\u6570\u7ec4\u6307\u9488\u3001\u5207\u7247\u521b\u5efa\u5b57\u7b26\u4e32\u5b50\u4e32\u6216\u5207\u7247\u3002\u5b83\u6709\u4e24\u79cd\u53d8\u4f53\uff0c\u4e00\u79cd\u662f\u7b80\u5355\u7684\u683c\u5f0f\u662f\u6307\u5b9a\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\uff0c\u5b8c\u5168\u683c\u5f0f\u7684\u8bed\u6cd5\u8fd8\u53ef\u4ee5\u6307\u5b9a\u5bb9\u91cf\u3002 ####### \u7b80\u5355\u5207\u7247\u8868\u8fbe\u5f0f \u5bf9\u4e8e\u6570\u7ec4\u3001\u5b57\u7b26\u4e32\u3001\u6307\u9488\u6570\u7ec4\u3001\u5207\u7247 a\uff0c\u4e3b\u8981\u8868\u8fbe\u5f0f\uff1a a[low:high] \u53ef\u4ee5\u6784\u9020\u5b57\u7b26\u4e32\u5b50\u4e32\u6216\u5207\u7247\u3002\u7d22\u5f15 low \u548c high \u51b3\u5b9a\u7ed3\u679c\u5207\u7247\u4e2d\u7684\u5143\u7d20\u3002\u7ed3\u679c\u5207\u7247\u7684\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff0c\u957f\u5ea6\u4e3a high - low \u3002\u4ece\u6570\u7ec4\u5207\u5206\u51fa\u7684\u5207\u7247 s \u62e5\u6709\u7c7b\u578b []int \uff0c\u957f\u5ea6\u4e3a 3 \uff0c\u5bb9\u79ef\u4e3a 4\u3002 a := [5]int{1, 2, 3, 4, 5} s := a[1:4] s[0] == 2 s[1] == 3 s[2] == 4 \u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u7d22\u5f15\u503c\u90fd\u53ef\u4ee5\u7f3a\u7701\u3002\u5f53 low \u7f3a\u7701\u65f6\u9ed8\u8ba4\u4ece 0 \u5f00\u59cb\u3002\u5f53\u7f3a high \u7f3a\u7701\u65f6\u9ed8\u8ba4\u7684\u53d6\u5207\u7247\u7684\u957f\u5ea6\u3002 a[2:] // same as a[2 : len(a)] a[:3] // same as a[0 : 3] a[:] // same as a[0 : len(a)] \u5982\u679c a \u662f\u4e00\u4e2a\u6570\u7ec4\u6307\u9488\uff0c\u90a3\u4e48 a[low:high] \u53ef\u4ee5\u8868\u793a (*a)[low : high] \u3002 \u5bf9\u4e8e\u6570\u7ec4\u6216\u8005\u5b57\u7b26\u4e32\uff0c\u7d22\u5f15\u7684\u8303\u56f4\u662f 0<=low<=high<=len(a) \u3002\u5bf9\u4e8e\u5207\u7247\uff0c\u6700\u5927\u7684\u7d22\u5f15\u503c\u53ef\u4ee5\u4e3a\u5207\u7247\u7684\u5bb9\u91cf\uff0c\u800c\u4e0d\u662f\u5207\u7247\u7684\u957f\u5ea6\u3002\u5e38\u91cf\u7d22\u5f15\u5fc5\u987b\u4e3a\u975e\u8d1f\u6570\uff0c\u4e14\u80fd\u591f\u8f6c\u6362\u6210 int \u7c7b\u578b\u3002\u5bf9\u4e8e\u6570\u7ec4\u6216\u8005\u5e38\u91cf\u5b57\u7b26\u4e32\u3002\u5e38\u91cf\u7d22\u5f15\u503c\u5fc5\u987b\u5728\u5408\u6cd5\u8303\u56f4\u5185\u3002\u5982\u679c2\u4e2a\u7d22\u5f15\u90fd\u662f\u5e38\u91cf\u3002low \u5fc5\u987b\u5c0f\u4e8e high\u3002\u5982\u679c\u7d22\u5f15\u5728\u8fd0\u884c\u65f6\u8bbf\u95ee\u4e86\u975e\u6cd5\u5185\u5b58\uff0c\u7a0b\u5e8f\u4f1a\u53d1\u751f\u8fd0\u884c\u65f6\u6050\u614c\u3002 \u9664\u4e86\u65e0\u7c7b\u578b\u5b57\u7b26\u4e32\uff0c\u5bf9\u4e8e\u5207\u7247\u548c\u5b57\u7b26\u4e32\u7684\u64cd\u4f5c\u7ed3\u679c\u662f\u975e\u5e38\u91cf\u7c7b\u578b\u7684\u503c\uff0c\u5b83\u7684\u7c7b\u578b\u4e0e\u8fd0\u7b97\u5143\u76f8\u540c\u3002\u5982\u679c\u8fd0\u7b97\u5143\u4e3a\u65e0\u7c7b\u578b\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u7ed3\u679c\u7c7b\u578b\u4f1a\u4e3a string\u3002\u5982\u679c\u628a\u6570\u7ec4\u4f5c\u4e3a\u8fd0\u7b97\u5143\uff0c\u5b83\u5fc5\u987b\u662f\u53ef\u5bfb\u5740\u7684\uff0c\u5e76\u4e14\u83b7\u5f97\u7684\u5207\u7247\u548c\u539f\u6570\u7ec4\u5177\u6709\u540c\u4e00\u5143\u7d20\u7c7b\u578b\u3002 \u5982\u679c\u5207\u7247\u8fd0\u7b97\u5143\u4e3a nil\uff0c\u90a3\u4e48\u7ed3\u679c\u4e5f\u662f nil\u3002\u5426\u5219\u7ed3\u679c\u5207\u7247\u4f1a\u548c\u8fd0\u7b97\u5143\u5171\u4eab\u76f8\u540c\u7684\u5e95\u5c42\u65e0\u7c7b\u578b\u6570\u7ec4\u3002 \u5b8c\u5168\u5207\u7247\u8868\u8fbe\u5f0f \u5bf9\u4e8e\u6570\u7ec4\uff0c\u6570\u7ec4\u6307\u9488\u6216\u975e\u5b57\u7b26\u4e32\u5207\u7247\uff0c\u4e3b\u8981\u8868\u8fbe\u5f0f\u4e3a\uff1a a[low : high : max] \u5b83\u4f1a\u6784\u9020\u4e00\u4e2a\u540c\u7c7b\u578b\u5207\u7247\uff0c\u5e76\u5177\u6709\u4e0e\u7b80\u5355\u5207\u7247\u8868\u8fbe\u5f0f\u7684 a[low:high] \u76f8\u540c\u7684\u957f\u5ea6\u548c\u5143\u7d20\u3002\u53e6\u5916\uff0c\u5b83\u8fd8\u53ef\u4ee5\u628a\u5207\u7247\u7684\u5bb9\u91cf\u8bbe\u7f6e\u4e3a max - low \u3002\u8fd9\u65f6\u53ea\u6709\u7b2c\u4e00\u4e2a\u7d22\u5f15\u53ef\u4ee5\u4e3a\u7f3a\u7701\u503c\uff0c\u9ed8\u8ba4\u4e3a\u96f6\u3002\u4ece\u6570\u7ec4\u4e2d\u83b7\u5f97\u5207\u7247\u4ee5\u540e\uff1a a := [5]int{1, 2, 3, 4, 5} t := a[1:3:5] \u5207\u7247 t \u4e3a []int \u7c7b\u578b\uff0c\u957f\u5ea6\u4e3a 2\uff0c\u5bb9\u91cf\u4e3a 4\uff0c\u5e76\u4e14\u5143\u7d20\u4e3a\uff1a t[0] == 2 t[1] == 3 \u548c\u7b80\u5355\u5207\u7247\u8868\u8fbe\u5f0f\u4e00\u6837\uff0c\u5982\u679c a \u662f\u6570\u7ec4\u6307\u9488 \uff0c\u90a3\u4e48 a[low:high:max] \u53ef\u4ee5\u7b80\u5199\u4e3a (*a)[low:high:max] \u3002\u5982\u679c\u5207\u5206\u64cd\u4f5c\u5143\u662f\u6570\u7ec4\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7ec4\u5fc5\u987b\u662f\u53ef\u4ee5\u5bfb\u5740\u7684\u3002 \u5982\u679c\u7d22\u5f15\u5fc5\u987b\u5728 0 <= low <= high <= max <= cap(a) \u8303\u56f4\u5185\u3002\u5e38\u91cf\u7d22\u5f15\u4e0d\u80fd\u662f\u8d1f\u6570\u5e76\u4e14\u80fd\u591f\u4f7f\u7528 int \u7c7b\u578b\u8868\u793a\uff1b\u5bf9\u4e8e\u6570\u7ec4\uff0c\u7d22\u5f15\u5fc5\u987b\u5728\u5408\u6cd5\u8303\u56f4\u5185\u3002\u5982\u679c\u6709\u591a\u4e2a\u7d22\u5f15\u90fd\u662f\u5e38\u91cf\u7684\uff0c\u90a3\u4e48\u6240\u6709\u7d22\u5f15\u90fd\u9700\u8981\u5728\u5408\u6cd5\u8303\u56f4\u5185\u3002\u5982\u679c\u7d22\u5f15\u662f\u975e\u6cd5\u7684\uff0c\u4f1a\u5f15\u8d77\u8fd0\u884c\u65f6\u6050\u614c\u3002 \u7c7b\u578b\u65ad\u8a00 \u5bf9\u4e8e\u63a5\u53e3\u7c7b\u578b x \u548c\u7c7b\u578b T\uff0c\u4e3b\u8981\u8868\u8fbe\u5f0f\uff1a x.(T) \u53ef\u4ee5\u65ad\u8a00 x \u4e0d\u662f nil \u4e14 x \u7684\u503c\u662f T \u7c7b\u578b\u3002\u6807\u8bb0 x.(T) \u53eb\u505a\u7c7b\u578b\u65ad\u8a00\u3002 \u66f4\u786e\u5207\u7684\u8bf4\uff0c\u5982\u679c T \u4e0d\u662f\u63a5\u53e3\u7c7b\u578b\uff0c\u90a3\u4e48 x.(T) \u5c06\u4f1a\u65ad\u8a00\u52a8\u6001\u7c7b\u578b x \u7684\u7c7b\u578b\u662f\u4e0d\u662f T\u3002 \u8fd9\u65f6\uff0cT \u5fc5\u987b\u5b9e\u73b0\u4e86 x \u7684\uff08\u63a5\u53e3\uff09\u7c7b\u578b\u3002\u5426\u5219\u65ad\u8a00\u4f1a\u662f\u975e\u6cd5\u7684\u56e0\u4e3a x \u4e0d\u80fd\u4fdd\u5b58 T \u7c7b\u578b\u7684\u503c\u3002\u5982\u679c T \u662f\u63a5\u53e3\u7c7b\u578b\uff0c\u90a3\u4e48\u53ef\u4ee5\u65ad\u8a00\u52a8\u6001\u7c7b\u578b x \u662f\u5426\u5b9e\u73b0\u4e86 T \u63a5\u53e3\u3002 \u5982\u679c\u7c7b\u578b\u65ad\u8a00\u6210\u529f\uff0c\u8868\u8fbe\u5f0f\u7684\u503c\u4e3a x \u7684\u503c\uff0c\u4f46\u5b83\u7684\u7c7b\u578b\u662fT\u3002\u5982\u679c\u65ad\u8a00\u5931\u8d25\uff0c\u5c06\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u6050\u614c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5373\u4f7f x \u662f\u8fd0\u884c\u65f6\u786e\u5b9a\u7684\uff0cx.(T) \u4e5f\u5fc5\u987b\u662f\u7f16\u7a0b\u65f6\u5c31\u786e\u8ba4\u5b58\u5728\u7684\u3002 var x interface{} = 7 // x \u62e5\u6709\u52a8\u6001\u7c7b\u578b int \u503c\u4e3a 7 i := x.(int) // i \u4e3a int \u7c7b\u578b\u503c\u4e3a 7 type I interface { m() } func f(y I) { s := y.(string) // \u975e\u6cd5: \u5b57\u7b26\u4e32\u6ca1\u6709\u5b9e\u73b0\u63a5\u53e3 I \uff08\u7f3a\u5c11 m \u65b9\u6cd5\uff09 r := y.(io.Reader) // r \u62e5\u6709\u63a5\u53e3 io.Reader \u6240\u4ee5 y \u7684\u52a8\u6001\u7c7b\u578b\u5fc5\u987b\u540c\u65f6\u5b9e\u73b0 I \u548c io.Reader \u2026 } \u7c7b\u578b\u65ad\u8a00\u53ef\u4ee5\u4f7f\u7528\u7279\u5b9a\u683c\u5f0f\u7684\u8d4b\u503c\u548c\u521d\u59cb\u5316\u8bed\u53e5\u3002 v, ok = x.(T) v, ok := x.(T) var v, ok = x.(T) var v, ok T1 = x.(T) \u8fd9\u65f6\u5c06\u4f1a\u989d\u5916\u751f\u6210\u4e00\u4e2a\u65e0\u7c7b\u578b\u7684\u5e03\u5c14\u503c\u3002\u5982\u679c\u65ad\u8a00\u6210\u529f\uff0cok\u8fd4\u56de true \uff0c\u5426\u5219\u662f false \u3002\u5e76\u4e14 v \u4f1a\u662f T \u7c7b\u578b\u7684\u96f6\u503c\u3002\u8fd9\u65f6\u4e0d\u4f1a\u6709\u6050\u614c\u53d1\u751f\u3002 \u8c03\u7528 \u7ed9\u5b9a\u51fd\u6570\u7c7b\u578b\u4e3a F \u7684\u8868\u8fbe\u5f0f f\uff1a f(a1, a2, \u2026 an) \u53ef\u4ee5\u4f7f\u7528 a1,a2...an \u6765\u8c03\u7528\u51fd\u6570 f\u3002\u9664\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u4e4b\u5916\uff0c\u51fd\u6570\u53c2\u6570\u5fc5\u987b\u662f\u5bf9\u5e94 F \u51fd\u6570\u53c2\u6570\u7c7b\u578b\u7684\u5355\u503c\u8868\u8fbe\u5f0f\uff0c\u4e14\u5728\u51fd\u6570\u8c03\u7528\u524d\u5c31\u5df2\u7ecf\u5b8c\u6210\u6c42\u503c\u3002\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u7c7b\u578b\u662f f \u7684\u7ed3\u679c\u7c7b\u578b\u3002\u51fd\u6570\u8c03\u7528\u548c\u65b9\u6cd5\u8c03\u7528\u76f8\u4f3c\uff0c\u53ea\u662f\u65b9\u6cd5\u989d\u5916\u9700\u8981\u4e00\u4e2a\u63a5\u6536\u8005\u7c7b\u578b\u3002 math.Atan2(x, y) // function call var pt *Point pt.Scale(3.5) // method call with receiver pt \u5728\u51fd\u6570\u8c03\u7528\u4e2d\uff0c\u51fd\u6570\u7684\u503c\u548c\u53c2\u6570\u662f\u6309\u7167\u987a\u5e8f\u6c42\u503c\u7684\u3002\u5728\u8ba1\u7b97\u4e4b\u540e\u4f5c\u4e3a\u53c2\u6570\u4f1a\u4f20\u8fdb\u51fd\u6570\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u3002\u5f53\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u8fd4\u56de\u7684\u53c2\u6570\u5c06\u4f1a\u8fd4\u56de\u7ed9\u51fd\u6570\u7684\u8c03\u7528\u8005\u3002 \u8c03\u7528\u503c\u4e3a nil \u7684\u51fd\u6570\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u6050\u614c\u3002 \u4f5c\u4e3a\u7279\u4f8b\uff0c\u5982\u679c\u51fd\u6570\u6216\u8005\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7b49\u4e8e\u53c2\u6570\u5217\u8868\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u4f1a\u5d4c\u5957\u8c03\u7528\u3002\u8fd9\u5c06\u628a\u8fd4\u56de\u503c\u76f4\u63a5\u8d4b\u503c\u7ed9\u4e0b\u4e00\u6b21\u8c03\u7528\u51fd\u6570\u7684\u53c2\u6570\u3002 func Split(s string, pos int) (string, string) { return s[0:pos], s[pos:] } func Join(s, t string) string { return s + t } if Join(Split(value, len(value)/2)) != value { log.Panic(\"test fails\") } \u5982\u679c x \u7684\u65b9\u6cd5\u96c6\u4e2d\u5305\u542b m \u90a3\u4e48 x.m() \u662f\u5408\u6cd5\u7684\u3002\u5e76\u4e14\u53c2\u6570\u5217\u8868\u548c m \u7684\u53c2\u6570\u5217\u8868\u76f8\u540c\u3002\u5982\u679cx\u662f\u53ef\u5bfb\u5740\u7684\uff0c\u90a3\u4e48\u90a3\u4e48x\u6307\u9488\u7684\u65b9\u6cd5\u96c6 (&x).m() \u53ef\u4ee5\u7b80\u5199\u6210 x.m() \u3002 var p Point p.Scale(3.5) \u6ca1\u6709\u65b9\u6cd5\u7c7b\u578b\uff0c\u4e5f\u6ca1\u6709\u65b9\u6cd5\u5b57\u9762\u503c\u3002 \u901a\u8fc7 ... \u6765\u4f20\u9012\u53c2\u6570 \u5982\u679c f \u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570 p \u7684\u7c7b\u578b\u662f ...T \u3002\u90a3\u4e48\u5728\u51fd\u6570\u5185\u90e8 p \u53c2\u6570\u7684\u7c7b\u578b\u5c31\u662f []T \u3002\u5982\u679c f \u8c03\u7528\u65f6\u6ca1\u6709\u4f20\u5165 p \u5bf9\u5e94\u7684\u53c2\u6570\uff0c\u90a3\u4e48p\u4e3a nil\u3002\u5426\u5219\u8fd9\u4e9b\u53c2\u6570\u4f1a\u4ee5\u5207\u7247\u65b9\u5f0f\u4f20\u5165\uff0c\u5728\u65b0\u7684\u5e95\u5c42\u5207\u7247\u4e2d\u3002\u5207\u7247\u4e2d\u7684\u7c7b\u578b\u90fd\u662f\u80fd\u8d4b\u503c\u7ed9\u7c7b\u578b T \u7684\u503c\u3002\u8fd9\u4e2a\u5207\u7247\u7684\u957f\u5ea6\u548c\u5bb9\u91cf\u5728\u4e0d\u540c\u7684\u8c03\u7528\u4e2d\u6709\u6240\u4e0d\u540c\u3002 \u7ed9\u5b9a\u51fd\u6570\u8c03\u7528\uff1a func Greeting(prefix string, who ...string) Greeting(\"nobody\") Greeting(\"hello:\", \"Joe\", \"Anna\", \"Eileen\") \u5728 Greeting \u4e2d\uff0c\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\uff0c who \u662f nil \u7c7b\u578b\u3002\u800c\u5728\u7b2c\u4e8c\u6b21\u8c03\u7528\u65f6\u662f []string{\"Joe\", \"Anna\", \"Eileen\"} \u3002 \u5982\u679c\u5728\u8c03\u7528\u7684\u65f6\u5019\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662f[]T\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ... \u6765\u5c06\u5207\u7247\u4e2d\u7684\u503c\u4f9d\u6b21\u8d4b\u503c\u7ed9\u53c2\u6570\u5217\u8868\u3002 \u7ed9\u5b9a\u5207\u7247s\u5e76\u4e14\u8c03\u7528: s := []string{\"James\", \"Jasmine\"} Greeting(\"goodbye:\", s...) z \u5728 Greeting \u3002\u4e2d who \u4f1a\u548c\u5207\u7247 s \u5171\u4eab\u76f8\u540c\u7684\u5e95\u5c42\u6570\u7ec4\u3002 \u64cd\u4f5c\u7b26 \u64cd\u4f5c\u7b26\u7528\u6765\u8fde\u63a5\u8fd0\u7b97\u5143\u3002 Expression = UnaryExpr | Expression binary_op Expression . UnaryExpr = PrimaryExpr | unary_op UnaryExpr . binary_op = \"||\" | \"&&\" | rel_op | add_op | mul_op . rel_op = \"==\" | \"!=\" | \"<\" | \"<=\" | \">\" | \">=\" . add_op = \"+\" | \"-\" | \"|\" | \"^\" . mul_op = \"*\" | \"/\" | \"%\" | \"<<\" | \">>\" | \"&\" | \"&^\" . unary_op = \"+\" | \"-\" | \"!\" | \"^\" | \"*\" | \"&\" | \"<-\" . \u6bd4\u8f83\u8fd0\u7b97\u7b26\u5728\u6b64\u5904\u8ba8\u8bba\u3002\u5bf9\u4e8e\u5176\u4ed6\u4e8c\u5143\u64cd\u4f5c\u7b26\uff0c\u4e24\u4e2a\u64cd\u4f5c\u5143\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u76f8\u540c\u7684\uff0c\u9664\u4e86\u4f4d\u79fb\u548c\u65e0\u7c7b\u578b\u5e38\u91cf\u3002\u9488\u5bf9\u5e38\u91cf\u7684\u64cd\u4f5c\uff0c\u8bf7\u770b\u5e38\u91cf\u8868\u8fbe\u5f0f\u7ae0\u8282\u3002 \u9664\u4e86\u4f4d\u79fb\u64cd\u4f5c\uff0c\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u64cd\u4f5c\u7b26\u662f\u65e0\u7c7b\u578b\u5e38\u91cf\uff0c\u800c\u53e6\u4e2a\u4e0d\u662f\uff0c\u90a3\u4e48\u65e0\u7c7b\u578b\u7684\u5e38\u91cf\u4f1a\u8f6c\u6362\u6210\u53e6\u4e00\u4e2a\u8fd0\u7b97\u5143\u7684\u7c7b\u578b\u3002 \u5728\u53f3\u79fb\u8868\u8fbe\u5f0f\u4e2d\u7684\u8fd0\u7b97\u5143\u5fc5\u987b\u662f\u65e0\u7b26\u53f7\u7684\u6574\u6570\u6216\u8005\u53ef\u4ee5\u8f6c\u6362\u6210 uint \u7684\u65e0\u7c7b\u578b\u7684\u5e38\u91cf\u3002\u5982\u679c\u5de6\u79fb\u4e00\u4e2a\u65e0\u7c7b\u578b\u5e38\u91cf\u90a3\u4e48\u7ed3\u679c\u4f9d\u7136\u662f\u65e0\u7c7b\u578b\u7684\u3002\u4ed6\u9996\u5148\u4f1a\u8f6c\u6362\u6210\u6307\u5b9a\u7c7b\u578b\u3002 var s uint = 33 var i = 1<<s // 1 has type int var j int32 = 1<<s // 1 has type int32; j == 0 var k = uint64(1<<s) // 1 has type uint64; k == 1<<33 var m int = 1.0<<s // 1.0 has type int; m == 0 if ints are 32bits in size var n = 1.0<<s == j // 1.0 has type int32; n == true var o = 1<<s == 2<<s // 1 and 2 have type int; o == true if ints are 32bits in size var p = 1<<s == 1<<33 // illegal if ints are 32bits in size: 1 has type int, but 1<<33 overflows int var u = 1.0<<s // illegal: 1.0 has type float64, cannot shift var u1 = 1.0<<s != 0 // illegal: 1.0 has type float64, cannot shift var u2 = 1<<s != 1.0 // illegal: 1 has type float64, cannot shift var v float32 = 1<<s // illegal: 1 has type float32, cannot shift var w int64 = 1.0<<33 // 1.0<<33 is a constant shift expression \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7 \u4e00\u5143\u8fd0\u7b97\u7b26\u62e5\u6709\u6700\u9ad8\u4f18\u5148\u7ea7\u3002++ \u548c -- \u662f\u8bed\u53e5\u800c\u4e0d\u662f\u8868\u8fbe\u5f0f\uff0c\u4ed6\u4eec\u5728\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u4e4b\u5916\u3002\u6240\u4ee5 ( p)++ \u548c p++ \u662f\u4e00\u6837\u7684\u3002 \u4e8c\u5143\u8fd0\u7b97\u7b26\u6709 5 \u4e2a\u4f18\u5148\u7ea7\u3002\u4e58\u6cd5\u8fd0\u7b97\u7b26\u5728\u6700\u9ad8\u7ea7\uff0c\u7d27\u63a5\u7740\u662f\u52a0\u6cd5\u8fd0\u7b97\u7b26\u3002\u6bd4\u8f83\u8fd0\u7b97\u7b26\uff0c&& \u8fd0\u7b97\u7b26\uff0c\u6700\u540e\u662f ||\u3002 Precedence Operator 5 * / % << >> & &^ 4 + - | ^ 3 == != < <= > >= 2 && 1 || \u76f8\u540c\u4f18\u5148\u7ea7\u7684\u4e8c\u5143\u8fd0\u7b97\u7b26\u7684\u6267\u884c\u987a\u5e8f\u662f\u7531\u5de6\u5230\u53f3\u3002\u4f8b\u5982 x/y*z \u548c (x/y)*z \u662f\u4e00\u6837\u7684\u3002 +x 23 + 3*x[i] x <= f() ^a >> b f() || g() x == y+1 && <-chanPtr > 0 \u7b97\u6570\u8fd0\u7b97\u7b26 \u7b97\u6570\u8fd0\u7b97\u7b26\u5e94\u7528\u5728 2 \u4e2a\u6570\u5b57\u503c\u4e4b\u95f4\uff0c\u522b\u5207\u751f\u6210\u4e00\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u503c\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u8fd0\u7b97\u5143\u3002\u56db\u79cd\u7b97\u6570\u8fd0\u7b97\u7b26(+,-,*,/)\u5e94\u7528\u5728\u6570\u5b57\uff0c\u6d6e\u70b9\uff0c\u590d\u5408\u7c7b\u578b\u4e4b\u4e2d\u3002+ \u4e5f\u53ef\u4ee5\u7528\u4e8e\u5b57\u7b26\u4e32\u3002\u4f4d\u8fd0\u7b97\u548c\u4f4d\u79fb\u8fd0\u7b97\u53ea\u9002\u7528\u4e8e\u6574\u6570\u3002 + sum integers, floats, complex values, strings - difference integers, floats, complex values * product integers, floats, complex values / quotient integers, floats, complex values % remainder integers & bitwise AND integers | bitwise OR integers ^ bitwise XOR integers &^ bit clear (AND NOT) integers << left shift integer << unsigned integer >> right shift integer >> unsigned integer \u6570\u5b57\u8fd0\u7b97\u7b26 \u5bf9\u4e8e\u4e24\u4e2a\u6574\u6570 x \u548c y\u3002\u6574\u6570\u5546 q=x/y \u548c\u4f59\u6570 r=x%y \u9075\u5faa\u4ee5\u4e0b\u89c4\u5f8b\u3002 x = q*y + r and |r| < |y| x/y \u622a\u65ad\u4e3a 0\u3002 x y x / y x % y 5 3 1 2 -5 3 -1 -2 5 -3 -1 2 -5 -3 1 -2 \u4f5c\u4e3a\u8fd9\u4e2a\u89c4\u5219\u7684\u4f8b\u5916\u60c5\u51b5\uff0c\u5982\u679c x \u975e\u5e38\u5927\uff0c\u90a3\u4e48 q=x/-1 \u7b49\u4e8e x\u3002 x, q int8 -128 int16 -32768 int32 -2147483648 int64 -9223372036854775808 \u5982\u679c\u9664\u6570\u662f\u4e00\u4e2a\u5e38\u91cf\u3002\u90a3\u4e48\u5b83\u4e0d\u80fd\u662f 0\uff0c\u5982\u679c\u9664\u6570\u5728\u8fd0\u884c\u65f6\u4e3a 0\uff0c\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u6050\u614c\u3002\u5982\u679c\u9664\u6570\u662f\u8d1f\u6570\u5e76\u4e14\u9664\u6570\u662f\uff1a x x / 4 x % 4 x >> 2 x & 3 11 2 3 2 3 -11 -2 -3 -3 1 \u4f4d\u79fb\u8fd0\u7b97\u7b26\u79fb\u52a8\u5de6\u4fa7\u8fd0\u7b97\u5143\u53f3\u4fa7\u5143\u7b97\u5143\u6307\u5b9a\u7684\u4f4d\u6570\u3002\u5982\u679c\u5de6\u4fa7\u662f\u6709\u7b26\u53f7\u6574\u578b\uff0c\u90a3\u5b83\u5c31\u5b9e\u73b0\u4e86\u4f4d\u79fb\u8fd0\u7b97\uff0c\u5982\u679c\u662f\u65e0\u7b26\u53f7\u6574\u6570\u4f7f\u7528\u903b\u8f91\u4f4d\u79fb\u3002\u4f4d\u79fb\u8fd0\u7b97\u6ca1\u6709\u4e0a\u9650\uff0c\u4f4d\u79fb\u64cd\u4f5c\u8ba9\u5de6\u8fb9\u8fd0\u7b97\u5143\u4f4d\u79fb n \u4e2a 1\u3002 x<<1 \u548c x*2 \u662f\u76f8\u7b49\u7684\u3002\u5e76\u4e14 x>>1 \u548c x/2 \u662f\u76f8\u540c\u7684\u3002 \u5bf9\u4e8e\u6574\u6570\u8fd0\u7b97\u5143\uff0c\u4e00\u5143\u8fd0\u7b97\u7b26+-^\u5b9a\u4e49\u5982\u4e0b\uff1a +x is 0 + x -x negation is 0 - x ^x bitwise complement is m ^ x with m = \"all bits set to 1\" for unsigned x and m = -1 for signed x \u6574\u578b\u6ea2\u51fa \u5bf9\u4e8e\u65e0\u7b26\u53f7\u7684\u503c\uff0c\u8fd0\u7b97\u7b26+-*\u548c<<\u90fd\u662f2\u7981\u6b62\u8fd0\u7b97\u3002\u8fd9\u91cc\u7684n\u662f\u65e0\u7b26\u53f7\u7c7b\u578b\u7684\u5bbd\u5ea6\uff0c\u65e0\u7b26\u53f7\u6574\u578b\u5c06\u4f1a\u4e22\u5f03\u6ea2\u51fa\u7684\u4f4d\uff0c\u5e76\u4e14\u7a0b\u5e8f\u5c06\u4f1a\u8fd4\u56de wrap around \u3002 \u5bf9\u4e8e\u6709\u7b26\u53f7\u7684\u6574\u6570\uff0c\u64cd\u4f5c\u7b26+=*<<\u90fd\u4f1a\u6ea2\u51fa\u5e76\u4e14\u503c\u5b58\u5728\uff0c\u5e76\u4e14\u4ee3\u8868\u76f8\u5e94\u7684\u6709\u7b26\u53f7\u7684\u503c\u3002\u5728\u8fd0\u7b97\u65f6\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u6807\u4e00\u8d77\u4e0d\u4f1a\u62a5\u9519\u3002\u6240\u4ee5\u4e0d\u662f\u6240\u6709\u60c5\u51b5\u4e0bx<x+1\u90fd\u6210\u7acb\u3002 \u6d6e\u70b9\u6570\u8fd0\u7b97\u7b26 \u5bf9\u4e8e\u6d6e\u70b9\u6570\u548c\u5176\u4ed6\u590d\u6742\u6570\u5b57\uff0c+x\u548cx\u662f\u4e00\u6837\u7684\uff0c-x\u662fx\u7684\u5bf9\u7acb\u9762\u3002\u9664\u4e86IEEE-754\u8fd8\u6ca1\u6709\u6307\u5b9a\u6d6e\u70b9\u6570\u96640\u6216\u8005\u590d\u6570\u7684\u7ed3\u679c\u3002\u662f\u5426\u629b\u51fa\u5f02\u5e38\u5c06\u4f1a\u4f9d\u8d56\u5176\u5177\u4f53\u5b9e\u73b0\u3002 \u4e00\u79cd\u5b9e\u73b0\u53ef\u4ee5\u5408\u5e76\u591a\u4e2a\u6d6e\u70b9\u64cd\u4f5c\u8fdb\u4e00\u4e2a\u64cd\u4f5c\uff0c\u6709\u53ef\u80fd\u662f\u5938\u8bed\u53e5\u7684\uff0c\u5e76\u4e14\u4ed6\u7684\u7ed3\u679c\u53ef\u80fd\u548c\u4f9d\u6b21\u5355\u72ec\u6267\u884c\u7684\u7ed3\u679c\u4e0d\u4e00\u6837\u30021\u4e2a\u6d6e\u70b9\u6570\u7c7b\u578b\u5c06\u4f1a\u8f6c\u53d8\u6210\u76ee\u6807\u7684\u7cbe\u5ea6\uff0c\u9632\u6b62\u56db\u820d\u4e94\u5165\u7684\u878d\u5408\u3002 // FMA allowed for computing r, because x*y is not explicitly rounded: r = x*y + z r = z; r += x*y t = x*y; r = t + z *p = x*y; r = *p + z r = x*y + float64(z) // FMA disallowed for computing r, because it would omit rounding of x*y: r = float64(x*y) + z r = z; r += float64(x*y) t = float64(x*y); r = t + z \u5b57\u7b26\u4e32 \u5b57\u7b26\u4e32\u53ef\u4ee5\u4f7f\u7528+\u548c+=\u64cd\u4f5c\u7b26\u3002 s := \"hi\" + string(c) s += \" and good bye\" \u5b57\u7b26\u4e32\u60f3\u5bb6\u5c06\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u3002 \u6bd4\u8f83\u8fd0\u7b97\u7b26 \u6bd4\u8f83\u8fd0\u7b97\u7b26\u6bd4\u8f83\u8fde\u4e2a\u8fd0\u7b97\u5143\uff0c\u5e76\u4e14\u751f\u6210\u4e00\u4e2a\u65e0\u7c7b\u578b\u7684\u5e03\u5c14\u503c\u3002 == equal != not equal < less <= less or equal > greater >= greater or equal \u5728\u4efb\u4f55\u6bd4\u8f83\u8fd0\u7b97\u5143\u4e2d2\u79cd\u7c7b\u578b\u5fc5\u987b\u662f\u53ef\u4ee5\u5206\u914d\u7684\u3002 \u4f7f\u7528\u7b49\u4e8e\u8fd0\u7b97\u7b26 == \u548c != \u7684\u8fd0\u7b97\u5143\u5fc5\u987b\u662f\u53ef\u6bd4\u8f83\u7684\u3002\u4f7f\u7528\u987a\u5e8f\u8fd0\u7b97\u7b26 < , <= , > \u548c >= \u5fc5\u987b\u662f\u53ef\u6bd4\u8f83\u7684\u3002\u8fd9\u4e9b\u9650\u5236\u5bfc\u81f4\u6bd4\u8f83\u8fd0\u7b97\u7b26\u88ab\u5b9a\u4e49\u6210\u4ee5\u4e0b\u7684\u65b9\u5f0f\u3002 \u5e03\u5c14\u503c\u662f\u53ef\u6bd4\u8f83\u7684\uff0c\u4e24\u4e2a\u5e03\u5c14\u503c\u5f53\u4ed6\u4eec\u540c\u4e3a true \u6216\u8005false\u7684\u4f7f\u7528\u662f\u76f8\u7b49\u7684 \u6574\u6570\u503c\u662f\u53ef\u6bd4\u8f83\u548c\u6392\u5e8f\u7684 \u6d6e\u70b9\u6570\u662f\u53ef\u6bd4\u8f83\u548c\u6392\u5e8f\u7684\uff0c\u5177\u4f53\u5b9a\u4e49\u5728IEEE-754\u6807\u51c6\u4e2d\u3002 \u590d\u6570\u662f\u53ef\u6bd4\u8f83\u7684\uff0c2\u4e2a\u590d\u6570\u5f53\u5b9e\u90e8\u548c\u865a\u90e8\u90fd\u76f8\u7b49\u65f6\u5c31\u662f\u76f8\u7b49\u7684\u3002 \u5b57\u7b26\u4e32\u662f\u53ef\u4ee5\u6bd4\u8f83\u548c\u6392\u5e8f\u7684\u3002\u662f\u6309\u7167\u5b57\u8282\u987a\u5e8f\u6392\u5e8f\u3002 \u6307\u9488\u5f0f\u53ef\u4ee5\u6392\u5e8f\u7684\uff0c\u8fde\u4e2a\u6307\u9488\u5f53\u6307\u5411\u76f8\u540c\u53d8\u91cf\u65f6\u662f\u76f8\u540c\u7684\uff0c\u6216\u8005\u4ed6\u4eec2\u4e2a\u90fd\u662fnil\u3002\u6307\u5411\u4e00\u4e2a\u4e3a\u975e\u914d\u7684\u53d8\u91cf\u7684\u7ed3\u679c\u662f\u672a\u5b9a\u4e49\u7684\u3002 channel\u662f\u53ef\u6bd4\u8f83\u7684\u3002\u5f53\u4e24\u4e2a\u7ba1\u9053\u662f\u7528\u540c\u4e00\u4e2amake\u51fa\u6765\u7684\uff0c\u6216\u8005\u90fd\u662fnil\u65f6\u65f6\u76f8\u7b49\u7684\u3002 \u63a5\u53e3\u503c\u65f6\u53ef\u4ee5\u6bd4\u8f83\u7684\uff0c2\u4e2a\u63a5\u53e3\u503c\u65f6\u76f8\u7b49\u7684\u5982\u679c2\u4e2a\u6807\u8bc6\u7b26\u7684\u52a8\u6001\u7c7b\u578b\u662f\u4e00\u6837\u7684\u6216\u8005\u4ed6\u4eec\u90fd\u662fnil\u3002 \u4e00\u4e2a\u975e\u63a5\u53e3\u7c7b\u578b\u7684\u503cx\u548c\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u503cT\u5728\u975e\u63a5\u53e3\u7c7b\u578b\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\u5e76\u4e14\u975e\u63a5\u53e3\u7c7b\u578b\u5b9e\u73b0\u4e86\u63a5\u53e3\u662f\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\u3002\u5f53\u4ed6\u4eec\u7684\u52a8\u6001\u7c7b\u578b\u7c7b\u578b\u76f8\u540c\u65f6\u65f6\u76f8\u7b49\u7684\u3002 \u5f53\u7ed3\u6784\u4f53\u5185\u7684\u6240\u6709\u5b57\u6bb5\u90fd\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\u65f6\u5019\uff0c\u4ed6\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\u3002\u8fde\u4e2a\u7ed3\u6784\u4f53\u7684\u503c\u5f53\u975e\u7a7a\u5b57\u6bb5\u90fd\u76f8\u7b49\u65f6\u4ed6\u4eec\u662f\u76f8\u7b49\u7684\u3002 \u6570\u7ec4\u7c7b\u578b\u7684\u503c\u65f6\u53ef\u6bd4\u8f83\u7684\uff0c\u5982\u679c\u6570\u7ec4\u7684\u539f\u5c5e\u65f6\u53ef\u4ee5\u6bd4\u8f83\u7684\uff0c\u90a3\u4e48\u5f53\u6570\u7ec4\u7684\u6240\u6709\u503c\u662f\u76f8\u7b49\u7684\u65f6\u5019\u4ed6\u4eec\u5c31\u662f\u76f8\u7b49\u7684\u3002 \u4f7f\u7528\u4e24\u4e2a\u52a8\u6001\u7c7b\u578b\u7684\u6807\u8bc6\u7b26\u6765\u6bd4\u8f83\u63a5\u53e3\u7684\u503c\u3002\u5982\u679c\u8fd9\u4e2a\u7c7b\u578b\u7684\u503c\u65f6\u4e0d\u53ef\u6bd4\u8f83\u7684\uff0c\u90a3\u4e48\u5c06\u4f1a\u5f15\u8d77\u4e00\u4e2apanic\u3002\u8fd9\u4e2a\u884c\u4e3a\u4e0d\u4ec5\u4ec5\u65f6\u63a5\u53e3\uff0c\u6570\u7ec4\u7ed3\u6784\u4f53\u63a5\u53e3\u5b57\u6bb5\u90fd\u6709\u8fd9\u4e2a\u95ee\u9898\u3002 \u5207\u7247\uff0cmap\uff0c\u548c\u51fd\u6570\u503c\u90fd\u662f\u4e0d\u53ef\u6bd4\u8f83\u7684\uff0c\u7136\u800c\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u7279\u6b8a\u7684\u4f8b\u5b50\uff0c\u5207\u7247\uff0cmap\u548c\u51fd\u6570\u7684\u503c\u7684nil\u65f6\u53ef\u4ee5\u6bd4\u8f83\u7684\uff0c\u6307\u9488\uff0cchannel\u548c\u63a5\u53e3\u7684\u503cnil\u4e5f\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\u3002 const c = 3 < 4 // c is the untyped boolean constant true type MyBool bool var x, y int var ( // The result of a comparison is an untyped boolean. // The usual assignment rules apply. b3 = x == y // b3 has type bool b4 bool = x == y // b4 has type bool b5 MyBool = x == y // b5 has type MyBool ) \u903b\u8f91\u64cd\u4f5c\u7b26 \u903b\u8f91\u8fd0\u7b97\u7b26\u4f7f\u7528\u5e03\u5c14\u503c\u503c\uff0c\u5e76\u4e14\u751f\u6210\u4e00\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u7ed3\u679c\u503c\u4f5c\u4e3a\u64cd\u4f5c\u5143\u3002\u53f3\u9762\u7684\u64cd\u4f5c\u5143\u8ba1\u7b97\u662f\u6709\u6761\u4ef6\u7684\u3002 && conditional AND p && q is \"if p then q else false\" || conditional OR p || q is \"if p then true else q\" ! NOT !p is \"not p\" \u5730\u5740\u64cd\u4f5c\u7b26 \u4ee5\u7c7b\u578b T \u7684 x \u4f5c\u4e3a\u8fd0\u7b97\u5143\uff0c\u53d6\u5740\u64cd\u4f5c &x \u4f1a\u751f\u6210\u4e00\u4e2a\u7c7b\u578b\u4e3a *T \u5e76\u6307\u5411 x \u7684\u6307\u9488\u3002\u8fd0\u7b97\u5143\u5fc5\u987b\u662f\u80fd\u591f\u53d6\u5740\u7684\uff0c\u5b83\u53ef\u4ee5\u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u6307\u9488\uff0c\u5207\u7247\u7684\u53d6\u503c\u64cd\u4f5c\uff1b\u6216\u662f\u4e00\u4e2a\u53ef\u53d6\u5740\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u9009\u62e9\u5668\uff1b\u6216\u662f\u5bf9\u4e8e\u53ef\u53d6\u5740\u6570\u7ec4\u7684\u7d22\u5f15\u53d6\u503c\u64cd\u4f5c\u3002\u4f5c\u4e3a\u5bfb\u5740\u80fd\u529b\u7684\u4f8b\u5916\uff0cx \u53ef\u80fd\u662f\u4e00\u4e2a\u590d\u5408\u5b57\u9762\u503c\u3002\u5982\u679c\u5bf9 x \u8fdb\u884c\u53d6\u5740\u64cd\u4f5c\u5c06\u4f1a panic\uff0c &x \u4e5f\u4f1a panic\u3002 \u5bf9\u4e8e\u4e00\u4e2a *T \u7c7b\u578b\u7684\u8fd0\u7b97\u5143 x\uff0c\u6307\u9488\u89e3\u5f15\u7528 *x \u8868\u793a x \u6307\u5411\u7684 T \u7c7b\u578b\u3002\u5982\u679c x \u4e3a nil\uff0c\u90a3\u4e48\u89e3\u5f15\u7528 *x \u4f1a panic\u3002 &x &a[f(2)] &Point{2, 3} *p *pf(x) var x *int = nil *x // causes a run-time panic &*x // causes a run-time panic \u63a5\u6536\u64cd\u4f5c\u7b26 \u5bf9\u4e8e\u7ba1\u9053\u7c7b\u578b\u7684\u8fd0\u7b97\u5143 ch \uff0c\u63a5\u6536\u64cd\u4f5c <-ch \u8fd4\u56de\u503c\u662f\u7ba1\u9053 ch \u63a5\u6536\u5230\u7684\u503c\u3002\u5e26\u65b9\u5411\u7684\u7ba1\u9053\u9700\u8981\u6709\u63a5\u53d7\u6743\u9650\uff0c\u63a5\u6536\u64cd\u4f5c\u7684\u7c7b\u578b\u4e5f\u662f\u901a\u9053\u7684\u5143\u7d20\u7c7b\u578b\u3002\u8868\u8fbe\u5f0f\u4f1a\u4e00\u76f4\u963b\u585e\u76f4\u5230\u63a5\u6536\u5230\u8fd4\u56de\u503c\u3002\u4ece nil \u901a\u9053\u63a5\u6536\u503c\u4f1a\u4e00\u76f4\u963b\u585e\u3002\u4ece\u4e00\u4e2a\u5df2\u7ecf\u5173\u95ed\u7684\u901a\u9053\u63a5\u6536\u6570\u636e\u4f1a\u5728\u5176\u4ed6\u6570\u636e\u90fd\u88ab\u63a5\u6536\u4ee5\u540e\u751f\u6210\u8be5\u901a\u9053\u5143\u7d20\u7c7b\u578b\u7684\u96f6\u503c\u3002 v1 := <-ch v2 = <-ch f(<-ch) <-strobe // wait until clock pulse and discard received value \u63a5\u6536\u6570\u636e\u7684\u8868\u8fbe\u5f0f\u53ef\u4ee5\u4f7f\u7528\u8d4b\u503c\u8868\u8fbe\u5f0f\u3002 x, ok = <-ch x, ok := <-ch var x, ok = <-ch var x, ok T = <-ch \u5b83\u8fd8\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u989d\u5916\u7684\u65e0\u7c7b\u578b\u5e03\u5c14\u503c\u6765\u8868\u793a\u901a\u9053\u662f\u5426\u5173\u95ed\u3002\u5982\u679c ok \u4e3a true \u8bf4\u660e\u83b7\u53d6\u5230\u7684\u662f\u53d1\u9001\u5230\u901a\u9053\u5185\u7684\u6570\u636e\uff0c\u800c false \u5b83\u5c31\u8fd4\u56de\u4e00\u4e2a\u96f6\u503c\u56e0\u4e3a\u901a\u9053\u5185\u6ca1\u6709\u5143\u7d20\u4e14\u5df2\u7ecf\u5173\u95ed\u3002 \u7c7b\u578b\u8f6c\u6362 \u7c7b\u578b\u8f6c\u6362\u8868\u8fbe\u5f0f T(x) \u5176\u4e2d T \u4ee3\u8868\u7c7b\u578b\uff0cx \u4ee3\u8868\u53ef\u4ee5\u8f6c\u6362\u6210 T \u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u3002 Conversion = Type \"(\" Expression [ \",\" ] \")\" . \u5982\u679c\u7c7b\u578b\u662f\u4ee5 * \u6216 <- \u5f00\u5934\uff0c\u6216\u4ee5\u5173\u952e\u5b57 func \u5f00\u5934\u5e76\u4e14\u6ca1\u6709\u8fd4\u56de\u503c\u5217\u8868\uff0c\u90a3\u4e48\u5b83\u5fc5\u987b\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u907f\u514d\u6b67\u4e49\uff1a *Point(p) // same as *(Point(p)) (*Point)(p) // p is converted to *Point <-chan int(c) // same as <-(chan int(c)) (<-chan int)(c) // c is converted to <-chan int func()(x) // function signature func() x (func())(x) // x is converted to func() (func() int)(x) // x is converted to func() int func() int(x) // x is converted to func() int (unambiguous) \u5e38\u91cf x \u53ef\u4ee5\u5728\u53ef\u4ee5\u7528\u7c7b\u578b T \u8868\u793a\u65f6\u81ea\u52a8\u8f6c\u6362\u3002\u4f5c\u4e3a\u4e00\u4e2a\u7279\u4f8b\uff0c\u6574\u6570\u5e38\u91cf x \u53ef\u4ee5\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u7c7b\u578b\u5c31\u548c\u975e\u5e38\u91cf x \u4e00\u6837\u3002 \u5bf9\u5e38\u91cf\u7684\u8f6c\u6362\u4f1a\u751f\u6210\u4e00\u4e2a\u6307\u5b9a\u7c7b\u578b\u7684\u5e38\u91cf\u3002 uint(iota) // iota value of type uint float32(2.718281828) // 2.718281828 of type float32 complex128(1) // 1.0 + 0.0i of type complex128 float32(0.49999999) // 0.5 of type float32 float64(-1e-1000) // 0.0 of type float64 string('x') // \"x\" of type string string(0x266c) // \"\u266c\" of type string MyString(\"foo\" + \"bar\") // \"foobar\" of type MyString string([]byte{'a'}) // not a constant: []byte{'a'} is not a constant (*int)(nil) // not a constant: nil is not a constant, *int is not a boolean, numeric, or string type int(1.2) // illegal: 1.2 cannot be represented as an int string(65.0) // illegal: 65.0 is not an integer constant \u975e\u5e38\u91cf x \u53ef\u4ee5\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u8f6c\u6362\u6210\u7c7b\u578b T\uff1a x \u53ef\u4ee5\u7ed9\u7c7b\u578b T \u8d4b\u503c \u5ffd\u7565\u7684\u7ed3\u6784\u4f53\u6807\u7b7e\uff0cx \u7684\u7c7b\u578b\u548c T \u5177\u6709\u76f8\u540c\u7684\u5e95\u5c42\u7c7b\u578b \u5ffd\u7565\u7684\u7ed3\u6784\u4f53\u6807\u7b7e\uff0cx \u7684\u7c7b\u578b\u548c T \u90fd\u662f\u6307\u9488\u7c7b\u578b\uff0c\u5e76\u4e14\u6307\u9488\u6240\u6307\u7684\u7c7b\u578b\u5177\u6709\u76f8\u540c\u7684\u5e95\u5c42\u7c7b\u578b x \u7684\u7c7b\u578b\u548c T \u90fd\u662f\u6574\u6570\u6216\u8005\u6d6e\u70b9\u6570\u7c7b\u578b x \u7684\u7c7b\u578b\u548c T \u90fd\u662f\u590d\u6570\u7c7b\u578b x \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u800c T \u65f6\u5b57\u8282\u5207\u7247\u6216\u8005 rune \u5207\u7247 \u5728\u6bd4\u8f83\u4e24\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u65f6\u5019\u4f1a\u5ffd\u7565\u7ed3\u6784\u4f53\u6807\u7b7e\uff1a type Person struct { Name string Address *struct { Street string City string } } var data *struct { Name string `json:\"name\"` Address *struct { Street string `json:\"street\"` City string `json:\"city\"` } `json:\"address\"` } var person = (*Person)(data) // ignoring tags, the underlying types are identical \u8fd9\u4e2a\u89c4\u5219\u4e5f\u9002\u7528\u4e8e\u6570\u5b57\u7c7b\u578b\u4e0e\u5b57\u7b26\u4e32\u7c7b\u578b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\u3002\u8fd9\u4e2a\u8f6c\u6362\u53ef\u80fd\u4f1a\u6539\u53d8 x \u7684\u503c\u5e76\u4e14\u4f1a\u589e\u52a0\u8fd0\u884c\u65f6\u6d88\u8017\u3002\u5305 unsafe \u5b9e\u73b0\u4e86\u8fd9\u4e2a\u529f\u80fd\u5e95\u5c42\u7684\u9650\u5236\u3002 \u6570\u5b57\u4e4b\u95f4\u7684\u8f6c\u6362 \u5bf9\u4e8e\u975e\u5e38\u91cf\u7684\u6570\u5b57\u8f6c\u6362\uff0c\u9700\u8981\u9075\u5b88\u4ee5\u4e0b\u89c4\u5219\uff1a \u5728\u8f6c\u6362\u6574\u578b\u6570\u5b57\u65f6\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u6709\u7b26\u53f7\u6574\u578b\uff0c\u5b83\u662f\u7ee7\u627f\u6709\u7b26\u53f7\u7684\u65e0\u9650\u7cbe\u5ea6\uff1b\u5426\u5219\u5c31\u4e0d\u7528\u7ee7\u627f\u7b26\u53f7\u3002\u8f6c\u6362\u65f6\u4f1a\u622a\u65ad\u6570\u5b57\u4ee5\u9002\u5e94\u7c7b\u578b\u7684\u5927\u5c0f\u3002\u4f8b\u5982\uff1a\u5982\u679c v:=uint16(0x10F0) \uff0c\u7136\u540e ``uint32(int8(v)) == 0xFFFFFFF0 \u3002\u7c7b\u578b\u8f6c\u6362\u603b\u662f\u751f\u6210\u6709\u6548\u503c\uff0c\u5e76\u4e14\u6c38\u8fdc\u4e0d\u4f1a\u6ea2\u51fa\u3002 \u5982\u679c\u8981\u5c06\u6d6e\u70b9\u6570\u8f6c\u6362\u6210\u6574\u578b\uff0c\u4f1a\u4e22\u5f03\u5c0f\u6570\u90e8\u5206\uff08\u622a\u65ad\u4e3a\u96f6\uff09\u3002 \u5982\u679c\u8981\u5c06\u6574\u578b\u6216\u6d6e\u70b9\u578b\u8f6c\u6362\u6210\u6d6e\u70b9\u6570\u7c7b\u578b\uff0c\u6216\u6216\u8005\u4e00\u4e2a\u590d\u6570\u8f6c\u6362\u6210\u5176\u4ed6\u590d\u6570\u7c7b\u578b\uff0c\u7ed3\u679c\u4f1a\u56db\u820d\u4e94\u5165\u6210\u6307\u5b9a\u7cbe\u5ea6\u3002\u4f8b\u5982\uff1a \u53ef\u4ee5\u4f7f\u7528\u8d85\u51faIEEE-754 32\u4f4d\u6570\u7684\u9644\u52a0\u7cbe\u5ea6\u6765\u5b58\u50a8float32\u7c7b\u578b\u7684\u53d8\u91cfx\u7684\u503c\uff0c\u4f46float32\uff08x\uff09\u8868\u793a\u5c06x\u7684\u503c\u820d\u5165\u4e3a32\u4f4d\u7cbe\u5ea6\u7684\u7ed3\u679c\u3002x + 0.1 \u4f1a\u4f7f\u7528\u8d85\u8fc7 32 \u4f4d\u7684\u7cbe\u5ea6\uff0c\u800c float32(x+0.1) \u4e0d\u4f1a\u3002 \u5728\u6240\u6709\u6d6e\u70b9\u6570\u548c\u590d\u6570\u7684\u975e\u5e38\u91cf\u8f6c\u6362\u4e2d\uff0c\u5982\u679c\u7ed3\u6784\u7c7b\u578b\u4e0d\u80fd\u6210\u529f\u8868\u793a\u6570\u636e\uff0c\u90a3\u4e48\u7ed3\u679c\u5c06\u4f1a\u4f9d\u8d56\u4e8e\u5177\u4f53\u5e73\u53f0\u5b9e\u73b0\u3002 \u5b57\u7b26\u4e32\u7684\u7c7b\u578b\u8f6c\u6362 \u8f6c\u6362\u4e00\u4e2a\u6709\u7b26\u53f7\u6216\u8005\u65e0\u7b26\u53f7\u7684\u6574\u578b\u503c\u4f1a\u8f6c\u6362\u6210\u5bf9\u5e94\u7684 UTF-8 \u8868\u793a\u6574\u578b\u503c\u3002\u4e0d\u5728\u8303\u56f4\u5185\u7684 Unicode \u4ee3\u7801\u70b9\u4f1a\u8f6c\u6362\u6210 \"\\uFFFD\"\u3002 string('a') // \"a\" string(-1) // \"\\ufffd\" == \"\\xef\\xbf\\xbd\" string(0xf8) // \"\\u00f8\" == \"\u00f8\" == \"\\xc3\\xb8\" type MyString string MyString(0x65e5) // \"\\u65e5\" == \"\u65e5\" == \"\\xe6\\x97\\xa5\" \u5c06\u5b57\u8282\u5207\u7247\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u7c7b\u578b\u4f1a\u751f\u6210\u4e00\u4e2a\u7531\u5207\u7247\u5143\u7d20\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 string([]byte{'h', 'e', 'l', 'l', '\\xc3', '\\xb8'}) // \"hell\u00f8\" string([]byte{}) // \"\" string([]byte(nil)) // \"\" type MyBytes []byte string(MyBytes{'h', 'e', 'l', 'l', '\\xc3', '\\xb8'}) // \"hell\u00f8\" \u5c06 rune \u5207\u7247\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u7c7b\u578b\u4f1a\u751f\u6210\u4e00\u4e2a\u7531\u5207\u7247\u5143\u7d20\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 string([]rune{0x767d, 0x9d6c, 0x7fd4}) // \"\\u767d\\u9d6c\\u7fd4\" == \"\u767d\u9d6c\u7fd4\" string([]rune{}) // \"\" string([]rune(nil)) // \"\" type MyRunes []rune string(MyRunes{0x767d, 0x9d6c, 0x7fd4}) // \"\\u767d\\u9d6c\\u7fd4\" == \"\u767d\u9d6c\u7fd4\" \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5b57\u8282\u5207\u7247\u4f1a\u751f\u6210\u7531\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5b57\u8282\u7ec4\u6210\u7684\u5207\u7247 []byte(\"hell\u00f8\") // []byte{'h', 'e', 'l', 'l', '\\xc3', '\\xb8'} []byte(\"\") // []byte{} MyBytes(\"hell\u00f8\") // []byte{'h', 'e', 'l', 'l', '\\xc3', '\\xb8'} \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210 rune \u5207\u7247\u4f1a\u751f\u6210\u7531\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a Unicode \u4ee3\u7801\u70b9\u7ec4\u6210\u7684\u5207\u7247 []rune(MyString(\"\u767d\u9d6c\u7fd4\")) // []rune{0x767d, 0x9d6c, 0x7fd4} []rune(\"\") // []rune{} MyRunes(\"\u767d\u9d6c\u7fd4\") // []rune{0x767d, 0x9d6c, 0x7fd4} \u5e38\u91cf\u8868\u8fbe\u5f0f \u5e38\u91cf\u8868\u8fbe\u5f0f\u53ea\u5305\u542b\u5e38\u91cf\u8fd0\u7b97\u5143\u5e76\u4e14\u5728\u7f16\u8bd1\u7a0b\u5e8f\u65f6\u5c31\u5df2\u7ecf\u8ba1\u7b97\u5b8c\u6210\u3002 \u65e0\u7c7b\u578b\u5e03\u5c14\u503c\uff0c\u6570\u503c\u548c\u5b57\u7b26\u4e32\u5e38\u91cf\u90fd\u53ef\u4ee5\u5f53\u4f5c\u8fd0\u7b97\u5143\u3002\u9664\u4e86\u4f4d\u7f6e\u64cd\u4f5c\u7b26\uff0c\u5982\u679c\u4e8c\u5143\u8fd0\u7b97\u7b26\u77f3\u4e0d\u540c\u7c7b\u578b\u7684\u5e38\u91cf\uff0c\u64cd\u4f5c\u5143\uff0c\u548c\u975e\u5e03\u5c14\u503c\uff0c\u548c\u5373\u5c06\u5728\u63a5\u4e0b\u6765\u51fa\u73b0\u7684\uff1a\u6574\u578b\uff0crune\uff0c\u6d6e\u70b9\u6570\u548c\u590d\u6570\u7c7b\u578b\u3002\u4f8b\u5982\uff1a\u4e00\u4e2a\u65e0\u7c7b\u578b\u6574\u578b\u5e38\u91cf\u51cf\u53bb\u65e0\u7c7b\u578b\u590d\u6570\u5e38\u91cf\uff0c\u7ed3\u679c\u4e3a\u590d\u6570\u5e38\u91cf\u3002 \u4e00\u4e2a\u5e38\u91cf\u7684\u6bd4\u8f83\u8fd0\u7b97\u4f1a\u751f\u6210\u65e0\u7c7b\u578b\u7684\u5e03\u5c14\u5e38\u91cf\u3002\u5982\u679c\u5de6\u79fb\u8fd0\u7b97\u662f\u4e00\u4e2a\u65e0\u7c7b\u578b\u5e38\u91cf\uff0c\u7ed3\u679c\u4f1a\u662f\u4e00\u4e2a\u6574\u578b\u5e38\u91cf\u3002\u5b83\u4f1a\u548c\u539f\u6765\u5e38\u91cf\u4e3a\u76f8\u540c\u7c7b\u578b\u3002\u5176\u4ed6\u4e0e\u65e0\u7c7b\u578b\u5e38\u91cf\u7684\u8fd0\u7b97\u90fd\u4f1a\u751f\u6210\u76f8\u540c\u7c7b\u578b\u7684\u7ed3\u679c\uff08\u5e03\u5c14\u503c\uff0c\u6574\u578b\uff0c\u6d6e\u70b9\u6570\uff0c\u590d\u6570\uff0c\u5b57\u7b26\u4e32\u5e38\u91cf\uff09\u3002 const a = 2 + 3.0 // a == 5.0 (untyped floating-point constant) const b = 15 / 4 // b == 3 (untyped integer constant) const c = 15 / 4.0 // c == 3.75 (untyped floating-point constant) const \u0398 float64 = 3/2 // \u0398 == 1.0 (type float64, 3/2 is integer division) const \u03a0 float64 = 3/2. // \u03a0 == 1.5 (type float64, 3/2. is float division) const d = 1 << 3.0 // d == 8 (untyped integer constant) const e = 1.0 << 3 // e == 8 (untyped integer constant) const f = int32(1) << 33 // illegal (constant 8589934592 overflows int32) const g = float64(2) >> 1 // illegal (float64(2) is a typed floating-point constant) const h = \"foo\" > \"bar\" // h == true (untyped boolean constant) const j = true // j == true (untyped boolean constant) const k = 'w' + 1 // k == 'x' (untyped rune constant) const l = \"hi\" // l == \"hi\" (untyped string constant) const m = string(k) // m == \"x\" (type string) const \u03a3 = 1 - 0.707i // (untyped complex constant) const \u0394 = \u03a3 + 2.0e-4 // (untyped complex constant) const \u03a6 = iota*1i - 1/1i // (untyped complex constant) \u5bf9\u4e00\u4e2a\u65e0\u7c7b\u578b\u6574\u6570\uff0crune\uff0c\u6216\u6d6e\u70b9\u6570\u5e94\u7528\u5185\u7f6e\u7684 complex \u51fd\u6570\u4f1a\u751f\u6210\u65e0\u7c7b\u578b\u7684\u590d\u6570\u5e38\u91cf\u3002 const ic = complex(0, c) // ic == 3.75i (untyped complex constant) const i\u0398 = complex(0, \u0398) // i\u0398 == 1i (type complex128) \u5e38\u91cf\u8868\u8fbe\u5f0f\u603b\u662f\u4e00\u4e2a\u660e\u786e\u7684\u503c\uff1b\u4e2d\u95f4\u503c\u548c\u5e38\u91cf\u81ea\u5df1\u53ef\u4ee5\u6bd4\u8bed\u8a00\u6240\u652f\u6301\u7684\u7cbe\u5ea6\u66f4\u9ad8\uff0c\u4e0b\u9762\u7684\u58f0\u660e\u662f\u5408\u6cd5\u7684\uff1a const Huge = 1 << 100 // Huge == 1267650600228229401496703205376 (untyped integer constant) const Four int8 = Huge >> 98 // Four == 4 (type int8) \u5e38\u91cf\u7684\u9664\u6cd5\u7684\u9664\u6570\u4e0d\u80fd\u4e3a 0: 3.14 / 0.0 // illegal: division by zero \u5b9a\u4e49\u4e86\u7c7b\u578b\u7684\u5e38\u91cf\u7684\u7cbe\u5ea6\u5fc5\u987b\u6839\u636e\u5e38\u91cf\u7c7b\u578b\u5b9a\u4e49\u3002\u6240\u4ee5\u4e0b\u9762\u7684\u5e38\u91cf\u8868\u8fbe\u5f0f\u662f\u975e\u6cd5\u7684\uff1a uint(-1) // -1 cannot be represented as a uint int(3.14) // 3.14 cannot be represented as an int int64(Huge) // 1267650600228229401496703205376 cannot be represented as an int64 Four * 300 // operand 300 cannot be represented as an int8 (type of Four) Four * 100 // product 400 cannot be represented as an int8 (type of Four) \u8865\u7801\u4f7f\u7528\u7684\u4e00\u5143\u64cd\u4f5c\u7b26 ^ \u5bf9\u4e8e\u975e\u5e38\u91cf\u7684\u5339\u914d\u6a21\u5f0f\uff1a\u8865\u7801\u5bf9\u4e8e\u65e0\u7b26\u53f7\u5e38\u91cf\u4e3a 1\uff0c\u5bf9\u4e8e\u6709\u7b26\u53f7\u548c\u65e0\u7c7b\u578b\u5e38\u91cf\u4e3a -1\u3002 ^1 // untyped integer constant, equal to -2 uint8(^1) // illegal: same as uint8(-2), -2 cannot be represented as a uint8 ^uint8(1) // typed uint8 constant, same as 0xFF ^ uint8(1) = uint8(0xFE) int8(^1) // same as int8(-2) ^int8(1) // same as -1 ^ int8(1) = -2 \u5b9e\u73b0\u9650\u5236\uff1a\u7f16\u8bd1\u5668\u5728\u5904\u7406\u65e0\u7c7b\u578b\u6d6e\u70b9\u6570\u548c\u590d\u6570\u65f6\u4f1a\u53d6\u8fd1\u4f3c\u503c\uff1b\u5177\u4f53\u8bf7\u770b\u5e38\u91cf\u7ae0\u8282\u3002\u8fd9\u4e2a\u53d6\u8fd1\u4f3c\u503c\u7684\u64cd\u4f5c\u5728\u6d6e\u70b9\u6570\u5728\u6574\u6570\u4e0a\u4e0b\u6587\u65f6\u4f1a\u4ea7\u751f\u65e0\u6548\u503c\uff0c\u5373\u4f7f\u5728\u8ba1\u7b97\u8fc7\u540e\u662f\u4e00\u4e2a\u6574\u578b\u3002 \u8fd0\u7b97\u4f18\u5148\u7ea7 \u5728\u5305\u7ea7\u522b\uff0c\u521d\u59cb\u5316\u7684\u4f9d\u8d56\u6027\u7531\u53d8\u91cf\u58f0\u660e\u7684\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u987a\u5e8f\u51b3\u5b9a\u3002\u5426\u5219\uff0c\u5f53\u8ba1\u7b97\u8868\u8fbe\u5f0f\u5185\u7684\u64cd\u4f5c\u6570\u65f6\uff0c\u8d4b\u503c\uff0c\u8fd4\u56de\u8bed\u53e5\uff0c\u6240\u6709\u51fd\u6570\u8c03\u7528\uff0c\u65b9\u6cd5\u8c03\u7528\uff0c\u548c\u901a\u4fe1\u64cd\u4f5c\u90fd\u4f1a\u7531\u5de6\u5411\u53f3\u8ba1\u7b97\u3002 \u4f8b\u5982\uff0c\u5728\u51fd\u6570\u4f5c\u7528\u57df\u4e2d\u7684\u8d4b\u503c\uff1a y[f()], ok = g(h(), i()+x[j()], <-c), k() \u51fd\u6570\u8c03\u7528\u548c\u901a\u4fe1\u7684\u53d1\u751f\u987a\u5e8f\u4e3a\uff1a f() \uff0c h() \uff0c i() \uff0c j() \uff0c <-c \uff0c g() \u548c k() \u3002\u4f46\u662f\u5bf9 y \u548c x \u7684\u53d6\u503c\u64cd\u4f5c\u6ca1\u6709\u6307\u5b9a\u3002 a := 1 f := func() int { a++; return a } x := []int{a, f()} // x may be [1, 2] or [2, 2]: evaluation order between a and f() is not specified m := map[int]int{a: 1, a: 2} // m may be {2: 1} or {2: 2}: evaluation order between the two map assignments is not specified n := map[int]int{a: f()} // n may be {2: 3} or {3: 3}: evaluation order between the key and the value is not specified \u5728\u5305\u7ea7\u522b\uff0c\u4f9d\u8d56\u7684\u521d\u59cb\u5316\u987a\u5e8f\u4f1a\u8986\u76d6\u8fd9\u4e2a\u4ece\u5de6\u5411\u53f3\u7684\u89c4\u5219\uff1a var a, b, c = f() + v(), g(), sqr(u()) + v() func f() int { return c } func g() int { return a } func sqr(x int) int { return x*x } // functions u and v are independent of all other variables and functions \u8bed\u53e5 \u8bed\u53e5\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u3002 Statement = Declaration | LabeledStmt | SimpleStmt | GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt | FallthroughStmt | Block | IfStmt | SwitchStmt | SelectStmt | ForStmt | DeferStmt . SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl . \u7ec8\u6b62\u8bed\u53e5 \u7ec8\u6b62\u8bed\u53e5\u4f1a\u963b\u6b62\u76f8\u540c\u4ee3\u7801\u5757\u4e2d\u4e0b\u9762\u6240\u6709\u8bed\u53e5\u7684\u6267\u884c\u3002\u4ee5\u4e0b\u8bed\u53e5\u5c5e\u4e8e\u7ec8\u6b62\u8bed\u53e5\uff1a return \u548c goto \u8bed\u53e5 \u5bf9\u5185\u7f6e panic \u51fd\u6570\u7684\u8c03\u7528 \u4ee3\u7801\u5757\u7ed3\u675f if \u8bed\u53e5\u4e2d\uff1a else \u5206\u652f \u6240\u6709\u5206\u652f\u672b\u5c3e for \u8bed\u53e5\u4e2d\uff1a break \u8bed\u53e5\u548c\u5faa\u73af\u7ed3\u675f switch \u8bed\u53e5\uff1a \u5728 switch \u8bed\u53e5\u4e2d\u6ca1\u6709 break \u8bed\u53e5\uff0c \u6709\u4e00\u4e2a\u9ed8\u8ba4\u7684 case \u8bed\u53e5\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a case \u8bed\u53e5\u548c\u6709\u53ef\u80fd\u5b58\u5728\u7684 fallthrough \u8bed\u53e5 select \u8bed\u53e5\u4e2d\uff1a \u6ca1\u6709 break \u8bed\u53e5 \u6bcf\u4e2a case \u4e2d\u7684\u8bed\u53e5\u5217\u8868\uff0c\u5982\u679c\u5305\u542b\u9ed8\u8ba4 case \u6240\u6709\u5176\u4ed6\u8bed\u53e5\u90fd\u4e0d\u662f\u4e2d\u65ad\u8bed\u53e5\u3002 \u5982\u679c\u8bed\u53e5\u5e8f\u5217\u4e0d\u4e3a\u7a7a\u5e76\u4e14\u6700\u540e\u4e00\u4e2a\u975e\u7a7a\u8bed\u53e5\u662f\u7ec8\u6b62\u8bed\u53e5\uff0c\u90a3\u4e48\u8bed\u53e5\u5e8f\u5217\u5c31\u4ee5\u7ec8\u7ed3\u8bed\u53e5\u7ed3\u5c3e\u3002 \u7a7a\u8bed\u53e5 \u7a7a\u8bed\u53e5\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002 EmptyStmt = . \u6807\u7b7e\u8bed\u53e5 \u6807\u7b7e\u8bed\u53e5\u53ef\u4ee5\u4f5c\u4e3a goto \uff0c break \u548c continue \u8bed\u53e5\u7684\u76ee\u6807\u3002 LabeledStmt = Label \":\" Statement . Label = identifier . Error: log.Panic(\"error encountered\") \u8868\u8fbe\u5f0f\u8bed\u53e5 \u9664\u4e86\u7279\u5b9a\u7684\u5185\u7f6e\u51fd\u6570\uff0c\u4e00\u822c\u7684\u51fd\u6570\u3001\u65b9\u6cd5\u548c\u63a5\u6536\u64cd\u4f5c\u90fd\u53ef\u4ee5\u51fa\u73b0\u5728\u8868\u8fbe\u5f0f\u8bed\u53e5\u7684\u4e0a\u4e0b\u6587\u4e2d\u3002\u8fd9\u4e9b\u8bed\u53e5\u53ef\u4ee5\u4f7f\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u3002 ExpressionStmt = Expression . \u4e0b\u9762\u7684\u5185\u7f6e\u51fd\u6570\u4e0d\u5141\u8bb8\u51fa\u73b0\u5728\u8bed\u53e5\u7684\u4e0a\u4e0b\u6587\u4e2d\uff1a append cap complex imag len make new real unsafe.Alignof unsafe.Offsetof unsafe.Sizeof h(x+y) f.Close() <-ch (<-ch) len(\"foo\") // illegal if len is the built-in function \u53d1\u9001\u8bed\u53e5 \u53d1\u9001\u8bed\u53e5\u53ef\u4ee5\u5411\u901a\u9053\u53d1\u9001\u4e00\u4e2a\u503c\u3002\u901a\u9053\u8868\u8fbe\u5f0f\u5fc5\u987b\u662f\u901a\u9053\u7c7b\u578b\uff0c\u901a\u9053\u65b9\u5411\u5fc5\u987b\u5141\u8bb8\u53d1\u9001\u64cd\u4f5c\uff0c\u5e76\u4e14\u503c\u7c7b\u578b\u662f\u53ef\u4ee5\u5206\u914d\u7ed9\u901a\u9053\u5143\u7d20\u901a\u9053\u7c7b\u578b\u3002 SendStmt = Channel \"<-\" Expression . Channel = Expression . \u901a\u9053\u7c7b\u578b\u548c\u503c\u8868\u8fbe\u5f0f\u4f1a\u5728\u53d1\u9001\u4e4b\u524d\u6c42\u503c\u3002\u53d1\u9001\u64cd\u4f5c\u4f1a\u4e00\u81f4\u963b\u585e\uff0c\u76f4\u5230\u53ef\u4ee5\u8fdb\u884c\u53d1\u9001\u64cd\u4f5c\u3002\u5982\u679c\u63a5\u6536\u8005\u5df2\u7ecf\u51c6\u5907\u597d\u5411\u6ca1\u6709\u7f13\u5b58\u7684\u901a\u9053\u53d1\u9001\u503c\u53ef\u4ee5\u7acb\u5373\u6267\u884c\u3002\u5982\u679c\u901a\u9053\u5185\u8fd8\u6709\u7f13\u5b58\u7a7a\u95f4\uff0c\u5411\u901a\u9053\u5185\u53d1\u9001\u503c\u4e5f\u4f1a\u7acb\u5373\u6267\u884c\u3002\u5411\u5173\u95ed\u7684\u901a\u9053\u53d1\u9001\u6570\u636e\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u6050\u614c\u3002\u50cf\u503c\u4e3a nil \u7684\u901a\u9053\u53d1\u9001\u6570\u636e\u4f1a\u4e00\u76f4\u963b\u585e\u3002 ch <- 3 // send value 3 to channel ch \u9012\u589e/\u9012\u51cf\u8bed\u53e5 \u201c++\u201d \u548c \u201c--\u201d \u8bed\u53e5\u53ef\u4ee5\u9012\u589e\u6216\u8005\u9012\u51cf\u8fd0\u7b97\u5143\u4e00\u4e2a\u65e0\u7c7b\u578b\u5e38\u91cf 1\u3002\u4f5c\u4e3a\u4e00\u4e2a\u8d4b\u503c\u8bed\u53e5\uff0c\u8fd0\u7b97\u5143\u5fc5\u987b\u662f\u53ef\u5bfb\u5740\u7684\u6216\u8005 map \u7684\u7d22\u5f15\u8868\u8fbe\u5f0f\u3002 IncDecStmt = Expression ( \"++\" | \"--\" ) . \u4e0b\u9762\u7684\u8d4b\u503c\u8bed\u53e5\u5728\u8bed\u4e49\u4e0a\u662f\u7b49\u4ef7\u7684\uff1a IncDec statement Assignment x++ x += 1 x-- x -= 1 \u8d4b\u503c Assignment = ExpressionList assign_op ExpressionList . assign_op = [ add_op | mul_op ] \"=\" . \u6240\u6709\u5de6\u4fa7\u8fd0\u7b97\u5143\u90fd\u5fc5\u987b\u662f\u53ef\u5bfb\u5740\u7684\u3001map \u7d22\u5f15\u8868\u8fbe\u5f0f\u6216\u7a7a\u6807\u8bc6\u7b26\u5176\u4e2d\u4e4b\u4e00\u3002\u8fd0\u7b97\u5143\u53ef\u4ee5\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u3002 x = 1 *p = f() a[i] = 23 (k) = <-ch // same as: k = <-ch \u5bf9\u4e8e\u8d4b\u503c\u64cd\u4f5c x op= y \u5176\u4e2d op \u4e3a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u5b83\u548c x=x op (y) \u662f\u7b49\u4ef7\u7684\uff0c\u4e0d\u8fc7\u5b83\u53ea\u8ba1\u7b97\u4e00\u6b21 x\u3002 op= \u662f\u5355\u72ec\u7684\u4e00\u4e2a\u8bcd\u6c47\u5355\u5143\uff0c\u5728\u8d4b\u503c\u64cd\u4f5c\u4e2d\u5de6\u4fa7\u8868\u8fbe\u5f0f\u548c\u53f3\u4fa7\u8868\u8fbe\u5f0f\u5fc5\u987b\u90fd\u662f\u5355\u503c\u8868\u8fbe\u5f0f\uff0c\u5e76\u4e14\u5de6\u4fa7\u8868\u8fbe\u5f0f\u4e0d\u80fd\u662f\u7a7a\u767d\u6807\u8bc6\u7b26\u3002 a[i] <<= 2 i &^= 1<<n \u5143\u7956\u8d4b\u503c\u8bed\u53e5\u4f1a\u628a\u8fd0\u7b97\u8fd4\u56de\u7684\u591a\u4e2a\u503c\u5206\u522b\u5206\u914d\u7ed9\u53d8\u91cf\u5217\u8868\u3002\u5b83\u6709\u4e24\u79cd\u683c\u5f0f\uff0c\u7b2c\u4e00\u79cd\uff1a\u5b83\u662f\u8fd4\u56de\u591a\u503c\u7684\u8868\u8fbe\u5f0f\uff0c\u4f8b\u5982\u51fd\u6570\u8c03\u7528\u3001\u901a\u9053\u548c map \u8fd0\u7b97\u3001\u7c7b\u578b\u65ad\u8a00\u3002\u5de6\u4fa7\u8fd0\u7b97\u5143\u7684\u6570\u91cf\u5fc5\u987b\u7b49\u4e8e\u8fd4\u56de\u503c\u7684\u6570\u91cf\u3002\u5982\u679c\u51fd\u6570\u8fd4\u56de\u4e24\u4e2a\u503c\uff1a x, y = f() \u5b83\u4f1a\u5c06\u7b2c\u4e00\u4e2a\u8fd4\u56de\u503c\u5206\u914d\u7ed9 x \uff0c\u628a\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\u5206\u914d\u7ed9 y\u3002\u7b2c\u4e8c\u79cd\u683c\u5f0f\u4e2d\uff0c\u5de6\u4fa7\u8fd0\u7b97\u5143\u7684\u6570\u91cf\u5fc5\u987b\u7b49\u4e8e\u53f3\u4fa7\u8fd0\u7b97\u5143\u7684\u6570\u91cf\u3002\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u90fd\u53ea\u80fd\u8fd4\u56de\u5355\u4e00\u503c\uff0c\u53f3\u4fa7\u7b2c n \u4e2a\u503c\u4f1a\u8d4b\u503c\u7ed9\u5de6\u4fa7\u7b2c n \u4e2a\u53d8\u91cf\u3002 one, two, three = '\u4e00', '\u4e8c', '\u4e09' \u7a7a\u6807\u8bc6\u7b26\u53ef\u4ee5\u5728\u5206\u914d\u65f6\u5ffd\u7565\u4e00\u4e2a\u53f3\u9762\u4f4d\u7f6e\u7684\u8868\u8fbe\u5f0f\uff1a _ = x // evaluate x but ignore it x, _ = f() // evaluate f() but ignore second result value \u8d4b\u503c\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\u3002\u9996\u5148\u4f1a\u8ba1\u7b97\u5de6\u4fa7\u8fd0\u7b97\u5143\u7684\u7d22\u5f15\u8868\u8fbe\u5f0f\u548c\u6307\u9488\u7684\u89e3\u5f15\u7528\u5de5\u4f5c\u5e76\u4ee5\u4e00\u5b9a\u987a\u5e8f\u8ba1\u7b97\u53f3\u4fa7\u8868\u8fbe\u5f0f\u7684\u503c\u3002 \u7136\u540e\u4f9d\u6b21\u5bf9\u5de6\u4fa7\u8fd0\u7b97\u5143\u8d4b\u503c\u3002 a, b = b, a // exchange a and b x := []int{1, 2, 3} i := 0 i, x[i] = 1, 2 // set i = 1, x[0] = 2 i = 0 x[i], i = 2, 1 // set x[0] = 2, i = 1 x[0], x[0] = 1, 2 // set x[0] = 1, then x[0] = 2 (so x[0] == 2 at end) x[1], x[3] = 4, 5 // set x[1] = 4, then panic setting x[3] = 5. type Point struct { x, y int } var p *Point x[2], p.x = 6, 7 // set x[2] = 6, then panic setting p.x = 7 i = 2 x = []int{3, 5, 7} for i, x[i] = range x { // set i, x[2] = 0, x[0] break } // after this loop, i == 0 and x == []int{3, 5, 3} \u5728\u8d4b\u503c\u8bed\u53e5\u4e2d\u6bcf\u4e2a\u503c\u90fd\u5fc5\u987b\u80fd\u5206\u914d\u7ed9\u5de6\u4fa7\u6307\u5b9a\u7c7b\u578b\u7684\u503c\u3002\u9664\u4e86\u4ee5\u4e0b\u7279\u4f8b\uff1a \u4efb\u4f55\u7c7b\u578b\u90fd\u80fd\u5206\u914d\u7ed9\u7a7a\u6807\u8bc6\u7b26\u3002 \u5982\u679c\u628a\u65e0\u7c7b\u578b\u5e38\u91cf\u5206\u914d\u7ed9\u63a5\u53e3\u7c7b\u578b\u6216\u8005\u7a7a\u6807\u8bc6\u7b26\uff0c\u5b83\u4f1a\u8f6c\u6362\u6210\u9ed8\u8ba4\u7c7b\u578b\u3002 \u5982\u679c\u65e0\u7c7b\u578b\u7684\u5e03\u5c14\u503c\u5206\u914d\u7ed9\u4e86\u63a5\u53e3\u7c7b\u578b\u6216\u8005\u7a7a\u6807\u8bc6\u7b26\uff0c\u5b83\u4f1a\u5148\u8f6c\u6362\u6210 bool \u7c7b\u578b\u3002 if \u8bed\u53e5 if \u8bed\u53e5\u6839\u636e\u5e03\u5c14\u503c\u8868\u8fbe\u5f0f\u7684\u503c\u6765\u51b3\u5b9a\u6267\u884c\u6761\u4ef6\u5206\u652f\u7684\u4ee3\u7801\u3002\u5982\u679c\u8868\u8fbe\u5f0f\u4e3a\u771f\uff0c\u5c31\u6267\u884c if \u5206\u652f\u5185\u7684\u4ee3\u7801\uff0c\u5426\u5219\u6267\u884c else \u5206\u652f\u7684\u4ee3\u7801\u3002 IfStmt = \"if\" [ SimpleStmt \";\" ] Expression Block [ \"else\" ( IfStmt | Block ) ] . if x > max { x = max } \u8868\u8fbe\u5f0f\u53ef\u80fd\u5148\u4e8e\u666e\u901a\u8bed\u53e5\uff0c\u5b83\u4f1a\u5728\u8868\u8fbe\u5f0f\u6c42\u503c\u4e4b\u524d\u53d1\u751f\u3002 if x := f(); x < y { return x } else if x > z { return z } else { return y } switch \u8bed\u53e5 for \u8bed\u53e5 for \u8bed\u53e5\u53ef\u4ee5\u7528\u6765\u91cd\u590d\u6267\u884c\u4e00\u6bb5\u4ee3\u7801\u3002\u5b83\u6709\u4e09\u79cd\u683c\u5f0f\uff1a\u8fed\u4ee3\u5668\u53ef\u4ee5\u662f\u5355\u4e00\u6761\u4ef6\u3001for \u5206\u53e5\u6216\u8005 range \u8bed\u53e5\u3002 ForStmt = \"for\" [ Condition | ForClause | RangeClause ] Block . Condition = Expression . \u5355\u4e00\u6761\u4ef6\u7684 for \u8bed\u53e5 \u8fd9\u79cd\u60c5\u51b5\u4e0b for \u4f1a\u5728\u6761\u4ef6\u4e3a true \u65f6\u4e00\u76f4\u91cd\u590d\u3002\u6761\u4ef6\u4f1a\u5728\u6bcf\u6b21\u8fed\u4ee3\u65f6\u90fd\u91cd\u65b0\u8ba1\u7b97\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u6761\u4ef6\uff0c\u9ed8\u8ba4\u4e00\u76f4\u4e3a true\u3002 for a < b { a *= 2 } \u5e26\u5206\u53e5\u7684 for \u8bed\u53e5 \u5e26\u5206\u53e5\u7684 for \u8bed\u53e5\u4e5f\u662f\u7531\u6761\u4ef6\u63a7\u5236\uff0c\u53ea\u662f\u5b83\u6709\u4e00\u4e2a\u521d\u59cb\u5316\u548c\u5bc4\u9001\u7684\u8fc7\u7a0b\u3002\u4f8b\u5982\u8d4b\u503c\u3001\u9012\u589e\u6216\u8005\u9012\u51cf\u8bed\u53e5\u3002\u521d\u59cb\u5316\u8bed\u53e5\u53ef\u4ee5\u662f\u77ed\u53d8\u91cf\u58f0\u660e\uff0c\u4f46\u662f\u5bc4\u9001\u8bed\u53e5\u4e0d\u80fd\u3002\u5728\u521d\u59cb\u5316\u8bed\u53e5\u4e2d\u58f0\u660e\u7684\u53d8\u91cf\u53ef\u4ee5\u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u3002 ForClause = [ InitStmt ] \";\" [ Condition ] \";\" [ PostStmt ] . InitStmt = SimpleStmt . PostStmt = SimpleStmt . for i := 0; i < 10; i++ { f(i) } \u5982\u679c\u521d\u59cb\u5316\u8bed\u53e5\u975e\u7a7a\uff0c\u5b83\u4f1a\u5728\u8fdb\u5165\u8fed\u4ee3\u524d\u6267\u884c\u4e00\u6b21\uff1bpost \u8bed\u53e5\u5728\u6bcf\u6b21\u5faa\u73af\u540e\u90fd\u4f1a\u6267\u884c\u4e00\u6b21\u3002\u5728\u53ea\u6709\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u7701\u7565\u5206\u53f7\u3002\u5982\u679c\u7f3a\u7701\u6761\u4ef6\u8bed\u53e5\uff0c\u9ed8\u8ba4\u4e3a true\u3002 for cond { S() } is the same as for ; cond ; { S() } for { S() } is the same as for true { S() } \u5e26 range \u5206\u53e5\u7684 for \u8bed\u53e5 \u5e26 range \u5206\u53e5\u7684 for \u8bed\u53e5\u53ef\u4ee5\u8bbf\u95ee\u6570\u7ec4\u3001\u5207\u7247\u3001\u5b57\u7b26\u4e32\u3001map \u7684\u6240\u6709\u5143\u7d20\uff0c\u8fd8\u53ef\u4ee5\u4ece\u901a\u9053\u4e2d\u63a5\u6536\u503c\u3002\u8fed\u4ee3\u83b7\u5f97\u5143\u7d20\u5206\u914d\u7ed9\u4e86\u76f8\u5e94\u7684\u8fed\u4ee3\u53d8\u91cf\u5e76\u6267\u884c\u4ee3\u7801\u5757\u3002 RangeClause = [ ExpressionList \"=\" | IdentifierList \":=\" ] \"range\" Expression . \u53f3\u4fa7\u7684 range \u5206\u53e5\u8868\u8fbe\u5f0f\u53eb\u505a range \u8868\u8fbe\u5f0f\uff0c\u5b83\u53ef\u80fd\u662f\u6570\u7ec4\u3001\u6570\u7ec4\u7684\u6307\u9488\u3001\u5207\u7247\u3001\u5b57\u7b26\u4e32\u3001map \u6216\u901a\u9053\u63a5\u6536\u8005\u7c7b\u578b\u3002\u5728\u5206\u914d\u65f6\uff0c\u5de6\u4fa7\u8fd0\u7b97\u5143\u5fc5\u987b\u662f\u53ef\u5bfb\u5740\u7684\u6216\u8005 map \u7684\u7d22\u5f15\u8868\u8fbe\u5f0f\uff1b\u5b83\u4eec\u4f5c\u4e3a\u8fed\u4ee3\u53d8\u91cf\u3002\u5982\u679c range \u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u901a\u9053\u7c7b\u578b\uff0c\u81f3\u5c11\u9700\u8981\u6709\u4e00\u4e2a\u53d8\u91cf\uff0c\u5b83\u4e5f\u53ef\u4ee5\u6709\u4e24\u4e2a\u53d8\u91cf\u3002\u5982\u679c\u8fed\u4ee3\u53d8\u91cf\u662f\u7a7a\u6807\u8bc6\u7b26\uff0c\u5c31\u4ee3\u8868\u5728\u5206\u53e5\u4e2d\u4e0d\u5b58\u5728\u8be5\u6807\u8bc6\u7b26\u3002 Range expression 1st value 2nd value array or slice a [n]E, *[n]E, or []E index i int a[i] E string s string type index i int see below rune map m map[K]V key k K m[k] V channel c chan E, <-chan E element e E var testdata *struct { a *[7]int } for i, _ := range testdata.a { // testdata.a is never evaluated; len(testdata.a) is constant // i ranges from 0 to 6 f(i) } var a [10]string for i, s := range a { // type of i is int // type of s is string // s == a[i] g(i, s) } var key string var val interface {} // element type of m is assignable to val m := map[string]int{\"mon\":0, \"tue\":1, \"wed\":2, \"thu\":3, \"fri\":4, \"sat\":5, \"sun\":6} for key, val = range m { h(key, val) } // key == last map key encountered in iteration // val == map[key] var ch chan Work = producer() for w := range ch { doWork(w) } // empty a channel for range ch {} Go \u8bed\u53e5 go \u8bed\u53e5\u4f1a\u5f00\u59cb\u5728\u76f8\u540c\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u5355\u72ec goroutine \u4e2d\u8c03\u7528\u51fd\u6570\u3002 GoStmt = \"go\" Expression . \u8868\u8fbe\u5f0f\u5fc5\u987b\u662f\u51fd\u6570\u6216\u8005\u65b9\u6cd5\u8c03\u7528\uff1b\u5b83\u4e0d\u80fd\u4f7f\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u8c03\u7528\u5185\u7f6e\u51fd\u6570\u6709\u8868\u8fbe\u5f0f\u8bed\u53e5\u7684\u9650\u5236\u3002 \u51fd\u6570\u7684\u503c\u548c\u53c2\u6570\u4f1a\u6309\u987a\u5e8f\u5728\u8c03\u7528\u7684 goroutine \u4e2d\u6c42\u503c\u3002\u4e0d\u50cf\u666e\u901a\u7684\u51fd\u6570\u8c03\u7528\uff0c\u7a0b\u5e8f\u4e0d\u4f1a\u7b49\u5f85\u51fd\u6570\u8c03\u7528\u5b8c\u6210\uff0c\u800c\u662f\u76f4\u63a5\u5f00\u542f\u4e00\u4e2a\u65b0\u7684 goroutine \u6267\u884c\u51fd\u6570\u3002\u51fd\u6570\u9000\u51fa\u65f6\uff0cgoroutine \u4e5f\u4f1a\u9000\u51fa\u3002\u51fd\u6570\u7684\u4efb\u4f55\u8fd4\u56de\u503c\u90fd\u4f1a\u88ab\u4e22\u5f03\u3002 go Server() go func(ch chan<- bool) { for { sleep(10); ch <- true }} (c) select \u8bed\u53e5 select \u8bed\u53e5\u4f1a\u5728\u63a5\u6536/\u53d1\u9001\u64cd\u4f5c\u96c6\u4e2d\u9009\u62e9\u4e00\u4e2a\u6267\u884c\u3002\u5b83\u770b\u8d77\u6765\u548c switch \u5f88\u50cf\uff0c\u53ea\u4e0d\u8fc7\u662f\u4e13\u95e8\u9488\u5bf9\u901a\u4fe1\u64cd\u4f5c\u7684\u3002 SelectStmt = \"select\" \"{\" { CommClause } \"}\" . CommClause = CommCase \":\" StatementList . CommCase = \"case\" ( SendStmt | RecvStmt ) | \"default\" . RecvStmt = [ ExpressionList \"=\" | IdentifierList \":=\" ] RecvExpr . RecvExpr = Expression . \u63a5\u6536\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5c06\u63a5\u6536\u8868\u8fbe\u5f0f\u7684\u503c\u5206\u914d\u7ed9\u4e00\u4e2a\u6216\u4e24\u4e2a\u53d8\u91cf\u3002\u63a5\u6536\u8868\u8fbe\u5f0f\u5fc5\u987b\u662f\u4e00\u4e2a\u63a5\u6536\u8fd0\u7b97\u5143\uff08\u53ef\u4ee5\u4f7f\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff09\u3002\u5b83\u6700\u591a\u5141\u8bb8\u6709\u4e00\u4e2a default \u8bed\u53e5\u3002 select \u8bed\u53e5\u6267\u884c\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u5bf9\u4e8e select \u8bed\u53e5\u7684\u6240\u6709\u5206\u53e5\uff0c\u63a5\u6536\u64cd\u4f5c\u7684\u901a\u9053\u8fd0\u7b97\u5143\u3001\u901a\u9053\u3001\u53d1\u9001\u8bed\u53e5\u7684\u53f3\u4fa7\u8868\u8fbe\u5f0f\u90fd\u4f1a\u6267\u884c\u4e00\u6b21\u64cd\u4f5c\u3002 \u5982\u679c\u4e00\u4e2a\u6216\u591a\u4e2a\u901a\u4fe1\u540c\u65f6\u53d1\u751f\uff0c\u5b83\u4f1a\u901a\u8fc7\u4e00\u81f4\u6027\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6267\u884c\u3002\u5982\u679c\u6ca1\u6709 default \u8bed\u53e5\uff0cselect \u8bed\u53e5\u4f1a\u4e00\u76f4\u963b\u585e\u3002 \u9664\u4e86 default \u5206\u53e5\uff0c\u5176\u4ed6\u5206\u53e5\u53ea\u6709\u5728\u5f00\u59cb\u8fdb\u884c\u901a\u4fe1\u7684\u65f6\u5019\u624d\u4f1a\u6267\u884c\u3002 \u5982\u679c select \u5206\u53e5\u662f\u4e00\u4e2a\u63a5\u6536\u8bed\u53e5\uff0c\u5b83\u53ef\u4ee5\u7ed9\u53d8\u91cf\u5206\u914d\u503c\u3002 \u6267\u884c select \u5206\u53e5\u5185\u7684\u5185\u5bb9\u3002 \u5982\u679c\u5411 nil \u901a\u9053\u53d1\u9001\u4fe1\u606f\u5728\u6ca1\u6709 default \u5206\u53e5\u7684\u60c5\u51b5\u4e0b\u4f1a\u4e00\u76f4\u963b\u585e\u3002 var a []int var c, c1, c2, c3, c4 chan int var i1, i2 int select { case i1 = <-c1: print(\"received \", i1, \" from c1\\n\") case c2 <- i2: print(\"sent \", i2, \" to c2\\n\") case i3, ok := (<-c3): // same as: i3, ok := <-c3 if ok { print(\"received \", i3, \" from c3\\n\") } else { print(\"c3 is closed\\n\") } case a[f()] = <-c4: // same as: // case t := <-c4 // a[f()] = t default: print(\"no communication\\n\") } for { // send random sequence of bits to c select { case c <- 0: // note: no statement, no fallthrough, no folding of cases case c <- 1: } } select {} // block forever return \u8bed\u53e5 return \u8bed\u53e5\u4f1a\u7ec8\u6b62\u51fd\u6570 F \u7684\u6267\u884c\u5e76\u53ef\u9009\u7684\u8fd4\u56de\u4e00\u4e2a\u6216\u591a\u4e2a\u8fd4\u56de\u503c\u3002\u6240\u6709\u7684\u6ede\u540e\u51fd\u6570\u90fd\u4f1a\u5728 F \u8fd4\u56de\u5230\u5b83\u7684\u8c03\u7528\u8005\u4e4b\u524d\u6267\u884c\u3002 ReturnStmt = \"return\" [ ExpressionList ] . \u5982\u679c\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\u7c7b\u578b\uff0creturn \u4e0d\u80fd\u8fd4\u56de\u4efb\u4f55\u503c\u3002 func noResult() { return } \u6709\u4e09\u79cd\u65b9\u5f0f\u80fd\u591f\u8fd4\u56de\u6307\u5b9a\u7c7b\u578b\u7684\u503c\uff1a \u8fd4\u56de\u503c\u53ef\u4ee5\u76f4\u63a5\u5728 return \u8bed\u53e5\u4e2d\u5217\u51fa\u3002\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u90fd\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u503c\u5e76\u4e14\u80fd\u591f\u5206\u914d\u7ed9\u76f8\u5e94\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u3002 func simpleF() int { return 2 } func complexF1() (re float64, im float64) { return -7.0, -4.0 } return \u8bed\u53e5\u7684\u8868\u8fbe\u5f0f\u5217\u8868\u53ef\u4ee5\u662f\u4e00\u4e2a\u8fd4\u56de\u591a\u503c\u7684\u51fd\u6570\u8c03\u7528\u3002\u8fd9\u65f6\u4f1a\u4f7f\u7528\u4e34\u65f6\u53d8\u91cf\u6765\u83b7\u53d6\u51fd\u6570\u8c03\u7528\u7684\u8fd4\u56de\u503c\u5e76\u76f4\u63a5\u5c06\u5176\u4f5c\u4e3a return \u8bed\u53e5\u7684\u8868\u8fbe\u5f0f\u5217\u8868\u3002 func complexF2() (re float64, im float64) { return complexF1() } \u5982\u679c\u5236\u5b9a\u4e86\u8fd4\u56de\u503c\u7684\u6807\u8bc6\u7b26\u90a3\u4e48 return \u7684\u8868\u8fbe\u5f0f\u5217\u8868\u53ef\u4ee5\u4e3a\u7a7a\u3002\u8fd4\u56de\u503c\u53c2\u6570\u4f1a\u4f5c\u4e3a\u666e\u901a\u7684\u672c\u5730\u53d8\u91cf\u6309\u9700\u5206\u914d\u3002return \u8bed\u53e5\u4f1a\u76f4\u63a5\u8fd4\u56de\u5b83\u4eec\u3002 func complexF3() (re float64, im float64) { re = 7.0 im = 4.0 return } func (devnull) Write(p []byte) (n int, _ error) { n = len(p) return } \u4e0d\u7ba1\u5982\u4f55\u58f0\u660e\uff0c\u6240\u6709\u7684\u8fd4\u56de\u503c\u90fd\u4f1a\u5728\u8fdb\u5165\u51fd\u6570\u524d\u63d0\u524d\u521d\u59cb\u5316\u6210\u7c7b\u578b\u7684\u96f6\u503c\u3002return \u8bed\u53e5\u4f1a\u5728\u6240\u6709 defer \u51fd\u6570\u4e4b\u524d\u6307\u5b9a\u8fd4\u56de\u503c\u3002 \u5b9e\u73b0\u9650\u5236\uff1a\u7f16\u8bd1\u5668\u4e0d\u5141\u8bb8\u5728\u8986\u76d6\u4e86\u547d\u540d\u8fd4\u56de\u503c\u7684\u4f5c\u7528\u57df\u4e2d\u76f4\u63a5\u8fd4\u56de\u3002 func f(n int) (res int, err error) { if _, err := f(n-1); err != nil { return // invalid return statement: err is shadowed } return } break \u8bed\u53e5 break \u8bed\u53e5\u4f1a\u5728 for \u3001 switch \u6216 select \u8bed\u53e5\u5185\u90e8\u9000\u51fa\u5230\u76f8\u540c\u51fd\u6570\u7684\u67d0\u4e2a\u4f4d\u7f6e\u3002 BreakStmt = \"break\" [ Label ] . \u5982\u679c\u60f3\u6307\u5b9a\u6807\u7b7e\uff0c\u5b83\u5fc5\u987b\u51fa\u73b0\u5728\u5b83\u6240\u4e2d\u6b62\u7684 for \u3001 switch \u6216 select \u8bed\u53e5\u65c1\u3002 OuterLoop: for i = 0; i < n; i++ { for j = 0; j < m; j++ { switch a[i][j] { case nil: state = Error break OuterLoop case item: state = Found break OuterLoop } } } continue \u8bed\u53e5 continue \u8bed\u53e5\u4f1a\u63d0\u524d for \u8bed\u53e5\u7684\u4e0b\u4e00\u6b21\u8fed\u4ee3\u3002 for \u8bed\u53e5\u5fc5\u987b\u548c continue \u5728\u76f8\u540c\u51fd\u6570\u4e2d\u3002 RowLoop: for y, row := range rows { for x, data := range row { if data == endOfRow { continue RowLoop } row[x] = data + bias(x, y) } } goto \u8bed\u53e5 goto \u4f1a\u5c06\u7a0b\u5e8f\u8df3\u8f6c\u5230\u76f8\u540c\u51fd\u6570\u7684\u6307\u5b9a\u6807\u7b7e\u5904\u3002 GotoStmt = \"goto\" Label . goto Error goto \u8bed\u53e5\u4e0d\u5141\u8bb8\u8df3\u8fc7\u4f5c\u7528\u57df\u5185\u7a0b\u5e8f\u53d8\u91cf\u7684\u521d\u59cb\u5316\u5de5\u4f5c\u3002 goto L // BAD v := 3 L: \u4e0a\u9762\u7684\u7a0b\u5e8f\u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a\u5b83\u8df3\u8fc7\u4e86\u53d8\u91cf v \u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u3002 if n%2 == 1 { goto L1 } for n > 0 { f() n-- L1: f() n-- } \u6807\u7b7e\u4f5c\u7528\u57df\u5916\u7684 goto \u8bed\u53e5\u4e0d\u80fd\u8df3\u8f6c\u5230\u6807\u7b7e\u5904\uff0c\u6240\u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u662f\u9519\u8bef\u7684\u3002 Fallthrough \u8bed\u53e5 fallthrough \u8bed\u53e5\u4f1a\u8df3\u8f6c\u5230 switch \u8bed\u53e5\u4e2d\u7684\u4e0b\u4e00\u4e2a case \u5206\u53e5\u4e2d\u3002\u5b83\u5e94\u8be5\u53ea\u5728\u6700\u540e\u4e00\u4e2a\u975e\u7a7a\u5206\u53e5\u4e2d\u4f7f\u7528\u3002 FallthroughStmt = \"fallthrough\" . Defer \u8bed\u53e5 defer \u8bed\u53e5\u4f1a\u5728\u5305\u88f9\u51fd\u6570\u8fd4\u56de\u540e\u89e6\u53d1\u51fd\u6570\u8c03\u7528\u3002\u8fd9\u91cc\u7684\u8fd4\u56de\u6cdb\u6307\u51fd\u6570\u56e0\u4e3a return \u8bed\u53e5\u7ec8\u6b62\u3001\u5230\u8fbe\u51fd\u6570\u672b\u5c3e\u6216\u8005\u5f53\u524d goroutine \u89e6\u53d1\u8fd0\u884c\u65f6\u6050\u614c\u3002 DeferStmt = \"defer\" Expression . \u8868\u8fbe\u5f0f\u5fc5\u987b\u662f\u51fd\u6570\u6216\u8005\u65b9\u6cd5\u8c03\u7528\uff1b\u5b83\u4e0d\u80fd\u4f7f\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u8c03\u7528\u5185\u7f6e\u51fd\u6570\u4f1a\u6709\u4e00\u4e9b\u9650\u5236\u3002 \u6bcf\u6b21\u6267\u884c defer \u8bed\u53e5\u6267\u884c\u65f6\u90fd\u4f1a\u8ba1\u7b97\u51fd\u6570\u7684\u53c2\u6570\u548c\u503c\uff0c\u4f46\u662f\u5e76\u4e0d\u4f1a\u8c03\u7528\u51fd\u6570\u3002\u76f8\u53cd\uff0c\u51fd\u6570\u7684\u8c03\u7528\u662f\u5728\u5305\u88f9\u51fd\u6570\u8fd4\u56de\u540e\u8fdb\u884c\uff0c\u5b83\u4eec\u7684\u6267\u884c\u987a\u5e8f\u4e0e\u58f0\u660e\u987a\u5e8f\u6b63\u597d\u76f8\u53cd\u3002\u5982\u679c defer \u5bf9\u5e94\u7684\u51fd\u6570\u503c\u4e3a nil\uff0c\u4f1a\u5728\u8c03\u7528\u51fd\u6570\u7684\u65f6\u5019\u5bfc\u81f4\u8fd0\u884c\u65f6\u6050\u614c\u800c\u4e0d\u662f\u58f0\u660e defer \u8bed\u53e5\u7684\u65f6\u5019\u3002 \u4f8b\u5982\uff1a\u5f53 defer \u51fd\u6570\u4e3a\u51fd\u6570\u5b57\u9762\u503c\u4e14\u5305\u88f9\u51fd\u6570\u5177\u6709\u547d\u540d\u7ed3\u679c\u503c\uff0c\u6b64\u65f6\uff0c\u6211\u4eec\u5728defer \u51fd\u6570\u4e2d\u53ef\u4ee5\u8bbf\u95ee\u548c\u4fee\u6539\u547d\u540d\u7684\u7ed3\u679c\u503c\u3002defer \u51fd\u6570\u7684\u6240\u6709\u8fd4\u56de\u503c\u90fd\u4f1a\u88ab\u5ffd\u7565\u3002 lock(l) defer unlock(l) // unlocking happens before surrounding function returns // prints 3 2 1 0 before surrounding function returns for i := 0; i <= 3; i++ { defer fmt.Print(i) } // f returns 1 func f() (result int) { defer func() { result++ }() return 0 } \u5185\u7f6e\u51fd\u6570 \u5185\u7f6e\u51fd\u6570\u662f\u9884\u5b9a\u4e49\u7684\u3002\u8c03\u7528\u4ed6\u4eec\u548c\u5176\u4ed6\u51fd\u6570\u4e00\u6837\u53ea\u662f\u4ed6\u4eec\u63a5\u53d7\u4e00\u4e2a\u7c7b\u578b\u800c\u4e0d\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 \u5185\u7f6e\u51fd\u6570\u6ca1\u6709\u6807\u51c6\u7684 Go \u7c7b\u578b\uff0c\u6240\u4ee5\u4ed6\u4eec\u53ea\u80fd\u4f5c\u4e3a\u8c03\u7528\u8868\u8fbe\u5f0f\uff1b\u800c\u4e0d\u80fd\u4f5c\u4e3a\u51fd\u6570\u7684\u503c\u3002 Close \u5bf9\u4e8e\u7ba1\u9053\u7c7b\u578b c\uff0c\u5185\u7f6e\u51fd\u6570 close(c) \u610f\u5473\u7740\u4e0d\u5728\u6709\u6570\u636e\u63d2\u5165\u5230\u7ba1\u9053\u4e2d\u3002\u5982\u679c c \u662f\u4e00\u4e2a\u53ea\u63a5\u6536\u6570\u636e\u7684\u7ba1\u9053\uff0c\u4f1a\u53d1\u751f\u9519\u8bef\u3002\u5411\u5df2\u7ecf\u5173\u95ed\u7684\u53d1\u9001\u6570\u636e\u6216\u8005\u91cd\u590d\u5173\u95ed\u5df2\u7ecf\u5173\u95ed\u7684\u7ba1\u9053\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u6050\u614c\u3002\u5173\u95ed nil \u7ba1\u9053\u4f1a\u5f15\u8d77\u8fd0\u884c\u65f6\u6050\u614c\u3002\u8c03\u7528 close \u540e\u6240\u6709\u4e4b\u524d\u53d1\u9001\u7684\u6570\u636e\u90fd\u80fd\u63a5\u6536\u5230\uff0c\u5e76\u4e14\u5728\u6700\u540e\u4e0d\u4f1a\u963b\u585e\u800c\u8fd4\u56de\u96f6\u503c\u3002\u591a\u503c\u7684\u63a5\u6536\u64cd\u4f5c\u80fd\u591f\u8fd4\u56de\u63a5\u6536\u5230\u7684\u6570\u636e\u548c\u8868\u793a\u7ba1\u9053\u662f\u5426\u5173\u95ed\u7684\u5e03\u5c14\u503c\u3002 \u957f\u5ea6\u548c\u5bb9\u79ef \u5185\u7f6e\u51fd\u6570 len \u548c cap \u53ef\u4ee5\u63a5\u6536\u591a\u79cd\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a int \u7c7b\u578b\u7ed3\u679c\u503c\u3002\u51fd\u6570\u7684\u5b9e\u73b0\u80fd\u591f\u786e\u4fdd\u7ed3\u679c\u503c\u4e0d\u4f1a\u6ea2\u51fa\u3002 Call Argument type Result len(s) string type string length in bytes [n]T, *[n]T array length (== n) []T slice length map[K]T map length (number of defined keys) chan T number of elements queued in channel buffer cap(s) [n]T, *[n]T array length (== n) []T slice capacity chan T channel buffer capacity \u5207\u7247\u7684\u5bb9\u79ef\u5e95\u5c42\u6570\u7ec4\u5305\u542b\u7684\u5143\u7d20\u4e2a\u6570\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u6709\u4ee5\u4e0b\u5173\u7cfb\uff1a 0 <= len(s) <= cap(s) nil \u5207\u7247\uff0cmap\uff0c\u6216\u8005 channel \u7684\u957f\u5ea6\u90fd\u4e3a 0\u3002 nil \u5207\u7247\uff0c\u7ba1\u9053\u7684\u5bb9\u79ef\u90fd\u4e3a 0\u3002 \u8868\u8fbe\u5f0f len(x) \u5728 s \u662f\u5b57\u7b26\u4e32\u5e38\u91cf\u65f6\u4e5f\u4e3a\u5e38\u91cf\u3002\u5982\u679c s \u4e3a\u6570\u7ec4\u6216\u8005\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\u5e76\u4e14\u8868\u8fbe\u5f0f s \u4e0d\u5305\u542b channel \u63a5\u6536\u5668\u6216\u8005\u51fd\u6570\u8c03\u7528\u90a3\u4e48 len(s) \u548c cap(s) \u4e5f\u662f\u5e38\u91cf\uff1b\u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b s \u65f6\u4e0d\u80fd\u6c42\u503c\u7684\u3002\u5176\u4ed6\u60c5\u51b5\u4e0b len \u548c cap \u4e0d\u662f\u5e38\u91cf\u5e76\u4e14 s \u662f\u53ef\u4ee5\u6c42\u503c\u7684\u3002 const ( c1 = imag(2i) // imag(2i) = 2.0 is a constant c2 = len([10]float64{2}) // [10]float64{2} contains no function calls c3 = len([10]float64{c1}) // [10]float64{c1} contains no function calls c4 = len([10]float64{imag(2i)}) // imag(2i) is a constant and no function call is issued c5 = len([10]float64{imag(z)}) // invalid: imag(z) is a (non-constant) function call ) var z complex128 \u5185\u5b58\u5206\u914d \u5185\u7f6e\u51fd\u6570 new \u63a5\u6536\u4e00\u4e2a\u7c7b\u578b T\uff0c\u5b83\u4f1a\u5728\u8fd0\u884c\u65f6\u7ed9\u53d8\u91cf\u5206\u914d\u5185\u5b58\uff0c\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u7c7b\u578b T \u7684 *T \u7c7b\u578b\u6307\u9488\u3002\u53d8\u91cf\u7684\u521d\u59cb\u5316\u5728\u521d\u59cb\u5316\u503c\u7ae0\u8282\u4e2d\u4ecb\u7ecd\u3002 new(T) \u4f8b\u5982\uff1a type S struct { a int; b float64 } new(S) \u7ed9 S \u7c7b\u578b\u7684\u53d8\u91cf\u5206\u914d\u7a7a\u95f4\uff0c\u5e76\u521d\u59cb\u5316\u5b83\uff08 a=0 \uff0c b=0.0 \uff09\uff0c\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a *S \u7c7b\u578b\u503c\u4fdd\u5b58\u53d8\u91cf\u6240\u5728\u7684\u4f4d\u7f6e\u3002 \u521b\u5efa\u5207\u7247\uff0cmap \u548c \u7ba1\u9053 \u5185\u7f6e\u51fd\u6570 make \u4ee5\u4e00\u4e2a\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\uff0c\u5b83\u5fc5\u987b\u662f\u4e00\u4e2a\u5207\u7247\uff0cmap \u6216\u8005\u7ba1\u9053\u7c7b\u578b\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a T \u7c7b\u578b\u7684\u503c\uff0c\u800c\u4e0d\u662f\uff08*T\uff09\u7c7b\u578b\uff0c\u5b83\u4f1a\u6309\u521d\u59cb\u5316\u503c\u7ae0\u8282\u63cf\u8ff0\u7684\u65b9\u5f0f\u8fdb\u884c\u521d\u59cb\u5316\u3002 Call Type T Result make(T, n) slice slice of type T with length n and capacity n make(T, n, m) slice slice of type T with length n and capacity m make(T) map map of type T make(T, n) map map of type T with initial space for approximately n elements make(T) channel unbuffered channel of type T make(T, n) channel buffered channel of type T, buffer size n n \u548c m \u5fc5\u987b\u662f\u6574\u6570\u7c7b\u578b\u6216\u8005\u65e0\u7c7b\u578b\u5e38\u91cf\u3002\u4e00\u4e2a\u5e38\u91cf\u53c2\u6570\u4e0d\u80fd\u4e3a\u8d1f\u6570\u5e76\u4e14\u8be5\u503c\u5728 int \u7c7b\u578b\u7684\u8303\u56f4\u5185\uff1b\u5982\u679c\u5b83\u662f\u65e0\u7c7b\u578b\u5e38\u91cf\uff0c\u4f1a\u88ab\u8f6c\u6362\u6210 int \u7c7b\u578b\u3002\u5982\u679c n \u548c m \u90fd\u662f\u5e38\u91cf\uff0c\u90a3\u4e48 n \u5fc5\u987b\u5927\u4e8e m\u3002\u5982\u679c n \u662f\u8d1f\u6570\u6216\u8005\u5927\u4e8e m \u4f1a\u5f15\u53d1\u8fd0\u884c\u65f6 panic\u3002 s := make([]int, 10, 100) // slice with len(s) == 10, cap(s) == 100 s := make([]int, 1e3) // slice with len(s) == cap(s) == 1000 s := make([]int, 1<<63) // illegal: len(s) is not representable by a value of type int s := make([]int, 10, 0) // illegal: len(s) > cap(s) c := make(chan int, 10) // channel with a buffer size of 10 m := make(map[string]int, 100) // map with initial space for approximately 100 elements \u4f7f\u7528 make \u6765\u6307\u5b9a\u5927\u5c0f\u521d\u59cb\u5316 map \u7c7b\u578b\u5c06\u4f1a\u521b\u5efa\u4e00\u4e2a\u9884\u7559 n \u4e2a\u5143\u7d20\u7a7a\u95f4\u7684 map \u7c7b\u578b\u3002\u66f4\u8be6\u7ec6\u7684\u884c\u4e3a\u4f9d\u8d56\u4e8e\u5177\u4f53\u5b9e\u73b0\u3002 \u8ffd\u52a0\u6216\u8005\u62f7\u8d1d\u5207\u7247 \u5185\u7f6e\u51fd\u6570 append \u548c copy \u53ef\u4ee5\u8fdb\u884c\u5207\u7247\u7684\u901a\u7528\u64cd\u4f5c\u3002\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u51fd\u6570\uff0c\u4e00\u4e2a\u662f\u62f7\u8d1d\u5185\u5b58\uff0c\u4e00\u4e2a\u662f\u5f15\u7528\u5185\u5b58\u3002 \u53ef\u53d8\u53c2\u6570\u7684\u51fd\u6570 append \u53ef\u4ee5\u5411\u5207\u7247 s \u4e2d\u8ffd\u52a0\u4e00\u4e2a\u6216\u591a\u4e2a x \u503c\uff0c\u5e76\u8fd4\u56de\u8fd9\u4e2a\u5207\u7247\u3002\u4f20\u8fdb ...T \u7684\u503c\u4f1a\u6839\u636e\u53c2\u6570\u4f20\u503c\u3002\u4f5c\u4e3a\u7279\u4f8b\uff0c append \u5728 s \u4e3a []byte \u5207\u7247\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32\u540e\u9762\u8ddf ... \u4f5c\u4e3a\u53c2\u6570\u3002 \u5982\u679c s \u7684\u5bb9\u79ef\u5bb9\u7eb3\u4e0d\u4e0b\u8fd9\u4e9b\u5143\u7d20\uff0c\u90a3\u4e48 append \u4f1a\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u8db3\u591f\u5927\u7684\u6570\u7ec4\u3002\u5426\u5219\u4f1a\u4f7f\u7528\u539f\u6765\u7684\u5e95\u5c42\u6570\u7ec4\u3002 s0 := []int{0, 0} s1 := append(s0, 2) // append a single element s1 == []int{0, 0, 2} s2 := append(s1, 3, 5, 7) // append multiple elements s2 == []int{0, 0, 2, 3, 5, 7} s3 := append(s2, s0...) // append a slice s3 == []int{0, 0, 2, 3, 5, 7, 0, 0} s4 := append(s3[3:6], s3[2:]...) // append overlapping slice s4 == []int{3, 5, 7, 2, 3, 5, 7, 0, 0} var t []interface{} t = append(t, 42, 3.1415, \"foo\") // t == []interface{}{42, 3.1415, \"foo\"} var b []byte b = append(b, \"bar\"...) // append string contents b == []byte{'b', 'a', 'r' } copy \u51fd\u6570\u4ece src \u62f7\u8d1d\u539f\u5c5e\u5230 dst \u5e76\u4e14\u8fd4\u56de\u62f7\u8d1d\u5143\u7d20\u7684\u4e2a\u6570\u3002\u53c2\u6570\u4e2d\u6240\u6709\u7684\u5143\u7d20\u7c7b\u578b\u5fc5\u987b\u662f T \u7c7b\u578b\u6216\u8005\u80fd\u8f6c\u6362\u6210 T \u7684\u7c7b\u578b\u3002\u62f7\u8d1d\u5143\u7d20\u7684\u6570\u91cf\u662f len(src) \u548c len(dst) \u4e2d\u7684\u8f83\u5c0f\u503c\u3002\u4f5c\u4e3a\u7279\u4f8b\uff0c copy \u53ef\u4ee5\u4ece string \u7c7b\u578b\u62f7\u8d1d\u5143\u7d20\u5230 []byte \u7c7b\u578b\u3002\u8fd9\u4f1a\u628a\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u5b57\u8282\u5207\u7247\u4e2d\u3002 copy(dst, src []T) int copy(dst []byte, src string) int \u4f8b\uff1a var a = [...]int{0, 1, 2, 3, 4, 5, 6, 7} var s = make([]int, 6) var b = make([]byte, 5) n1 := copy(s, a[0:]) // n1 == 6, s == []int{0, 1, 2, 3, 4, 5} n2 := copy(s, s[2:]) // n2 == 4, s == []int{2, 3, 4, 5, 4, 5} n3 := copy(b, \"Hello, World!\") // n3 == 5, b == []byte(\"Hello\") \u5220\u9664 map \u4e2d\u7684\u5143\u7d20 \u5185\u7f6e\u51fd\u6570 delete \u79fb\u9664 map \u7c7b\u578b m \u4e2d\u7684\u952e\u503c k\u3002k \u7684\u7c7b\u578b\u5fc5\u987b\u662f\u80fd\u591f\u8f6c\u6362\u6210 m \u952e\u7c7b\u578b\u7684\u7c7b\u578b\u3002 delete(m, k) // remove element m[k] from map m \u5982\u679c map \u7c7b\u578b m \u662f nil \u6216\u8005 m[k] \u4e0d\u5b58\u5728\uff0c\u90a3\u4e48 delete \u51fd\u6570\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002 \u64cd\u4f5c\u590d\u6570 \u6709\u4e09\u4e2a\u51fd\u6570\u53ef\u4ee5\u7ec4\u88c5\u6216\u8005\u5206\u89e3\u590d\u6570\u3002\u5185\u7f6e\u51fd\u6570 complex \u4f1a\u6784\u9020\u4e00\u4e2a\u590d\u6570\uff0c real \u548c imag \u4f1a\u5206\u89e3\u51fa\u590d\u6570\u7684\u5b9e\u90e8\u548c\u865a\u90e8\u3002 complex(realPart, imaginaryPart floatT) complexT real(complexT) floatT imag(complexT) floatT \u53c2\u6570\u7684\u7c7b\u578b\u548c\u8fd4\u56de\u503c\u7c7b\u578b\u662f\u5bf9\u5e94\u7684\u3002\u5bf9\u4e8e complex \uff0c\u4e24\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u76f8\u540c\u7684\u6d6e\u70b9\u7c7b\u578b\uff0c\u5e76\u8fd4\u56de\u7531\u76f8\u540c\u6d6e\u70b9\u6570\u7ec4\u6210\u7684\u590d\u6570\u7c7b\u578b\u3002 complex64 \u662f float32 \u5bf9\u5e94\u7684\u7c7b\u578b\uff0c complex128 \u662f float64 \u5bf9\u5e94\u7684\u53c2\u6570\u7c7b\u578b\u3002\u5982\u679c\u53c2\u6570\u662f\u4e00\u4e2a\u65e0\u7c7b\u578b\u5e38\u91cf\uff0c\u5b83\u4f1a\u8f6c\u6362\u6210\u53e6\u4e00\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u3002\u5982\u679c\u4e24\u4e2a\u53c2\u6570\u90fd\u662f\u65e0\u7c7b\u578b\u5e38\u91cf\uff0c\u4ed6\u4eec\u5fc5\u987b\u5b9e\u6570\u6216\u8005\u865a\u6570\u90e8\u5206\u4e3a\u96f6\uff0c\u5e76\u4e14\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65e0\u7c7b\u578b\u7684\u590d\u6570\u5e38\u91cf\u3002 real \u548c imag \u51fd\u6570\u548c complex \u6b63\u597d\u76f8\u53cd\u7684\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u503c\u590d\u6570\u7c7b\u578b Z \u7684\u503c z\uff0c z==Z(complex(real(z),imag(z))) \u3002 \u5982\u679c\u8fd9\u4e48\u64cd\u4f5c\u90fd\u662f\u5e38\u91cf\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u503c\u4e5f\u662f\u5e38\u91cf\u3002 var a = complex(2, -2) // complex128 const b = complex(1.0, -1.4) // untyped complex constant 1 - 1.4i x := float32(math.Cos(math.Pi/2)) // float32 var c64 = complex(5, -x) // complex64 var s uint = complex(1, 0) // untyped complex constant 1 + 0i can be converted to uint _ = complex(1, 2<<s) // illegal: 2 assumes floating-point type, cannot shift var rl = real(c64) // float32 var im = imag(a) // float64 const c = imag(b) // untyped constant -1.4 _ = imag(3 << s) // illegal: 3 assumes complex type, cannot shift \u5904\u7406 panic \u4e24\u4e2a\u5185\u7f6e\u51fd\u6570 panic \u548c recover \uff0c\u53ef\u4ee5\u629b\u51fa\u548c\u5904\u7406\u8fd0\u884c\u65f6 panic \u548c\u7a0b\u5e8f\u7684\u9519\u8bef\u6761\u4ef6\u3002 func panic(interface{}) func recover() interface{} \u5f53\u6267\u884c F \u51fd\u6570\u65f6\uff0c\u663e\u5f0f\u7684\u8c03\u7528 panic \u6216\u8005\u8fd0\u884c\u65f6 panic \u90fd\u4f1a\u4e2d\u65ad F \u7684\u6267\u884c\u3002\u4f46\u662f F \u4e2d\u7684\u5ef6\u8fdf\u51fd\u6570\u8fd8\u4f1a\u6267\u884c\u3002\u63a5\u4e0b\u6765\u8c03\u7528 F \u51fd\u6570\u5904\u7684\u5ef6\u8fdf\u51fd\u6570\u4e5f\u4f1a\u6267\u884c\uff0c\u4e00\u76f4\u5230\u9876\u7ea7\u7684\u5ef6\u8fdf\u51fd\u6570\u3002\u9274\u4e8e\u8fd9\u70b9\uff0c\u7a0b\u5e8f\u5173\u95ed\u5e76\u4e14\u9519\u8bef\u6761\u4ef6\u53ef\u4ee5\u629b\u51fa\u3002\u5305\u62ec panic \u4e2d\u7684\u503c\u3002\u8fd9\u4e2a\u987a\u5e8f\u53eb\u505a panicking \u3002 panic(42) panic(\"unreachable\") panic(Error(\"cannot parse\")) recover \u51fd\u6570\u5141\u8bb8\u7a0b\u5e8f\u4ece\u4e00\u4e2a panicking \u4e2d\u6062\u590d\u6267\u884c\u3002\u5047\u8bbe\u51fd\u6570 G \u5ef6\u8fdf\u6267\u884c\u51fd\u6570 D \uff0c\u5728 D \u4e2d\u8c03\u7528 recover \u8fd9\u65f6\u5982\u679c\u5728 G \u6267\u884c\u65f6\u53d1\u751f panic \u4f1a\u5728 D \u4e2d\u6062\u590d\u3002\u5f53\u51fd\u6570\u6267\u884c\u5230 D\uff0c recover \u7684\u8fd4\u56de\u503c\u4f1a\u8fd4\u56de panic \u5bf9\u5e94\u7684\u9519\u8bef\uff0c\u5e76\u4e14\u7ec8\u6b62 panicking \u3002\u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b G \u51fd\u6570\u548c panic \u4e4b\u95f4\u7684\u4ee3\u7801\u4e0d\u4f1a\u6267\u884c\u3002\u4efb\u4f55\u5728 D \u4e2d G \u4e4b\u524d\u7684\u5ef6\u8fdf\u51fd\u6570\u4f1a\u8fd4\u56de\u5230\u8c03\u7528\u8005\u3002 \u5728\u4e0b\u9762\u4e24\u79cd\u60c5\u51b5\u4e0b recover \u4f1a\u8fd4\u56de nil\uff1a panic \u7684\u53c2\u6570\u4e3a nil \u643a\u7a0b\u91cc\u6ca1\u6709\u53d1\u751f panic recover \u4e0d\u662f\u5728\u5ef6\u8fdf\u51fd\u6570\u4e2d\u6267\u884c \u672c\u4f8b\u4e2d\u7684 protect \u51fd\u6570\u4f1a\u5728 g \u53d1\u751f panic \u7684\u65f6\u5019\u6062\u590d\u6267\u884c\u3002 func protect(g func()) { defer func() { log.Println(\"done\") // Println executes normally even if there is a panic if x := recover(); x != nil { log.Printf(\"run time panic: %v\", x) } }() log.Println(\"start\") g() } \u521d\u59cb\u5316 \u8fd9\u4e2a\u5b9e\u73b0\u63d0\u4f9b\u4e86\u591a\u4e2a\u5185\u7f6e\u51fd\u6570\u6765\u5e2e\u52a9\u8fdb\u884c\u521d\u59cb\u5316\u3002\u8fd9\u4e9b\u51fd\u6570\u7528\u6765\u8f93\u51fa\u4fe1\u606f\u4f46\u662f\u4e0d\u786e\u5b9a\u4f1a\u4e00\u76f4\u5b58\u5728\u4e8e\u8bed\u8a00\u4e2d\uff0c\u4ed6\u4eec\u90fd\u6ca1\u6709\u8fd4\u56de\u503c\u3002 Function Behavior print prints all arguments; formatting of arguments is implementation-specific println like print but prints spaces between arguments and a newline at the end \u5b9e\u73b0\u9650\u5236\uff1a print \u548c println \u4e0d\u63a5\u53d7\u9664\u4e86\u5e03\u5c14\u503c\uff0c\u6570\u5b57\uff0c\u5b57\u7b26\u4e32\u4ee5\u5916\u7684\u5176\u4ed6\u7c7b\u578b\u3002 \u7a0b\u5e8f\u7684\u521d\u59cb\u5316\u548c\u6267\u884c \u96f6\u503c \u5f53\u4e3a\u53d8\u91cf\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u65f6\uff0c\u4e0d\u7ba1\u662f\u58f0\u660e\u8fd8\u662f\u8c03\u7528 new \u6216\u8005\u4f7f\u7528\u5b57\u9762\u503c\u548c make \u521d\u59cb\u5316\uff0c\u53ea\u8981\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u503c\u53d8\u91cf\u90fd\u4f1a\u6709\u4e00\u4e2a\u9ed8\u8ba4\u503c\u3002\u8fd9\u6837\u7684\u5143\u7d20\u548c\u503c\u4f1a\u4f7f\u7528\u5b83\u7c7b\u578b\u7684\u96f6\u503c\uff1a false \u662f\u5e03\u5c14\u503c\u7684\u96f6\u503c\uff0c0 \u4e3a\u6570\u503c\u7c7b\u578b\u96f6\u503c\uff0c\"\" \u4e3a\u5b57\u7b26\u4e32\u96f6\u503c\uff0cnil \u4e3a\u6307\u9488\uff0c\u51fd\u6570\uff0c\u63a5\u53e3\uff0c\u5207\u7247\uff0c\u9891\u9053\uff0c\u5b57\u5178\u3002\u521d\u59cb\u5316\u4f1a\u9012\u5f52\u5b8c\u6210\uff0c\u6240\u4ee5\u7ed3\u6784\u4f53\u91cc\u7684\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e5f\u90fd\u4f1a\u6709\u5b83\u81ea\u5df1\u7684\u96f6\u503c\u3002 \u4e0b\u9762\u4e24\u4e2a\u58f0\u660e\u65f6\u76f8\u7b49\u7684\uff1a var i int var i int = 0 \u8bf7\u770b\u4e0b\u9762\u7684\u58f0\u660e\uff1a type T struct { i int; f float64; next *T } t := new(T) t.i == 0 t.f == 0.0 t.next == nil \u8fd9\u548c\u4e0b\u9762\u7684\u58f0\u660e\u65f6\u540c\u7b49\u6548\u679c\u7684\uff1a var t T \u5305\u7684\u521d\u59cb\u5316 \u4fdd\u7ea7\u53d8\u91cf\u4f1a\u6309\u58f0\u660e\u7684\u987a\u5e8f\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982\u679c\u4f9d\u8d56\u5176\u4ed6\u53d8\u91cf\uff0c\u5219\u4f1a\u5728\u5176\u4ed6\u53d8\u91cf\u4e4b\u540e\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u66f4\u786e\u5207\u7684\u8bf4\uff0c\u5982\u679c\u5305\u7ea7\u53d8\u91cf\u8fd8\u6ca1\u521d\u59cb\u5316\u5e76\u4e14\u6ca1\u6709\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u6216\u8005\u8868\u8fbe\u5f0f\u4e2d\u4e0d\u5305\u542b\u5bf9\u5176\u4ed6\u672a\u521d\u59cb\u5316\u53d8\u91cf\u7684\u4f9d\u8d56\uff0c\u90a3\u4e48\u4f1a\u8ba4\u4e3a\u5b83\u6b63\u5728\u7b49\u5f85\u521d\u59cb\u5316\u3002\u521d\u59cb\u5316\u8fc7\u7a0b\u4f1a\u4ece\u6700\u65e9\u58f0\u660e\u7684\u53d8\u91cf\u5f00\u59cb\u5411\u4e0b\u4e00\u4e2a\u5305\u7ea7\u53d8\u91cf\u91cd\u590d\uff0c\u76f4\u5230\u6ca1\u6709\u9700\u8981\u521d\u59cb\u5316\u7684\u53d8\u91cf\u3002 \u5982\u679c\u5728\u521d\u59cb\u5316\u8fc7\u7a0b\u5b8c\u6210\u540e\u8fd8\u6709\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u8fd9\u4e9b\u53d8\u91cf\u53ef\u80fd\u662f\u5faa\u73af\u521d\u59cb\u5316\u4e86\uff0c\u8fd9\u4e8b\u7a0b\u5e8f\u4e0d\u662f\u5408\u6cd5\u7684\u3002 \u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\u53d8\u91cf\u7684\u58f0\u660e\u987a\u5e8f\u4f1a\u4f9d\u636e\u7f16\u8bd1\u65f6\u6587\u4ef6\u51fa\u73b0\u7684\u987a\u5e8f\uff1a\u58f0\u660e\u5728\u7b2c\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7684\u53d8\u91cf\u4f18\u5148\u4e8e\u7b2c\u4e8c\u4e2a\u6587\u4ef6\u4e2d\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u5bf9\u4f9d\u8d56\u5173\u7cfb\u7684\u5206\u6790\u4e0d\u4f1a\u6839\u636e\u53d8\u91cf\u7684\u5177\u4f53\u503c\uff0c\u5b83\u53ea\u5206\u6790\u5728\u6e90\u7801\u4e2d\u662f\u5426\u5f15\u7528\u4e86\u5176\u4ed6\u53d8\u91cf\u3002\u4f8b\u5982\uff0c\u5982\u679c\u53d8\u91cf x \u7684\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u5f15\u7528\u4e86\u53d8\u91cf y \u90a3\u4e48 x \u5c31\u4f9d\u8d56\u4e8e y\uff1a \u5f15\u7528\u4e00\u4e2a\u53d8\u91cf\u6216\u8005\u51fd\u6570\u4e2d\u7528\u5230\u4e86\u4e00\u4e2a\u53d8\u91cf \u5f15\u7528\u4e86\u4e00\u4e2a\u65b9\u6cd5\u503c m \u6216\u8005\u65b9\u6cd5\u8868\u8fbe\u5f0f t.m (\u8fd9\u91cc\u7684\u9759\u6001\u7c7b\u578b t \u4e0d\u662f\u501f\u53e3\u7c7b\u578b\uff0c\u5e76\u4e14\u65b9\u6cd5 m \u662f t \u65b9\u6cd5\u96c6\u4e2d\u7684\u65b9\u6cd5)\u3002 t.m \u7684\u8fd4\u56de\u503c\u4e0d\u4f1a\u5728\u6b64\u65f6\u5f71\u54cd\u3002 \u53d8\u91cf\uff0c\u51fd\u6570\uff0c\u6216\u8005\u65b9\u6cd5 x \u4f9d\u8d56\u53d8\u91cf y \u4f9d\u8d56\u5206\u6790\u4f1a\u5728\u6bcf\u4e2a\u5305\u4e2d\u6267\u884c\uff1b\u4ed6\u53ea\u8003\u8651\u5f53\u524d\u5305\u4e2d\u7684\u6790\u53d8\u91cf\uff0c\u51fd\u6570\uff0c\u548c\u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u58f0\u660e\uff1a var ( a = c + b b = f() c = f() d = 3 ) func f() int { d++ return d } \u521d\u59cb\u5316\u987a\u5e8f\u4e3a d\uff0cb\uff0cc\uff0ca\u3002 \u53d8\u91cf\u53ef\u4ee5\u5728\u5305\u4e2d\u58f0\u660e\u7684\u521d\u59cb\u5316\u51fd\u6570 init \u4e2d\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5b83\u6ca1\u6709\u53c2\u6570\u548c\u8fd4\u56de\u503c\u3002 func init() {} \u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u5305\u5b9a\u4e49\u591a\u4e2a\u8be5\u51fd\u6570\uff0c\u751a\u81f3\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u4e5f\u53ef\u4ee5\u3002\u5e76\u4e14\u4e0d\u4f1a\u58f0\u660e\u8be5\u8be5\u6807\u8bc6\u7b26\u3002\u56e0\u6b64 init \u51fd\u6570\u4e0d\u80fd\u5728\u7a0b\u5e8f\u4e2d\u8c03\u7528\u3002 \u8fd8\u672a\u5bfc\u5165\u7684\u5305\u4f1a\u5148\u521d\u59cb\u5316\u5305\u7ea7\u7684\u53d8\u91cf\u7136\u540e\u6309\u7167 init \u51fd\u6570\u5728\u6e90\u7801\u4e2d\u7684\u987a\u5e8f\u8c03\u7528\uff0c\u5b83\u53ef\u80fd\u5728\u5305\u7684\u591a\u4e2a\u6587\u4ef6\u4e2d\u3002\u5982\u679c\u9700\u8981\u5bfc\u5165\u4e00\u4e2a\u5305\uff0c\u5b83\u4f1a\u5728\u521d\u59cb\u5316\u81ea\u5df1\u4e4b\u524d\u5148\u521d\u59cb\u5316\u8fd9\u4e2a\u9700\u8981\u5bfc\u5165\u7684\u5305\u3002\u5982\u679c\u5bfc\u5165\u4e00\u4e2a\u5305\u591a\u6b21\uff0c\u90a3\u8fd9\u4e2a\u5305\u53ea\u4f1a\u521d\u59cb\u5316\u4e00\u6b21\u3002\u5bfc\u5165\u7684\u5305\u4e0d\u80fd\u5b58\u5728\u5faa\u73af\u5f15\u7528\u3002 \u5305\u7684\u521d\u59cb\u5316\u2014\u2014\u53d8\u91cf\u521d\u59cb\u5316\u548c\u5bf9 init \u51fd\u6570\u7684\u8c03\u7528\u4f1a\u6309\u987a\u5e8f\u53d1\u751f\u5728\u540c\u4e00\u4e2a goroutine \u4e2d\u3002 init \u51fd\u6570\u53ef\u80fd\u4f1a\u542f\u52a8\u5176\u4ed6 goroutine\u3002\u4e0d\u8fc7\u4e00\u822c init \u51fd\u6570\u90fd\u662f\u6309\u5e8f\u8fdb\u884c\u521d\u59cb\u5316\u7684\uff1a\u5b83\u53ea\u5728\u4e0a\u4e00\u6b65\u5df2\u7ecf\u6267\u884c\u5b8c\u6210\u65f6\u624d\u4f1a\u8c03\u7528\u4e0b\u4e00\u4e2a\u6b65\u9aa4\u3002 \u786e\u4fdd\u521d\u59cb\u5316\u884c\u4e3a\u662f\u53ef\u4ee5\u590d\u73b0\u7684\uff0c\u6784\u5efa\u7cfb\u7edf\u9f13\u52b1\u5728\u540c\u4e00\u4e2a\u5305\u4e2d\u5305\u542b\u591a\u4e2a\u6587\u4ef6\u8fd9\u4e9b\u6587\u4ef6\u5728\u7f16\u8bd1\u5668\u4e2d\u4f1a\u4ee5\u5b57\u6bcd\u6392\u5e8f\u3002 \u7a0b\u5e8f\u6267\u884c \u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\u7531\u4e00\u4e2a main \u5305\u5bfc\u5165\u6240\u6709\u9700\u8981\u7684\u5305\u3002 main \u5305\u5fc5\u987b\u4ee5 main \u4f5c\u4e3a\u5305\u540d\u5e76\u4e14\u58f0\u660e\u4e00\u4e2a\u6ca1\u6709\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684 main \u51fd\u6570\u3002 func main() {} \u7a0b\u5e8f\u5148\u521d\u59cb\u5316 main \u5305\u7136\u540e\u8c03\u7528 main \u51fd\u6570\u3002\u5f53 main \u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u9000\u51fa\u3002\u5b83\u4e0d\u4f1a\u7b49\u5f85\u5176\u4ed6 goroutines \u5b8c\u6210\u3002 \u9519\u8bef \u9884\u5b9a\u4e49\u7684\u9519\u8bef\u7c7b\u578b\u4e3a\uff1a type error interface { Error() string } \u5b83\u662f\u8868\u793a\u9519\u8bef\u4fe1\u606f\u7684\u5e38\u89c4\u63a5\u53e3\uff0cnil \u4ee3\u8868\u6ca1\u6709\u53d1\u751f\u9519\u8bef\u3002\u4f8b\u5982\uff0c\u5728\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u53ef\u4ee5\u5b9a\u4e49\u4e3a\uff1a func Read(f *File, b []byte) (n int, err error) \u8fd0\u884c\u65f6\u6050\u614c \u8fd0\u884c\u65f6\u9519\u8bef\uff08\u4f8b\u5982\u6570\u7ec4\u7684\u8d8a\u754c\u8bbf\u95ee\uff09\u4f1a\u9020\u6210\u8fd0\u884c\u65f6\u6050\u614c\uff0c\u5b83\u548c\u4ee5 runtime.Error \u63a5\u53e3\u5b9e\u73b0\u8c03\u7528\u5185\u7f6e\u7684 panic \u51fd\u6570\u4e00\u6837\u3002 runtime.Error \u6ee1\u8db3\u9884\u5b9a\u4e49\u7684 error \u63a5\u53e3\u3002\u4e0d\u540c\u7684\u9519\u8bef\u503c\u4ee3\u8868\u4e0d\u540c\u7684\u8fd0\u884c\u65f6\u9519\u8bef\u6761\u4ef6\u3002 package runtime type Error interface { error // and perhaps other methods } \u7cfb\u7edf\u76f8\u5173 unsafe \u5305 unsafe \u662f\u7f16\u8bd1\u5668\u5df2\u77e5\u7684\u5185\u7f6e\u5305\uff0c\u53ef\u4ee5\u901a\u8fc7\u5bfc\u5165\u8def\u5f84 unsafe \u8bbf\u95ee\u5305\u5185\u5bb9\uff0c\u63d0\u4f9b unsafe \u5305\u76ee\u7684\u662f\u652f\u6301\u5e95\u5c42\u7f16\u7a0b\uff08\u5305\u62ec\u64cd\u4f5c\u975e Go \u7c7b\u578b\u7684\u6570\u636e\u7ed3\u6784\uff09\u3002\u4f7f\u7528 unsafe \u5305\u5fc5\u987b\u81ea\u5df1\u4fdd\u8bc1\u7c7b\u578b\u5b89\u5168\u800c\u4e14\u5b83\u6709\u53ef\u80fd\u7834\u574f\u7a0b\u5e8f\u7684\u79fb\u690d\u6027\u3002 unsafe \u5305\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u63a5\u53e3\uff1a package unsafe type ArbitraryType int // \u4efb\u610f\u4e00\u4e2a Go \u7c7b\u578b\uff1b\u5b83\u4e0d\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u7c7b\u578b\u3002 type Pointer *ArbitraryType func Alignof(variable ArbitraryType) uintptr func Offsetof(selector ArbitraryType) uintptr func Sizeof(variable ArbitraryType) uintptr Pointer \u662f\u4e00\u4e2a\u6307\u9488\u7c7b\u578b\uff0c\u4f46\u662f\u4e0d\u80fd\u89e3\u5f15\u7528 Pointer \u7684\u503c\u3002\u6240\u6709\u5e95\u5c42\u7c7b\u578b uintptr \u7684\u6307\u9488\u548c\u503c\u90fd\u80fd\u8f6c\u6362\u6210 Pointer \u7c7b\u578b\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002 Pointer \u548c uintptr \u4e4b\u95f4\u7684\u8f6c\u6362\u6548\u679c\u7531\u5177\u4f53\u5b9e\u73b0\u5b9a\u4e49\u3002 var f float64 bits = *(*uint64)(unsafe.Pointer(&f)) type ptr unsafe.Pointer bits = *(*uint64)(ptr(&f)) var p ptr = nil \u5047\u8bbe\u53d8\u91cf v \u7531 var v = x \u5b9a\u4e49\u3002 Alignof \u4ee5\u8868\u8fbe\u5f0f x \u4f5c\u4e3a\u53c2\u6570\u5e76\u8fd4\u56de x \u7684\u5bf9\u9f50\u5b57\u8282\u6570\u3002 Sizeof \u4ee5\u8868\u8fbe\u5f0f x \u4f5c\u4e3a\u53c2\u6570\u5e76\u8fd4\u56de x \u7684\u5927\u5c0f\u3002 \u51fd\u6570 Offsetof \u4ee5\u9009\u62e9\u5668 s.f \uff08 s \u6216\u8005 *s \u7ed3\u6784\u4f53\u4e2d\u7684 f \u5b57\u6bb5\uff09\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd4\u56de\u5b57\u6bb5\u76f8\u5bf9\u7ed3\u6784\u4f53\u9996\u5730\u5740\u7684\u4f4d\u7f6e\u3002\u5982\u679c f \u662f\u4e00\u4e2a\u5d4c\u5165\u5b57\u6bb5\uff0c\u90a3 f \u5fc5\u987b\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\uff08\u4e0d\u80fd\u901a\u8fc7\u6307\u9488\u8fdb\u884c\u95f4\u63a5\u8bbf\u95ee\uff09\u3002\u5bf9\u4e8e\u7ed3\u6784\u4f53 s \u7684 f \u5b57\u6bb5\uff1a uintptr(unsafe.Pointer(&s)) + unsafe.Offsetof(s.f) == uintptr(unsafe.Pointer(&s.f)) \u8ba1\u7b97\u673a\u7684\u4f53\u7cfb\u7ed3\u6784\u8981\u6c42\u5bf9\u9f50\u5185\u5b58\u5730\u5740\uff08\u5bf9\u4e8e\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740\u6709\u591a\u79cd\u56e0\u7d20\u5f71\u54cd\u5bf9\u9f50\uff09\u3002 Alignof \u51fd\u6570\u83b7\u53d6\u4e00\u4e2a\u4eba\u548c\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u5e76\u8fd4\u56de\u53d8\u91cf\u5bf9\u9f50\u7684\u5b57\u8282\u6570\u3002\u5bf9\u4e8e\u53d8\u91cf x\uff1a uintptr(unsafe.Pointer(&x)) % unsafe.Alignof(x) == 0 \u7f16\u8bd1\u65f6 uintptr \u7c7b\u578b\u5e38\u91cf\u8868\u8fbe\u5f0f\u4f1a\u8c03\u7528 Alignof \uff0c Offsetof \uff0c\u548c Sizeof \u3002 \u786e\u5b9a\u7684\u5927\u5c0f\u548c\u5bf9\u9f50\u5b57\u8282\u6570 \u5bf9\u4e8e\u6570\u5b57\u7c7b\u578b\uff0c\u786e\u5b9a\u6709\u4ee5\u4e0b\u5c3a\u5bf8\uff1a type size in bytes byte, uint8, int8 1 uint16, int16 2 uint32, int32, float32 4 uint64, int64, float64, complex64 8 complex128 16 Go \u4e2d\u89c4\u5b9a\u7684\u6700\u5c0f\u5bf9\u9f50\u7279\u6027\uff1a \u5bf9\u4e8e\u4efb\u610f\u53d8\u91cf\u7c7b\u578b x\uff1a unsafe.Alignof(x) \u81f3\u5c11\u4e3a 1\u3002 \u5bf9\u4e8e\u7ed3\u6784\u4f53\u7c7b\u578b\uff1a unsafe.Alignof(x) \u662f\u6240\u6709\u5185\u90e8\u5b57\u6bb5 unsafe.Alignof(x.f) \u7684\u6700\u5927\u503c\uff0c\u5e76\u4e14\u81f3\u5c11\u4e3a 1\u3002 \u5bf9\u4e8e\u6570\u7ec4\u7c7b\u578b\uff1a unsafe.Alignof(x) \u548c\u6570\u7ec4\u5143\u7d20\u7c7b\u578b\u7684 alignment \u76f8\u540c\u3002 \u7ed3\u6784\u4f53\uff08\u6570\u7ec4\uff09\u5728\u5185\u90e8\u6ca1\u6709\u5b57\u6bb5\uff08\u5143\u7d20\uff09\u7684\u65f6\u5019\u5927\u5c0f\u4e3a 0\u3002\u4e24\u4e2a\u6240\u5360\u7a7a\u95f4\u5927\u5c0f\u4e3a 0 \u7684\u4e0d\u540c\u53d8\u91cf\u53ef\u80fd\u5728\u5185\u5b58\u4e2d\u62e5\u6709\u76f8\u540c\u5730\u5740\u3002","title":"Go \u8bed\u8a00\u53c2\u8003\u624b\u518c"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_1","text":"\u8fd9\u662f\u4e00\u4e2a Go \u8bed\u8a00\u7684\u53c2\u8003\u624b\u518c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u8bbf\u95ee golang.org \u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u548c\u5176\u4ed6\u6587\u6863\u3002 Go \u662f\u5728\u8bbe\u8ba1\u65f6\u8003\u8651\u4e86\u7cfb\u7edf\u7f16\u7a0b\u7684\u901a\u7528\u578b\u7f16\u7a0b\u8bed\u8a00\u3002\u5b83\u662f\u5f3a\u7c7b\u578b\uff0c\u6709\u5783\u573e\u56de\u6536\u673a\u5236\u5e76\u539f\u751f\u652f\u6301\u5e76\u53d1\u7f16\u7a0b\u3002Go \u7a0b\u5e8f\u7531\u4e00\u4e2a\u6216\u591a\u4e2a package \u7ec4\u6210\uff0c\u8fd9\u6837\u53ef\u4ee5\u9ad8\u6548\u7684\u7ba1\u7406\u4f9d\u8d56\u3002 Go \u7684\u8bed\u6cd5\u7b80\u6d01\u4e14\u6709\u89c4\u5219\uff0c\u8fd9\u8ba9\u81ea\u52a8\u5316\u5de5\u5177\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5206\u6790\u4ee3\u7801\uff0c\u4f8b\u5982\uff1a\u96c6\u6210\u5f00\u53d1\u73af\u5883\u3002","title":"\u4ecb\u7ecd"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_2","text":"\u8bed\u6cd5\u91c7\u7528\u6269\u5c55\u5df4\u79d1\u65af\u8303\u5f0f\u3002 Production = production_name \"=\" [ Expression ] \".\" . Expression = Alternative { \"|\" Alternative } . Alternative = Term { Term } . Term = production_name | token [ \"\u2026\" token ] | Group | Option | Repetition . Group = \"(\" Expression \")\" . Option = \"[\" Expression \"]\" . Repetition = \"{\" Expression \"}\" . \u4ea7\u751f\u5f0f\u662f\u7531\u8bcd\u6cd5\u5355\u5143\u548c\u4ee5\u4e0b\u64cd\u4f5c\u7b26\u6784\u6210\u7684\u8868\u8fbe\u5f0f\uff08\u4f18\u5148\u7ea7\u4f9d\u6b21\u9012\u589e\uff09\uff1a | \u6216 () \u5206\u7ec4 [] \u53ef\u9009 (\u51fa\u73b0 0 \u6216 1 \u6b21) {} \u53ef\u91cd\u590d (\u51fa\u73b0 0 \u5230 n \u6b21) \u5c0f\u5199\u7684\u4ea7\u751f\u5f0f\u540d\u79f0\u7528\u6765\u4e0e\u8bcd\u6cd5\u5355\u5143\u533a\u5206\u3002\u975e\u7ec8\u7ed3\u7b26\u91c7\u7528\u9a7c\u5cf0\u5f0f\u3002\u8bcd\u6cd5\u5355\u5143\u7531\u53cc\u5f15\u53f7\u6216\u53cd\u5f15\u53f7\u7ec4\u6210\u3002 a...b \u8868\u793a\u4ece a \u5230 b \u4e4b\u95f4\u7684\u4efb\u610f\u5b57\u7b26\u3002\u7701\u7565\u53f7 ... \u4e5f\u53ef\u4ee5\u5728\u89c4\u8303\u4e2d\u8868\u793a\u5bf9\u66f4\u8be6\u7ec6\u7684\u679a\u4e3e\u548c\u4ee3\u7801\u7247\u6bb5\u7684\u7701\u7565\u3002\u5b57\u7b26 ... \u4e0d\u662f Go \u8bed\u8a00\u7684\u8bcd\u6cd5\u5355\u5143\u3002","title":"\u6807\u8bb0"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_3","text":"Go \u7684\u6e90\u4ee3\u7801\u4f7f\u7528 UTF-8 \u7f16\u7801\u7684 Unicode \u6587\u672c\u3002\u4e0d\u8fc7\u5b83\u5e76\u4e0d\u662f\u5b8c\u5168\u89c4\u8303\u5316\u7684\uff0c\u5355\u91cd\u97f3\u7684\u4ee3\u7801\u70b9\u4e0e\u7531\u76f8\u540c\u5b57\u7b26\u548c\u97f3\u6807\u7ec4\u6210\u7684\u4ee3\u7801\u70b9\u662f\u4e0d\u540c\u7684\uff1b\u524d\u8005\u6211\u4eec\u8ba4\u4e3a\u5b83\u662f\u4e24\u4e2a\u4ee3\u7801\u70b9\u3002\u7b80\u5355\u6765\u8bb2\uff0c\u6587\u6863\u4f1a\u5728\u6e90\u4ee3\u7801\u6587\u672c\u4e2d\u4f7f\u7528\u975e\u89c4\u8303\u7684\u672f\u8bed\u5b57\u7b26\u6765\u8868\u793a\u4e00\u4e2a Unicode \u4ee3\u7801\u70b9\u3002 \u6bcf\u4e2a\u4ee3\u7801\u70b9\u90fd\u662f\u4e0d\u540c\u7684\uff1b\u76f8\u540c\u5b57\u7b26\u7684\u5927\u5199\u548c\u5c0f\u5199\u5f62\u5f0f\u8868\u793a\u4e0d\u540c\u7684\u5b57\u7b26\u3002 \u5b9e\u73b0\u9650\u5236\uff1a\u4e3a\u4e86\u517c\u5bb9\u5176\u4ed6\u5de5\u5177\uff0c\u7f16\u8bd1\u5668\u4e0d\u5141\u8bb8\u51fa\u73b0 Utf-8 \u7f16\u7801\u7684\u6e90\u6587\u672c\u4e2d\u7684 NUL \u5b57\u7b26\uff08U+0000\uff09\u3002 \u5b9e\u73b0\u9650\u5236\uff1a\u4e3a\u4e86\u517c\u5bb9\u5176\u4ed6\u5de5\u5177\uff0c\u5982\u679c\u6e90\u6587\u672c\u4e2d\u662f\u4ee5Utf-8 \u7f16\u7801\u7684\u5b57\u8282\u5e8f\u6807\u8bb0\uff08U+FEFF\uff09\u4e3a\u8d77\u59cb\u4ee3\u7801\u70b9\u3002\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565\u5b83\u3002\u5b57\u8282\u5e8f\u6807\u8bb0\u4e0d\u5e94\u51fa\u73b0\u5728\u6e90\u6587\u672c\u7684\u4efb\u4f55\u4f4d\u7f6e\u3002","title":"\u6e90\u7801\u8868\u793a\u6cd5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_4","text":"\u8fd9\u4e9b\u5355\u8bcd\u8868\u793a Unicode \u5b57\u7b26\u7684\u7c7b\u522b\uff1a newline = /* Unicode \u4ee3\u7801\u70b9 U+000A */ . unicode_char = /* \u6392\u9664\u6362\u884c\u4ee5\u5916\u7684\u4efb\u610f Unicode \u4ee3\u7801\u70b9 */ . unicode_letter = /* \u4e00\u4e2a\u5b57\u6bcd\uff08\"Letter\"\uff09\u7c7b\u578b\u7684 Unicode \u4ee3\u7801\u70b9 */ . unicode_digit = /* \u4e00\u4e2a\u6570\u5b57\uff08\"Number, decimal digit\"\uff09\u7c7b\u578b\u7684 Unicode \u4ee3\u7801\u70b9 */ . \u5728 Unicode8.0 \u6807\u51c6\u4e2d\uff0c\u7b2c 4.5 \u7ae0\u8282 \u201c\u4e00\u822c\u7c7b\u522b\u201d \u4e2d\u5b9a\u4e49\u4e86\u5b57\u7b26\u7684\u7c7b\u522b\u3002Go \u80fd\u591f\u5904\u7406\u4efb\u4f55\u5b57\u7b26\u96c6\uff0c\u5305\u62ec Lu\uff0cLi\uff0cLt\uff0cLm \u6216 Lo \u4f5c\u4e3a Unicode \u5b57\u6bcd\uff0c\u8fd8\u53ef\u4ee5\u628a\u6570\u5b57\u5b57\u7b26\u96c6 Nd \u5f53\u4f5c Unicode \u6570\u5b57\u5904\u7406\u3002","title":"\u5b57\u7b26"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_5","text":"\u6211\u4eec\u8ba4\u4e3a\u4e0b\u5212\u7ebf _ \uff08U+005F\uff09\u662f\u4e00\u4e2a\u5b57\u6bcd\uff1a letter = unicode_letter | \"_\" . decimal_digit = \"0\" \u2026 \"9\" . octal_digit = \"0\" \u2026 \"7\" . hex_digit = \"0\" \u2026 \"9\" | \"A\" \u2026 \"F\" | \"a\" \u2026 \"f\" .","title":"\u5b57\u6bcd\u548c\u6570\u5b57"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_6","text":"","title":"\u8bcd\u6c47\u5143\u7d20"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_7","text":"\u6ce8\u91ca\u662f\u7a0b\u5e8f\u7684\u8bf4\u660e\u6587\u6863\u3002\u5728 Go \u4e2d\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a \u5355\u884c\u6ce8\u91ca\u4ece // \u5f00\u59cb\u76f4\u5230\u884c\u672b\u7ed3\u675f\u3002 \u901a\u7528\u6ce8\u91ca\u4ece /* \u5f00\u59cb\u76f4\u5230 */ \u7ed3\u675f\u3002 \u6ce8\u91ca\u4e0d\u80fd\u5d4c\u5957\u5728\u5176\u4ed6\u6ce8\u91ca\u3001\u5b57\u7b26\u4e32\u548c rune \u7684\u5b57\u9762\u503c\u4e2d\u3002\u4e0d\u5305\u542b\u6362\u884c\u7b26\u7684\u901a\u7528\u6ce8\u91ca\u4e4b\u95f4\u901a\u8fc7\u7a7a\u683c\u7b26\u8fde\u63a5\uff0c\u5176\u4ed6\u60c5\u51b5\u4e0b\u6bcf\u6bb5\u6ce8\u91ca\u90fd\u4f1a\u53e6\u8d77\u4e00\u884c\u3002","title":"\u6ce8\u91ca"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_8","text":"\u8bcd\u6c47\u5143\u7d20\u6784\u6210\u4e86 Go \u8bed\u8a00\u7684\u8bcd\u6c47\u8868\u3002\u5b83\u6709\u56db\u79cd\u7c7b\u578b\uff1a\u6807\u8bc6\u7b26\u3001\u5173\u952e\u5b57\u3001\u64cd\u4f5c\u7b26/\u6807\u70b9\u7b26\u53f7\u3001\u5b57\u9762\u503c\u3002\u7a7a\u767d\u7b26\u53ef\u4ee5\u662f\u7a7a\u683c\uff08U+0020\uff09\u3001\u6c34\u5e73\u5236\u8868\u7b26\uff08U+0009\uff09\u3001\u6362\u884c\u7b26\uff08U+000D\uff09\u6216\u6362\u884c\u7b26\uff08U+000A\uff09\u3002\u5b83\u672c\u8eab\u4f1a\u88ab\u5ffd\u7565\uff0c\u4e00\u822c\u7528\u6765\u533a\u5206\u4e0d\u540c\u7684\u8bcd\u6c47\u5143\u7d20\u3002\u6362\u884c\u7b26\u6216\u6587\u4ef6\u7ec8\u6b62\u7b26\uff08EOF\uff09\u8fd8\u53ef\u80fd\u89e6\u53d1\u7f16\u8bd1\u7a0b\u5e8f\u5728\u6e90\u4ee3\u7801\u7684\u884c\u672b\u6216\u6587\u4ef6\u672b\u5c3e\u8ffd\u52a0\u5206\u53f7\u3002\u5728\u5206\u89e3\u6e90\u4ee3\u7801\u7684\u8bcd\u6c47\u5143\u7d20\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u628a\u5f53\u524d\u53ef\u4ee5\u5f62\u6210\u6709\u6548\u8bcd\u6c47\u5143\u7d20\u7684\u6700\u957f\u5b57\u7b26\u5e8f\u5217\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u8bcd\u6c47\u5143\u7d20\u3002","title":"\u8bcd\u6c47\u5143\u7d20"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_9","text":"\u6b63\u89c4\u8bed\u6cd5\u5728\u5f88\u591a\u4ea7\u751f\u5f0f\u4e2d\u4f7f\u7528\u5206\u53f7 \";\" \u4f5c\u4e3a\u7ec8\u7ed3\u7b26\u3002Go \u7a0b\u5e8f\u4e2d\u9075\u5faa\u4e0b\u9762\u4e24\u6761\u89c4\u5219\u7701\u7565\u4e86\u5927\u90e8\u5206\u7684\u5206\u53f7\uff1a \u5f53\u67d0\u884c\u7684\u6700\u540e\u4e00\u4e2a\u8bcd\u6c47\u5143\u7d20\u662f\u4ee5\u4e0b\u5143\u7d20\u65f6\u81ea\u52a8\u8865\u5168\u5206\u53f7\uff1a \u4e00\u4e2a\u6807\u8bc6\u7b26\u3002 \u4e00\u4e2a\u6574\u6570\uff0c\u6d6e\u70b9\u6570\uff0c\u865a\u6570\uff0crune \u6216\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u3002 \u5173\u952e\u5b57 break \u3001 continue \u3001 fallthrough \u548c return \u5176\u4e2d\u4e4b\u4e00\u3002 \u64cd\u4f5c\u7b26/\u6807\u70b9\u7b26\u53f7 ++ \uff0c -- \uff0c ) \uff0c ] \u548c } \u5176\u4e2d\u4e4b\u4e00\u3002 \u4e3a\u4e86\u652f\u6301\u72ec\u5360\u4e00\u884c\u7684\u590d\u6742\u8bed\u53e5\uff0c\u4f1a\u7701\u7565\u4e0e \")\" \u6216 \"}\" \u76f8\u90bb\u7684\u5206\u53f7\u3002 \u4e3a\u4e86\u53cd\u5e94\u60ef\u7528\u7528\u9014\uff0c\u672c\u7bc7\u6587\u6863\u7684\u6240\u6709\u4f8b\u5b50\u90fd\u57fa\u4e8e\u4ee5\u4e0a\u89c4\u5219\u7701\u7565\u5206\u53f7\u3002","title":"\u5206\u53f7"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_10","text":"\u6807\u8bc6\u7b26\u8868\u793a\u7a0b\u5e8f\u5b9e\u4f53\u5355\u5143\uff0c\u4f8b\u5982\uff1a\u53d8\u91cf\u3001\u7c7b\u578b\u3002\u4e00\u4e2a\u6807\u8bc6\u7b26\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u6bcd\u548c\u6570\u5b57\u7ec4\u6210\u3002\u6807\u8bc6\u7b26\u7684\u9996\u5b57\u7b26\u5fc5\u987b\u4e3a\u5b57\u6bcd\u3002 identifier = letter { letter | unicode_digit } . a _x9 ThisVariableIsExported \u03b1\u03b2 Go \u5df2\u7ecf\u9884\u5b9a\u4e49\u4e86\u4e00\u4e9b\u6807\u8bc6\u7b26\u3002","title":"\u6807\u8bc6\u7b26"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_11","text":"\u4ee5\u4e0b\u5173\u952e\u5b57\u662f\u9884\u7559\u7684\uff0c\u5b83\u4eec\u4e0d\u80fd\u4f5c\u4e3a\u6807\u8bc6\u7b26\uff1a break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var","title":"\u5173\u952e\u5b57"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_12","text":"\u4ee5\u4e0b\u5b57\u7b26\u5e8f\u5217\u7528\u4e8e\u8868\u793a\u64cd\u4f5c\u7b26\uff08\u5305\u62ec\u8d4b\u503c\u8fd0\u7b97\u7b26\uff09\u548c\u6807\u70b9\u7b26\u53f7\uff1a + & += &= && == != ( ) - | -= |= || < <= [ ] * ^ *= ^= <- > >= { } / << /= <<= ++ = := , ; % >> %= >>= -- ! ... . : &^ &^=","title":"\u64cd\u4f5c\u7b26\u548c\u6807\u70b9\u7b26\u53f7"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_13","text":"\u6574\u578b\u5b57\u9762\u503c\u662f\u4e00\u4e2a\u6570\u5b57\u5e8f\u5217\uff0c\u76f8\u5f53\u4e8e\u6574\u578b\u5e38\u91cf\u3002\u53ef\u4ee5\u4f7f\u7528\u524d\u7f00\u6307\u5b9a\u975e\u5c0f\u6570\u8fdb\u5236\uff1a0 \u8868\u793a\u516b\u8fdb\u5236\uff0c0x/0X \u8868\u793a\u5341\u516d\u8fdb\u5236\u3002\u5728\u5341\u516d\u8fdb\u5236\u5b57\u9762\u503c\u4e2d\uff0c\u5b57\u6bcd a-f \u548c A-F \u90fd\u8868\u793a\u6570\u5b57 10-15\u3002 int_lit = decimal_lit | octal_lit | hex_lit . decimal_lit = ( \"1\" \u2026 \"9\" ) { decimal_digit } . octal_lit = \"0\" { octal_digit } . hex_lit = \"0\" ( \"x\" | \"X\" ) hex_digit { hex_digit } . 42 0600 0xBadFace 170141183460469231731687303715884105727","title":"\u6574\u578b\u5b57\u9762\u503c"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_14","text":"\u6d6e\u70b9\u5b57\u9762\u503c\u662f\u4e00\u4e2a\u5c0f\u6570\uff0c\u76f8\u5f53\u4e8e\u6d6e\u70b9\u6570\u5e38\u91cf\u3002\u5b83\u7531\u6574\u6570\u90e8\u5206\uff0c\u5c0f\u6570\u70b9\uff0c\u5c0f\u6570\u90e8\u5206\u548c\u6307\u6570\u90e8\u5206\u6784\u6210\u3002\u6574\u6570\u90e8\u5206\u548c\u5c0f\u6570\u90e8\u5206\u7528\u5c0f\u6570\u70b9\u94fe\u63a5\uff1b\u6307\u6570\u90e8\u5206\u7531 e / E \u5b57\u7b26\u540e\u63a5\u4e00\u4e2a\u6709\u7b26\u53f7\u6307\u6570\u6784\u6210\u3002\u6574\u6570\u90e8\u5206\u548c\u5c0f\u6570\u90e8\u5206\u53ef\u4ee5\u7701\u7565\u5176\u4e00\uff1b\u5c0f\u6570\u70b9\u548c\u6307\u6570\u90e8\u5206\u53ef\u4ee5\u7701\u7565\u5176\u4e00\u3002 float_lit = decimals \".\" [ decimals ] [ exponent ] | decimals exponent | \".\" decimals [ exponent ] . decimals = decimal_digit { decimal_digit } . exponent = ( \"e\" | \"E\" ) [ \"+\" | \"-\" ] decimals . 0. 72.40 072.40 // == 72.40 2.71828 1.e+0 6.67428e-11 1E6 .25 .12345E+5","title":"\u6d6e\u70b9\u5b57\u9762\u503c"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_15","text":"\u865a\u6570\u5b57\u9762\u503c\u662f\u4e00\u4e2a\u5c0f\u6570\uff0c\u76f8\u5f53\u4e8e\u590d\u6570\u5e38\u91cf\u4e2d\u7684\u865a\u6570\u90e8\u5206\u3002\u5b83\u7531\u6d6e\u70b9\u6570\u6216\u8005\u6574\u6570\u540e\u63a5\u5c0f\u5199\u5b57\u6bcd i \u6784\u6210\u3002 imaginary_lit = (decimals | float_lit) \"i\" . 0i 011i // == 11i 0.i 2.71828i 1.e+0i 6.67428e-11i 1E6i .25i .12345E+5i","title":"\u865a\u6570\u5b57\u9762\u503c"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#rune","text":"rune \u7c7b\u578b\u5b57\u9762\u503c\u76f8\u5f53\u4e8e\u4e00\u4e2a rune \u5e38\u91cf\u3002\u5b83\u662f\u4e00\u4e2a\u8868\u793a Unicode \u4ee3\u7801\u70b9\u7684\u6574\u6570\u3002rune \u7c7b\u578b\u5b57\u9762\u503c\u8868\u793a\u4e3a\u7528\u5355\u5f15\u53f7\u5305\u88f9\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\uff0c\u50cf 'x' \u6216 '\\n'\u3002\u5728\u5355\u5f15\u53f7\u4e2d\u9664\u4e86\u6362\u884c\u7b26\u548c\u672a\u8f6c\u4e49\u7684\u5355\u5f15\u53f7\u5176\u4ed6\u7684\u5b57\u7b26\u90fd\u53ef\u4ee5\u76f4\u63a5\u663e\u793a\u3002\u5355\u5f15\u53f7\u5305\u88f9\u7684\u5b57\u7b26\u7684\u503c\u548c\u5b57\u7b26\u5728 Unicode \u7f16\u7801\u4e2d\u7684\u503c\u76f8\u7b49\uff0c\u800c\u4ee5\u53cd\u659c\u7ebf\u5f00\u5934\u7684\u591a\u5b57\u7b26\u5e8f\u5217\u4f1a\u628a\u503c\u7ffb\u8bd1\u6210\u591a\u79cd\u683c\u5f0f\u3002 \u4f7f\u7528\u5f15\u53f7\u8868\u793a\u5355\u5b57\u7b26\u662f\u6700\u7b80\u5355\u7684\u65b9\u5f0f\uff1b\u56e0\u4e3a Go \u7684\u6e90\u6587\u672c\u662f UTF-8 \u7f16\u7801\uff0c\u4e00\u4e2a\u6574\u6570\u53ef\u80fd\u4ee3\u8868\u591a\u4e2a UTF-8 \u5b57\u8282\u3002\u4f8b\u5982\uff0c 'a' \u53ef\u4ee5\u4f7f\u7528\u5355\u5b57\u8282\u8868\u793a\u5b57\u7b26 a\uff0cUnicode \u7f16\u7801 U+0061\uff0c\u503c 0x61\uff0c\u800c '\u00e4' \u662f\u4e24\u5b57\u8282\u8868\u793a\u5206\u97f3\u7b26\u7684 a\uff0cUnicode \u7f16\u7801 U+00E4\uff0c\u503c 0xe4\u3002 \u53cd\u659c\u7ebf\u80fd\u5c06\u4efb\u610f\u503c\u7f16\u7801\u6210 ASCII \u6587\u672c\u3002\u6709\u56db\u79cd\u65b9\u5f0f\u5c06\u6574\u6570\u503c\u8868\u793a\u4e3a\u6570\u5b57\u5e38\u91cf\uff1a \\x \u540e\u63a5\u4e24\u4e2a\u5341\u516d\u8fdb\u5236\u6570\uff1b \\u \u540e\u63a5\u56db\u4e2a\u5341\u516d\u8fdb\u5236\u6570\uff1b \\U \u540e\u63a5\u516b\u4e2a\u5341\u516d\u8fdb\u5236\u6570\u3002 \\ \u540e\u63a5\u4e09\u4e2a\u516b\u8fdb\u5236\u6570\u3002\u6bcf\u79cd\u60c5\u51b5\u4e0b\u90fd\u4f7f\u7528\u76f8\u5e94\u8fdb\u5236\u6765\u8868\u793a\u5b57\u9762\u91cf\u7684\u6574\u6570\u503c\u3002 \u867d\u7136\u8fd9\u56db\u79cd\u65b9\u5f0f\u90fd\u4ee5\u6574\u6570\u8868\u793a\uff0c\u4f46\u5b83\u4eec\u7684\u6709\u6548\u533a\u95f4\u5e76\u4e0d\u76f8\u540c\u3002\u516b\u8fdb\u5236\u53ea\u80fd\u8868\u793a 0 - 255 \u4ee5\u5185\u7684\u6574\u6570\u3002\u5341\u516d\u8fdb\u5236\u6ee1\u53ef\u4ee5\u6ee1\u8db3\u9700\u6c42\u3002 \\u \u548c \\U \u90fd\u53ef\u4ee5\u8868\u793a Unicode \u4ee3\u7801\u70b9\uff0c\u4e0d\u8fc7\u5176\u4e2d\u7684\u4e00\u4e9b\u503c\u662f\u65e0\u6548\u7684\uff0c\u7279\u522b\u662f 0x10FFFF \u4ee5\u4e0a\u7684\u503c\u3002 \u53cd\u659c\u7ebf\u7ed3\u5408\u4ee5\u4e0b\u5b57\u7b26\u5177\u6709\u7279\u6b8a\u542b\u4e49\uff1a \\a U+0007 alert or bell \\b U+0008 \u9000\u683c\u7b26 \\f U+000C form feed \\n U+000A line feed or newline \\r U+000D carriage return \\t U+0009 \u6c34\u5e73\u5236\u8868\u7b26 \\v U+000b \u5782\u76f4\u5236\u8868\u7b26 \\\\ U+005c \u53cd\u659c\u7ebf \\' U+0027 \u5355\u5f15\u53f7 (\u53ea\u5728 rune \u5b57\u9762\u503c\u4e2d\u6709\u6548) \\\" U+0022 \u53cc\u5f15\u53f7 (\u53ea\u5728\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e2d\u6709\u6548) \u5176\u4ed6\u6240\u6709\u4ee5\u53cd\u659c\u7ebf\u5f00\u5934\u7684\u5e8f\u5217\u5728 rune \u7684\u89c4\u5219\u4e2d\u90fd\u662f\u975e\u6cd5\u7684\u3002 rune_lit = \"'\" ( unicode_value | byte_value ) \"'\" . unicode_value = unicode_char | little_u_value | big_u_value | escaped_char . byte_value = octal_byte_value | hex_byte_value . octal_byte_value = `\\` octal_digit octal_digit octal_digit . hex_byte_value = `\\` \"x\" hex_digit hex_digit . little_u_value = `\\` \"u\" hex_digit hex_digit hex_digit hex_digit . big_u_value = `\\` \"U\" hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit . escaped_char = `\\` ( \"a\" | \"b\" | \"f\" | \"n\" | \"r\" | \"t\" | \"v\" | `\\` | \"'\" | `\"` ) . 'a' '\u00e4' '\u672c' '\\t' '\\000' '\\007' '\\377' '\\x07' '\\xff' '\\u12e4' '\\U00101234' '\\'' // \u5305\u542b\u5355\u5f15\u53f7\u7684 rune \u5b57\u9762\u503c 'aa' // \u65e0\u6548: \u592a\u591a\u5b57\u7b26 '\\xa' // \u65e0\u6548: \u7f3a\u5c11\u5341\u516d\u8fdb\u5236\u6570 '\\0' // \u65e0\u6548: \u7f3a\u5c11\u516b\u8fdb\u5236\u6570 '\\uDFFF' // \u65e0\u6548: surrogate half '\\U00110000' // \u65e0\u6548: \u975e\u6cd5\u7684 Unicode \u4ee3\u7801\u70b9","title":"Rune \u5b57\u9762\u503c"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_16","text":"\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u8868\u793a\u4ece\u5b57\u7b26\u5e8f\u5217\u4e2d\u83b7\u53d6\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u3002\u5b83\u6709\u4e24\u79cd\u683c\u5f0f\uff1a\u539f\u59cb\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u548c\u89e3\u91ca\u578b\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u3002 \u539f\u59cb\u5b57\u7b26\u4e32\u662f\u7531\u53cd\u5f15\u53f7\u5305\u88f9\uff08 foo \uff09\u3002\u5b57\u7b26\u4e32\u4e2d\u9664\u53cd\u5f15\u53f7\u4ee5\u5916\u7684\u5176\u4ed6\u5b57\u7b26\u90fd\u4f1a\u663e\u793a\u51fa\u6765\u3002\u539f\u751f\u5b57\u7b26\u4e32\u7531\u53cd\u5f15\u53f7\u4e4b\u95f4\u7684\uff08\u9ed8\u8ba4 UTF-8 \u7f16\u7801\uff09\u7684\u5b57\u7b26\u7ec4\u6210\u3002\u5b83\u7684\u503c\u4e3a\u5f15\u53f7\u5185\u672a\u7ecf\u89e3\u91ca\uff08\u9ed8\u8ba4 UTF-8 \u7f16\u7801\uff09\u6240\u6709\u5b57\u7b26\uff1b\u5c24\u5176\u662f\uff0c\u53cd\u659c\u7ebf\u518d\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u7279\u6b8a\u610f\u4e49\u5e76\u4e14\u5b57\u7b26\u4e32\u4e2d\u4fdd\u7559\u6362\u884c\u7b26\u3002\u5728\u539f\u59cb\u5b57\u7b26\u4e32\u7684\u503c\u4e2d\u4f1a\u4e22\u5f03\u56de\u8f66\u952e\u8fd4\u56de '\\r' \u5b57\u7b26\u3002 \u89e3\u91ca\u578b\u5b57\u7b26\u4e32\u7531\u53cc\u5f15\u53f7\u4e4b\u95f4\u7684\u5b57\u7b26\u7ec4\u6210\uff08\"bar\"\uff09\u3002\u9664\u4e86\u6362\u884c\u7b26\u548c\u53cc\u5f15\u53f7\u5176\u4ed6\u5b57\u7b26\u90fd\u4f1a\u663e\u793a\u51fa\u6765\u3002\u53cc\u5f15\u53f7\u4e4b\u95f4\u7684\u6587\u672c\u7ec4\u6210\u5b57\u9762\u91cf\u7684\u503c\u3002\u53cd\u659c\u7ebf\u7684\u8f6c\u4e49\u89c4\u5219\u4e0e rune \u5b57\u9762\u91cf\u57fa\u672c\u76f8\u540c\uff08\u4e0d\u540c\u7684\u662f \\\u2019 \u975e\u6cd5\uff0c\u800c \\\" \u5408\u6cd5\uff09\u3002\u4e09\u4f4d\u516b\u8fdb\u5236\u6570\uff08\\nnn\uff09\u548c\u4e24\u4f4d\u5341\u516d\u8fdb\u5236\u6570\uff08\\xnn\uff09\u6362\u7801\u7b26\u7684\u503c\u8868\u793a\u76f8\u5e94\u5b57\u7b26\u4e32\u7684\u5b57\u8282\u3002\u5176\u4ed6\u7684\u6362\u7801\u7b26\u90fd\u8868\u793a\u5b57\u7b26\u5404\u81ea\u7684 UTF-8 \u7f16\u7801\uff08\u53ef\u80fd\u662f\u591a\u5b57\u8282\uff09\u3002\u56e0\u6b64\u5b57\u7b26\u4e32 \\377 \u548c \\xFF \u90fd\u8868\u793a\u503c\u4e3a 0xFF=255 \u7684\u5355\u4e2a\u5b57\u8282\uff0c\u800c \u00ff , \\u00FF , \\U000000FF \u548c \\xc3\\xbf \u8868\u793a UTF-8 \u7f16\u7801\u5b57\u7b26 U+00FF \u7684\u4e24\u4e2a\u5b57\u8282 0xc3 0xbf\u3002 string_lit = raw_string_lit | interpreted_string_lit . raw_string_lit = \"`\" { unicode_char | newline } \"`\" . interpreted_string_lit = `\"` { unicode_value | byte_value } `\"` . `abc` // \u7b49\u4ef7\u4e8e \"abc\" `\\n \\n` // \u7b49\u4ef7\u4e8e \"\\\\n\\n\\\\n\" \"\\n\" \"\\\"\" // \u7b49\u4ef7\u4e8e `\"` \"Hello, world!\\n\" \"\u65e5\u672c\u8a9e\" \"\\u65e5\u672c\\U00008a9e\" \"\\xff\\u00FF\" \"\\uD800\" // \u65e0\u6548: surrogate half \"\\U00110000\" // \u65e0\u6548: \u65e0\u6548\u7684 Unicode \u4ee3\u7801\u70b9 \u8fd9\u4e9b\u4f8b\u5b50\u90fd\u8868\u793a\u76f8\u540c\u7684\u5b57\u7b26\u4e32\uff1a \"\u65e5\u672c\u8a9e\" // UTF-8 \u6587\u672c `\u65e5\u672c\u8a9e` // UTF-8 \u6587\u672c\u4f5c\u4e3a\u539f\u751f\u5b57\u9762\u503c \"\\u65e5\\u672c\\u8a9e\" // \u786e\u5b9a\u7684 Unicode \u4ee3\u7801\u70b9 \"\\U000065e5\\U0000672c\\U00008a9e\" // \u786e\u5b9a\u7684 Unicode \u4ee3\u7801\u70b9 \"\\xe6\\x97\\xa5\\xe6\\x9c\\xac\\xe8\\xaa\\x9e\" // \u786e\u5b9a\u7684 UTF-8 \u5b57\u8282 \u5982\u679c\u6e90\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e24\u4e2a\u4ee3\u7801\u70b9\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f8b\u5982\u5e26\u97f3\u6807\u7684\u5b57\u6bcd\uff0c\u628a\u5b83\u653e\u5728 rune \u4e2d\u4f1a\u62a5\u9519\uff08\u5b83\u4e0d\u662f\u5355\u4ee3\u7801\u70b9\uff09\u3002\u5e76\u4e14\u5728\u5b57\u7b26\u4e32\u4e2d\u4f1a\u663e\u793a\u4e24\u4e2a\u4ee3\u7801\u70b9\u3002","title":"\u5b57\u7b26\u4e32\u5b57\u9762\u91cf"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_17","text":"\u5e38\u91cf\u5206\u4e3a\uff1a\u5e03\u5c14\u578b\uff0crune\u578b\uff0c\u6574\u578b\uff0c\u6d6e\u70b9\u578b\uff0c\u590d\u6570\u578b\uff0c\u5b57\u7b26\u4e32\u578b\u3002\u5176\u4e2d rune\uff0c\u6574\u578b\uff0c\u6d6e\u70b9\u578b\uff0c\u590d\u6570\u578b\u7edf\u79f0\u4e3a\u6570\u5b57\u5e38\u91cf\u3002 \u5e38\u91cf\u7684\u503c\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a rune\u5b57\u9762\u91cf\uff0c\u6574\u6570\u5b57\u9762\u91cf\uff0c\u6d6e\u70b9\u6570\u5b57\u9762\u91cf\uff0c\u865a\u6570\u5b57\u9762\u91cf\uff0c\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\uff0c\u8868\u793a\u5e38\u91cf\u7684\u6807\u8bc6\u7b26\uff0c\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u4e00\u4e2a\u8f6c\u6362\u7ed3\u679c\u4e3a\u5e38\u91cf\u7684\u7c7b\u578b\u8f6c\u6362\uff0c\u548c\u4e00\u4e9b\u8fd4\u56de\u503c\u4e3a\u5e38\u91cf\u7684\u5185\u7f6e\u51fd\u6570(\u63a5\u53d7\u4efb\u4f55\u503c\u7684 unsafe.Sizeof \uff0c\u63a5\u53d7\u90e8\u5206\u8868\u8fbe\u5f0f\u7684 cap \u6216 len \uff0c\u63a5\u53d7\u865a\u6570\u5e38\u91cf\u7684 real \u548c imag \uff0c\u63a5\u53d7\u6570\u5b57\u5e38\u91cf\u7684 complex )\u3002\u5e03\u5c14\u7c7b\u578b\u7684\u503c\u4e3a\u9884\u5b9a\u4e49\u5e38\u91cf true \u6216 false \uff0c\u9884\u5b9a\u4e49\u7684\u6807\u8bc6\u7b26 iota \u8868\u793a\u4e00\u4e2a\u6574\u578b\u5e38\u91cf\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\u590d\u6570\u5e38\u91cf\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u4e00\u79cd\u5f62\u5f0f\u3002\u4f1a\u5728\u5e38\u91cf\u8868\u8fbe\u5f0f\u7ae0\u8282\u8be6\u7ec6\u8ba8\u8bba\u3002 \u6570\u5b57\u5e38\u91cf\u53ef\u4ee5\u8868\u793a\u4efb\u610f\u7cbe\u5ea6\u7684\u786e\u5b9a\u503c\u800c\u4e14\u4e0d\u4f1a\u6ea2\u51fa\u3002\u56e0\u6b64\uff0c\u6ca1\u6709\u5e38\u91cf\u53ef\u4ee5\u8868\u793a\u975e 0\uff0c\u65e0\u7a77\u5927\u548c\u975e\u6570\u5b57\u503c\u3002 \u5e38\u91cf\u53ef\u4ee5\u6307\u5b9a\u7c7b\u578b\u4e5f\u53ef\u4ee5\u4e0d\u6307\u5b9a\u7c7b\u578b\u3002\u5b57\u9762\u503c\u5e38\u91cf\uff0c true \uff0c false \uff0c iota \uff0c\u548c\u53ea\u5305\u542b\u65e0\u7c7b\u578b\u5e38\u91cf\u64cd\u4f5c\u7684\u5e38\u91cf\u8868\u8fbe\u5f0f\u662f\u65e0\u7c7b\u578b\u7684\u3002 \u5e38\u91cf\u53ef\u4ee5\u901a\u8fc7\u5e38\u91cf\u58f0\u660e\u548c\u8f6c\u6362\u65f6\u663e\u5f0f\u7684\u6307\u5b9a\u5177\u4f53\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u9690\u5f0f\u7684\u5728\u53d8\u91cf\u58f0\u660e\u3001\u8d4b\u503c\u6216\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u64cd\u4f5c\u5143\u65f6\u9690\u5f0f\u7684\u6307\u5b9a\u5177\u4f53\u7c7b\u578b\u3002\u5982\u679c\u5e38\u91cf\u7684\u503c\u548c\u4ed6\u7684\u7c7b\u578b\u4e0d\u5339\u914d\uff0c\u4f1a\u62a5\u9519\u3002 \u65e0\u7c7b\u578b\u5e38\u91cf\u7531\u4e00\u4e2a\u9ed8\u8ba4\u7684\u7c7b\u578b\uff0c\u8fd9\u4e2a\u7c7b\u578b\u4f1a\u6839\u636e\u4f7f\u7528\u5e38\u91cf\u65f6\u7684\u4e0a\u4e0b\u6587\u8fdb\u884c\u9690\u5f0f\u8f6c\u6362\u3002\u4f8b\u5982\uff1a\u77ed\u53d8\u91cf\u58f0\u660e i := 0 \u6ca1\u6709\u6307\u5b9a i \u7684\u7c7b\u578b\u3002\u65e0\u7c7b\u578b\u5e38\u91cf\u7684\u9ed8\u8ba4\u7c7b\u578b\u53ef\u4ee5\u662f\uff1a bool \uff0c rune \uff0c int \uff0c float64 \uff0c complex128 \u6216\u8005 string \uff0c\u5177\u4f53\u9009\u62e9\u54ea\u79cd\u7c7b\u578b\u7531\u5e38\u91cf\u7684\u503c\u51b3\u5b9a\u3002 \u5b9e\u73b0\u9650\u5236\uff1a\u867d\u7136\u6570\u5b57\u5e38\u91cf\u5728 Go \u4e2d\u662f\u4efb\u610f\u7cbe\u5ea6\uff0c\u4e0d\u8fc7\u7f16\u8bd1\u5668\u5728\u5b9e\u73b0\u65f6\u4f1a\u5728\u5185\u90e8\u9650\u5236\u7cbe\u5ea6\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u7f16\u8bd1\u5668\u5b9e\u73b0\u90fd\u8981\uff1a \u81f3\u5c11\u4fdd\u8bc1\u6574\u5f62\u5e38\u91cf\u6709 256 \u4f4d \u6d6e\u70b9\u6570\u5e38\u91cf\uff08\u5305\u62ec\u590d\u6570\u5e38\u91cf\uff09\u90fd\u8981\u4fdd\u8bc1\u81f3\u5c11 256 \u4f4d\u7684\u4e3b\u4f53\u90e8\u5206\u548c\u81f3\u5c11 16 \u4f4d\u7684\u6709\u7b26\u53f7\u6307\u6570\u90e8\u5206 \u5982\u679c\u4e0d\u80fd\u8868\u793a\u7ed9\u5b9a\u6574\u6570\u7684\u7cbe\u5ea6\u629b\u51fa\u9519\u8bef \u5982\u679c\u6d6e\u70b9\u6570\u6216\u590d\u6570\u6ea2\u51fa\u629b\u51fa\u9519\u8bef \u5982\u679c\u7531\u4e8e\u7cbe\u5ea6\u9650\u5236\u4e0d\u80fd\u8868\u793a\u6d6e\u70b9\u6570\u6216\u8005\u590d\u6570\u8fdb\u884c\u820d\u5165 \u8fd9\u4e9b\u8981\u6c42\u540c\u65f6\u4f5c\u7528\u4e8e\u5b57\u9762\u91cf\u5e38\u91cf\u989d\u548c\u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u3002","title":"\u5e38\u91cf"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_18","text":"\u53d8\u91cf\u662f\u4e00\u4e2a\u7528\u6765\u50a8\u5b58\u503c\u7684\u4f4d\u7f6e\u3002\u6839\u636e\u4e0d\u540c\u7684\u53d8\u91cf\u7c7b\u578b\uff0c\u53ef\u4ee5\u4fdd\u5b58\u4e0d\u540c\u7684\u503c\u3002 \u53d8\u91cf\u58f0\u660e\uff0c\u51fd\u6570\u53c2\u6570\u548c\u8fd4\u56de\u503c\uff0c\u58f0\u660e\u7684\u51fd\u6570\u7b7e\u540d\uff0c\u51fd\u6570\u5b57\u9762\u503c\u90fd\u4f1a\u4e3a\u547d\u540d\u53d8\u91cf\u9884\u7559\u50a8\u5b58\u7a7a\u95f4\u3002\u8c03\u7528\u5185\u7f6e\u7684 new \u51fd\u6570\u6216\u83b7\u53d6\u590d\u5408\u5b57\u9762\u503c\u7684\u5730\u5740\u90fd\u4f1a\u5728\u8fd0\u884c\u65f6\u4e3a\u53d8\u91cf\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u3002\u8fd9\u79cd\u533f\u540d\u53d8\u91cf\u662f\u901a\u8fc7\uff08\u53ef\u80fd\u662f\u9690\u5f0f\u7684\uff09\u6307\u9488\u95f4\u63a5\u5f15\u7528\u7684\u3002 \u50cf\u6570\u7ec4\uff0c\u5207\u7247\u548c\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u5b83\u4eec\u5185\u90e8\u90fd\u5305\u542b\u5f88\u591a\u5143\u7d20\u6216\u5b57\u6bb5\uff0c\u800c\u4e14\u8fd9\u4e9b\u5143\u7d20\u548c\u5b57\u6bb5\u90fd\u53ef\u4ee5\u76f4\u63a5\u88ab\u8bbf\u95ee\u3002\u6570\u7ec4\u548c\u5207\u7247\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u884c\u4e3a\u548c\u5355\u72ec\u7684\u53d8\u91cf\u57fa\u672c\u76f8\u540c\u3002 \u53d8\u91cf\u7684\u9759\u6001\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7\u53d8\u91cf\u58f0\u660e\u3001\u63d0\u4f9b\u7ed9 new \u7684\u7c7b\u578b\u3001\u590d\u5408\u5b57\u9762\u503c\u3001\u7ed3\u6784\u4f53\u53d8\u91cf\u58f0\u660e\u7684\u5143\u7d20\u7c7b\u578b\u4ee5\u4e0a\u51e0\u79cd\u65b9\u5f0f\u786e\u5b9a\u3002\u901a\u8fc7new\u6216\u8005\u7c7b\u578b\u521d\u59cb\u5316\u3002\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf\u4e5f\u6709\u4e00\u4e2a\u660e\u786e\u7684\u52a8\u6001\u7c7b\u578b\uff0c\u8fd9\u4e2a\u52a8\u6001\u7c7b\u578b\u662f\u5728\u8fd0\u884c\u65f6\u8d4b\u503c\u7ed9\u53d8\u91cf\u7684\u5177\u4f53\u503c\u7c7b\u578b\uff08\u7279\u4f8b\uff1a\u9884\u58f0\u660e\u7684 nil \u662f\u65e0\u7c7b\u578b\u7684\uff09\u3002\u52a8\u6001\u7c7b\u578b\u5728\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u5e76\u4e0d\u76f8\u540c\uff0c\u4f46\u662f\u63a5\u53e3\u53d8\u91cf\u7684\u503c\u662f\u53ef\u4ee5\u5206\u914d\u7ed9\u76f8\u540c\u9759\u6001\u7c7b\u578b\u7684\u53d8\u91cf\u3002 var x interface{} // x \u7684\u9759\u6001\u7c7b\u578b\u4e3a interface{} \u503c\u4e3a nil var v *T // v \u7684\u9759\u6001\u7c7b\u578b\u4e3a *T \u503c\u4e3a nil x = 42 // x \u7684\u52a8\u6001\u7c7b\u578b\u4e3a int \u503c\u4e3a 42 x = v // x \u52a8\u6001\u7c7b\u578b\u4e3a *T \u503c\u4e3a (*T)(nil) \u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u53d8\u91cf\u53ef\u4ee5\u53d6\u51fa\u53d8\u91cf\u7684\u503c\uff1b\u8fd9\u4e2a\u503c\u5c31\u662f\u53d8\u91cf\u6700\u8fd1\u4e00\u6b21\u88ab\u8d4b\u4e88\u7684\u503c\u3002\u5982\u679c\u6ca1\u6709\u5bf9\u53d8\u91cf\u8d4b\u8fc7\u503c\uff0c\u90a3\u4e48\u4ed6\u7684\u503c\u662f\u8be5\u7c7b\u578b\u7684\u96f6\u503c\u3002","title":"\u53d8\u91cf"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_19","text":"\u7c7b\u578b\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u96c6\u5408\u5305\u62ec\u503c\u548c\u9488\u5bf9\u503c\u7684\u64cd\u4f5c&\u65b9\u6cd5\u3002\u4e00\u4e2a\u7c7b\u578b\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u540d\u6765\u8868\u793a\u3002\u7c7b\u578b\u6709\u591a\u79cd\u8868\u73b0\u5f62\u5f0f\uff1a\u5982\u679c\u5b58\u5728\u7c7b\u578b\u540d\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u540d\u8868\u793a\uff0c\u6216\u8005\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6839\u636e\u5df2\u6709\u7c7b\u578b\u7ec4\u5408\u6210\u7684\u7c7b\u578b\u5b57\u9762\u503c\u3002 Type = TypeName | TypeLit | \"(\" Type \")\" . TypeName = identifier | QualifiedIdent . TypeLit = ArrayType | StructType | PointerType | FunctionType | InterfaceType | SliceType | MapType | ChannelType . Go \u5df2\u7ecf\u9884\u5148\u58f0\u660e\u4e86\u67d0\u4e9b\u7c7b\u578b\u7684\u540d\u79f0\u3002\u5e76\u5f15\u5165\u4e86\u7c7b\u578b\u58f0\u660e\u3002\u590d\u5408\u7c7b\u578b\uff08\u6570\u7ec4\u3001\u7ed3\u6784\u4f53\u3001\u6307\u9488\u3001\u51fd\u6570\u3001\u63a5\u53e3\u3001\u5207\u7247\u3001map\u3001channel\uff09\u53ef\u4ee5\u4f7f\u7528\u4ed6\u4eec\u7684\u7c7b\u578b\u5b57\u9762\u503c\u3002 \u6bcf\u4e2a\u7c7b\u578bT\u90fd\u6709\u4e00\u4e2a\u5e95\u5c42\u7c7b\u578b\u3002\u5982\u679cT\u662f\u9884\u5b9a\u4e49\u7c7b\u578b\u6216\u8005\u7c7b\u578b\u5b57\u9762\u503c\u3002\u90a3\u4e48\u5e95\u5c42\u7c7b\u578b\u5c31\u662f\u4ed6\u81ea\u8eab\u3002\u5426\u5219\uff0cT\u7684\u5e95\u5c42\u7c7b\u578b\u5c31\u662f\u5b83\u518d\u7c7b\u578b\u58f0\u660e\u65f6\u5f15\u7528\u5230\u7684\u7c7b\u578b\u3002 type ( A1 = string A2 = A1 ) type ( B1 string B2 B1 B3 []B1 B4 B3 ) string \uff0c A1 \uff0c A2 \uff0c B1 \uff0c B2 \u7684\u5e95\u5c42\u7c7b\u578b\u662f string \u3002 []B1 \uff0c B3 \uff0c B4 \u7684\u4e0b\u6e38\u7c7b\u578b\u662f[]B1\u3002","title":"\u7c7b\u578b"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_20","text":"\u7c7b\u578b\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a\u4e0e\u4e4b\u5173\u8054\u7684\u65b9\u6cd5\u96c6\u3002\u63a5\u53e3\u7c7b\u578b\u7684\u65b9\u6cd5\u96c6\u5c31\u53ef\u4ee5\u4f7f\u7528\u81ea\u8eab\u8868\u793a\u3002\u5bf9\u4e8e\u5176\u4ed6\u7c7b\u578b\uff0c\u7c7b\u578b T \u7684\u65b9\u6cd5\u96c6\u7531\u6240\u6709\u63a5\u6536\u8005\u7c7b\u578b\u4e3a T \u7684\u65b9\u6cd5\u7ec4\u6210\u3002\u800c\u5bf9\u5e94\u6307\u9488\u7c7b\u578b T \u7684\u65b9\u6cd5\u96c6\u7531\u6240\u6709\u63a5\u6536\u8005\u7c7b\u578b\u4e3a T \u6216 T \u7684\u65b9\u6cd5\u7ec4\u6210\u3002\u5982\u679c\u662f\u7ed3\u6784\u4f53\u7c7b\u578b\u4e14\u542b\u6709\u5d4c\u5165\u5b57\u6bb5\uff0c\u90a3\u4e48\u65b9\u6cd5\u96c6\u4e2d\u53ef\u80fd\u8fd8\u4f1a\u5305\u542b\u66f4\u591a\u7684\u65b9\u6cd5\uff0c\u5177\u4f53\u8bf7\u770b\u7ed3\u6784\u4f53\u7c7b\u578b\u7ae0\u8282\u3002\u5176\u4ed6\u7c7b\u578b\u7684\u65b9\u6cd5\u96c6\u90fd\u4e3a\u7a7a\u3002\u65b9\u6cd5\u96c6\u4e2d\u7684\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u6709\u552f\u4e00\u4e14\u4e0d\u4e3a\u7a7a\u7684\u65b9\u6cd5\u540d\u3002 \u7c7b\u578b\u7684\u65b9\u6cd5\u96c6\u7528\u6765\u786e\u5b9a\u7c7b\u578b\u5b9e\u73b0\u7684\u63a5\u53e3\u548c\u4ee5\u7c7b\u578b\u4f5c\u4e3a\u63a5\u6536\u8005\u80fd\u591f\u8c03\u7528\u7684\u65b9\u6cd5\u3002","title":"\u65b9\u6cd5\u96c6"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_21","text":"\u5e03\u5c14\u7c7b\u578b\u8868\u793a\u9884\u5b9a\u4e49\u5e38\u91cf true \u548c false \u8868\u793a\u5e03\u5c14\u771f\u5b9e\u503c\u7684\u96c6\u5408\u3002\u9884\u5b9a\u4e49\u7684\u5e03\u5c14\u7c7b\u578b\u4e3a bool \uff1b\u5b83\u662f\u901a\u8fc7\u7c7b\u578b\u58f0\u660e\u521b\u5efa\u7684\u3002","title":"\u5e03\u5c14\u7c7b\u578b"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_22","text":"\u4e00\u4e2a\u6570\u5b57\u7c7b\u578b\u76f8\u5f53\u4e8e\u6574\u578b\u548c\u6d6e\u70b9\u578b\u7684\u6240\u6709\u503c\u7684\u96c6\u5408\u3002\u9884\u5b9a\u4e49\u7684\u6570\u5b57\u7c7b\u578b\u5305\u62ec\uff1a uint8 8 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u96c6\u5408 (0 to 255) uint16 16 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u96c6\u5408 (0 to 65535) uint32 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u96c6\u5408 (0 to 4294967295) uint64 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u96c6\u5408 (0 to 18446744073709551615) int8 8 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u96c6\u5408 (-128 to 127) int16 16 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u96c6\u5408 (-32768 to 32767) int32 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u96c6\u5408 (-2147483648 to 2147483647) int64 64 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u96c6\u5408 (-9223372036854775808 to 9223372036854775807) float32 IEEE-754 32 \u4f4d\u6d6e\u70b9\u6570\u96c6\u5408 float64 IEEE-754 64 \u4f4d\u6d6e\u70b9\u6570\u96c6\u5408 complex64 \u5b9e\u90e8\u865a\u90e8\u90fd\u4e3a float32 \u7684\u590d\u6570\u96c6\u5408 complex128 \u5b9e\u90e8\u865a\u90e8\u90fd\u4e3a float64 \u7684\u590d\u6570\u96c6\u5408 byte uint8 \u7684\u522b\u540d rune int32 \u7684\u522b\u540d n \u4f4d\u6574\u6570\u7684\u503c\u5177\u6709 n \u6bd4\u7279\u7684\u5bbd\u5ea6\u5e76\u7528\u8865\u7801\u8868\u793a\u3002 \u4ee5\u4e0b\u51e0\u79cd\u9884\u5b9a\u4e49\u7c7b\u578b\u7531\u5177\u4f53\u5e73\u53f0\u5b9e\u73b0\u6307\u5b9a\u957f\u5ea6\uff1a uint 32 \u6216 64 \u4f4d int \u548c uint \u4f4d\u6570\u76f8\u540c uintptr \u80fd\u591f\u5bb9\u7eb3\u6307\u9488\u503c\u7684\u65e0\u7b26\u53f7\u6574\u6570 \u4e3a\u4e86\u907f\u514d\u79fb\u690d\u6027\u95ee\u9898\uff0c\u9664\u4e86\u88ab uint8 \u7684\u522b\u540d byte \u548c int32 \u7684\u522b\u540d rune\uff0c\u5176\u4ed6\u6240\u6709\u7684\u6570\u5b57\u7c7b\u578b\u90fd\u662f\u901a\u8fc7\u7c7b\u578b\u58f0\u660e\u5b9a\u4e49\u3002\u5f53\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u4e0d\u540c\u7684\u6570\u5b57\u7c7b\u578b\u9700\u8981\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u3002\u4f8b\u5982\uff1aint32 \u548c int \u4e0d\u662f\u76f8\u540c\u7684\u7c7b\u578b\uff0c\u5373\u4f7f\u4ed6\u4eec\u5728\u6307\u5b9a\u7684\u5e73\u53f0\u4e0a\u662f\u76f8\u7b49\u7684\u3002","title":"\u6570\u5b57\u7c7b\u578b"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_23","text":"\u5b57\u7b26\u4e32\u7c7b\u578b\u8868\u793a\u5b57\u7b26\u4e32\u7684\u503c\u7c7b\u578b\u3002\u5b57\u7b26\u4e32\u7684\u503c\u662f\u4e00\u4e2a\u5b57\u8282\u5e8f\u5217\uff08\u6709\u53ef\u80fd\u4e3a\u7a7a\uff09\u3002\u5b57\u7b26\u4e32\u4e00\u65e6\u521b\u5efa\u5c31\u65e0\u6cd5\u4fee\u6539\u5b83\u7684\u503c\u3002\u9884\u5b9a\u4e49\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u662f string \uff0c\u5b83\u662f\u901a\u8fc7\u7c7b\u578b\u58f0\u660e\u5b9a\u4e49\u7684\u3002 \u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u51fd\u6570 len \u83b7\u53d6\u5b57\u7b26\u4e32\u957f\u5ea6\u3002\u5982\u679c\u5b57\u7b26\u4e32\u662f\u5e38\u91cf\u90a3\u4e48\u5b83\u7684\u957f\u5ea6\u5728\u7f16\u8bd1\u65f6\u4e5f\u4e3a\u5e38\u91cf\u3002\u53ef\u4ee5\u901a\u8fc7\u6570\u5b57\u4e0b\u6807 0\uff5elen(s)-1 \u8bbf\u95ee\u5b57\u7b26\u4e32\u5b57\u8282\u3002\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u5730\u5740\u662f\u975e\u6cd5\u64cd\u4f5c\uff1b\u5982\u679c s[i] \u662f\u5b57\u7b26\u4e32\u7684\u7b2c i \u4e2a\u5b57\u8282\uff0c\u90a3\u4e48 &s[i] \u662f\u65e0\u6548\u7684\u3002","title":"\u5b57\u7b26\u4e32\u7c7b\u578b"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_24","text":"\u6570\u7ec4\u662f\u4e00\u5b9a\u6570\u91cf\u7684\u5355\u4e00\u7c7b\u578b\u5143\u7d20\u5e8f\u5217\uff0c\u800c\u8fd9\u4e2a\u5355\u4e00\u7c7b\u578b\u53eb\u505a\u5143\u7d20\u7c7b\u578b\u3002\u5143\u7d20\u7684\u4e2a\u6570\u8868\u793a\u5143\u7d20\u7684\u957f\u5ea6\uff0c\u5b83\u6c38\u8fdc\u4e0d\u662f\u8d1f\u6570\u3002 ArrayType = \"[\" ArrayLength \"]\" ElementType . ArrayLength = Expression . ElementType = Type . \u957f\u5ea6\u662f\u6570\u7ec4\u7c7b\u578b\u7684\u4e00\u90e8\u5206\uff1b\u5b83\u662f\u4e00\u4e2a\u7c7b\u578b\u4e3a int \u7684\u975e\u8d1f\u5e38\u91cf\u3002\u53ef\u4ee5\u7528\u5185\u7f6e\u51fd\u6570 len \u83b7\u53d6\u6570\u7ec4\u7684\u957f\u5ea6\u3002\u5143\u7d20\u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807 0\uff5elen(a)-1 \u8bbf\u95ee\u3002\u6570\u7ec4\u4e00\u822c\u90fd\u662f\u4e00\u7ef4\u7684\uff0c\u4e0d\u8fc7\u4e5f\u53ef\u4ee5\u662f\u591a\u7ef4\u7684\u3002 [32]byte [2*N] struct { x, y int32 } [1000]*float64 [3][5]int [2][2][2]float64 // same as [2]([2]([2]float64))","title":"\u6570\u7ec4\u7c7b\u578b"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_25","text":"\u5207\u7247\u63cf\u8ff0\u4e86\u5e95\u5c42\u6570\u7ec4\u7684\u4e00\u4e2a\u8fde\u7eed\u7247\u6bb5\u5e76\u63d0\u4f9b\u5bf9\u8fde\u7eed\u7247\u6bb5\u5185\u5143\u7d20\u7684\u8bbf\u95ee\u3002\u5207\u7247\u7c7b\u578b\u8868\u793a\u5143\u7d20\u7c7b\u578b\u7684\u6570\u7ec4\u7684\u6240\u6709\u5207\u7247\u7684\u96c6\u5408\u3002\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u7684\u5207\u7247\u7528 nil \u8868\u793a\u3002 SliceType = \"[\" \"]\" ElementType . \u4e0e\u6570\u7ec4\u4e00\u6837\uff0c\u5207\u7247\u7684\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u5e76\u4e14\u6709\u957f\u5ea6\uff0c\u5207\u7247\u7684\u957f\u5ea6\u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u7684 len \u51fd\u6570\u83b7\u53d6\uff1b\u4e0e\u6570\u7ec4\u4e0d\u540c\u7684\u662f\u5b83\u7684\u957f\u5ea6\u5728\u8fd0\u884c\u65f6\u662f\u53ef\u4ee5\u53d8\u5316\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807 0\uff5elen(s)-1 \u6765\u8bbf\u95ee\u5207\u7247\u5185\u7684\u5143\u7d20\u3002\u5207\u7247\u7684\u7d22\u5f15\u53ef\u80fd\u4f1a\u5c0f\u4e8e\u76f8\u540c\u5143\u7d20\u518d\u5e95\u5c42\u6570\u7ec4\u7684\u7d22\u5f15\u3002 \u5207\u7247\u4e00\u65e6\u521d\u59cb\u5316\uff0c\u90a3\u4e48\u5c31\u6709\u4e00\u4e2a\u4e0e\u4e4b\u5bf9\u5e94\u7684\u5e95\u5c42\u6570\u7ec4\u4fdd\u5b58\u5207\u7247\u4e2d\u7684\u5143\u7d20\u3002\u5207\u7247\u548c\u5e95\u5c42\u7684\u6570\u7ec4\u8fd8\u6709\u5176\u4ed6\u6307\u5411\u8be5\u6570\u7ec4\u7684\u5207\u7247\u5171\u4eab\u76f8\u540c\u7684\u50a8\u5b58\u7a7a\u95f4\uff1b\u800c\u4e0d\u540c\u7684\u6570\u7ec4\u603b\u662f\u6709\u7740\u4e0d\u540c\u7684\u5b58\u50a8\u7a7a\u95f4\u3002 \u5207\u7247\u7684\u5e95\u5c42\u6570\u7ec4\u53ef\u80fd\u4f1a\u5ef6\u4f38\u5230\u5207\u7247\u672b\u5c3e\u4ee5\u5916\uff0c\u5207\u7247\u7684\u5bb9\u79ef\u7b49\u4e8e\u5207\u7247\u73b0\u5728\u7684\u957f\u5ea6\u52a0\u4e0a\u6570\u7ec4\u4e2d\u5207\u7247\u8fd8\u6ca1\u4f7f\u7528\u7684\u957f\u5ea6\uff1b\u53ef\u4ee5\u4ece\u539f\u59cb\u5207\u7247\u4e2d\u5207\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e0e\u5bb9\u91cf\u76f8\u7b49\u7684\u5207\u7247\u3002\u5207\u7247\u7684\u5bb9\u91cf\u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u7684 cap(a) \u51fd\u6570\u6765\u83b7\u53d6\u3002\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570 make \u6765\u521b\u5efa\u4e00\u4e2aT\u7c7b\u578b\u7684\u65b0\u5207\u7247\u3002 \u4f7f\u7528\u5185\u7f6e\u51fd\u6570 make \u53ef\u4ee5\u51fa\u5b9e\u8bdd\u7ed9\u5b9a\u5143\u7d20\u7c7b\u578b T \u7684\u5207\u7247\u3002 make \u51fd\u6570\u63a5\u6536\u4e09\u4e2a\u53c2\u6570\uff1a\u5207\u7247\u7c7b\u578b\u3001\u5207\u7247\u957f\u5ea6\u3001\u5207\u7247\u5bb9\u79ef\uff0c\u5176\u4e2d\u5207\u7247\u5bb9\u79ef\u662f\u53ef\u9009\u53c2\u6570\u3002 make \u521b\u5efa\u7684\u5207\u7247\u4f1a\u5728\u5e95\u5c42\u5206\u914d\u4e00\u4e2a\u5207\u7247\u6240\u5f15\u7528\u7684\u65b0\u6570\u7ec4\u3002 make([]T, length, capacity) make \u7684\u4f5c\u7528\u5c31\u662f\u521b\u5efa\u65b0\u6570\u7ec4\u5e76\u5207\u5206\u5b83\uff0c\u6240\u4ee5\u4e0b\u9762\u4e24\u79cd\u5199\u6cd5\u662f\u7b49\u4ef7\u7684\uff1a make([]int, 50, 100) new([100]int)[0:50] \u4e0e\u6570\u7ec4\u76f8\u540c\uff0c\u5207\u7247\u4e00\u822c\u662f\u4e00\u7ef4\u7684\uff0c\u4e0d\u8fc7\u4e5f\u53ef\u4ee5\u590d\u5408\u6210\u591a\u7ef4\u3002\u6570\u7ec4\u4e2d\u7684\u6570\u7ec4\u90fd\u5fc5\u987b\u662f\u76f8\u540c\u7684\u957f\u5ea6\uff0c\u4f46\u662f\u5207\u7247\u4e2d\u7684\u5207\u7247\u957f\u5ea6\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u4e0d\u8fc7\u5207\u7247\u4e2d\u7684\u5207\u7247\u9700\u8981\u5355\u72ec\u521d\u59cb\u5316\u3002","title":"\u5207\u7247\u7c7b\u578b"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_26","text":"\u7ed3\u6784\u4f53\u662f\u4e00\u4e2a\u547d\u540d\u5143\u7d20\u5e8f\u5217\uff0c\u547d\u540d\u5143\u7d20\u4e5f\u53eb\u505a\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u5bf9\u5e94\u4e00\u4e2a\u540d\u79f0\u548c\u7c7b\u578b\uff0c\u5b57\u6bb5\u7684\u540d\u5b57\u53ef\u4ee5\u662f\u663e\u5f0f\u6307\u5b9a\u7684\uff08\u6807\u8bc6\u7b26\u5217\u8868\uff09\u4e5f\u53ef\u4ee5\u662f\u9690\u5f0f\u7684\uff08\u5d4c\u5165\u5b57\u6bb5\uff09\u3002\u5728\u7ed3\u6784\u4f53\u4e2d\u975e\u7a7a\u5b57\u6bb5\u5177\u6709\u552f\u4e00\u6027\u3002 StructType = \"struct\" \"{\" { FieldDecl \";\" } \"}\" . FieldDecl = (IdentifierList Type | EmbeddedField) [ Tag ] . EmbeddedField = [ \"*\" ] TypeName . Tag = string_lit . // \u7a7a\u7ed3\u6784\u4f53. struct {} // 6\u4e2a\u5b57\u6bb5\u7684\u7ed3\u6784\u4f53. struct { x, y int u float32 _ float32 // padding A *[]int F func() } \u4e00\u4e2a\u6307\u5b9a\u4e86\u7c7b\u578b\u800c\u6ca1\u6709\u6307\u5b9a\u540d\u79f0\u7684\u5b57\u6bb5\u53eb\u505a\u5d4c\u5165\u5b57\u6bb5\uff0c\u5d4c\u5165\u5b57\u6bb5\u5fc5\u987b\u6307\u5b9a\u7c7b\u578b\u540d T \u6216\u6307\u5411\u975e\u63a5\u53e3\u7c7b\u578b\u7684\u6307\u9488\u7c7b\u578b *T\uff0c\u5176\u4e2d T \u4e0d\u80fd\u4e3a\u6307\u9488\u7c7b\u578b\u3002\u6216\u8005\u4e00\u4e2a\u975e\u63a5\u53e3\u7c7b\u578b\u7684\u6307\u9488\u3002\u5e76\u4e14T\u672c\u8eab\u4e0d\u80fd\u4e3a\u6307\u9488\u7c7b\u578b\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f1a\u628a\u7c7b\u578b\u540d\u4f5c\u4e3a\u5b57\u6bb5\u7684\u540d\u5b57\u3002 // \u4e00\u4e2a\u5305\u542b 4 \u4e2a\u5d4c\u5165\u5b57\u6bb5 T1, *T2, P.T3 \u548c *P.T4 \u7684\u7ed3\u6784\u4f53 struct { T1 // \u5b57\u6bb5\u540d\u4e3a T1 *T2 // \u5b57\u6bb5\u540d\u4e3a T2 P.T3 // \u5b57\u6bb5\u540d\u4e3a T3 *P.T4 // \u5b57\u6bb5\u540d\u4e3a T4 x, y int // \u5b57\u6bb5\u540d\u4e3a x \u548c y } \u4ee5\u4e0b\u58f0\u660e\u662f\u9519\u8bef\u7684\u56e0\u4e3a\u5b57\u6bb5\u540d\u79f0\u5fc5\u987b\u552f\u4e00\u3002 struct { T // \u5d4c\u5165\u5b57\u6bb5 *T \u4e0e *P.T \u51b2\u7a81 *T // \u5d4c\u5165\u5b57\u6bb5 T \u4e0e *P.T \u51b2\u7a81 *P.T // \u5d4c\u5165\u5b57\u6bb5 T \u4e0e *T \u51b2\u7a81 } \u5982\u679c x.f \u662f\u8868\u793a\u8be5\u5b57\u6bb5\u6216\u65b9\u6cd5 f \u7684\u5408\u6cd5\u9009\u62e9\u5668\uff0c\u5219\u4f1a\u8c03\u7528\u7ed3\u6784 x \u4e2d\u5d4c\u5165\u5b57\u6bb5\u7684\u5b57\u6bb5\u6216\u65b9\u6cd5 f \u3002 \u4ece\u5d4c\u5165\u5b57\u6bb5\u7ec4\u5408\u6765\u7684\u5b57\u6bb5\u4e0e\u7ed3\u6784\u4f53\u539f\u6765\u7684\u5b57\u6bb5\u884c\u4e3a\u57fa\u672c\u76f8\u540c\uff0c\u53ea\u662f\u4e0d\u80fd\u5728\u7ed3\u6784\u4f53\u7684\u590d\u5408\u5b57\u9762\u503c\u4e2d\u76f4\u63a5\u4f7f\u7528\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u7ed3\u6784\u4f53 S \u548c\u4e00\u4e2a\u7c7b\u578b T\uff0c\u4f9d\u636e\u4ee5\u4e0b\u89c4\u5219\u751f\u6210\u7ec4\u5408\u540e\u7684\u65b9\u6cd5\u96c6\uff1a \u5982\u679c S \u5305\u542b\u5d4c\u5165\u5b57\u6bb5 T\uff0c\u5219 S \u548c S \u7684\u65b9\u6cd5\u96c6\u5305\u62ec\u63a5\u6536\u8005\u4e3a T \u7684\u65b9\u6cd5\u96c6\uff0c\u800c S \u5305\u62ec \u63a5\u6536\u8005\u4e3a *T \u7684\u65b9\u6cd5\u96c6\u3002 \u5982\u679c S \u5305\u542b\u5b57\u6bb5 T\u3002\u90a3\u4e48S\u548c S\u5747\u5305\u542b\u63a5\u6536\u8005\u4e3a T \u548c *T \u7684\u6240\u6709\u65b9\u6cd5\u96c6\u3002 \u58f0\u660e\u5b57\u6bb5\u65f6\u53ef\u4ee5\u7ed9\u8be5\u5b57\u6bb5\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684 tag\u3002\u8fd9\u4e2a tag \u5c06\u4f1a\u6210\u4e3a\u5b83\u6240\u5bf9\u5e94\u5b57\u6bb5\u7684\u4e00\u4e2a\u5c5e\u6027\u3002\u7a7a tag \u548c\u7f3a\u7701 tag \u662f\u76f8\u540c\u7684\u3002tag \u7684\u503c\u53ef\u4ee5\u901a\u8fc7\u53cd\u5c04\u7684\u63a5\u53e3\u83b7\u53d6\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u578b\u7ed3\u6784\u4f53\u7684\u7c7b\u578b\u5b9a\u4e49\u7684\u4e00\u90e8\u5206\uff0c\u4e5f\u53ef\u4ee5\u5ffd\u7565\u3002 struct { x, y float64 \"\" // \u7a7a tag \u548c\u7f3a\u7701 tag \u76f8\u540c name string \"any string is permitted as a tag\" _ [4]byte \"ceci n'est pas un champ de structure\" } // \u7ed3\u6784\u4f53\u5bf9\u5e94\u4e00\u4e2a TimeStamp \u7684 protocol buffer. // tag \u5b57\u7b26\u4e32\u4e2d\u5b9a\u4e49\u4e86 protocol buffer \u5b57\u6bb5\u5bf9\u5e94\u7684\u6570\u5b57; // \u4e00\u822c\u4f7f\u7528 reflect \u5305\u8bfb\u53d6\u4ed6\u4eec. struct { microsec uint64 `protobuf:\"1\"` serverIP6 uint64 `protobuf:\"2\"` }","title":"\u7ed3\u6784\u4f53\u7c7b\u578b"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_27","text":"\u6307\u9488\u7c7b\u578b\u8868\u793a\u6240\u6709\u6307\u5411\u7ed9\u5b9a\u7c7b\u578b\u53d8\u91cf\u7684\u6307\u9488\u96c6\u5408\u3002\u8fd9\u4e2a\u6307\u5b9a\u7684\u7c7b\u578b\u53eb\u505a\u6307\u9488\u7684\u57fa\u7840\u7c7b\u578b\u3002\u6ca1\u6709\u521d\u59cb\u5316\u7684\u6307\u9488\u503c\u4e3anil\u3002 PointerType = \"*\" BaseType . BaseType = Type . *Point *[4]int","title":"\u6307\u9488\u7c7b\u578b"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_28","text":"\u51fd\u6570\u7c7b\u578b\u53ef\u4ee5\u8868\u793a\u6240\u6709\u5177\u6709\u76f8\u540c\u53c2\u6570\u7c7b\u578b\u548c\u8fd4\u56de\u503c\u7c7b\u578b\u7684\u51fd\u6570\u3002\u672a\u521d\u59cb\u5316\u7684\u51fd\u6570\u7c7b\u578b\u503c\u4e3a nil\u3002 FunctionType = \"func\" Signature . Signature = Parameters [ Result ] . Result = Parameters | Type . Parameters = \"(\" [ ParameterList [ \",\" ] ] \")\" . ParameterList = ParameterDecl { \",\" ParameterDecl } . ParameterDecl = [ IdentifierList ] [ \"...\" ] Type . \u5728\u53c2\u6570\u548c\u8fd4\u56de\u503c\u5217\u8868\u4e2d\uff0c\u6807\u8bc6\u7b26\u5217\u8868\u5fc5\u987b\u540c\u65f6\u5b58\u5728\u6216\u7f3a\u7701\u3002\u5982\u679c\u5b58\u5728\uff0c\u90a3\u4e48\u6bcf\u4e2a\u540d\u5b57\u90fd\u8868\u793a\u6307\u5b9a\u7c7b\u578b\u7684\u4e00\u4e2a\u53c2\u6570/\u8fd4\u56de\u503c\uff0c\u8fd9\u4e9b\u6807\u8bc6\u7b26\u5fc5\u987b\u975e\u7a7a\u5e76\u4e14\u4e0d\u80fd\u91cd\u590d\u3002\u5982\u679c\u7f3a\u7701\uff0c\u6307\u5b9a\u7c7b\u578b\u7684\u53c2\u6570/\u8fd4\u56de\u503c\u4f7f\u7528\u5bf9\u5e94\u7684\u7c7b\u578b\u8868\u793a\u3002\u53c2\u6570\u5217\u8868\u548c\u8fd4\u56de\u503c\u5217\u8868\u4e00\u822c\u90fd\u662f\u9700\u8981\u52a0\u62ec\u53f7\uff0c\u4e0d\u8fc7\u5728\u53ea\u6709\u4e00\u4e2a\u7f3a\u7701\u8fd4\u56de\u503c\u65f6\uff0c\u5b83\u53ef\u4ee5\u4e0d\u4f7f\u7528\u62ec\u53f7\u3002 \u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u6dfb\u52a0\u524d\u7f00 ... \u3002\u5305\u542b\u8fd9\u79cd\u53c2\u6570\u7684\u51fd\u6570\u53eb\u505a\u53d8\u53c2\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u63a5\u6536\u96f6\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\u3002 func() func(x int) int func(a, _ int, z float32) bool func(a, b int, z float32) (bool) func(prefix string, values ...int) func(a, b int, z float64, opt ...interface{}) (success bool) func(int, int, float64) (float64, *[]int) func(n int) func(p *T)","title":"\u51fd\u6570\u7c7b\u578b"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_29","text":"\u63a5\u53e3\u7c7b\u578b\u6307\u5b9a\u4e86\u4e00\u4e2a\u65b9\u6cd5\u96c6\u3002\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u53d8\u91cf\u53ef\u4ee5\u4fdd\u5b58\u4efb\u4f55\u65b9\u6cd5\u96c6\u662f\u8be5\u63a5\u53e3\u8d85\u96c6\u7684\u7c7b\u578b\u3002\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u7c7b\u578b\u5b9e\u73b0\u4e86\u63a5\u53e3\u3002\u6ca1\u6709\u521d\u59cb\u5316\u7684\u63a5\u53e3\u7c7b\u578b\u503c\u4e3a nil\u3002 InterfaceType = \"interface\" \"{\" { MethodSpec \";\" } \"}\" . MethodSpec = MethodName Signature | InterfaceTypeName . MethodName = identifier . InterfaceTypeName = TypeName . \u5728\u63a5\u53e3\u7c7b\u578b\u7684\u65b9\u6cd5\u96c6\u4e2d\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u7684\u540d\u79f0\u5fc5\u987b\u662f\u975e\u7a7a\u4e14\u552f\u4e00\u3002 // A simple File interface interface { Read(b Buffer) bool Write(b Buffer) bool Close() } \u63a5\u53e3\u53ef\u4ee5\u7531\u591a\u4e2a\u7c7b\u578b\u5b9e\u73b0\uff0c\u4f8b\u5982\uff1a\u7c7b\u578b S1 \u548c\u7c7b\u578b S2 \u90fd\u6709\u4ee5\u4e0b\u65b9\u6cd5\u96c6\uff1a func (p T) Read(b Buffer) bool { return \u2026 } func (p T) Write(b Buffer) bool { return \u2026 } func (p T) Close() { \u2026 } \uff08\u8fd9\u91cc\u7684\u7c7b\u578b T \u53ef\u4ee5\u8868\u793a S1 \u4e5f\u53ef\u4ee5\u8868\u793a S2 \uff09 S1 \u548c S2 \u90fd\u5b9e\u73b0\u4e86\u63a5\u53e3 File \uff0c\u800c\u4e0d\u7528\u7ba1\u7c7b\u578b\u662f\u5426\u8fd8\u6709\u5176\u4ed6\u65b9\u6cd5\u3002 \u4e00\u4e2a\u7c7b\u578b\u5b9e\u73b0\u4e86\u4efb\u4f55\u65b9\u6cd5\u96c6\u7684\u4e3a\u5176\u5b50\u96c6\u7684\u63a5\u53e3\u3002\u56e0\u6b64\u5b83\u53ef\u80fd\u5b9e\u73b0\u4e86\u591a\u4e2a\u4e0d\u540c\u63a5\u53e3\u3002\u4f8b\u5982\uff1a\u6240\u6709\u7684\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u7a7a\u63a5\u53e3\uff1a interface{} \u4e0e\u4e4b\u76f8\u4f3c\uff0c\u601d\u8003\u4e0b\u9762\u8fd9\u4e2a\u5b9a\u4e49\u4e3a Locker \u7684\u63a5\u53e3\uff1a type Locker interface { Lock() Unlock() } \u5982\u679c S1 \u548c S2 \u4e5f\u5b9e\u73b0\u4e86\u5b83\uff1a func (p T) Lock() { \u2026 } func (p T) Unlock() { \u2026 } \u90a3\u5b83\u4eec\u5c31\u5b9e\u73b0\u4e86\u4e24\u4e2a\u63a5\u53e3 Locker \u548c File \u3002 \u4e00\u4e2a\u63a5\u53e3 T \u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u4e2a\u63a5\u53e3 E \u6765\u6307\u5b9a\u65b9\u6cd5\u3002\u8fd9\u79cd\u65b9\u5f0f\u53eb\u505a\u5c06\u63a5\u53e3 E \u5d4c\u5165\u8fdb\u63a5\u53e3 T\u3002\u5b83\u628a E \u4e2d\u6240\u6709\u7684\u65b9\u6cd5\uff08\u5305\u62ec\u5bfc\u51fa\u548c\u672a\u5bfc\u51fa\u7684\u65b9\u6cd5\uff09\u5168\u90e8\u6dfb\u52a0\u8fdb\u63a5\u53e3 T\u3002 type ReadWriter interface { Read(b Buffer) bool Write(b Buffer) bool } type File interface { ReadWriter // \u4e0e\u6dfb\u52a0 ReadWriter \u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u662f\u7b49\u4ef7\u7684 Locker // \u4e0e\u6dfb\u52a0 Locker \u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u662f\u7b49\u4ef7\u7684 Close() } type LockedFile interface { Locker File // \u65e0\u6548: Lock, Unlock \u4e0d\u662f\u552f\u4e00\u7684 Lock() // \u65e0\u6548: Lock \u4e0d\u662f\u552f\u4e00\u7684 } \u63a5\u53e3 T \u4e0d\u80fd\u9012\u5f52\u7684\u5d4c\u5165\u8fdb\u81ea\u5df1\u6216\u5df2\u7ecf\u5d4c\u5165\u8fc7\u5b83\u7684\u63a5\u53e3\u3002 // \u65e0\u6548: Bad \u4e0d\u80fd\u5d4c\u5165\u5b83\u81ea\u5df1 type Bad interface { Bad } // \u65e0\u6548: Bad1 \u4e0d\u80fd\u5d4c\u5165\u5df2\u7ecf\u5f15\u7528\u5b83\u7684 Bad2 type Bad1 interface { Bad2 } type Bad2 interface { Bad1 }","title":"\u63a5\u53e3\u7c7b\u578b"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#map","text":"map \u7c7b\u578b\u662f\u4e00\u79cd\u4ee5\u552f\u4e00\u503c\u4f5c\u4e3a\u952e\u7684\u65e0\u5e8f\u96c6\u5408\u3002 MapType = \"map\" \"[\" KeyType \"]\" ElementType . KeyType = Type . map\u7684\u952e\u7c7b\u578b\u5fc5\u987b\u80fd\u4f7f\u7528\u6bd4\u8f83\u8fd0\u7b97\u7b26 == \u548c != \u8fdb\u884c\u6bd4\u8f83\u3002\u56e0\u6b64\u5b83\u7684\u952e\u7c7b\u578b\u4e0d\u80fd\u662f\u51fd\u6570\uff0cmap\uff0c\u6216\u8005\u5207\u7247\u3002\u5982\u679c\u952e\u662f\u63a5\u53e3\u7c7b\u578b\uff0c\u90a3\u4e48\u6bd4\u8f83\u8fd0\u7b97\u7b26\u5fc5\u987b\u80fd\u6bd4\u8f83\u4ed6\u7684\u52a8\u6001\u503c\u3002\u5982\u679c\u4e0d\u80fd\u4f1a\u629b\u51fa\u4e00\u4e2a\u8fd0\u884c\u65f6\u9519\u8bef\u3002 map[string]int map[*T]struct{ x, y float64 } map[string]interface{} map\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u53eb\u505a\u5b83\u7684\u957f\u5ea6\u3002\u5bf9\u4e8e\u4e00\u4e2amap m \u3002\u5b83\u7684\u957f\u5ea6\u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u51fd\u6570 len \u83b7\u5f97\uff0c\u800c\u4e14\u5b83\u7684\u957f\u5ea6\u53ef\u80fd\u518d\u8fd0\u884c\u65f6\u53d1\u751f\u53d8\u5316\u3002map \u53ef\u4ee5\u518d\u8fd0\u884c\u65f6\u6dfb\u52a0\u548c\u53d6\u56de\u5143\u7d20\uff0c\u9875\u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u51fd\u6570 delete \u79fb\u9664\u5143\u7d20\u3002 \u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u51fd\u6570 make \u521d\u59cb\u5316\u4e00\u4e2a\u65b0\u7684\u4e14\u4e3a\u7a7a\u7684 map\u3002\u5b83\u80fd\u6307\u5b9a map \u7684\u7c7b\u578b\u548c\u9884\u7559\u7684\u7a7a\u95f4\uff1a make(map[string]int) make(map[string]int, 100) map \u7684\u9884\u7559\u7a7a\u95f4\u4e0d\u4f1a\u56fa\u5b9a\u4f4f map \u7684\u957f\u5ea6\uff1b\u5b83\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u4e00\u5b9a\u6570\u91cf\u7684\u5143\u7d20\u6765\u589e\u52a0\u81ea\u5df1\u7684\u957f\u5ea6\uff08nil map \u4e0d\u80fd\u6dfb\u52a0\u5143\u7d20\uff09\u3002nil map \u548c\u7a7a map \u662f\u76f8\u7b49\u7684\uff0c\u53ea\u662f nil map \u4e0d\u80fd\u6dfb\u52a0\u5143\u7d20\u3002","title":"Map\u7c7b\u578b"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#channel","text":"channel\u63d0\u4f9b\u4e00\u79cd\u624b\u6bb5\u5728\u5e76\u53d1\u6267\u884c\u7684\u51fd\u6570\u95f4\u53d1\u9001\u548c\u63a5\u6536\u6307\u5b9a\u7c7b\u578b\u7684\u503c\u3002\u6ca1\u6709\u521d\u59cb\u5316\u7684 channel \u662fnil\u3002 ChannelType = ( \"chan\" | \"chan\" \"<-\" | \"<-\" \"chan\" ) ElementType . \u64cd\u4f5c\u7b26 <- \u53ef\u4ee5\u6307\u5b9a channel \u7684\u6570\u636e\u6d41\u52a8\u65b9\u5411\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u65b9\u5411\uff0cchannel \u9ed8\u8ba4\u662f\u53cc\u5411\u7684\u3002channel \u53ef\u4ee5\u901a\u8fc7\u8f6c\u6362\u548c\u8d4b\u503c\u6765\u9650\u5236\u53ea\u8bfb\u548c\u53ea\u5199\u3002 chan T // \u53ef\u4ee5\u63a5\u6536\u548c\u53d1\u9001 T \u7c7b\u578b\u7684\u6570\u636e chan<- float64 // \u53ea\u80fd\u53d1\u9001 float64 \u7c7b\u578b\u7684\u503c <-chan int // \u53ea\u80fd\u63a5\u6536 <- \u4e0e\u6700\u5de6\u4fa7\u7684 chan \u5173\u8054\uff1a chan<- chan int // \u7b49\u4ef7\u4e8e chan<- (chan int) chan<- <-chan int // \u7b49\u4ef7\u4e8e chan<- (<-chan int) <-chan <-chan int // \u7b49\u4ef7\u4e8e <-chan (<-chan int) chan (<-chan int) \u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u7684 make \u51fd\u6570\u521d\u59cb\u5316 channel\u3002 make \u51fd\u6570\u53ef\u4ee5\u6307\u5b9achannel\u7684\u7c7b\u578b\u548c\u5bb9\u91cf\u3002 make(chan int, 100) \u5bb9\u91cf\u662f\u8bbe\u7f6e\u4e86\u6700\u5927\u80fd\u7f13\u5b58\u5143\u7d20\u7684\u6570\u91cf\u3002\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u5bb9\u91cf\u6216\u503c\u4e3a 0\uff0cchannel \u5c31\u662f\u6ca1\u6709\u7f13\u5b58\u7684\uff0c\u8fd9\u65f6\u53ea\u6709\u5f53\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\u90fd\u51c6\u5907\u597d\u540e\u624d\u4f1a\u4f20\u8f93\u6570\u636e\u3002\u800c\u5e26\u7f13\u5b58\u7684 channel \u5728\u7f13\u5b58\u6ca1\u6709\u6ee1\u7684\u65f6\u5019\u4f9d\u7136\u53ef\u4ee5\u6210\u529f\u53d1\u9001\u6570\u636e\uff0c\u5f53\u7f13\u5b58\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\u53ef\u4ee5\u6210\u529f\u63a5\u6536\u5230\u6570\u636e\uff0c\u503c\u4e3a nil \u7684 channel \u4e0d\u80fd\u4f20\u8f93\u6570\u636e\u3002 \u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u51fd\u6570 close \u5173\u95ed channel\u3002\u5728\u63a5\u6536\u7aef\u7684\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\u53ef\u4ee5\u7528\u6765\u63d0\u793a\u63a5\u6536\u8005\u5728\u5173\u95ed\u7684 channel \u662f\u5426\u8fd8\u5305\u542b\u6570\u636e\u3002 channel \u53ef\u4ee5\u5728\u53d1\u9001\u8bed\u53e5\uff0c\u63a5\u6536\u64cd\u4f5c\u4e2d\u4f7f\u7528\u3002\u53ef\u4ee5\u4e0d\u8003\u8651\u540c\u6b65\u6027\u76f4\u63a5\u5728\u591a\u4e2a goroutine \u4e2d\u5bf9 channel \u8c03\u7528\u5185\u7f6e\u51fd\u6570 len \u548c cap \u3002channel \u7684\u884c\u4e3a\u548c FIFO \u961f\u5217\u76f8\u540c\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2a goruntine \u53d1\u9001\u6570\u636e\uff0c\u53e6\u4e00\u4e2a goruntine \u63a5\u6536\u4ed6\u4eec\uff0c\u63a5\u6536\u6570\u636e\u7684\u987a\u5e8f\u548c\u53d1\u9001\u6570\u636e\u7684\u987a\u5e8f\u662f\u76f8\u540c\u7684\u3002","title":"Channel\u7c7b\u578b"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_30","text":"","title":"\u7c7b\u578b\u7684\u5c5e\u6027\u548c\u503c"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_31","text":"\u4e24\u4e2a\u7c7b\u578b\u53ef\u80fd\u76f8\u540c\u4e5f\u53ef\u80fd\u4e0d\u540c\u3002 \u5b9a\u4e49\u7684\u7c7b\u578b\u90fd\u662f\u4e0d\u540c\u7c7b\u578b\u3002\u5982\u679c\u4e24\u4e2a\u7c7b\u578b\u7684\u5e95\u5c42\u7c7b\u578b\u5728\u7ed3\u6784\u4e0a\u662f\u76f8\u540c\u7684\uff0c\u90a3\u5b83\u4eec\u4e5f\u662f\u76f8\u7b49\u7684\u3002\u603b\u7684\u6765\u8bf4\uff1a 2 \u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u548c\u5143\u7d20\u7c7b\u578b\u76f8\u540c\uff0c\u90a3\u4e48\u5b83\u4eec\u5c31\u662f\u76f8\u540c\u7c7b\u578b\u3002 \u5982\u679c\u4e24\u4e2a\u5207\u7247\u7684\u5143\u7d20\u7c7b\u578b\u76f8\u540c\u90a3\u4e48\u5b83\u4eec\u5c31\u662f\u76f8\u540c\u7c7b\u578b\u3002 \u5982\u679c\u4e24\u4e2a\u7ed3\u6784\u4f53\u5b57\u6bb5\u987a\u5e8f\u76f8\u540c\uff0c\u5e76\u4e14\u5b57\u6bb5\u540d\u79f0\u3001\u5b57\u6bb5\u7c7b\u578b\u548c tag \u90fd\u76f8\u540c\u90a3\u4e48\u5b83\u4eec\u5c31\u662f\u76f8\u7b49\u7684\u3002\u975e\u5bfc\u51fa\u5b57\u6bb5\u7684\u5b57\u6bb5\u540d\u5728\u4e0d\u540c\u7684\u5305\u4e2d\u603b\u662f\u4e0d\u540c\u7684\u3002 \u5982\u679c\u4e24\u4e2a\u6307\u9488\u7684\u57fa\u7840\u7c7b\u578b\u76f8\u540c\u90a3\u4e48\u4ed6\u4eec\u5177\u6709\u76f8\u540c\u7c7b\u578b\u3002 \u5982\u679c\u4e24\u4e2a\u51fd\u6570\u5177\u6709\u76f8\u540c\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u5217\u8868\uff0c\u5e76\u4e14\u4ed6\u4eec\u7684\u7c7b\u578b\u76f8\u540c\u90a3\u4e48\u4ed6\u4eec\u5c31\u662f\u76f8\u540c\u7684\uff0c\u53c2\u6570\u7684\u540d\u79f0\u4e0d\u4e00\u5b9a\u8981\u76f8\u540c\u3002 \u5982\u679c\u4e24\u4e2a\u63a5\u53e3\u7684\u65b9\u6cd5\u96c6\u5b8c\u5168\u76f8\u540c\uff08\u65b9\u6cd5\u7684\u987a\u5e8f\uff09\u3002 \u5982\u679c\u4e24\u4e2a map \u7c7b\u578b\u7684\u952e\u7c7b\u578b\u548c\u503c\u7c7b\u578b\u76f8\u540c\u90a3\u5b83\u4eec\u5c31\u662f\u76f8\u7b49\u7684\u3002 \u5982\u679c\u4e24\u4e2a channel \u7c7b\u578b\u5305\u542b\u7684\u5bf9\u8c61\u7c7b\u578b\u548c channel \u7684\u65b9\u5411\u90fd\u662f\u76f8\u540c\u7684\u90a3\u5b83\u4eec\u5c31\u662f\u76f8\u540c\u7684\u3002 \u7ed9\u51fa\u4e0b\u5217\u58f0\u660e\uff1a type ( A0 = []string A1 = A0 A2 = struct{ a, b int } A3 = int A4 = func(A3, float64) *A0 A5 = func(x int, _ float64) *[]string ) type ( B0 A0 B1 []string B2 struct{ a, b int } B3 struct{ a, c int } B4 func(int, float64) *B0 B5 func(x int, y float64) *A1 ) type C0 = B0 \u8fd9\u4e9b\u7c7b\u578b\u662f\u76f8\u7b49\u7684\uff1a A0, A1, and []string A2 and struct{ a, b int } A3 and int A4, func(int, float64) *[]string, and A5 B0, B0, and C0 []int and []int struct{ a, b *T5 } and struct{ a, b *T5 } func(x int, y float64) *[]string, func(int, float64) (result *[]string), and A5 B0 \u548c B1 \u4e0d\u662f\u4e00\u79cd\u7c7b\u578b\u56e0\u4e3a\u5b83\u4eec\u662f\u901a\u8fc7\u7c7b\u578b\u5b9a\u4e49\u65b9\u5f0f\u5206\u522b\u5b9a\u4e49\u7684\uff1b func(int, float64) *B0 \u548c func(x int, y float64) *[]string \u662f\u4e0d\u540c\u7684\uff0c\u56e0\u4e3a B0 \u548c []string \u4e0d\u662f\u76f8\u540c\u7c7b\u578b\u3002","title":"\u7c7b\u578b\u6807\u8bc6"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_32","text":"\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5c06 x \u5206\u914d\u7ed9\u7c7b\u578b\u4e3a T \u7684\u53d8\u91cf\uff08\u628a x \u5206\u914d\u7ed9 T\uff09\uff1a x \u7684\u7c7b\u578b\u4e3a T x \u7684\u7c7b\u578b V \u548c T \u6709\u76f8\u540c\u7684\u5e95\u5c42\u7c7b\u578b\u5e76\u4e14\u7c7b\u578b T \u6216 V \u81f3\u5c11\u4e00\u4e2a\u5b9a\u4e49\u7684\u7c7b\u578b T \u662f\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u5e76\u4e14 x \u5b9e\u73b0\u4e86 T x \u662f\u4e00\u4e2a channel\uff0c\u5e76\u4e14 T \u662fchannel\u7c7b\u578b\uff0c\u7c7b\u578bV\u548c\u7c7b\u578bT\u6709\u76f8\u540c\u7684\u5143\u7d20\u7c7b\u578b\uff0c\u5e76\u4e14 2 \u79cd\u7c7b\u578b\u81f3\u5c11\u6709\u4e00\u79cd\u4e0d\u662f\u5b9a\u4e49\u7684\u7c7b\u578b x \u7b49\u4e8e nil \u5e76\u4e14 T \u662f\u4e00\u4e2a\u6307\u9488\uff0c\u51fd\u6570\uff0c\u5207\u7247\uff0cmap\uff0cchannel \u6216\u63a5\u53e3\u7c7b\u578b x \u662f\u4e00\u4e2a\u53ef\u4ee5\u8868\u793a T \u7c7b\u578b\u503c\u7684\u65e0\u7c7b\u578b\u5e38\u91cf","title":"\u53ef\u5206\u914d\u6027"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_33","text":"\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u65f6\u53ef\u4ee5\u7528 T \u7c7b\u578b\u7684\u503c\u8868\u793a\u5e38\u91cf x\uff1a T \u503c\u7684\u96c6\u5408\u5305\u62ec x T \u662f\u6d6e\u70b9\u578b\uff0c\u800c x \u5728\u6ca1\u6709\u6ea2\u51fa\u7684\u60c5\u51b5\u4e0b\u80fd\u591f\u8fd1\u4f3c\u6210 T \u7c7b\u578b\u3002\u8fd1\u4f3c\u89c4\u5219\u4f7f\u7528 IEEE 754 round-to-even \uff0c\u8d1f\u96f6\u548c\u65e0\u7b26\u53f7\u7684\u96f6\u76f8\u540c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e38\u91cf\u7684\u503c\u4e0d\u4f1a\u4e3a\u8d1f\u96f6\uff0cNaN\uff0c\u6216\u65e0\u9650\u503c\u3002 T \u4e3a\u590d\u6570\u7c7b\u578b\uff0c\u5e76\u4e14 x \u7684 real(x) \u548c imag(x) \u90e8\u5206\u7531\u590d\u6570\u7c7b\u578b\u5bf9\u5e94\u7684\u6d6e\u70b9\u7c7b\u578b\uff08 float32 \u6216 float64 \uff09\u7ec4\u6210\u3002 x T x \u53ef\u4ee5\u8868\u793a T \u7684\u503c\uff0c\u56e0\u4e3a\uff1a 'a' byte 97 \u5728 byte \u7c7b\u578b\u503c\u7684\u96c6\u5408\u4e2d 97 rune rune \u662f int32 \u7684\u522b\u540d\uff0c97 \u5728 32 \u4f4d\u6574\u578b\u503c\u7684\u96c6\u5408\u4e2d \"foo\" string \"foo\" \u5728\u5b57\u7b26\u4e32\u503c\u7684\u96c6\u5408\u4e2d 1024 int16 1024 \u5728 16 \u4f4d\u6574\u578b\u503c\u7684\u96c6\u5408\u4e2d 42.0 byte 42 \u5728 8 \u4f4d\u65e0\u7b26\u53f7\u6574\u578b\u503c\u7684\u96c6\u5408\u4e2d 1e10 uint64 10000000000 \u5728 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u578b\u503c\u7684\u96c6\u5408\u4e2d 2.718281828459045 float32 2.718281828459045 \u7684\u8fd1\u4f3c\u503c 2.7182817 \u5728 float32 \u7c7b\u578b\u503c\u7684\u96c6\u5408\u4e2d -1e-1000 float64 -1e-1000 \u7684\u8fd1\u89c6\u503c IEEE -0.0\uff0c\u7b49\u4e8e 0 0i int 0 \u662f\u6574\u578b\u503c (42 + 0i) float32 42.0 (0 \u865a\u90e8) \u5728 float32 \u7c7b\u578b\u503c\u7684\u96c6\u5408\u4e2d x T x \u4e0d\u80fd\u8868\u793a T \u7684\u503c\uff0c\u56e0\u4e3a\uff1a 0 bool 0 \u4e0d\u5728\u5e03\u5c14\u503c\u7684\u96c6\u5408\u4e2d 'a' string 'a' \u662f rune \u7c7b\u578b, \u5b83\u4e0d\u5728\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u503c\u96c6\u5408\u4e2d 1024 byte 1024 \u4e0d\u5728 8 \u4f4d\u65e0\u7b26\u53f7\u6574\u578b\u503c\u7684\u96c6\u5408\u4e2d -1 uint16 -1 \u4e0d\u5728 16 \u4f4d\u65e0\u7b26\u53f7\u6574\u578b\u503c\u7684\u96c6\u5408\u4e2d 1.1 int 1.1 \u4e0d\u662f\u6574\u578b\u503c 42i float32 (0 + 42i) \u4e0d\u5728 float32 \u7c7b\u578b\u503c\u7684\u96c6\u5408\u4e2d 1e1000 float64 1e1000 \u53d6\u8fd1\u4f3c\u503c\u65f6\u4f1a\u6ea2\u51fa\u6210 IEEE","title":"\u4ee3\u8868\u6027"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_34","text":"\u4ee3\u7801\u5757\u662f\u7528\u5927\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u58f0\u660e\u548c\u8bed\u53e5\u3002 Block = \"{\" StatementList \"}\" . StatementList = { Statement \";\" } . \u9664\u4e86\u6e90\u7801\u4e2d\u663e\u5f0f\u7684\u4ee3\u7801\u5757\uff0c\u4e5f\u6709\u4e00\u4e9b\u9690\u5f0f\u7684\u4ee3\u7801\u5757\u3002 \u5305\u542b\u6240\u6709\u7684Go\u4ee3\u7801\u7684\u5168\u5c40\u4ee3\u7801\u5757\u3002 \u5305\u542b\u6240\u6709\u5305\u7684\u4ee3\u7801\u7684\u5305\u4ee3\u7801\u5757\u3002 \u5305\u542b\u6587\u4ef6\u5185\u7684\u6240\u6709\u4ee3\u7801\u7684\u6587\u4ef6\u4ee3\u7801\u5757\u3002 \u6bcf\u4e2a if\uff0cswitch\u548c for \u7684\u8303\u56f4\u90fd\u4f1a\u5f62\u6210\u9690\u5f0f\u7684\u5757\u3002 \u6bcf\u4e2a switch \u548c select \u6761\u4ef6\u90fd\u6709\u81ea\u5df1\u7684\u4ee3\u7801\u5757\u3002 \u4ee3\u7801\u5757\u53ef\u4ee5\u5d4c\u5957\u5e76\u4e14\u5f71\u54cd\u4f5c\u7528\u57df\u3002","title":"\u4ee3\u7801\u5757"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_35","text":"\u4e00\u6bb5\u58f0\u660e\u53ef\u4ee5\u7ed9\u5e38\u91cf\uff0c\u7c7b\u578b\uff0c\u53d8\u91cf\uff0c\u51fd\u6570\uff0c\u6807\u7b7e\uff0c\u548c\u5305\u7ed1\u5b9a\u6807\u8bc6\u7b26\u3002\u7a0b\u5e8f\u4e2d\u6bcf\u4e2a\u6807\u8bc6\u7b26\u90fd\u9700\u8981\u58f0\u660e\u3002\u76f8\u540c\u6807\u8bc6\u7b26\u4e0d\u80fd\u5728\u540c\u4e00\u4e2a\u4ee3\u7801\u5757\u4e2d\u58f0\u660e2\u6b21\u3002\u5e76\u4e14\u76f8\u540c\u6807\u8bc6\u7b26\u4e0d\u80fd\u540c\u65f6\u5728\u6587\u4ef6\u548c package \u4ee3\u7801\u5757\u4e2d\u58f0\u660e\u3002 \u7a7a\u6807\u8bc6\u7b26\u53ef\u4ee5\u548c\u5176\u4ed6\u6807\u8bc6\u7b26\u4e00\u6837\u5728\u58f0\u660e\u4e2d\u4f7f\u7528\u3002\u4e0d\u8fc7\u5b83\u4e0d\u7ed1\u5b9a\u6807\u8bc6\u7b26\uff0c\u7b49\u4e8e\u6ca1\u6709\u58f0\u660e\u3002\u5728 package \u4ee3\u7801\u5757\u4e2d init \u6807\u8bc6\u7b26\u53ea\u80fd\u7528\u505a init \u51fd\u6570\u7684\u6807\u8bc6\u7b26\uff0c\u5c31\u50cf\u7a7a\u6807\u8bc6\u7b26\u4e00\u6837\uff0c\u5b83\u4e0d\u4f1a\u5f15\u5165\u65b0\u7684\u7ed1\u5b9a\u3002 Declaration = ConstDecl | TypeDecl | VarDecl . TopLevelDecl = Declaration | FunctionDecl | MethodDecl . \u58f0\u660e\u8fc7\u7684\u6807\u8bc6\u7b26\u7684\u4f5c\u7528\u57df\u5c31\u662f\u58f0\u660e\u6807\u8bc6\u7b26\u6240\u5728\u7684\u4f5c\u7528\u57df\u3002 go\u4f7f\u7528\u5757\u6765\u89c4\u5b9a\u8bcd\u6c47\u7684\u65b9\u4f4d\uff1a \u9884\u5b9a\u4e49\u7684\u6807\u8bc6\u7b26\u5177\u6709\u5168\u5c40\u4f5c\u7528\u57df\u3002 \u6240\u6709\u5b9a\u4e49\u7684\u9876\u7ea7\u6807\u8bc6\u7b26\u5177\u6709\u5305\u4f5c\u7528\u57df\u3002 import\u8fdb\u6765\u7684\u5305\u7684\u540d\u5b57\u6807\u8bc6\u7b26\u5177\u6709\u6587\u4ef6\u4f5c\u7528\u57df\u3002 \u65b9\u6cd5\u7684\u63a5\u6536\u8005\uff0c\u51fd\u6570\u53c2\u6570\uff0c\u8fd4\u56de\u503c\u53d8\u91cf\u5177\u6709\u51fd\u6570\u4f5c\u7528\u57df\u3002 \u51fd\u6570\u5185\u5b9a\u4e49\u7684\u53c2\u91cf\u548c\u53d8\u91cf\u6807\u8bc6\u7b26\u7684\u4f5c\u7528\u57df\u662f\u6807\u8bc6\u7b26\u88ab\u58f0\u660e\u5230\u5bb9\u7eb3\u4ed6\u7684\u5757\u7ed3\u675f\u3002 \u4e00\u4e2a\u4ee3\u7801\u5757\u4e2d\u58f0\u660e\u7684\u6807\u8bc6\u7b26\u53ef\u4ee5\u5728\u5b83\u5185\u90e8\u7684\u4ee3\u7801\u5757\u4e2d\u91cd\u65b0\u58f0\u660e\u3002\u5728\u5185\u90e8\u4ee3\u7801\u5757\u7684\u4f5c\u7528\u57df\u4e2d\u6807\u8bc6\u7b26\u8868\u793a\u5728\u5185\u90e8\u4ee3\u7801\u5757\u4e2d\u58f0\u660e\u7684\u5b9e\u4f53\u3002 pakcage \u8bed\u53e5\u4e0d\u5c5e\u4e8e\u58f0\u660e\u3002\u5305\u540d\u4e0d\u4f1a\u51fa\u73b0\u5728\u4efb\u4f55\u7684\u4f5c\u7528\u57df\u4e2d\u3002\u5b83\u7684\u4f5c\u7528\u53ea\u662f\u7528\u6765\u6807\u8bc6\u5c5e\u4e8e\u76f8\u540c\u5305\u7684\u591a\u4e2a\u6587\u4ef6\u5e76\u5728\u5bfc\u5165\u65f6\u6307\u5b9a\u9ed8\u8ba4\u5305\u540d\u3002","title":"\u58f0\u660e\u548c\u4f5c\u7528\u57df"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_36","text":"\u53ef\u4ee5\u4f7f\u7528\u6807\u7b7e\u8bed\u53e5\u6765\u58f0\u660e\u6807\u7b7e\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728 break \uff0c continue \uff0c goto \u8bed\u6cd5\u4e2d\u4f7f\u7528\u3002\u5982\u679c\u53ea\u58f0\u660e\u4f46\u6ca1\u6709\u4f7f\u7528\u6807\u7b7e\u65f6\u975e\u6cd5\u7684\u3002\u6807\u7b7e\u7684\u4f5c\u7528\u57df\u53ea\u6709\u5b9a\u4e49\u65f6\u7684\u51fd\u6570\u4f53\uff0c\u65e9\u9012\u5f52\u51fd\u6570\u4f53\u4e2d\u6ca1\u6709\u4f5c\u7528\u3002","title":"\u6807\u7b7e\u7684\u4f5c\u7528\u57df"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_37","text":"\u7a7a\u6807\u8bc6\u7b26\u4f7f\u7528\u4e0b\u5212\u7ebf _ \u4ee3\u8868\u3002\u4e0e\u4e00\u822c\u7684\u975e\u7a7a\u6807\u8bc6\u7b26\u4e0d\u540c\uff0c\u5b83\u4f5c\u4e3a\u533f\u540d\u6807\u8bc6\u7b26\u5728\u58f0\u660e\uff0c\u8fd0\u7b97\u5143\u548c\u8d4b\u503c\u8bed\u53e5\u4e2d\u90fd\u6709\u7279\u6b8a\u542b\u4e49\u3002","title":"\u7a7a\u6807\u8bc6\u7b26"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_38","text":"\u4ee5\u4e0b\u6807\u8bc6\u7b26\u5df2\u7ecf\u5728\u5168\u5c40\u4f5c\u7528\u57df\u4e2d\u9884\u5148\u58f0\u660e\uff1a Types: bool byte complex64 complex128 error float32 float64 int int8 int16 int32 int64 rune string uint uint8 uint16 uint32 uint64 uintptr Constants: true false iota Zero value: nil Functions: append cap close complex copy delete imag len make new panic print println real recover","title":"\u9884\u5b9a\u4e49\u7684\u6807\u8bc6\u7b26"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_39","text":"\u6807\u8bc6\u7b26\u53ef\u4ee5\u5bfc\u51fa\u4f9b\u5176\u4ed6\u5305\u4f7f\u7528\u3002\u5728\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\u540c\u65f6\u6ee1\u8db3\u65f6\u6807\u8bc6\u7b26\u662f\u5bfc\u51fa\u7684\uff1a \u6807\u8bc6\u7b26\u7684\u9996\u5b57\u6bcd\u662f\u5927\u5199\uff08Unicode \u7684 Lu \u7c7b\uff09 \u6807\u8bc6\u7b26\u58f0\u660e\u5728\u5305\u4f5c\u7528\u57df\u6216\u8005\u5b83\u662f\u5b57\u6bb5\u540d/\u65b9\u6cd5\u540d\u3002 \u5176\u4ed6\u4efb\u4f55\u6807\u8bc6\u7b26\u90fd\u4e0d\u662f\u5bfc\u51fa\u7684\u3002","title":"\u5bfc\u51fa\u6807\u8bc6\u7b26"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_40","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6807\u8bc6\u7b26\u96c6\u5408\uff0c\u4e00\u4e2a\u6807\u8bc6\u7b26\u4e0e\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u6807\u8bc6\u7b26\u90fd\u4e0d\u76f8\u540c\uff0c\u90a3\u5c31\u8ba4\u4e3a\u8fd9\u4e2a\u6807\u8bc6\u7b26\u662f\u552f\u4e00\u7684\u3002\u5047\u8bbe\u6709\u4e24\u4e2a\u6807\u8bc6\u7b26\uff0c\u5982\u679c\u5b83\u4eec\u7684\u62fc\u5199\u4e0d\u540c\uff0c\u6216\u8005\u5b83\u4eec\u5728\u4e0d\u540c\u7684\u5305\u4e2d\u5e76\u6ca1\u6709\u5bfc\u51fa\uff0c\u90a3\u5b83\u4eec\u5c31\u662f\u4e0d\u540c\u6807\u8bc6\u7b26\u3002\u76f8\u53cd\uff0c\u5176\u4ed6\u60c5\u51b5\u4e0b\u90fd\u8ba4\u4e3a\u6807\u8bc6\u7b26\u662f\u76f8\u540c\u7684\u3002","title":"\u6807\u8bc6\u7b26\u7684\u552f\u4e00\u6027"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_41","text":"\u5e38\u91cf\u58f0\u660e\u4f7f\u7528\u5e38\u91cf\u8868\u8fbe\u5f0f\u7ed1\u5b9a\u4e00\u7cfb\u5217\u6807\u8bc6\u7b26\u3002\u6807\u8bc6\u7b26\u7684\u6570\u91cf\u5fc5\u987b\u7b49\u4e8e\u8868\u8fbe\u5f0f\u7684\u6570\u91cf\u3002\u5de6\u4fa7\u7b2c n \u4e2a\u6807\u8bc6\u7b26\u7ed1\u5b9a\u53f3\u4fa7\u7b2c n \u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u3002 ConstDecl = \"const\" ( ConstSpec | \"(\" { ConstSpec \";\" } \")\" ) . ConstSpec = IdentifierList [ [ Type ] \"=\" ExpressionList ] . IdentifierList = identifier { \",\" identifier } . ExpressionList = Expression { \",\" Expression } . \u5982\u679c\u7ed9\u5b9a\u7c7b\u578b\uff0c\u5e38\u91cf\u4f1a\u6307\u5b9a\u7c7b\u578b\uff0c\u5e76\u4e14\u8868\u8fbe\u5f0f\u7684\u503c\u5fc5\u987b\u80fd\u5bf9\u8fd9\u4e2a\u7c7b\u578b\u8fdb\u884c\u8d4b\u503c\u3002 \u5982\u679c\u6ca1\u6709\u7ed9\u5b9a\u7c7b\u578b\u3002\u5e38\u91cf\u4f1a\u8f6c\u6362\u6210\u76f8\u5e94\u7684\u8868\u8fbe\u5f0f\u7c7b\u578b\u3002\u5982\u679c\u8868\u8fbe\u5f0f\u7684\u503c\u662f\u65e0\u7c7b\u578b\u5e38\u91cf\uff0c\u90a3\u4e48\u58f0\u660e\u7684\u5e38\u91cf\u4e5f\u662f\u65e0\u7c7b\u578b\u7684\uff0c\u5e76\u4e14\u5e38\u91cf\u7684\u6807\u8bc6\u7b26\u4ee3\u8868\u5e38\u91cf\u7684\u503c\u3002\u4f8b\u5982\uff1a\u5373\u4f7f\u5c0f\u6570\u90e8\u5206\u662f 0\uff0c\u53ea\u8981\u8868\u8fbe\u5f0f\u662f\u6d6e\u70b9\u6570\u5b57\u9762\u503c\uff0c\u5e38\u91cf\u6807\u8bc6\u7b26\u4e5f\u8868\u793a\u4e3a\u6d6e\u70b9\u6570\u5e38\u91cf\u3002 const Pi float64 = 3.14159265358979323846 const zero = 0.0 // \u65e0\u7c7b\u578b\u6d6e\u70b9\u6570\u5e38\u91cf const ( size int64 = 1024 eof = -1 // \u65e0\u7c7b\u578b\u6574\u578b\u5e38\u91cf ) const a, b, c = 3, 4, \"foo\" // a = 3, b = 4, c = \"foo\", \u65e0\u7c7b\u578b\u6574\u578b\u548c\u5b57\u7b26\u4e32\u5e38\u91cf const u, v float32 = 0, 3 // u = 0.0, v = 3.0 \u62ec\u53f7\u5185\u7684\u5e38\u91cf\u58f0\u660e\u5217\u8868\u7684\u8868\u8fbe\u5f0f\u9664\u4e86\u7b2c\u4e00\u4e2a\u5fc5\u987b\u58f0\u660e\u5176\u4ed6\u8868\u8fbe\u5f0f\u53ef\u4ee5\u4e0d\u5199\u3002\u7a7a\u7684\u8868\u8fbe\u5f0f\u5217\u8868\u7684\u503c\u548c\u7c7b\u578b\u90fd\u548c\u524d\u9762\u7684\u975e\u7a7a\u8868\u8fbe\u5f0f\u76f8\u540c\u3002\u7f3a\u7701\u7684\u8868\u8fbe\u5f0f\u5217\u8868\u7b49\u4ef7\u4e8e\u91cd\u590d\u4e4b\u524d\u7684\u8868\u8fbe\u5f0f\u3002\u6807\u8bc6\u7b26\u7684\u6570\u91cf\u5fc5\u987b\u7b49\u4e8e\u8868\u8fbe\u5f0f\u7684\u6570\u91cf\u3002 iota \u5e38\u91cf\u751f\u6210\u5668\u662f\u4e00\u4e2a\u53ef\u4ee5\u5feb\u901f\u751f\u6210\u5e8f\u5217\u503c\u7684\u673a\u5236\u3002 const ( Sunday = iota Monday Tuesday Wednesday Thursday Friday Partyday numberOfDays // \u975e\u5bfc\u51fa\u5e38\u91cf )","title":"\u5e38\u91cf\u58f0\u660e"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#iota","text":"\u5728\u5e38\u91cf\u58f0\u660e\u4e2d\uff0c\u9884\u5b9a\u4e49\u7684\u6807\u8bc6\u7b26 iota \u8868\u793a\u8fde\u7eed\u7684\u65e0\u7c7b\u578b\u6574\u578b\u5e38\u91cf\u3002\u5b83\u7684\u503c\u4e3a\u5e38\u91cf\u58f0\u660e\u4e2d\u6bcf\u4e2a\u5e38\u91cf\u5b9a\u4e49\u7684\u4f4d\u7f6e\uff08\u4ece\u96f6\u5f00\u59cb\uff09\u3002\u5b83\u80fd\u591f\u7528\u6765\u751f\u6210\u4e00\u4e2a\u5173\u8054\u5e38\u91cf\u96c6\u5408\uff1a const ( // iota is reset to 0 c0 = iota // c0 == 0 c1 = iota // c1 == 1 c2 = iota // c2 == 2 ) const ( // iota is reset to 0 a = 1 << iota // a == 1 b = 1 << iota // b == 2 c = 3 // c == 3 (\u6ca1\u6709\u4f7f\u7528 iota \u4e0d\u8fc7\u5b83\u7684\u503c\u4f9d\u7136\u9012\u589e) d = 1 << iota // d == 8 ) const ( // iota is reset to 0 u = iota * 42 // u == 0 (\u65e0\u7c7b\u578b\u6574\u578b\u5e38\u91cf) v float64 = iota * 42 // v == 42.0 (float64 \u7c7b\u578b\u5e38\u91cf) w = iota * 42 // w == 84 (\u65e0\u7c7b\u578b\u6574\u578b\u5e38\u91cf) ) const x = iota // x == 0 (iota \u88ab\u91cd\u7f6e) const y = iota // y == 0 (iota \u88ab\u91cd\u7f6e) \u6839\u636e\u5b9a\u4e49\uff0c\u5728\u540c\u4e00\u4e2a\u5e38\u91cf\u5b9a\u4e49\u4e2d\u591a\u6b21\u4f7f\u7528 iota \u4f1a\u5f97\u5230\u76f8\u540c\u7684\u503c\uff1a const ( bit0, mask0 = 1 << iota, 1<<iota - 1 // bit0 == 1, mask0 == 0 (iota == 0) bit1, mask1 // bit1 == 2, mask1 == 1 (iota == 1) _, _ // (iota == 2, unused) bit3, mask3 // bit3 == 8, mask3 == 7 (iota == 3) ) \u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\u5229\u7528\u4e86\u6700\u540e\u4e00\u4e2a\u975e\u7a7a\u8868\u8fbe\u5f0f\u5217\u8868\u7684\u9690\u5f0f\u91cd\u590d\u3002","title":"Iota"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_42","text":"\u7c7b\u578b\u58f0\u660e\u4e3a\u7c7b\u578b\u7ed1\u5b9a\u4e00\u4e2a\u6807\u8bc6\u7b26\u3002\u7c7b\u578b\u58f0\u660e\u67092\u79cd\u65b9\u5f0f\uff1a\u7c7b\u578b\u58f0\u660e\u548c\u522b\u540d\u58f0\u660e\u3002 TypeDecl = \"type\" ( TypeSpec | \"(\" { TypeSpec \";\" } \")\" ) . TypeSpec = AliasDecl | TypeDef .","title":"\u7c7b\u578b\u58f0\u660e"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#alias","text":"\u522b\u540d\u58f0\u660e\u7ed9\u6307\u5b9a\u7c7b\u578b\u7ed1\u5b9a\u4e00\u4e2a\u6807\u8bc6\u7b26\u540d\u79f0\u3002 AliasDecl = identifier \"=\" Type . \u5728\u6807\u8bc6\u7b26\u4f5c\u7528\u57df\u5185\uff0c\u5b83\u4f5c\u4e3a\u7c7b\u578b\u7684\u522b\u540d\u3002 type ( nodeList = []*Node // nodeList \u548c []*Node \u662f\u76f8\u540c\u7c7b\u578b Polar = polar // Polar \u548c polar \u8868\u793a\u76f8\u540c\u7c7b\u578b )","title":"Alias\u58f0\u660e"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#type","text":"\u7c7b\u578b\u5b9a\u4e49\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7c7b\u578b\u5e76\u7ed1\u5b9a\u4e00\u4e2a\u6807\u8bc6\u7b26\uff0c\u65b0\u7c7b\u578b\u4e0e\u7ed9\u5b9a\u7c7b\u578b\u5177\u6709\u76f8\u540c\u7684\u5e95\u5c42\u7c7b\u578b\u548c\u64cd\u4f5c\u3002 TypeDef = identifier Type . \u8fd9\u4e2a\u7c7b\u578b\u53eb\u505a\u5b9a\u4e49\u7c7b\u578b\uff0c\u5b83\u548c\u5176\u4ed6\u6240\u6709\u7c7b\u578b\u90fd\u4e0d\u76f8\u540c\uff0c\u5305\u62ec\u521b\u5efa\u5b83\u7684\u7c7b\u578b\u3002 type ( Point struct{ x, y float64 } // Point \u548c struct{ x, y float64 } \u662f\u4e0d\u540c\u7c7b\u578b polar Point // polar \u548c Point \u8868\u793a\u4e0d\u540c\u7c7b\u578b ) type TreeNode struct { left, right *TreeNode value *Comparable } type Block interface { BlockSize() int Encrypt(src, dst []byte) Decrypt(src, dst []byte) } \u5b9a\u4e49\u7c7b\u578b\u53ef\u4ee5\u5173\u8054\u8be5\u7c7b\u578b\u7684\u65b9\u6cd5\u3002\u5b83\u4e0d\u4f1a\u7ee7\u627f\u539f\u6765\u7c7b\u578b\u7684\u4efb\u4f55\u65b9\u6cd5\u3002\u4f46\u662f\u63a5\u53e3\u7c7b\u578b\u7684\u65b9\u6cd5\u96c6\u548c\u7c7b\u578b\u7684\u7ed3\u6784\u6ca1\u6709\u6539\u53d8\u3002 // Mutex \u662f\u4e00\u4e2a\u62e5\u6709 Lock \u548c Unlock \u4e24\u4e2a\u65b9\u6cd5\u7684\u6570\u636e\u7c7b\u578b\u3002 type Mutex struct { /* Mutex fields */ } func (m *Mutex) Lock() { /* Lock implementation */ } func (m *Mutex) Unlock() { /* Unlock implementation */ } // NewMutex \u4e0e Mutex \u7ed3\u6784\u76f8\u540c\u4e0d\u8fc7\u65b9\u6cd5\u96c6\u4e3a\u7a7a\u3002 type NewMutex Mutex // PtrMutex \u7684\u5e95\u5c42\u7c7b\u578b *Mutex \u7684\u65b9\u6cd5\u96c6\u6ca1\u6709\u6539\u53d8\uff0c // \u4f46\u662f PtrMutex \u7684\u65b9\u6cd5\u96c6\u4e3a\u7a7a\u3002 type PtrMutex *Mutex // *PrintableMutex \u5305\u542b\u5d4c\u5165\u5b57\u6bb5 Mutex \u7684 Lock \u548c Unlock \u65b9\u6cd5\u3002 type PrintableMutex struct { Mutex } // MyBlock \u662f\u4e0e Block \u6709\u76f8\u540c\u65b9\u6cd5\u96c6\u7684\u63a5\u53e3\u7c7b\u578b type MyBlock Block \u7c7b\u578b\u5b9a\u4e49\u53ef\u4ee5\u5b9a\u4e49\u65b9\u6cd5\u96c6\u4e0d\u540c\u7684\u5e03\u5c14\u503c\u3001\u6570\u5b57\u548c\u5b57\u7b26\u4e32\u7c7b\u578b\uff1a type TimeZone int const ( EST TimeZone = -(5 + iota) CST MST PST ) func (tz TimeZone) String() string { return fmt.Sprintf(\"GMT%+dh\", tz) }","title":"Type \u5b9a\u4e49"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_43","text":"\u53d8\u91cf\u58f0\u660e\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\uff0c\u5e76\u7ed1\u5b9a\u5bf9\u5e94\u7684\u6807\u8bc6\u7b26\u3001\u6307\u5b9a\u7c7b\u578b\u548c\u521d\u59cb\u503c\u3002 VarDecl = \"var\" ( VarSpec | \"(\" { VarSpec \";\" } \")\" ) . VarSpec = IdentifierList ( Type [ \"=\" ExpressionList ] | \"=\" ExpressionList ) . var i int var U, V, W float64 var k = 0 var x, y float32 = -1, -2 var ( i int u, v, s = 2.0, 3.0, \"bar\" ) var re, im = complexSqrt(-1) var _, found = entries[name] // map lookup; only interested in \"found\" \u5982\u679c\u7ed9\u5b9a\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5217\u8868\u3002\u53d8\u91cf\u4f1a\u6839\u636e\u8d4b\u503c\u89c4\u5219\u4f7f\u7528\u8868\u8fbe\u5f0f\u8fdb\u884c\u521d\u59cb\u5316\u3002\u5426\u5219\uff0c\u6bcf\u4e2a\u53d8\u91cf\u90fd\u4f1a\u521d\u59cb\u5316\u6210\u53d8\u91cf\u7c7b\u578b\u7684\u96f6\u503c\u3002 \u5982\u679c\u6307\u5b9a\u7c7b\u578b\uff0c\u53d8\u91cf\u4f1a\u4e3a\u6307\u5b9a\u7c7b\u578b\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7c7b\u578b\uff0c\u53d8\u91cf\u4f1a\u4f7f\u7528\u5206\u914d\u7684\u521d\u59cb\u503c\u7c7b\u578b\u3002\u5982\u679c\u521d\u59cb\u503c\u4e3a\u65e0\u7c7b\u578b\u5e38\u91cf\uff0c\u5b83\u4f1a\u8f6c\u6362\u6210\u521d\u59cb\u503c\u7684\u9ed8\u8ba4\u7c7b\u578b\u3002\u5982\u679c\u662f\u4e00\u4e2a\u65e0\u7c7b\u578b\u5e03\u5c14\u503c\uff0c\u90a3\u4e48\u53d8\u91cf\u7684\u7c7b\u578b\u5c31\u662f bool \u3002\u503c nil \u4e0d\u80fd\u7ed9\u6ca1\u6709\u6307\u5b9a\u7c7b\u578b\u7684\u53d8\u91cf\u8d4b\u503c\u3002 var d = math.Sin(0.5) // d is float64 var i = 42 // i is int var t, ok = x.(T) // t is T, ok is bool var n = nil // illegal \u5b9e\u73b0\u7684\u9650\u5236\uff1a\u5728\u51fd\u6570\u4f53\u5185\u58f0\u660e\u7684\u53d8\u91cf\u5982\u679c\u6ca1\u6709\u4f7f\u7528\u8fc7\u7f16\u8bd1\u5668\u9700\u8981\u62a5\u9519\u3002","title":"\u53d8\u91cf\u58f0\u660e"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_44","text":"\u77ed\u53d8\u91cf\u58f0\u660e\u7684\u8bed\u6cd5: ShortVarDecl = IdentifierList \":=\" ExpressionList . \u5b83\u6bd4\u6b63\u5e38\u4f7f\u7528\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u8fdb\u884c\u53d8\u91cf\u58f0\u660e\u7684\u65b9\u5f0f\u8981\u77ed\uff0c\u800c\u4e14\u4e0d\u6307\u5b9a\u7c7b\u578b\uff1a \"var\" IdentifierList = ExpressionList . i, j := 0, 10 f := func() int { return 7 } ch := make(chan int) r, w := os.Pipe(fd) // os.Pipe() \u8fd4\u56de\u4e24\u4e2a\u503c _, y, _ := coord(p) // coord() \u8fd4\u56de\u4e09\u4e2a\u503c\uff0c\u6211\u4eec\u53ea\u5173\u6ce8 y \u548c\u5e38\u89c4\u53d8\u91cf\u58f0\u660e\u4e0d\u540c\uff0c\u5373\u4f7f\u4e4b\u524d\u5728\u76f8\u540c\u4ee3\u7801\u5757\u4e2d\u58f0\u660e\u8fc7\u7684\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u5728\u77ed\u53d8\u91cf\u91cd\u65b0\u58f0\u660e\u76f8\u540c\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u5e76\u4e14\u4fdd\u8bc1\u81f3\u5c11\u4f1a\u6709\u4e00\u4e2a\u65b0\u7684\u975e\u7a7a\u53d8\u91cf\u3002\u603b\u4e4b\uff0c\u53ea\u5e94\u8be5\u5728\u591a\u53d8\u91cf\u77ed\u58f0\u660e\u7684\u65f6\u5019\u91cd\u65b0\u58f0\u660e\u53d8\u91cf\uff0c\u91cd\u65b0\u58f0\u660e\u5e76\u4e0d\u4f1a\u4f7f\u7528\u65b0\u7684\u53d8\u91cf\uff0c\u800c\u662f\u7ed9\u53d8\u91cf\u5206\u914d\u65b0\u503c\u3002 field1, offset := nextField(str, 0) field2, offset := nextField(str, offset) // \u91cd\u65b0\u58f0\u660e offset a, a := 1, 2 // \u975e\u6cd5\uff1a\u58f0\u660e\u4e86 a \u4e24\u6b21\u5e76\u4e14\u6ca1\u6709\u65b0\u7684\u53d8\u91cf \u77ed\u53d8\u91cf\u58f0\u660e\u53ea\u80fd\u5728\u51fd\u6570\u4e2d\u4f7f\u7528\uff0c\u4f8b\u5982\u5728 if \u3001 for \u3001 switch \u8bed\u53e5\u7684\u4e0a\u4e0b\u6587\u4e2d\u58f0\u660e\u4e34\u65f6\u53d8\u91cf\u3002","title":"\u77ed\u53d8\u91cf\u58f0\u660e"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_45","text":"\u51fd\u6570\u58f0\u660e\u4e3a\u51fd\u6570\u7ed1\u5b9a\u6807\u8bc6\u7b26\u3002 FunctionDecl = \"func\" FunctionName Signature [ FunctionBody ] . FunctionName = identifier . FunctionBody = Block . \u5982\u679c\u51fd\u6570\u6307\u5b9a\u4e86\u8fd4\u56de\u53c2\u6570\u3002\u51fd\u6570\u4f53\u7684\u8bed\u53e5\u5fc5\u987b\u4ee5\u7ec8\u6b62\u8bed\u53e5\u7ed3\u675f\u3002 func IndexRune(s string, r rune) int { for i, c := range s { if c == r { return i } } // \u65e0\u6548\uff1a\u7f3a\u5c11 return \u8bed\u53e5 } \u51fd\u6570\u58f0\u660e\u53ef\u4ee5\u6ca1\u6709\u51fd\u6570\u4f53\u3002\u8fd9\u6837\u7684\u58f0\u660e\u63d0\u4f9b\u4e00\u4e2a\u51fd\u6570\u58f0\u660e\uff0c\u5e76\u7531\u5176\u4ed6\u5916\u90e8\u5b9e\u73b0\uff0c\u4f8b\u5982\u6c47\u7f16\u811a\u672c\u3002 func min(x int, y int) int { if x < y { return x } return y } func flushICache(begin, end uintptr) // \u7531\u5916\u90e8\u5b9e\u73b0","title":"\u51fd\u6570\u58f0\u660e"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_46","text":"\u65b9\u6cd5\u662f\u4e00\u4e2a\u5e26\u63a5\u6536\u8005\u7684\u51fd\u6570\uff0c\u65b9\u6cd5\u58f0\u660e\u4e3a\u65b9\u6cd5\u7ed1\u5b9a\u6807\u8bc6\u7b26\u4f5c\u4e3a\u65b9\u6cd5\u540d\u5e76\u6307\u5b9a\u65b9\u6cd5\u5bf9\u5e94\u7684\u63a5\u6536\u8005\u7c7b\u578b\u3002 MethodDecl = \"func\" Receiver MethodName Signature [ FunctionBody ] . Receiver = Parameters . \u63a5\u6536\u8005\u901a\u8fc7\u5728\u65b9\u6cd5\u589e\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\u6765\u6307\u5b9a\u3002\u8fd9\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u975e\u53ef\u53d8\u53c2\u6570\u3002\u5b83\u7684\u7c7b\u578b\u5fc5\u987b\u662f T \u6216\u8005 T \u7684\u6307\u9488\uff08\u53ef\u80fd\u5305\u542b\u62ec\u53f7\uff09\u3002T \u88ab\u79f0\u4f5c\u63a5\u6536\u8005\u7684\u57fa\u7840\u7c7b\u578b\uff1b\u5b83\u4e0d\u80fd\u662f\u6307\u9488\u6216\u63a5\u53e3\u7c7b\u578b\uff0c\u5e76\u4e14\u53ea\u80fd\u5728\u540c\u4e00\u4e2a\u5305\u4e2d\u5b9a\u4e49\u65b9\u6cd5\u3002\u58f0\u660e\u540e\uff0c\u6211\u4eec\u8ba4\u4e3a\u65b9\u6cd5\u7ed1\u5b9a\u4e86\u57fa\u7840\u7c7b\u578b\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 T \u6216 *T \u9009\u62e9\u5668\u8bbf\u95ee\u65b9\u6cd5\u540d\u3002 \u975e\u7a7a\u7684\u63a5\u6536\u8005\u6807\u8bc6\u7b26\u5728\u65b9\u6cd5\u7b7e\u540d\u4e2d\u5fc5\u987b\u662f\u552f\u4e00\u7684\u3002\u5982\u679c\u63a5\u6536\u8005\u7684\u503c\u6ca1\u6709\u5728\u8be5\u65b9\u6cd5\u4e2d\u4f7f\u7528\uff0c\u90a3\u4e48\u63a5\u6536\u8005\u6807\u8bc6\u7b26\u53ef\u4ee5\u7701\u7565\u3002\u51fd\u6570\u548c\u65b9\u6cd5\u7684\u53c2\u6570\u4e5f\u662f\u4e00\u6837\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u57fa\u7840\u7c7b\u578b\u3002\u7ed1\u5b9a\u7684\u975e\u7a7a\u7684\u65b9\u6cd5\u540d\u5fc5\u987b\u662f\u552f\u4e00\u7684\u3002\u5982\u679c\u57fa\u7840\u7c7b\u578b\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u975e\u7a7a\u7684\u65b9\u6cd5\u540d\u4e5f\u4e0d\u80fd\u4e0e\u7ed3\u6784\u4f53\u5b57\u6bb5\u91cd\u590d\u3002 \u7ed9\u5b9a\u4e00\u4e2a Point \u7c7b\u578b\u3002\u58f0\u660e\uff1a func (p *Point) Length() float64 { return math.Sqrt(p.x * p.x + p.y * p.y) } func (p *Point) Scale(factor float64) { p.x *= factor p.y *= factor } \u4e3a\u7c7b\u578b *Point \u7ed1\u5b9a\u4e862\u4e2a\u65b9\u6cd5 Length \u548c Scale \u3002 \u65b9\u6cd5\u7684\u7c7b\u578b\u5c31\u662f\u4ee5\u63a5\u6536\u8005\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u51fd\u6570\u7c7b\u578b\uff0c\u4f8b\u5982 Scale \u65b9\u6cd5\uff1a func(p *Point, factor float64) \u4f46\u662f\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u58f0\u660e\u7684\u51fd\u6570\u5e76\u4e0d\u662f\u65b9\u6cd5\u3002","title":"\u65b9\u6cd5\u58f0\u660e"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_47","text":"\u8868\u8fbe\u5f0f\u901a\u8fc7\u9488\u5bf9\u8fd0\u7b97\u5143\u4f7f\u7528\u8fd0\u7b97\u7b26\u548c\u51fd\u6570\u6765\u83b7\u53d6\u8ba1\u7b97\u503c\u3002","title":"\u8868\u8fbe\u5f0f"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_48","text":"\u8fd0\u7b97\u5143\u4ee3\u8868\u8868\u8fbe\u5f0f\u4e2d\u7684\u4e00\u4e2a\u7b80\u5355\u7684\u3002\u8fd0\u7b97\u5143\u53ef\u4ee5\u662f\u5b57\u9762\u503c\uff0c\u975e\u7a7a\u6807\u8bc6\u7b26\u3002\u6216\u62ec\u53f7\u8868\u8fbe\u5f0f\u3002 \u7a7a\u6807\u8bc6\u7b26\u53ea\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u58f0\u660e\u7684\u5de6\u4fa7\u3002 Operand = Literal | OperandName | MethodExpr | \"(\" Expression \")\" . Literal = BasicLit | CompositeLit | FunctionLit . BasicLit = int_lit | float_lit | imaginary_lit | rune_lit | string_lit . OperandName = identifier | QualifiedIdent.","title":"\u8fd0\u7b97\u5143"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_49","text":"\u4fee\u9970\u6807\u8bc6\u7b26\u662f\u4ee5\u5305\u540d\u4f5c\u4e3a\u524d\u7f00\u4fee\u9970\u7684\u6807\u8bc6\u7b26\u3002\u5305\u540d\u548c\u6807\u8bc6\u7b26\u90fd\u4e0d\u80fd\u4e3a\u7a7a\u3002 QualifiedIdent = PackageName \".\" identifier . \u4fee\u9970\u6807\u8bc6\u7b26\u53ef\u4ee5\u7528\u6765\u8bbf\u95ee\u4e0d\u540c\u5305\uff08\u9700\u8981\u5148\u5bfc\u5165\uff09\u4e2d\u7684\u6807\u8bc6\u7b26\u3002\u6807\u8bc6\u7b26\u5fc5\u987b\u662f\u5bfc\u51fa\u7684\u5e76\u5728\u5305\u7ea7\u4ee3\u7801\u5757\u58f0\u660e\u624d\u80fd\u591f\u88ab\u8bbf\u95ee\u3002 math.Sin // \u8868\u793a math \u5305\u4e2d\u7684 Sin \u51fd\u6570","title":"\u4fee\u9970\u6807\u8bc6\u7b26"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_50","text":"\u590d\u5408\u5b57\u9762\u503c\u80fd\u4e3a\u7ed3\u6784\u4f53\u3001\u6570\u7ec4\u3001\u5207\u7247\u548c map \u521d\u59cb\u5316\u503c\u3002\u5b83\u6bcf\u6b21\u53ea\u80fd\u521b\u5efa\u4e00\u4e2a\u503c\u3002\u5b57\u9762\u503c\u7531\u4e00\u4e2a\u5b57\u9762\u503c\u7c7b\u578b\u548c\u4f7f\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u5143\u7d20\u5217\u8868\u7ec4\u6210\u3002\u5143\u7d20\u524d\u4e5f\u53ef\u4ee5\u58f0\u660e\u5143\u7d20\u5bf9\u5e94\u7684\u952e\u3002 CompositeLit = LiteralType LiteralValue . LiteralType = StructType | ArrayType | \"[\" \"...\" \"]\" ElementType | SliceType | MapType | TypeName . LiteralValue = \"{\" [ ElementList [ \",\" ] ] \"}\" . ElementList = KeyedElement { \",\" KeyedElement } . KeyedElement = [ Key \":\" ] Element . Key = FieldName | Expression | LiteralValue . FieldName = identifier . Element = Expression | LiteralValue . \u5b57\u9762\u503c\u7c7b\u578b\u7684\u5e95\u5c42\u7c7b\u578b\u5fc5\u987b\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u6570\u7ec4\uff0c\u5207\u7247\u6216 map \u7c7b\u578b\uff08\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7c7b\u578b\u540d\u5c31\u4f1a\u5f3a\u5236\u6267\u884c\u8fd9\u4e2a\u7ea6\u675f\uff09\u3002\u5143\u7d20\u7684\u7c7b\u578b\u548c\u952e\u90fd\u5fc5\u987b\u80fd\u591f\u5206\u914d\u7ed9\u76f8\u5e94\u7684\u5b57\u6bb5\u7684\u5143\u7d20\u548c\u952e\u7c7b\u578b\uff1b\u6ca1\u6709\u989d\u5916\u7684\u7c7b\u578b\u8f6c\u6362\u3002\u952e\u53ef\u4ee5\u8868\u793a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u540d\uff0c\u5207\u7247\u548c\u6570\u7ec4\u7684\u7d22\u5f15\uff0cmap \u7c7b\u578b\u7684\u952e\u3002\u5bf9\u4e8e map \u5b57\u9762\u503c\uff0c\u6240\u6709\u7684\u5143\u7d20\u90fd\u5fc5\u987b\u6709\u952e\u3002\u5982\u679c\u76f8\u540c\u5b57\u6bb5\u540d\u6216\u5e38\u91cf\u503c\u7684\u952e\u5bf9\u5e94\u591a\u4e2a\u5143\u7d20\u5c31\u4f1a\u62a5\u9519\u3002\u5982\u679c map \u7c7b\u578b\u7684\u952e\u4e3a\u975e\u5e38\u91cf\u7c7b\u578b\uff0c\u8bf7\u770b\u6c42\u503c\u987a\u5e8f\u7ae0\u8282\u3002 \u7ed3\u6784\u4f53\u5b57\u9762\u503c\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a \u5728\u7ed3\u6784\u4f53\u4e2d\uff0c\u952e\u5fc5\u987b\u662f\u5b83\u7684\u5b57\u6bb5\u540d\u3002 \u4e0d\u5305\u542b\u4efb\u4f55\u952e\u7684\u5143\u7d20\u5217\u8868\u7684\u987a\u5e8f\u9700\u8981\u4e0e\u7ed3\u6784\u4f53\u5b57\u6bb5\u7684\u58f0\u660e\u987a\u5e8f\u76f8\u540c\u3002 \u5982\u679c\u4e00\u4e2a\u5143\u7d20\u6307\u5b9a\u4e86\u952e\uff0c\u90a3\u4e48\u6240\u6709\u7684\u5143\u7d20\u90fd\u5fc5\u987b\u6307\u5b9a\u952e\u3002 \u5305\u542b\u952e\u7684\u5143\u7d20\u5217\u8868\u4e0d\u9700\u8981\u6307\u5b9a\u7ed3\u6784\u4f53\u7684\u6bcf\u4e2a\u5b57\u5b57\u6bb5\uff0c\u7f3a\u7701\u5b57\u6bb5\u4f1a\u4f7f\u7528\u5b57\u6bb5\u7c7b\u578b\u7684\u96f6\u503c\u3002 \u5b57\u9762\u503c\u53ef\u4ee5\u4e0d\u6307\u5b9a\u5143\u7d20\uff1b\u8fd9\u6837\u7684\u5b57\u9762\u503c\u7b49\u4e8e\u8be5\u7c7b\u578b\u7684\u96f6\u503c\u3002 \u6307\u5b9a\u975e\u672c\u5305\u7684\u975e\u5bfc\u51fa\u5b57\u6bb5\u4f1a\u62a5\u9519\u3002 \u7ed9\u5b9a\u58f0\u660e\uff1a type Point3D struct { x, y, z float64 } type Line struct { p, q Point3D } \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u5199\u6cd5\uff1a origin := Point3D{} // Point3D \u7684\u96f6\u503c line := Line{origin, Point3D{y: -4, z: 12.3}} // line.q.x \u7684\u96f6\u503c \u6570\u7ec4\u548c\u5207\u7247\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a \u6bcf\u4e2a\u5143\u7d20\u90fd\u5173\u8054\u4e00\u4e2a\u6570\u5b57\u7d22\u5f15\u6807\u8bb0\u5143\u7d20\u518d\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u3002 \u7ed9\u5143\u7d20\u6307\u5b9a\u7684\u952e\u4f1a\u4f5c\u4e3a\u5b83\u7684\u7d22\u5f15\u3002\u952e\u5fc5\u987b\u662f\u80fd\u591f\u8868\u793a\u975e\u8d1f\u7684 int \u7c7b\u578b\u503c\u7684\u5e38\u91cf\uff1b\u5982\u679c\u662f\u6307\u5b9a\u7c7b\u578b\u7684\u5e38\u91cf\uff0c\u90a3\u4e48\u5e38\u91cf\u5fc5\u987b\u662f\u6574\u578b\u3002 \u5143\u7d20\u6ca1\u6709\u6307\u5b9a\u952e\u65f6\u4f1a\u4f7f\u7528\u4e4b\u524d\u7684\u7d22\u5f15\u52a0\u4e00\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u5143\u7d20\u6ca1\u6709\u6307\u5b9a\u952e\uff0c\u5b83\u7684\u7d22\u5f15\u4e3a\u96f6\u3002 \u5bf9\u590d\u5408\u5b57\u9762\u503c\u53d6\u5740\u4f1a\u751f\u6210\u6307\u5411\u7531\u5b57\u9762\u91cf\u521d\u59cb\u5316\u7684\u53d8\u91cf\u7684\u6307\u9488\u3002 var pointer *Point3D = &Point3D{y: 1000} \u6570\u7ec4\u5b57\u9762\u503c\u9700\u8981\u5728\u7c7b\u578b\u4e2d\u6307\u5b9a\u6570\u7ec4\u7684\u957f\u5ea6\u3002\u5982\u679c\u63d0\u4f9b\u7684\u5143\u7d20\u5c11\u4e8e\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u7f3a\u5c11\u5143\u7d20\u7684\u4f4d\u7f6e\u5c06\u4f1a\u4f7f\u7528\u5143\u7d20\u7c7b\u578b\u7684\u96f6\u503c\u66ff\u4ee3\u3002\u5982\u679c\u7d22\u5f15\u8d85\u8fc7\u6570\u7ec4\u7684\u957f\u5ea6\u4f1a\u62a5\u9519\u3002 \u2026 \u8868\u793a\u6570\u7ec4\u7684\u957f\u5ea6\u7b49\u4e8e\u6700\u5927\u5143\u7d20\u7d22\u5f15\u52a0\u4e00\u3002 buffer := [10]string{} // len(buffer) == 10 intSet := [6]int{1, 2, 3, 5} // len(intSet) == 6 days := [...]string{\"Sat\", \"Sun\"} // len(days) == 2 \u5207\u7247\u5b57\u9762\u503c\u5e95\u5c42\u5176\u5b9e\u5c31\u662f\u6570\u7ec4\u5b57\u9762\u503c\u3002\u56e0\u6b64\u5b83\u7684\u957f\u5ea6\u548c\u5bb9\u91cf\u90fd\u662f\u5143\u7d20\u7684\u6700\u5927\u7d22\u5f15\u52a0\u4e00\u3002\u5207\u7247\u5b57\u9762\u503c\u7684\u683c\u5f0f\u4e3a\uff1a []T{x1, x2, \u2026 xn} \u53ef\u4ee5\u5728\u6570\u7ec4\u4e0a\u8fdb\u884c\u5207\u7247\u64cd\u4f5c\u4ece\u800c\u83b7\u5f97\u5207\u7247\uff1a tmp := [n]T{x1, x2, \u2026 xn} tmp[0 : n] \u5728\u4e00\u4e2a\u6570\u7ec4\u3001\u5207\u7247\u6216 map \u7c7b\u578b T \u4e2d\u3002\u5143\u7d20\u6216\u8005 map \u7684\u952e\u53ef\u80fd\u6709\u81ea\u5df1\u7684\u5b57\u9762\u503c\u7c7b\u578b\uff0c\u5982\u679c\u5b57\u9762\u503c\u7c7b\u578b\u548c\u5143\u7d20\u6216\u8005\u952e\u7c7b\u578b\u76f8\u540c\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u7c7b\u578b\u6807\u8bc6\u7b26\u53ef\u4ee5\u7701\u7565\u3002\u4e0e\u4e4b\u7c7b\u4f3c\uff0c\u5982\u679c\u5143\u7d20\u6216\u952e\u7684\u7c7b\u578b\u4e3a *T \uff0c\u90a3\u4e48\u5b83\u4eec\u7684 &T \u4e5f\u53ef\u4ee5\u7701\u7565\u3002 [...]Point{{1.5, -3.5}, {0, 0}} // same as [...]Point{Point{1.5, -3.5}, Point{0, 0}} [][]int{{1, 2, 3}, {4, 5}} // same as [][]int{[]int{1, 2, 3}, []int{4, 5}} [][]Point{{{0, 1}, {1, 2}}} // same as [][]Point{[]Point{Point{0, 1}, Point{1, 2}}} map[string]Point{\"orig\": {0, 0}} // same as map[string]Point{\"orig\": Point{0, 0}} map[Point]string{{0, 0}: \"orig\"} // same as map[Point]string{Point{0, 0}: \"orig\"} type PPoint *Point [2]*Point{{1.5, -3.5}, {}} // same as [2]*Point{&Point{1.5, -3.5}, &Point{}} [2]PPoint{{1.5, -3.5}, {}} // same as [2]PPoint{PPoint(&Point{1.5, -3.5}), PPoint(&Point{})} \u5f53\u590d\u5408\u5b57\u9762\u503c\u4f7f\u7528\u5b57\u9762\u503c\u7c7b\u578b\u7684\u7c7b\u578b\u540d\u683c\u5f0f\u51fa\u73b0\u5728 if \u3001 for \u6216 switch \u8bed\u53e5\u7684\u5173\u952e\u5b57\u548c\u62ec\u53f7\u4e4b\u95f4\u5e76\u4e14\u6ca1\u6709\u4f7f\u7528\u5706\u62ec\u53f7\u5305\u88f9\u7684\u65f6\u5019\uff0c\u4f1a\u5f15\u53d1\u8bed\u6cd5\u6b67\u4e49\u3002\u5728\u8fd9\u79cd\u7279\u6b8a\u7684\u60c5\u51b5\u4e0b\u5b57\u9762\u503c\u7684\u62ec\u53f7\u4f1a\u88ab\u8ba4\u4e3a\u662f\u8bed\u53e5\u7684\u4ee3\u7801\u5757\u3002\u4e3a\u4e86\u907f\u514d\u6b67\u4e49\uff0c\u590d\u5408\u5b57\u9762\u503c\u5fc5\u987b\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u3002 if x == (T{a,b,c}[i]) { \u2026 } if (x == T{a,b,c}[i]) { \u2026 } \u4e0b\u9762\u662f\u5408\u6cd5\u7684\u6570\u7ec4\u3001\u5207\u7247\u548c map \u7684\u4f8b\u5b50\uff1a // list of prime numbers primes := []int{2, 3, 5, 7, 9, 2147483647} // vowels[ch] is true if ch is a vowel vowels := [128]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true, 'y': true} // the array [10]float32{-1, 0, 0, 0, -0.1, -0.1, 0, 0, 0, -1} filter := [10]float32{-1, 4: -0.1, -0.1, 9: -1} // frequencies in Hz for equal-tempered scale (A4 = 440Hz) noteFrequency := map[string]float32{ \"C0\": 16.35, \"D0\": 18.35, \"E0\": 20.60, \"F0\": 21.83, \"G0\": 24.50, \"A0\": 27.50, \"B0\": 30.87, }","title":"\u590d\u5408\u5b57\u9762\u503c"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_51","text":"\u51fd\u6570\u5b57\u9762\u503c\u8868\u793a\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u3002 FunctionLit = \"func\" Function . func(a, b int, z float64) bool { return a*b < int(z) } \u51fd\u6570\u5b57\u9762\u503c\u80fd\u5206\u914d\u7ed9\u53d8\u91cf\u6216\u76f4\u63a5\u8c03\u7528\u3002 \u51fd\u6570\u5b57\u9762\u503c\u662f\u4e00\u4e2a\u95ed\u5305\u3002\u5b83\u53ef\u4ee5\u5f15\u7528\u5305\u88f9\u51fd\u6570\u4e2d\u7684\u53d8\u91cf\uff0c\u8fd9\u4e9b\u53d8\u91cf\u5728\u5305\u88f9\u51fd\u6570\u548c\u51fd\u6570\u5b57\u9762\u503c\u4e4b\u95f4\u662f\u5171\u4eab\u7684\u3002\u5e76\u4e14\u5b83\u4f1a\u4e00\u76f4\u5b58\u5728\u76f4\u5230\u751f\u547d\u5468\u671f\u7ed3\u675f\u3002","title":"\u51fd\u6570\u5b57\u9762\u503c"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_52","text":"\u4e3b\u8981\u8868\u8fbe\u5f0f\u662f\u4e00\u5143\u548c\u4e8c\u5143\u8868\u8fbe\u5f0f\u7684\u8fd0\u7b97\u5143\u3002 PrimaryExpr = Operand | Conversion | PrimaryExpr Selector | PrimaryExpr Index | PrimaryExpr Slice | PrimaryExpr TypeAssertion | PrimaryExpr Arguments . Selector = \".\" identifier . Index = \"[\" Expression \"]\" . Slice = \"[\" [ Expression ] \":\" [ Expression ] \"]\" | \"[\" [ Expression ] \":\" Expression \":\" Expression \"]\" . TypeAssertion = \".\" \"(\" Type \")\" . Arguments = \"(\" [ ( ExpressionList | Type [ \",\" ExpressionList ] ) [ \"...\" ] [ \",\" ] ] \")\" . x 2 (s + \".txt\") f(3.1415, true) Point{1, 2} m[\"foo\"] s[i : j + 1] obj.color f.p[i].x()","title":"\u4e3b\u8981\u8868\u8fbe\u5f0f"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_53","text":"\u5bf9\u4e8e\u4e00\u4e2a x \u4e0d\u662f\u5305\u540d\u7684\u4e3b\u8981\u8868\u8fbe\u5f0f\uff0c\u9009\u62e9\u5668\u8868\u8fbe\u5f0f\uff1a x.f \u8868\u793a x \u7684\u5b57\u6bb5\u6216\u65b9\u6cd5 f\uff08\u6709\u65f6\u4e3a *x\uff09\u3002\u6807\u8bc6\u7b26 f \u53eb\u505a\uff08\u5b57\u6bb5/\u65b9\u6cd5\uff09\u9009\u62e9\u5668\u3002\u5b83\u4e0d\u80fd\u662f\u7a7a\u6807\u8bc6\u7b26\u3002\u9009\u62e9\u5668\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u5c31\u662f f \u7684\u7c7b\u578b\u3002\u5982\u679c x \u662f\u5305\u540d\u3002\u8bf7\u53c2\u8003\u4fee\u9970\u6807\u8bc6\u7b26\u3002 \u9009\u62e9\u5668 f \u53ef\u4ee5\u8868\u793a\u7c7b\u578b T \u7684\u65b9\u6cd5\u6216\u5b57\u6bb5 f\u3002\u4e5f\u53ef\u4ee5\u8868\u793a\u7c7b\u578b T \u7684\u5d4c\u5165\u65b9\u6cd5\u6216\u5b57\u6bb5 f\u3002\u8bbf\u95ee f \u6240\u9700\u7a7f\u8fc7\u7684\u5d4c\u5957\u5c42\u6570\u53eb\u505a\u5b83\u5728\u7c7b\u578b T \u4e2d\u7684\u6df1\u5ea6\u3002\u58f0\u660e\u5728 T \u4e2d\u7684\u5b57\u6bb5\u6216\u65b9\u6cd5\u7684\u6df1\u5ea6\u4e3a 0\u3002\u58f0\u660e\u5728 T \u7684\u5d4c\u5165\u5b57\u6bb5 A \u4e2d\u7684\u65b9\u6cd5\u6216\u5b57\u6bb5\u7684\u6df1\u5ea6\u7b49\u4e8e f \u5728 A \u4e2d\u7684\u6df1\u5ea6\u52a0\u4e00\u3002 \u9009\u62e9\u5668\u9075\u5faa\u4ee5\u4e0b\u539f\u5219\uff1a \u5bf9\u4e8e\u975e\u6307\u9488/\u63a5\u53e3\u7c7b\u578b T/*T \u7684\u503c x\uff0cx.f \u8868\u793a\u7b2c\u4e00\u5c42\u7684\u65b9\u6cd5/\u5b57\u6bb5\u3002\u5982\u679c\u5728\u7b2c\u4e00\u5c42\u6ca1\u6709\u5bf9\u5e94\u7684 f\uff0c\u9009\u62e9\u5668\u8868\u8fbe\u5f0f\u5c31\u662f\u975e\u6cd5\u7684\u3002 \u5bf9\u4e8e\u63a5\u53e3\u7c7b\u578b I \u7684\u503c x\uff0c x.f \u8868\u793a\u52a8\u6001\u503c x \u7684\u65b9\u6cd5\u540d f\u3002\u5982\u679c\u63a5\u53e3 I \u7684\u65b9\u6cd5\u96c6\u4e2d\u6ca1\u6709 f \u65b9\u6cd5\uff0c\u9009\u62e9\u5668\u5c31\u662f\u975e\u6cd5\u7684\u3002 \u4f5c\u4e3a\u4f8b\u5916\uff0c\u5982\u679c x \u662f\u4e00\u4e2a\u6307\u9488\u7c7b\u578b\u5e76\u4e14 ( x).f \u662f\u5408\u6cd5\u7684\u9009\u62e9\u5668\u8868\u8fbe\u5f0f\uff08\u53ea\u80fd\u8868\u793a\u5b57\u6bb5\uff0c\u4e0d\u80fd\u8868\u793a\u65b9\u6cd5\uff09\u3002\u90a3\u4e48( x).f \u53ef\u4ee5\u7b80\u5199\u6210 x.f\u3002 \u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0cx.f \u90fd\u662f\u975e\u6cd5\u7684\u3002 \u5982\u679cx\u662f\u6307\u9488\u7c7b\u578b\uff0c\u5e76\u4e14\u503c\u4e3a nil\uff0c\u5176\u4e2d f \u4e3a\u7ed3\u6784\u4f53\u5b57\u6bb5\u3002\u8d4b\u503c\u6216\u53d6\u503c x.f \u4f1a\u5f15\u8d77\u8fd0\u884c\u65f6\u6050\u614c\u3002 \u5982\u679cx\u662f\u63a5\u53e3\u7c7b\u578b\uff0c\u5e76\u4e14\u503c\u4e3a nil\u3002\u8c03\u7528 x.f \u4f1a\u5f15\u8d77\u8fd0\u884c\u65f6\u6050\u614c\u3002 \u4f8b\u5982\u7ed9\u5b9a\u58f0\u660e\uff1a type T0 struct { x int } func (*T0) M0() type T1 struct { y int } func (T1) M1() type T2 struct { z int T1 *T0 } func (*T2) M2() type Q *T2 var t T2 // with t.T0 != nil var p *T2 // with p != nil and (*p).T0 != nil var q Q = p \u7ed3\u679c\uff1a t.z // t.z t.y // t.T1.y t.x // (*t.T0).x p.z // (*p).z p.y // (*p).T1.y p.x // (*(*p).T0).x q.x // (*(*q).T0).x (*q).x is a valid field selector p.M0() // ((*p).T0).M0() M0 expects *T0 receiver p.M1() // ((*p).T1).M1() M1 expects T1 receiver p.M2() // p.M2() M2 expects *T2 receiver t.M2() // (&t).M2() M2 expects *T2 receiver, see section on Calls \u4f46\u662f\u4e0b\u9762\u8fd9\u79cd\u65b9\u5f0f\u662f\u4e0d\u5408\u6cd5\u7684\uff1a q.M0() // (*q).M0 is valid but not a field selector","title":"\u9009\u62e9\u5668"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_54","text":"\u5982\u679c M \u5728\u7c7b\u578b T \u7684\u65b9\u6cd5\u96c6\u4e2d\u3002\u90a3\u4e48 T.M \u5c31\u662f\u80fd\u591f\u6b63\u5e38\u8c03\u7528\u7684\u51fd\u6570\u3002\u4f7f\u7528\u4e0e M \u76f8\u540c\u7684\u53c2\u6570\u53ea\u662f\u5728\u53c2\u6570\u5217\u8868\u7684\u6700\u524d\u9762\u589e\u52a0\u4e86\u63a5\u6536\u8005\u53c2\u6570\u3002 MethodExpr = ReceiverType \".\" MethodName . ReceiverType = TypeName | \"(\" \"*\" TypeName \")\" | \"(\" ReceiverType \")\" . \u5047\u8bbe\u7ed3\u6784\u4f53 T \u6709\u4e24\u4e2a\u65b9\u6cd5\u3002\u63a5\u6536\u8005\u7c7b\u578b\u4e3a T \u7684 Mv \u65b9\u6cd5\u548c\u63a5\u6536\u8005\u7c7b\u578b\u4e3a *T \u7684 Mp \u65b9\u6cd5\uff1a type T struct { a int } func (tv T) Mv(a int) int { return 0 } // value receiver func (tp *T) Mp(f float32) float32 { return 1 } // pointer receiver var t T \u8868\u8fbe\u5f0f T.Mv \u5c06\u4f1a\u751f\u6210\u4e00\u4e2a\u7b49\u4ef7\u4e8e Mv \u65b9\u6cd5\u53ea\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u663e\u5f0f\u58f0\u660e\u63a5\u53d7\u8005\u7684\u51fd\u6570\u3002\u5b83\u7684\u7b7e\u540d\u4e3a\uff1a func(tv T, a int) int \u8fd9\u4e2a\u51fd\u6570\u80fd\u591f\u901a\u8fc7\u63a5\u6536\u8005\u6b63\u5e38\u8c03\u7528\uff0c\u4ee5\u4e0b5\u79cd\u65b9\u5f0f\u662f\u7b49\u4ef7\u7684\uff1a t.Mv(7) T.Mv(t, 7) (T).Mv(t, 7) f1 := T.Mv; f1(t, 7) f2 := (T).Mv; f2(t, 7) \u4e0e\u4e4b\u7c7b\u4f3c\uff1a (*T).Mp \u751f\u6210\u8868\u793a Mp \u7684\u51fd\u6570\u7b7e\u540d\uff1a func(tp *T, f float32) float32 \u5bf9\u4e8e\u4e00\u4e2a\u628a\u503c\u4f5c\u4e3a\u63a5\u6536\u8005\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u663e\u5f0f\u7684\u4ece\u6307\u9488\u63a5\u6536\u8005\u83b7\u5f97\u51fd\u6570\uff1a (*T).Mv \u751f\u6210\u8868\u793a Mv \u7684\u51fd\u6570\u7b7e\u540d\uff1a func(tv *T, a int) int \u8fd9\u6837\u7684\u51fd\u6570\u4f1a\u901a\u8fc7\u63a5\u6536\u8005\u95f4\u63a5\u7684\u521b\u5efa\u4e00\u4e2a\u503c\u4f5c\u4e3a\u63a5\u6536\u8005\u4f20\u5165\u5e95\u5c42\u65b9\u6cd5\u4e2d\u3002\u65b9\u6cd5\u5185\u4e0d\u80fd\u4fee\u6539\u63a5\u6536\u8005\u7684\u503c\uff0c\u56e0\u4e3a\u5b83\u7684\u5730\u5740\u662f\u5728\u51fd\u6570\u7684\u8c03\u7528\u6808\u91cc\u9762\u3002 \u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\u3002\u628a\u503c\u4f5c\u4e3a\u63a5\u6536\u8005\u51fd\u6570\u5f53\u505a\u6307\u9488\u4f5c\u4e3a\u63a5\u6536\u8005\u7684\u65b9\u6cd5\u662f\u975e\u6cd5\u7684\uff0c\u56e0\u4e3a\u6307\u9488\u63a5\u6536\u8005\u7684\u65b9\u6cd5\u96c6\u4e2d\u4e0d\u5305\u542b\u503c\u7c7b\u578b\u7684\u65b9\u6cd5\u96c6\u3002 \u901a\u8fc7\u51fd\u6570\u8c03\u7528\u8bed\u6cd5\u4ece\u65b9\u6cd5\u4e2d\u83b7\u53d6\u51fd\u6570\u7684\u503c\u3002\u63a5\u6536\u8005\u4f5c\u4e3a\u8c03\u7528\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002\u7ed9\u5b9a f :=T.Mv \uff0cf \u4f5c\u4e3a f(t,7) \u8fdb\u884c\u8c03\u7528\u800c\u4e0d\u662f t.f(7) \u3002\u60f3\u521b\u5efa\u4e00\u4e2a\u7ed1\u5b9a\u63a5\u6536\u8005\u7684\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u5b57\u9762\u503c\u6216\u8005\u65b9\u6cd5\u503c\u3002 \u5728\u63a5\u53e3\u7c7b\u578b\u4e2d\u5b9a\u4e49\u51fd\u6570\u83b7\u53d6\u51fd\u6570\u503c\u662f\u5408\u6cd5\u7684\u3002\u6700\u7ec8\u7684\u51fd\u6570\u8c03\u7528\u4f1a\u4f7f\u7528\u63a5\u53e3\u7c7b\u578b\u4f5c\u4e3a\u63a5\u6536\u8005\u3002","title":"\u65b9\u6cd5\u8868\u8fbe\u5f0f"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_55","text":"\u5982\u679c\u8868\u8fbe\u5f0f x \u62e5\u6709\u9759\u6001\u7c7b\u578b T \u5e76\u4e14 M \u5728\u7c7b\u578b T \u7684\u65b9\u6cd5\u96c6\u4e2d\u3002x.M \u53eb\u505a\u65b9\u6cd5\u503c\u3002\u65b9\u6cd5\u503c x.M \u662f\u4e00\u4e2a\u51fd\u6570\u503c\uff0c\u8fd9\u4e2a\u51fd\u6570\u548c x.M \u62e5\u6709\u76f8\u540c\u7684\u53c2\u6570\u5217\u8868\u3002\u8868\u8fbe\u5f0f x \u5728\u8ba1\u7b97\u65b9\u6cd5\u503c\u65f6\u4f1a\u88ab\u4fdd\u5b58\u548c\u8ba1\u7b97\uff0c\u8fd9\u4e2a\u62f7\u8d1d\u7684\u526f\u672c\u4f1a\u4f5c\u4e3a\u4efb\u4f55\u63a5\u4e0b\u6765\u8c03\u7528\u7684\u63a5\u6536\u8005\u3002 \u7c7b\u578b T \u53ef\u80fd\u662f\u63a5\u53e3\u7c7b\u578b\u4e5f\u53ef\u80fd\u4e0d\u662f\u63a5\u53e3\u7c7b\u578b\u3002 \u4e0e\u65b9\u6cd5\u8868\u8fbe\u5f0f\u4e2d\u8bb2\u8fc7\u7684\u4e00\u6837\uff0c\u5047\u8bbe\u7c7b\u578b T \u6709\u4e24\u4e2a\u65b9\u6cd5\uff1a\u63a5\u6536\u8005\u7c7b\u578b\u4e3a T \u7684 Mv \u548c\u63a5\u53d7\u8005\u7c7b\u578b\u4e3a *T \u7684 Mp \uff1a type T struct { a int } func (tv T) Mv(a int) int { return 0 } // value receiver func (tp *T) Mp(f float32) float32 { return 1 } // pointer receiver var t T var pt *T func makeT() T \u8868\u8fbe\u5f0f\uff1a t.Mv \u751f\u6210\u4e00\u4e2a\u7c7b\u578b\u7684\u51fd\u6570\u503c\uff1a func(int) int \u4ee5\u4e0b\u4e24\u79cd\u8c03\u7528\u662f\u7b49\u4ef7\u7684\uff1a t.Mv(7) f := t.Mv; f(7) \u76f8\u4f3c\u7684\uff0c\u8868\u8fbe\u5f0f\uff1a pt.Mp \u751f\u6210\u4e00\u4e2a\u7c7b\u578b\u7684\u51fd\u6570\u503c\uff1a func(float32) float32 \u4e0e\u9009\u62e9\u5668\u76f8\u540c\uff0c\u4f7f\u7528\u6307\u9488\u8c03\u7528\u4ee5\u503c\u4f5c\u4e3a\u63a5\u6536\u8005\u7684\u975e\u63a5\u53e3\u65b9\u6cd5\u4f1a\u81ea\u52a8\u5c06\u6307\u9488\u89e3\u5f15\u7528\uff1a pt.Mv \u7b49\u4ef7\u4e8e (*pt).Mv \u3002 \u4e0e\u65b9\u6cd5\u8c03\u7528\u76f8\u540c\uff0c\u4f7f\u7528\u503c\u8c03\u7528\u4ee5\u6307\u9488\u4f5c\u4e3a\u63a5\u6536\u8005\u7684\u975e\u63a5\u53e3\u65b9\u6cd5\u4f1a\u81ea\u52a8\u5bf9\u503c\u53d6\u5740\uff1a pt.Mv \u7b49\u4ef7\u4e8e (&pt).Mv \u3002 f := t.Mv; f(7) // like t.Mv(7) f := pt.Mp; f(7) // like pt.Mp(7) f := pt.Mv; f(7) // like (*pt).Mv(7) f := t.Mp; f(7) // like (&t).Mp(7) f := makeT().Mp // invalid: result of makeT() is not addressable \u5c3d\u7ba1\u4e0a\u9762\u4f7f\u7528\u7684\u90fd\u662f\u975e\u63a5\u53e3\u7c7b\u578b\u7684\u4f8b\u5b50\uff0c\u4e0d\u8fc7\u5bf9\u4e8e\u63a5\u53e3\u7c7b\u578b\u540c\u6837\u9002\u7528\u3002 var i interface { M(int) } = myVal f := i.M; f(7) // like i.M(7)","title":"\u65b9\u6cd5\u503c"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#index","text":"\u4e3b\u8981\u8868\u8fbe\u5f0f\u683c\u5f0f\uff1a a[x] \u53ef\u4ee5\u8868\u793a\u6570\u7ec4\u5143\u7d20\u3001\u6570\u7ec4\u7684\u6307\u9488\u3001\u5207\u7247\u3001\u5b57\u7b26\u4e32\u6216 map \u7c7b\u578b a \u7d22\u5f15 x \u5bf9\u5e94\u7684\u503c\u3002x \u79f0\u4f5c\u7d22\u5f15\u6216\u8005 map \u7684\u952e\u3002\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a \u5982\u679ca\u4e0d\u662f map \u7c7b\u578b\uff1a \u7d22\u5f15 x \u5fc5\u987b\u662f\u6574\u578b\u6216\u65e0\u7c7b\u578b\u5e38\u91cf\u3002 \u5e38\u91cf\u7d22\u5f15\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u4e14\u53ef\u4ee5\u4f7f\u7528 int \u7c7b\u578b\u8868\u793a\u3002 \u65e0\u7c7b\u578b\u7684\u5e38\u91cf\u7d22\u5f15\u4f1a\u4f5c\u4e3a int \u578b\u7684\u503c\u3002 \u7d22\u5f15 x \u7684\u8303\u56f4\u5728 0<=x<len(a) \u5185\uff0c\u5426\u5219\u5c31\u662f\u8d8a\u754c\u3002 \u5bf9\u4e8e\u6570\u7ec4\u7c7b\u578b A\uff1a \u5e38\u91cf\u7d22\u5f15\u5fc5\u987b\u5728\u5408\u6cd5\u8303\u56f4\u5185\u3002 \u5982\u679c x \u5728\u8fd0\u884c\u65f6\u8d8a\u754c\u4f1a\u5f15\u8d77\u8fd0\u884c\u65f6\u6050\u614c\u3002 a[x] \u8868\u793a\u6570\u7ec4\u5728\u7d22\u5f15 x \u5904\u7684\u5143\u7d20\u3002 a[x] \u7684\u7c7b\u578b\u5c31\u662f A \u7684\u5143\u7d20\u7c7b\u578b\u3002 \u5bf9\u4e8e\u6570\u7ec4\u7684\u6307\u9488\u7c7b\u578b\uff1a \u53ef\u4ee5\u4f7f\u7528 a[x] \u8868\u793a (*a)[x] \u3002 \u5bf9\u4e8e\u5207\u7247\u7c7b\u578b S\uff1a \u5982\u679c x \u5728\u8fd0\u884c\u65f6\u8d8a\u754c\u4f1a\u5f15\u8d77\u8fd0\u884c\u65f6\u6050\u614c\u3002 a[x] \u8868\u793a\u5207\u7247\u5728\u7d22\u5f15 x \u5904\u7684\u5143\u7d20\u3002 a[x] \u7684\u7c7b\u578b\u5c31\u662f S \u7684\u5143\u7d20\u7c7b\u578b\u3002 \u5bf9\u4e8e\u5b57\u7b26\u4e32\u7c7b\u578b\uff1a \u5982\u679c\u5b57\u7b26\u4e32 a \u4e3a\u5e38\u91cf\uff0c\u90a3\u4e48\u5e38\u91cf\u7d22\u5f15\u5fc5\u987b\u5728\u5408\u6cd5\u8303\u56f4\u5185\u3002 \u5982\u679c x \u5728\u8fd0\u884c\u65f6\u8d8a\u754c\u4f1a\u5f15\u8d77\u8fd0\u884c\u65f6\u6050\u614c\u3002 a[x] \u8868\u793a\u7d22\u5f15 x \u5904\u7684\u975e\u5e38\u91cf\u5b57\u8282\uff0c\u5b83\u662fbyte\u7c7b\u578b\u3002 \u4e0d\u80fd\u5bf9 a[x] \u5206\u914d\u503c\u3002 \u5bf9\u4e8e map \u7c7b\u578b M\uff1a \u5fc5\u987b\u4fdd\u8bc1 x \u7684\u7c7b\u578b\u80fd\u591f\u7ed9 M \u7684\u952e\u5206\u914d\u503c\u3002 \u5982\u679cmap\u5305\u542b\u952e\u4e3a x \u7684\u503c\uff0ca[x] \u5c31\u662f map \u4e2d\u952e x \u5bf9\u5e94\u7684\u503c\uff0c\u5b83\u7684\u7c7b\u578b\u5c31\u662f M \u7684\u5143\u7d20\u7c7b\u578b\u3002 \u5982\u679c map \u503c\u4e3a nil \u6216\u4e0d\u5305\u542b\u8fd9\u4e2a\u5b9e\u4f53\uff0c\u90a3\u4e48 a[x] \u4e3a M \u5143\u7d20\u7c7b\u578b\u7684\u96f6\u503c\u3002 \u5426\u5219 a[x] \u5c31\u662f\u975e\u6cd5\u7684\u3002 \u57fa\u4e8e map[K]V \u7c7b\u578b a \u7684\u7d22\u5f15\u8868\u8fbe\u5f0f\u53ef\u4ee5\u4f7f\u7528\u7279\u6b8a\u683c\u5f0f\u7684\u8d4b\u503c\u548c\u521d\u59cb\u5316\u8bed\u6cd5\u3002 v, ok = a[x] v, ok := a[x] var v, ok = a[x] \u5b83\u4f1a\u989d\u5916\u751f\u6210\u4e00\u4e2a\u65e0\u7c7b\u578b\u7684\u5e03\u5c14\u503c\u3002\u5982\u679c ok \u662f true\uff0c\u90a3\u4e48\u4ee3\u8868\u5728map\u4e2d\u6709\u8be5\u952e\uff0c\u5982\u679c\u6ca1\u6709 ok \u4e3a false\u3002 \u7ed9\u4e00\u4e2a\u503c\u4e3a nil \u7684 map \u7c7b\u578b\u53d8\u91cf\u8d4b\u503c\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u6050\u614c\u3002","title":"index\u8868\u8fbe\u5f0f"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_56","text":"\u5207\u7247\u8868\u8fbe\u5f0f\u53ef\u4ee5\u57fa\u4e8e\u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u3001\u6570\u7ec4\u6307\u9488\u3001\u5207\u7247\u521b\u5efa\u5b57\u7b26\u4e32\u5b50\u4e32\u6216\u5207\u7247\u3002\u5b83\u6709\u4e24\u79cd\u53d8\u4f53\uff0c\u4e00\u79cd\u662f\u7b80\u5355\u7684\u683c\u5f0f\u662f\u6307\u5b9a\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\uff0c\u5b8c\u5168\u683c\u5f0f\u7684\u8bed\u6cd5\u8fd8\u53ef\u4ee5\u6307\u5b9a\u5bb9\u91cf\u3002 ####### \u7b80\u5355\u5207\u7247\u8868\u8fbe\u5f0f \u5bf9\u4e8e\u6570\u7ec4\u3001\u5b57\u7b26\u4e32\u3001\u6307\u9488\u6570\u7ec4\u3001\u5207\u7247 a\uff0c\u4e3b\u8981\u8868\u8fbe\u5f0f\uff1a a[low:high] \u53ef\u4ee5\u6784\u9020\u5b57\u7b26\u4e32\u5b50\u4e32\u6216\u5207\u7247\u3002\u7d22\u5f15 low \u548c high \u51b3\u5b9a\u7ed3\u679c\u5207\u7247\u4e2d\u7684\u5143\u7d20\u3002\u7ed3\u679c\u5207\u7247\u7684\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff0c\u957f\u5ea6\u4e3a high - low \u3002\u4ece\u6570\u7ec4\u5207\u5206\u51fa\u7684\u5207\u7247 s \u62e5\u6709\u7c7b\u578b []int \uff0c\u957f\u5ea6\u4e3a 3 \uff0c\u5bb9\u79ef\u4e3a 4\u3002 a := [5]int{1, 2, 3, 4, 5} s := a[1:4] s[0] == 2 s[1] == 3 s[2] == 4 \u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u7d22\u5f15\u503c\u90fd\u53ef\u4ee5\u7f3a\u7701\u3002\u5f53 low \u7f3a\u7701\u65f6\u9ed8\u8ba4\u4ece 0 \u5f00\u59cb\u3002\u5f53\u7f3a high \u7f3a\u7701\u65f6\u9ed8\u8ba4\u7684\u53d6\u5207\u7247\u7684\u957f\u5ea6\u3002 a[2:] // same as a[2 : len(a)] a[:3] // same as a[0 : 3] a[:] // same as a[0 : len(a)] \u5982\u679c a \u662f\u4e00\u4e2a\u6570\u7ec4\u6307\u9488\uff0c\u90a3\u4e48 a[low:high] \u53ef\u4ee5\u8868\u793a (*a)[low : high] \u3002 \u5bf9\u4e8e\u6570\u7ec4\u6216\u8005\u5b57\u7b26\u4e32\uff0c\u7d22\u5f15\u7684\u8303\u56f4\u662f 0<=low<=high<=len(a) \u3002\u5bf9\u4e8e\u5207\u7247\uff0c\u6700\u5927\u7684\u7d22\u5f15\u503c\u53ef\u4ee5\u4e3a\u5207\u7247\u7684\u5bb9\u91cf\uff0c\u800c\u4e0d\u662f\u5207\u7247\u7684\u957f\u5ea6\u3002\u5e38\u91cf\u7d22\u5f15\u5fc5\u987b\u4e3a\u975e\u8d1f\u6570\uff0c\u4e14\u80fd\u591f\u8f6c\u6362\u6210 int \u7c7b\u578b\u3002\u5bf9\u4e8e\u6570\u7ec4\u6216\u8005\u5e38\u91cf\u5b57\u7b26\u4e32\u3002\u5e38\u91cf\u7d22\u5f15\u503c\u5fc5\u987b\u5728\u5408\u6cd5\u8303\u56f4\u5185\u3002\u5982\u679c2\u4e2a\u7d22\u5f15\u90fd\u662f\u5e38\u91cf\u3002low \u5fc5\u987b\u5c0f\u4e8e high\u3002\u5982\u679c\u7d22\u5f15\u5728\u8fd0\u884c\u65f6\u8bbf\u95ee\u4e86\u975e\u6cd5\u5185\u5b58\uff0c\u7a0b\u5e8f\u4f1a\u53d1\u751f\u8fd0\u884c\u65f6\u6050\u614c\u3002 \u9664\u4e86\u65e0\u7c7b\u578b\u5b57\u7b26\u4e32\uff0c\u5bf9\u4e8e\u5207\u7247\u548c\u5b57\u7b26\u4e32\u7684\u64cd\u4f5c\u7ed3\u679c\u662f\u975e\u5e38\u91cf\u7c7b\u578b\u7684\u503c\uff0c\u5b83\u7684\u7c7b\u578b\u4e0e\u8fd0\u7b97\u5143\u76f8\u540c\u3002\u5982\u679c\u8fd0\u7b97\u5143\u4e3a\u65e0\u7c7b\u578b\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u7ed3\u679c\u7c7b\u578b\u4f1a\u4e3a string\u3002\u5982\u679c\u628a\u6570\u7ec4\u4f5c\u4e3a\u8fd0\u7b97\u5143\uff0c\u5b83\u5fc5\u987b\u662f\u53ef\u5bfb\u5740\u7684\uff0c\u5e76\u4e14\u83b7\u5f97\u7684\u5207\u7247\u548c\u539f\u6570\u7ec4\u5177\u6709\u540c\u4e00\u5143\u7d20\u7c7b\u578b\u3002 \u5982\u679c\u5207\u7247\u8fd0\u7b97\u5143\u4e3a nil\uff0c\u90a3\u4e48\u7ed3\u679c\u4e5f\u662f nil\u3002\u5426\u5219\u7ed3\u679c\u5207\u7247\u4f1a\u548c\u8fd0\u7b97\u5143\u5171\u4eab\u76f8\u540c\u7684\u5e95\u5c42\u65e0\u7c7b\u578b\u6570\u7ec4\u3002","title":"\u5207\u7247\u8868\u8fbe\u5f0f"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_57","text":"\u5bf9\u4e8e\u6570\u7ec4\uff0c\u6570\u7ec4\u6307\u9488\u6216\u975e\u5b57\u7b26\u4e32\u5207\u7247\uff0c\u4e3b\u8981\u8868\u8fbe\u5f0f\u4e3a\uff1a a[low : high : max] \u5b83\u4f1a\u6784\u9020\u4e00\u4e2a\u540c\u7c7b\u578b\u5207\u7247\uff0c\u5e76\u5177\u6709\u4e0e\u7b80\u5355\u5207\u7247\u8868\u8fbe\u5f0f\u7684 a[low:high] \u76f8\u540c\u7684\u957f\u5ea6\u548c\u5143\u7d20\u3002\u53e6\u5916\uff0c\u5b83\u8fd8\u53ef\u4ee5\u628a\u5207\u7247\u7684\u5bb9\u91cf\u8bbe\u7f6e\u4e3a max - low \u3002\u8fd9\u65f6\u53ea\u6709\u7b2c\u4e00\u4e2a\u7d22\u5f15\u53ef\u4ee5\u4e3a\u7f3a\u7701\u503c\uff0c\u9ed8\u8ba4\u4e3a\u96f6\u3002\u4ece\u6570\u7ec4\u4e2d\u83b7\u5f97\u5207\u7247\u4ee5\u540e\uff1a a := [5]int{1, 2, 3, 4, 5} t := a[1:3:5] \u5207\u7247 t \u4e3a []int \u7c7b\u578b\uff0c\u957f\u5ea6\u4e3a 2\uff0c\u5bb9\u91cf\u4e3a 4\uff0c\u5e76\u4e14\u5143\u7d20\u4e3a\uff1a t[0] == 2 t[1] == 3 \u548c\u7b80\u5355\u5207\u7247\u8868\u8fbe\u5f0f\u4e00\u6837\uff0c\u5982\u679c a \u662f\u6570\u7ec4\u6307\u9488 \uff0c\u90a3\u4e48 a[low:high:max] \u53ef\u4ee5\u7b80\u5199\u4e3a (*a)[low:high:max] \u3002\u5982\u679c\u5207\u5206\u64cd\u4f5c\u5143\u662f\u6570\u7ec4\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7ec4\u5fc5\u987b\u662f\u53ef\u4ee5\u5bfb\u5740\u7684\u3002 \u5982\u679c\u7d22\u5f15\u5fc5\u987b\u5728 0 <= low <= high <= max <= cap(a) \u8303\u56f4\u5185\u3002\u5e38\u91cf\u7d22\u5f15\u4e0d\u80fd\u662f\u8d1f\u6570\u5e76\u4e14\u80fd\u591f\u4f7f\u7528 int \u7c7b\u578b\u8868\u793a\uff1b\u5bf9\u4e8e\u6570\u7ec4\uff0c\u7d22\u5f15\u5fc5\u987b\u5728\u5408\u6cd5\u8303\u56f4\u5185\u3002\u5982\u679c\u6709\u591a\u4e2a\u7d22\u5f15\u90fd\u662f\u5e38\u91cf\u7684\uff0c\u90a3\u4e48\u6240\u6709\u7d22\u5f15\u90fd\u9700\u8981\u5728\u5408\u6cd5\u8303\u56f4\u5185\u3002\u5982\u679c\u7d22\u5f15\u662f\u975e\u6cd5\u7684\uff0c\u4f1a\u5f15\u8d77\u8fd0\u884c\u65f6\u6050\u614c\u3002","title":"\u5b8c\u5168\u5207\u7247\u8868\u8fbe\u5f0f"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_58","text":"\u5bf9\u4e8e\u63a5\u53e3\u7c7b\u578b x \u548c\u7c7b\u578b T\uff0c\u4e3b\u8981\u8868\u8fbe\u5f0f\uff1a x.(T) \u53ef\u4ee5\u65ad\u8a00 x \u4e0d\u662f nil \u4e14 x \u7684\u503c\u662f T \u7c7b\u578b\u3002\u6807\u8bb0 x.(T) \u53eb\u505a\u7c7b\u578b\u65ad\u8a00\u3002 \u66f4\u786e\u5207\u7684\u8bf4\uff0c\u5982\u679c T \u4e0d\u662f\u63a5\u53e3\u7c7b\u578b\uff0c\u90a3\u4e48 x.(T) \u5c06\u4f1a\u65ad\u8a00\u52a8\u6001\u7c7b\u578b x \u7684\u7c7b\u578b\u662f\u4e0d\u662f T\u3002 \u8fd9\u65f6\uff0cT \u5fc5\u987b\u5b9e\u73b0\u4e86 x \u7684\uff08\u63a5\u53e3\uff09\u7c7b\u578b\u3002\u5426\u5219\u65ad\u8a00\u4f1a\u662f\u975e\u6cd5\u7684\u56e0\u4e3a x \u4e0d\u80fd\u4fdd\u5b58 T \u7c7b\u578b\u7684\u503c\u3002\u5982\u679c T \u662f\u63a5\u53e3\u7c7b\u578b\uff0c\u90a3\u4e48\u53ef\u4ee5\u65ad\u8a00\u52a8\u6001\u7c7b\u578b x \u662f\u5426\u5b9e\u73b0\u4e86 T \u63a5\u53e3\u3002 \u5982\u679c\u7c7b\u578b\u65ad\u8a00\u6210\u529f\uff0c\u8868\u8fbe\u5f0f\u7684\u503c\u4e3a x \u7684\u503c\uff0c\u4f46\u5b83\u7684\u7c7b\u578b\u662fT\u3002\u5982\u679c\u65ad\u8a00\u5931\u8d25\uff0c\u5c06\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u6050\u614c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5373\u4f7f x \u662f\u8fd0\u884c\u65f6\u786e\u5b9a\u7684\uff0cx.(T) \u4e5f\u5fc5\u987b\u662f\u7f16\u7a0b\u65f6\u5c31\u786e\u8ba4\u5b58\u5728\u7684\u3002 var x interface{} = 7 // x \u62e5\u6709\u52a8\u6001\u7c7b\u578b int \u503c\u4e3a 7 i := x.(int) // i \u4e3a int \u7c7b\u578b\u503c\u4e3a 7 type I interface { m() } func f(y I) { s := y.(string) // \u975e\u6cd5: \u5b57\u7b26\u4e32\u6ca1\u6709\u5b9e\u73b0\u63a5\u53e3 I \uff08\u7f3a\u5c11 m \u65b9\u6cd5\uff09 r := y.(io.Reader) // r \u62e5\u6709\u63a5\u53e3 io.Reader \u6240\u4ee5 y \u7684\u52a8\u6001\u7c7b\u578b\u5fc5\u987b\u540c\u65f6\u5b9e\u73b0 I \u548c io.Reader \u2026 } \u7c7b\u578b\u65ad\u8a00\u53ef\u4ee5\u4f7f\u7528\u7279\u5b9a\u683c\u5f0f\u7684\u8d4b\u503c\u548c\u521d\u59cb\u5316\u8bed\u53e5\u3002 v, ok = x.(T) v, ok := x.(T) var v, ok = x.(T) var v, ok T1 = x.(T) \u8fd9\u65f6\u5c06\u4f1a\u989d\u5916\u751f\u6210\u4e00\u4e2a\u65e0\u7c7b\u578b\u7684\u5e03\u5c14\u503c\u3002\u5982\u679c\u65ad\u8a00\u6210\u529f\uff0cok\u8fd4\u56de true \uff0c\u5426\u5219\u662f false \u3002\u5e76\u4e14 v \u4f1a\u662f T \u7c7b\u578b\u7684\u96f6\u503c\u3002\u8fd9\u65f6\u4e0d\u4f1a\u6709\u6050\u614c\u53d1\u751f\u3002","title":"\u7c7b\u578b\u65ad\u8a00"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_59","text":"\u7ed9\u5b9a\u51fd\u6570\u7c7b\u578b\u4e3a F \u7684\u8868\u8fbe\u5f0f f\uff1a f(a1, a2, \u2026 an) \u53ef\u4ee5\u4f7f\u7528 a1,a2...an \u6765\u8c03\u7528\u51fd\u6570 f\u3002\u9664\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u4e4b\u5916\uff0c\u51fd\u6570\u53c2\u6570\u5fc5\u987b\u662f\u5bf9\u5e94 F \u51fd\u6570\u53c2\u6570\u7c7b\u578b\u7684\u5355\u503c\u8868\u8fbe\u5f0f\uff0c\u4e14\u5728\u51fd\u6570\u8c03\u7528\u524d\u5c31\u5df2\u7ecf\u5b8c\u6210\u6c42\u503c\u3002\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u7c7b\u578b\u662f f \u7684\u7ed3\u679c\u7c7b\u578b\u3002\u51fd\u6570\u8c03\u7528\u548c\u65b9\u6cd5\u8c03\u7528\u76f8\u4f3c\uff0c\u53ea\u662f\u65b9\u6cd5\u989d\u5916\u9700\u8981\u4e00\u4e2a\u63a5\u6536\u8005\u7c7b\u578b\u3002 math.Atan2(x, y) // function call var pt *Point pt.Scale(3.5) // method call with receiver pt \u5728\u51fd\u6570\u8c03\u7528\u4e2d\uff0c\u51fd\u6570\u7684\u503c\u548c\u53c2\u6570\u662f\u6309\u7167\u987a\u5e8f\u6c42\u503c\u7684\u3002\u5728\u8ba1\u7b97\u4e4b\u540e\u4f5c\u4e3a\u53c2\u6570\u4f1a\u4f20\u8fdb\u51fd\u6570\uff0c\u51fd\u6570\u5f00\u59cb\u6267\u884c\u3002\u5f53\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u8fd4\u56de\u7684\u53c2\u6570\u5c06\u4f1a\u8fd4\u56de\u7ed9\u51fd\u6570\u7684\u8c03\u7528\u8005\u3002 \u8c03\u7528\u503c\u4e3a nil \u7684\u51fd\u6570\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u6050\u614c\u3002 \u4f5c\u4e3a\u7279\u4f8b\uff0c\u5982\u679c\u51fd\u6570\u6216\u8005\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7b49\u4e8e\u53c2\u6570\u5217\u8868\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u4f1a\u5d4c\u5957\u8c03\u7528\u3002\u8fd9\u5c06\u628a\u8fd4\u56de\u503c\u76f4\u63a5\u8d4b\u503c\u7ed9\u4e0b\u4e00\u6b21\u8c03\u7528\u51fd\u6570\u7684\u53c2\u6570\u3002 func Split(s string, pos int) (string, string) { return s[0:pos], s[pos:] } func Join(s, t string) string { return s + t } if Join(Split(value, len(value)/2)) != value { log.Panic(\"test fails\") } \u5982\u679c x \u7684\u65b9\u6cd5\u96c6\u4e2d\u5305\u542b m \u90a3\u4e48 x.m() \u662f\u5408\u6cd5\u7684\u3002\u5e76\u4e14\u53c2\u6570\u5217\u8868\u548c m \u7684\u53c2\u6570\u5217\u8868\u76f8\u540c\u3002\u5982\u679cx\u662f\u53ef\u5bfb\u5740\u7684\uff0c\u90a3\u4e48\u90a3\u4e48x\u6307\u9488\u7684\u65b9\u6cd5\u96c6 (&x).m() \u53ef\u4ee5\u7b80\u5199\u6210 x.m() \u3002 var p Point p.Scale(3.5) \u6ca1\u6709\u65b9\u6cd5\u7c7b\u578b\uff0c\u4e5f\u6ca1\u6709\u65b9\u6cd5\u5b57\u9762\u503c\u3002","title":"\u8c03\u7528"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_60","text":"\u5982\u679c f \u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570 p \u7684\u7c7b\u578b\u662f ...T \u3002\u90a3\u4e48\u5728\u51fd\u6570\u5185\u90e8 p \u53c2\u6570\u7684\u7c7b\u578b\u5c31\u662f []T \u3002\u5982\u679c f \u8c03\u7528\u65f6\u6ca1\u6709\u4f20\u5165 p \u5bf9\u5e94\u7684\u53c2\u6570\uff0c\u90a3\u4e48p\u4e3a nil\u3002\u5426\u5219\u8fd9\u4e9b\u53c2\u6570\u4f1a\u4ee5\u5207\u7247\u65b9\u5f0f\u4f20\u5165\uff0c\u5728\u65b0\u7684\u5e95\u5c42\u5207\u7247\u4e2d\u3002\u5207\u7247\u4e2d\u7684\u7c7b\u578b\u90fd\u662f\u80fd\u8d4b\u503c\u7ed9\u7c7b\u578b T \u7684\u503c\u3002\u8fd9\u4e2a\u5207\u7247\u7684\u957f\u5ea6\u548c\u5bb9\u91cf\u5728\u4e0d\u540c\u7684\u8c03\u7528\u4e2d\u6709\u6240\u4e0d\u540c\u3002 \u7ed9\u5b9a\u51fd\u6570\u8c03\u7528\uff1a func Greeting(prefix string, who ...string) Greeting(\"nobody\") Greeting(\"hello:\", \"Joe\", \"Anna\", \"Eileen\") \u5728 Greeting \u4e2d\uff0c\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\uff0c who \u662f nil \u7c7b\u578b\u3002\u800c\u5728\u7b2c\u4e8c\u6b21\u8c03\u7528\u65f6\u662f []string{\"Joe\", \"Anna\", \"Eileen\"} \u3002 \u5982\u679c\u5728\u8c03\u7528\u7684\u65f6\u5019\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662f[]T\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ... \u6765\u5c06\u5207\u7247\u4e2d\u7684\u503c\u4f9d\u6b21\u8d4b\u503c\u7ed9\u53c2\u6570\u5217\u8868\u3002 \u7ed9\u5b9a\u5207\u7247s\u5e76\u4e14\u8c03\u7528: s := []string{\"James\", \"Jasmine\"} Greeting(\"goodbye:\", s...) z \u5728 Greeting \u3002\u4e2d who \u4f1a\u548c\u5207\u7247 s \u5171\u4eab\u76f8\u540c\u7684\u5e95\u5c42\u6570\u7ec4\u3002","title":"\u901a\u8fc7 ... \u6765\u4f20\u9012\u53c2\u6570"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_61","text":"\u64cd\u4f5c\u7b26\u7528\u6765\u8fde\u63a5\u8fd0\u7b97\u5143\u3002 Expression = UnaryExpr | Expression binary_op Expression . UnaryExpr = PrimaryExpr | unary_op UnaryExpr . binary_op = \"||\" | \"&&\" | rel_op | add_op | mul_op . rel_op = \"==\" | \"!=\" | \"<\" | \"<=\" | \">\" | \">=\" . add_op = \"+\" | \"-\" | \"|\" | \"^\" . mul_op = \"*\" | \"/\" | \"%\" | \"<<\" | \">>\" | \"&\" | \"&^\" . unary_op = \"+\" | \"-\" | \"!\" | \"^\" | \"*\" | \"&\" | \"<-\" . \u6bd4\u8f83\u8fd0\u7b97\u7b26\u5728\u6b64\u5904\u8ba8\u8bba\u3002\u5bf9\u4e8e\u5176\u4ed6\u4e8c\u5143\u64cd\u4f5c\u7b26\uff0c\u4e24\u4e2a\u64cd\u4f5c\u5143\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u76f8\u540c\u7684\uff0c\u9664\u4e86\u4f4d\u79fb\u548c\u65e0\u7c7b\u578b\u5e38\u91cf\u3002\u9488\u5bf9\u5e38\u91cf\u7684\u64cd\u4f5c\uff0c\u8bf7\u770b\u5e38\u91cf\u8868\u8fbe\u5f0f\u7ae0\u8282\u3002 \u9664\u4e86\u4f4d\u79fb\u64cd\u4f5c\uff0c\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u64cd\u4f5c\u7b26\u662f\u65e0\u7c7b\u578b\u5e38\u91cf\uff0c\u800c\u53e6\u4e2a\u4e0d\u662f\uff0c\u90a3\u4e48\u65e0\u7c7b\u578b\u7684\u5e38\u91cf\u4f1a\u8f6c\u6362\u6210\u53e6\u4e00\u4e2a\u8fd0\u7b97\u5143\u7684\u7c7b\u578b\u3002 \u5728\u53f3\u79fb\u8868\u8fbe\u5f0f\u4e2d\u7684\u8fd0\u7b97\u5143\u5fc5\u987b\u662f\u65e0\u7b26\u53f7\u7684\u6574\u6570\u6216\u8005\u53ef\u4ee5\u8f6c\u6362\u6210 uint \u7684\u65e0\u7c7b\u578b\u7684\u5e38\u91cf\u3002\u5982\u679c\u5de6\u79fb\u4e00\u4e2a\u65e0\u7c7b\u578b\u5e38\u91cf\u90a3\u4e48\u7ed3\u679c\u4f9d\u7136\u662f\u65e0\u7c7b\u578b\u7684\u3002\u4ed6\u9996\u5148\u4f1a\u8f6c\u6362\u6210\u6307\u5b9a\u7c7b\u578b\u3002 var s uint = 33 var i = 1<<s // 1 has type int var j int32 = 1<<s // 1 has type int32; j == 0 var k = uint64(1<<s) // 1 has type uint64; k == 1<<33 var m int = 1.0<<s // 1.0 has type int; m == 0 if ints are 32bits in size var n = 1.0<<s == j // 1.0 has type int32; n == true var o = 1<<s == 2<<s // 1 and 2 have type int; o == true if ints are 32bits in size var p = 1<<s == 1<<33 // illegal if ints are 32bits in size: 1 has type int, but 1<<33 overflows int var u = 1.0<<s // illegal: 1.0 has type float64, cannot shift var u1 = 1.0<<s != 0 // illegal: 1.0 has type float64, cannot shift var u2 = 1<<s != 1.0 // illegal: 1 has type float64, cannot shift var v float32 = 1<<s // illegal: 1 has type float32, cannot shift var w int64 = 1.0<<33 // 1.0<<33 is a constant shift expression","title":"\u64cd\u4f5c\u7b26"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_62","text":"\u4e00\u5143\u8fd0\u7b97\u7b26\u62e5\u6709\u6700\u9ad8\u4f18\u5148\u7ea7\u3002++ \u548c -- \u662f\u8bed\u53e5\u800c\u4e0d\u662f\u8868\u8fbe\u5f0f\uff0c\u4ed6\u4eec\u5728\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u4e4b\u5916\u3002\u6240\u4ee5 ( p)++ \u548c p++ \u662f\u4e00\u6837\u7684\u3002 \u4e8c\u5143\u8fd0\u7b97\u7b26\u6709 5 \u4e2a\u4f18\u5148\u7ea7\u3002\u4e58\u6cd5\u8fd0\u7b97\u7b26\u5728\u6700\u9ad8\u7ea7\uff0c\u7d27\u63a5\u7740\u662f\u52a0\u6cd5\u8fd0\u7b97\u7b26\u3002\u6bd4\u8f83\u8fd0\u7b97\u7b26\uff0c&& \u8fd0\u7b97\u7b26\uff0c\u6700\u540e\u662f ||\u3002 Precedence Operator 5 * / % << >> & &^ 4 + - | ^ 3 == != < <= > >= 2 && 1 || \u76f8\u540c\u4f18\u5148\u7ea7\u7684\u4e8c\u5143\u8fd0\u7b97\u7b26\u7684\u6267\u884c\u987a\u5e8f\u662f\u7531\u5de6\u5230\u53f3\u3002\u4f8b\u5982 x/y*z \u548c (x/y)*z \u662f\u4e00\u6837\u7684\u3002 +x 23 + 3*x[i] x <= f() ^a >> b f() || g() x == y+1 && <-chanPtr > 0","title":"\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_63","text":"\u7b97\u6570\u8fd0\u7b97\u7b26\u5e94\u7528\u5728 2 \u4e2a\u6570\u5b57\u503c\u4e4b\u95f4\uff0c\u522b\u5207\u751f\u6210\u4e00\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u503c\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u8fd0\u7b97\u5143\u3002\u56db\u79cd\u7b97\u6570\u8fd0\u7b97\u7b26(+,-,*,/)\u5e94\u7528\u5728\u6570\u5b57\uff0c\u6d6e\u70b9\uff0c\u590d\u5408\u7c7b\u578b\u4e4b\u4e2d\u3002+ \u4e5f\u53ef\u4ee5\u7528\u4e8e\u5b57\u7b26\u4e32\u3002\u4f4d\u8fd0\u7b97\u548c\u4f4d\u79fb\u8fd0\u7b97\u53ea\u9002\u7528\u4e8e\u6574\u6570\u3002 + sum integers, floats, complex values, strings - difference integers, floats, complex values * product integers, floats, complex values / quotient integers, floats, complex values % remainder integers & bitwise AND integers | bitwise OR integers ^ bitwise XOR integers &^ bit clear (AND NOT) integers << left shift integer << unsigned integer >> right shift integer >> unsigned integer","title":"\u7b97\u6570\u8fd0\u7b97\u7b26"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_64","text":"\u5bf9\u4e8e\u4e24\u4e2a\u6574\u6570 x \u548c y\u3002\u6574\u6570\u5546 q=x/y \u548c\u4f59\u6570 r=x%y \u9075\u5faa\u4ee5\u4e0b\u89c4\u5f8b\u3002 x = q*y + r and |r| < |y| x/y \u622a\u65ad\u4e3a 0\u3002 x y x / y x % y 5 3 1 2 -5 3 -1 -2 5 -3 -1 2 -5 -3 1 -2 \u4f5c\u4e3a\u8fd9\u4e2a\u89c4\u5219\u7684\u4f8b\u5916\u60c5\u51b5\uff0c\u5982\u679c x \u975e\u5e38\u5927\uff0c\u90a3\u4e48 q=x/-1 \u7b49\u4e8e x\u3002 x, q int8 -128 int16 -32768 int32 -2147483648 int64 -9223372036854775808 \u5982\u679c\u9664\u6570\u662f\u4e00\u4e2a\u5e38\u91cf\u3002\u90a3\u4e48\u5b83\u4e0d\u80fd\u662f 0\uff0c\u5982\u679c\u9664\u6570\u5728\u8fd0\u884c\u65f6\u4e3a 0\uff0c\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u6050\u614c\u3002\u5982\u679c\u9664\u6570\u662f\u8d1f\u6570\u5e76\u4e14\u9664\u6570\u662f\uff1a x x / 4 x % 4 x >> 2 x & 3 11 2 3 2 3 -11 -2 -3 -3 1 \u4f4d\u79fb\u8fd0\u7b97\u7b26\u79fb\u52a8\u5de6\u4fa7\u8fd0\u7b97\u5143\u53f3\u4fa7\u5143\u7b97\u5143\u6307\u5b9a\u7684\u4f4d\u6570\u3002\u5982\u679c\u5de6\u4fa7\u662f\u6709\u7b26\u53f7\u6574\u578b\uff0c\u90a3\u5b83\u5c31\u5b9e\u73b0\u4e86\u4f4d\u79fb\u8fd0\u7b97\uff0c\u5982\u679c\u662f\u65e0\u7b26\u53f7\u6574\u6570\u4f7f\u7528\u903b\u8f91\u4f4d\u79fb\u3002\u4f4d\u79fb\u8fd0\u7b97\u6ca1\u6709\u4e0a\u9650\uff0c\u4f4d\u79fb\u64cd\u4f5c\u8ba9\u5de6\u8fb9\u8fd0\u7b97\u5143\u4f4d\u79fb n \u4e2a 1\u3002 x<<1 \u548c x*2 \u662f\u76f8\u7b49\u7684\u3002\u5e76\u4e14 x>>1 \u548c x/2 \u662f\u76f8\u540c\u7684\u3002 \u5bf9\u4e8e\u6574\u6570\u8fd0\u7b97\u5143\uff0c\u4e00\u5143\u8fd0\u7b97\u7b26+-^\u5b9a\u4e49\u5982\u4e0b\uff1a +x is 0 + x -x negation is 0 - x ^x bitwise complement is m ^ x with m = \"all bits set to 1\" for unsigned x and m = -1 for signed x","title":"\u6570\u5b57\u8fd0\u7b97\u7b26"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_65","text":"\u5bf9\u4e8e\u65e0\u7b26\u53f7\u7684\u503c\uff0c\u8fd0\u7b97\u7b26+-*\u548c<<\u90fd\u662f2\u7981\u6b62\u8fd0\u7b97\u3002\u8fd9\u91cc\u7684n\u662f\u65e0\u7b26\u53f7\u7c7b\u578b\u7684\u5bbd\u5ea6\uff0c\u65e0\u7b26\u53f7\u6574\u578b\u5c06\u4f1a\u4e22\u5f03\u6ea2\u51fa\u7684\u4f4d\uff0c\u5e76\u4e14\u7a0b\u5e8f\u5c06\u4f1a\u8fd4\u56de wrap around \u3002 \u5bf9\u4e8e\u6709\u7b26\u53f7\u7684\u6574\u6570\uff0c\u64cd\u4f5c\u7b26+=*<<\u90fd\u4f1a\u6ea2\u51fa\u5e76\u4e14\u503c\u5b58\u5728\uff0c\u5e76\u4e14\u4ee3\u8868\u76f8\u5e94\u7684\u6709\u7b26\u53f7\u7684\u503c\u3002\u5728\u8fd0\u7b97\u65f6\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u6807\u4e00\u8d77\u4e0d\u4f1a\u62a5\u9519\u3002\u6240\u4ee5\u4e0d\u662f\u6240\u6709\u60c5\u51b5\u4e0bx<x+1\u90fd\u6210\u7acb\u3002","title":"\u6574\u578b\u6ea2\u51fa"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_66","text":"\u5bf9\u4e8e\u6d6e\u70b9\u6570\u548c\u5176\u4ed6\u590d\u6742\u6570\u5b57\uff0c+x\u548cx\u662f\u4e00\u6837\u7684\uff0c-x\u662fx\u7684\u5bf9\u7acb\u9762\u3002\u9664\u4e86IEEE-754\u8fd8\u6ca1\u6709\u6307\u5b9a\u6d6e\u70b9\u6570\u96640\u6216\u8005\u590d\u6570\u7684\u7ed3\u679c\u3002\u662f\u5426\u629b\u51fa\u5f02\u5e38\u5c06\u4f1a\u4f9d\u8d56\u5176\u5177\u4f53\u5b9e\u73b0\u3002 \u4e00\u79cd\u5b9e\u73b0\u53ef\u4ee5\u5408\u5e76\u591a\u4e2a\u6d6e\u70b9\u64cd\u4f5c\u8fdb\u4e00\u4e2a\u64cd\u4f5c\uff0c\u6709\u53ef\u80fd\u662f\u5938\u8bed\u53e5\u7684\uff0c\u5e76\u4e14\u4ed6\u7684\u7ed3\u679c\u53ef\u80fd\u548c\u4f9d\u6b21\u5355\u72ec\u6267\u884c\u7684\u7ed3\u679c\u4e0d\u4e00\u6837\u30021\u4e2a\u6d6e\u70b9\u6570\u7c7b\u578b\u5c06\u4f1a\u8f6c\u53d8\u6210\u76ee\u6807\u7684\u7cbe\u5ea6\uff0c\u9632\u6b62\u56db\u820d\u4e94\u5165\u7684\u878d\u5408\u3002 // FMA allowed for computing r, because x*y is not explicitly rounded: r = x*y + z r = z; r += x*y t = x*y; r = t + z *p = x*y; r = *p + z r = x*y + float64(z) // FMA disallowed for computing r, because it would omit rounding of x*y: r = float64(x*y) + z r = z; r += float64(x*y) t = float64(x*y); r = t + z","title":"\u6d6e\u70b9\u6570\u8fd0\u7b97\u7b26"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_67","text":"\u5b57\u7b26\u4e32\u53ef\u4ee5\u4f7f\u7528+\u548c+=\u64cd\u4f5c\u7b26\u3002 s := \"hi\" + string(c) s += \" and good bye\" \u5b57\u7b26\u4e32\u60f3\u5bb6\u5c06\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u3002","title":"\u5b57\u7b26\u4e32"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_68","text":"\u6bd4\u8f83\u8fd0\u7b97\u7b26\u6bd4\u8f83\u8fde\u4e2a\u8fd0\u7b97\u5143\uff0c\u5e76\u4e14\u751f\u6210\u4e00\u4e2a\u65e0\u7c7b\u578b\u7684\u5e03\u5c14\u503c\u3002 == equal != not equal < less <= less or equal > greater >= greater or equal \u5728\u4efb\u4f55\u6bd4\u8f83\u8fd0\u7b97\u5143\u4e2d2\u79cd\u7c7b\u578b\u5fc5\u987b\u662f\u53ef\u4ee5\u5206\u914d\u7684\u3002 \u4f7f\u7528\u7b49\u4e8e\u8fd0\u7b97\u7b26 == \u548c != \u7684\u8fd0\u7b97\u5143\u5fc5\u987b\u662f\u53ef\u6bd4\u8f83\u7684\u3002\u4f7f\u7528\u987a\u5e8f\u8fd0\u7b97\u7b26 < , <= , > \u548c >= \u5fc5\u987b\u662f\u53ef\u6bd4\u8f83\u7684\u3002\u8fd9\u4e9b\u9650\u5236\u5bfc\u81f4\u6bd4\u8f83\u8fd0\u7b97\u7b26\u88ab\u5b9a\u4e49\u6210\u4ee5\u4e0b\u7684\u65b9\u5f0f\u3002 \u5e03\u5c14\u503c\u662f\u53ef\u6bd4\u8f83\u7684\uff0c\u4e24\u4e2a\u5e03\u5c14\u503c\u5f53\u4ed6\u4eec\u540c\u4e3a true \u6216\u8005false\u7684\u4f7f\u7528\u662f\u76f8\u7b49\u7684 \u6574\u6570\u503c\u662f\u53ef\u6bd4\u8f83\u548c\u6392\u5e8f\u7684 \u6d6e\u70b9\u6570\u662f\u53ef\u6bd4\u8f83\u548c\u6392\u5e8f\u7684\uff0c\u5177\u4f53\u5b9a\u4e49\u5728IEEE-754\u6807\u51c6\u4e2d\u3002 \u590d\u6570\u662f\u53ef\u6bd4\u8f83\u7684\uff0c2\u4e2a\u590d\u6570\u5f53\u5b9e\u90e8\u548c\u865a\u90e8\u90fd\u76f8\u7b49\u65f6\u5c31\u662f\u76f8\u7b49\u7684\u3002 \u5b57\u7b26\u4e32\u662f\u53ef\u4ee5\u6bd4\u8f83\u548c\u6392\u5e8f\u7684\u3002\u662f\u6309\u7167\u5b57\u8282\u987a\u5e8f\u6392\u5e8f\u3002 \u6307\u9488\u5f0f\u53ef\u4ee5\u6392\u5e8f\u7684\uff0c\u8fde\u4e2a\u6307\u9488\u5f53\u6307\u5411\u76f8\u540c\u53d8\u91cf\u65f6\u662f\u76f8\u540c\u7684\uff0c\u6216\u8005\u4ed6\u4eec2\u4e2a\u90fd\u662fnil\u3002\u6307\u5411\u4e00\u4e2a\u4e3a\u975e\u914d\u7684\u53d8\u91cf\u7684\u7ed3\u679c\u662f\u672a\u5b9a\u4e49\u7684\u3002 channel\u662f\u53ef\u6bd4\u8f83\u7684\u3002\u5f53\u4e24\u4e2a\u7ba1\u9053\u662f\u7528\u540c\u4e00\u4e2amake\u51fa\u6765\u7684\uff0c\u6216\u8005\u90fd\u662fnil\u65f6\u65f6\u76f8\u7b49\u7684\u3002 \u63a5\u53e3\u503c\u65f6\u53ef\u4ee5\u6bd4\u8f83\u7684\uff0c2\u4e2a\u63a5\u53e3\u503c\u65f6\u76f8\u7b49\u7684\u5982\u679c2\u4e2a\u6807\u8bc6\u7b26\u7684\u52a8\u6001\u7c7b\u578b\u662f\u4e00\u6837\u7684\u6216\u8005\u4ed6\u4eec\u90fd\u662fnil\u3002 \u4e00\u4e2a\u975e\u63a5\u53e3\u7c7b\u578b\u7684\u503cx\u548c\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u503cT\u5728\u975e\u63a5\u53e3\u7c7b\u578b\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\u5e76\u4e14\u975e\u63a5\u53e3\u7c7b\u578b\u5b9e\u73b0\u4e86\u63a5\u53e3\u662f\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\u3002\u5f53\u4ed6\u4eec\u7684\u52a8\u6001\u7c7b\u578b\u7c7b\u578b\u76f8\u540c\u65f6\u65f6\u76f8\u7b49\u7684\u3002 \u5f53\u7ed3\u6784\u4f53\u5185\u7684\u6240\u6709\u5b57\u6bb5\u90fd\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\u65f6\u5019\uff0c\u4ed6\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\u3002\u8fde\u4e2a\u7ed3\u6784\u4f53\u7684\u503c\u5f53\u975e\u7a7a\u5b57\u6bb5\u90fd\u76f8\u7b49\u65f6\u4ed6\u4eec\u662f\u76f8\u7b49\u7684\u3002 \u6570\u7ec4\u7c7b\u578b\u7684\u503c\u65f6\u53ef\u6bd4\u8f83\u7684\uff0c\u5982\u679c\u6570\u7ec4\u7684\u539f\u5c5e\u65f6\u53ef\u4ee5\u6bd4\u8f83\u7684\uff0c\u90a3\u4e48\u5f53\u6570\u7ec4\u7684\u6240\u6709\u503c\u662f\u76f8\u7b49\u7684\u65f6\u5019\u4ed6\u4eec\u5c31\u662f\u76f8\u7b49\u7684\u3002 \u4f7f\u7528\u4e24\u4e2a\u52a8\u6001\u7c7b\u578b\u7684\u6807\u8bc6\u7b26\u6765\u6bd4\u8f83\u63a5\u53e3\u7684\u503c\u3002\u5982\u679c\u8fd9\u4e2a\u7c7b\u578b\u7684\u503c\u65f6\u4e0d\u53ef\u6bd4\u8f83\u7684\uff0c\u90a3\u4e48\u5c06\u4f1a\u5f15\u8d77\u4e00\u4e2apanic\u3002\u8fd9\u4e2a\u884c\u4e3a\u4e0d\u4ec5\u4ec5\u65f6\u63a5\u53e3\uff0c\u6570\u7ec4\u7ed3\u6784\u4f53\u63a5\u53e3\u5b57\u6bb5\u90fd\u6709\u8fd9\u4e2a\u95ee\u9898\u3002 \u5207\u7247\uff0cmap\uff0c\u548c\u51fd\u6570\u503c\u90fd\u662f\u4e0d\u53ef\u6bd4\u8f83\u7684\uff0c\u7136\u800c\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u7279\u6b8a\u7684\u4f8b\u5b50\uff0c\u5207\u7247\uff0cmap\u548c\u51fd\u6570\u7684\u503c\u7684nil\u65f6\u53ef\u4ee5\u6bd4\u8f83\u7684\uff0c\u6307\u9488\uff0cchannel\u548c\u63a5\u53e3\u7684\u503cnil\u4e5f\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\u3002 const c = 3 < 4 // c is the untyped boolean constant true type MyBool bool var x, y int var ( // The result of a comparison is an untyped boolean. // The usual assignment rules apply. b3 = x == y // b3 has type bool b4 bool = x == y // b4 has type bool b5 MyBool = x == y // b5 has type MyBool )","title":"\u6bd4\u8f83\u8fd0\u7b97\u7b26"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_69","text":"\u903b\u8f91\u8fd0\u7b97\u7b26\u4f7f\u7528\u5e03\u5c14\u503c\u503c\uff0c\u5e76\u4e14\u751f\u6210\u4e00\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u7ed3\u679c\u503c\u4f5c\u4e3a\u64cd\u4f5c\u5143\u3002\u53f3\u9762\u7684\u64cd\u4f5c\u5143\u8ba1\u7b97\u662f\u6709\u6761\u4ef6\u7684\u3002 && conditional AND p && q is \"if p then q else false\" || conditional OR p || q is \"if p then true else q\" ! NOT !p is \"not p\"","title":"\u903b\u8f91\u64cd\u4f5c\u7b26"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_70","text":"\u4ee5\u7c7b\u578b T \u7684 x \u4f5c\u4e3a\u8fd0\u7b97\u5143\uff0c\u53d6\u5740\u64cd\u4f5c &x \u4f1a\u751f\u6210\u4e00\u4e2a\u7c7b\u578b\u4e3a *T \u5e76\u6307\u5411 x \u7684\u6307\u9488\u3002\u8fd0\u7b97\u5143\u5fc5\u987b\u662f\u80fd\u591f\u53d6\u5740\u7684\uff0c\u5b83\u53ef\u4ee5\u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u6307\u9488\uff0c\u5207\u7247\u7684\u53d6\u503c\u64cd\u4f5c\uff1b\u6216\u662f\u4e00\u4e2a\u53ef\u53d6\u5740\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u9009\u62e9\u5668\uff1b\u6216\u662f\u5bf9\u4e8e\u53ef\u53d6\u5740\u6570\u7ec4\u7684\u7d22\u5f15\u53d6\u503c\u64cd\u4f5c\u3002\u4f5c\u4e3a\u5bfb\u5740\u80fd\u529b\u7684\u4f8b\u5916\uff0cx \u53ef\u80fd\u662f\u4e00\u4e2a\u590d\u5408\u5b57\u9762\u503c\u3002\u5982\u679c\u5bf9 x \u8fdb\u884c\u53d6\u5740\u64cd\u4f5c\u5c06\u4f1a panic\uff0c &x \u4e5f\u4f1a panic\u3002 \u5bf9\u4e8e\u4e00\u4e2a *T \u7c7b\u578b\u7684\u8fd0\u7b97\u5143 x\uff0c\u6307\u9488\u89e3\u5f15\u7528 *x \u8868\u793a x \u6307\u5411\u7684 T \u7c7b\u578b\u3002\u5982\u679c x \u4e3a nil\uff0c\u90a3\u4e48\u89e3\u5f15\u7528 *x \u4f1a panic\u3002 &x &a[f(2)] &Point{2, 3} *p *pf(x) var x *int = nil *x // causes a run-time panic &*x // causes a run-time panic","title":"\u5730\u5740\u64cd\u4f5c\u7b26"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_71","text":"\u5bf9\u4e8e\u7ba1\u9053\u7c7b\u578b\u7684\u8fd0\u7b97\u5143 ch \uff0c\u63a5\u6536\u64cd\u4f5c <-ch \u8fd4\u56de\u503c\u662f\u7ba1\u9053 ch \u63a5\u6536\u5230\u7684\u503c\u3002\u5e26\u65b9\u5411\u7684\u7ba1\u9053\u9700\u8981\u6709\u63a5\u53d7\u6743\u9650\uff0c\u63a5\u6536\u64cd\u4f5c\u7684\u7c7b\u578b\u4e5f\u662f\u901a\u9053\u7684\u5143\u7d20\u7c7b\u578b\u3002\u8868\u8fbe\u5f0f\u4f1a\u4e00\u76f4\u963b\u585e\u76f4\u5230\u63a5\u6536\u5230\u8fd4\u56de\u503c\u3002\u4ece nil \u901a\u9053\u63a5\u6536\u503c\u4f1a\u4e00\u76f4\u963b\u585e\u3002\u4ece\u4e00\u4e2a\u5df2\u7ecf\u5173\u95ed\u7684\u901a\u9053\u63a5\u6536\u6570\u636e\u4f1a\u5728\u5176\u4ed6\u6570\u636e\u90fd\u88ab\u63a5\u6536\u4ee5\u540e\u751f\u6210\u8be5\u901a\u9053\u5143\u7d20\u7c7b\u578b\u7684\u96f6\u503c\u3002 v1 := <-ch v2 = <-ch f(<-ch) <-strobe // wait until clock pulse and discard received value \u63a5\u6536\u6570\u636e\u7684\u8868\u8fbe\u5f0f\u53ef\u4ee5\u4f7f\u7528\u8d4b\u503c\u8868\u8fbe\u5f0f\u3002 x, ok = <-ch x, ok := <-ch var x, ok = <-ch var x, ok T = <-ch \u5b83\u8fd8\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u989d\u5916\u7684\u65e0\u7c7b\u578b\u5e03\u5c14\u503c\u6765\u8868\u793a\u901a\u9053\u662f\u5426\u5173\u95ed\u3002\u5982\u679c ok \u4e3a true \u8bf4\u660e\u83b7\u53d6\u5230\u7684\u662f\u53d1\u9001\u5230\u901a\u9053\u5185\u7684\u6570\u636e\uff0c\u800c false \u5b83\u5c31\u8fd4\u56de\u4e00\u4e2a\u96f6\u503c\u56e0\u4e3a\u901a\u9053\u5185\u6ca1\u6709\u5143\u7d20\u4e14\u5df2\u7ecf\u5173\u95ed\u3002","title":"\u63a5\u6536\u64cd\u4f5c\u7b26"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_72","text":"\u7c7b\u578b\u8f6c\u6362\u8868\u8fbe\u5f0f T(x) \u5176\u4e2d T \u4ee3\u8868\u7c7b\u578b\uff0cx \u4ee3\u8868\u53ef\u4ee5\u8f6c\u6362\u6210 T \u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u3002 Conversion = Type \"(\" Expression [ \",\" ] \")\" . \u5982\u679c\u7c7b\u578b\u662f\u4ee5 * \u6216 <- \u5f00\u5934\uff0c\u6216\u4ee5\u5173\u952e\u5b57 func \u5f00\u5934\u5e76\u4e14\u6ca1\u6709\u8fd4\u56de\u503c\u5217\u8868\uff0c\u90a3\u4e48\u5b83\u5fc5\u987b\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u907f\u514d\u6b67\u4e49\uff1a *Point(p) // same as *(Point(p)) (*Point)(p) // p is converted to *Point <-chan int(c) // same as <-(chan int(c)) (<-chan int)(c) // c is converted to <-chan int func()(x) // function signature func() x (func())(x) // x is converted to func() (func() int)(x) // x is converted to func() int func() int(x) // x is converted to func() int (unambiguous) \u5e38\u91cf x \u53ef\u4ee5\u5728\u53ef\u4ee5\u7528\u7c7b\u578b T \u8868\u793a\u65f6\u81ea\u52a8\u8f6c\u6362\u3002\u4f5c\u4e3a\u4e00\u4e2a\u7279\u4f8b\uff0c\u6574\u6570\u5e38\u91cf x \u53ef\u4ee5\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u7c7b\u578b\u5c31\u548c\u975e\u5e38\u91cf x \u4e00\u6837\u3002 \u5bf9\u5e38\u91cf\u7684\u8f6c\u6362\u4f1a\u751f\u6210\u4e00\u4e2a\u6307\u5b9a\u7c7b\u578b\u7684\u5e38\u91cf\u3002 uint(iota) // iota value of type uint float32(2.718281828) // 2.718281828 of type float32 complex128(1) // 1.0 + 0.0i of type complex128 float32(0.49999999) // 0.5 of type float32 float64(-1e-1000) // 0.0 of type float64 string('x') // \"x\" of type string string(0x266c) // \"\u266c\" of type string MyString(\"foo\" + \"bar\") // \"foobar\" of type MyString string([]byte{'a'}) // not a constant: []byte{'a'} is not a constant (*int)(nil) // not a constant: nil is not a constant, *int is not a boolean, numeric, or string type int(1.2) // illegal: 1.2 cannot be represented as an int string(65.0) // illegal: 65.0 is not an integer constant \u975e\u5e38\u91cf x \u53ef\u4ee5\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u8f6c\u6362\u6210\u7c7b\u578b T\uff1a x \u53ef\u4ee5\u7ed9\u7c7b\u578b T \u8d4b\u503c \u5ffd\u7565\u7684\u7ed3\u6784\u4f53\u6807\u7b7e\uff0cx \u7684\u7c7b\u578b\u548c T \u5177\u6709\u76f8\u540c\u7684\u5e95\u5c42\u7c7b\u578b \u5ffd\u7565\u7684\u7ed3\u6784\u4f53\u6807\u7b7e\uff0cx \u7684\u7c7b\u578b\u548c T \u90fd\u662f\u6307\u9488\u7c7b\u578b\uff0c\u5e76\u4e14\u6307\u9488\u6240\u6307\u7684\u7c7b\u578b\u5177\u6709\u76f8\u540c\u7684\u5e95\u5c42\u7c7b\u578b x \u7684\u7c7b\u578b\u548c T \u90fd\u662f\u6574\u6570\u6216\u8005\u6d6e\u70b9\u6570\u7c7b\u578b x \u7684\u7c7b\u578b\u548c T \u90fd\u662f\u590d\u6570\u7c7b\u578b x \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u800c T \u65f6\u5b57\u8282\u5207\u7247\u6216\u8005 rune \u5207\u7247 \u5728\u6bd4\u8f83\u4e24\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u65f6\u5019\u4f1a\u5ffd\u7565\u7ed3\u6784\u4f53\u6807\u7b7e\uff1a type Person struct { Name string Address *struct { Street string City string } } var data *struct { Name string `json:\"name\"` Address *struct { Street string `json:\"street\"` City string `json:\"city\"` } `json:\"address\"` } var person = (*Person)(data) // ignoring tags, the underlying types are identical \u8fd9\u4e2a\u89c4\u5219\u4e5f\u9002\u7528\u4e8e\u6570\u5b57\u7c7b\u578b\u4e0e\u5b57\u7b26\u4e32\u7c7b\u578b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\u3002\u8fd9\u4e2a\u8f6c\u6362\u53ef\u80fd\u4f1a\u6539\u53d8 x \u7684\u503c\u5e76\u4e14\u4f1a\u589e\u52a0\u8fd0\u884c\u65f6\u6d88\u8017\u3002\u5305 unsafe \u5b9e\u73b0\u4e86\u8fd9\u4e2a\u529f\u80fd\u5e95\u5c42\u7684\u9650\u5236\u3002","title":"\u7c7b\u578b\u8f6c\u6362"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_73","text":"\u5bf9\u4e8e\u975e\u5e38\u91cf\u7684\u6570\u5b57\u8f6c\u6362\uff0c\u9700\u8981\u9075\u5b88\u4ee5\u4e0b\u89c4\u5219\uff1a \u5728\u8f6c\u6362\u6574\u578b\u6570\u5b57\u65f6\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u6709\u7b26\u53f7\u6574\u578b\uff0c\u5b83\u662f\u7ee7\u627f\u6709\u7b26\u53f7\u7684\u65e0\u9650\u7cbe\u5ea6\uff1b\u5426\u5219\u5c31\u4e0d\u7528\u7ee7\u627f\u7b26\u53f7\u3002\u8f6c\u6362\u65f6\u4f1a\u622a\u65ad\u6570\u5b57\u4ee5\u9002\u5e94\u7c7b\u578b\u7684\u5927\u5c0f\u3002\u4f8b\u5982\uff1a\u5982\u679c v:=uint16(0x10F0) \uff0c\u7136\u540e ``uint32(int8(v)) == 0xFFFFFFF0 \u3002\u7c7b\u578b\u8f6c\u6362\u603b\u662f\u751f\u6210\u6709\u6548\u503c\uff0c\u5e76\u4e14\u6c38\u8fdc\u4e0d\u4f1a\u6ea2\u51fa\u3002 \u5982\u679c\u8981\u5c06\u6d6e\u70b9\u6570\u8f6c\u6362\u6210\u6574\u578b\uff0c\u4f1a\u4e22\u5f03\u5c0f\u6570\u90e8\u5206\uff08\u622a\u65ad\u4e3a\u96f6\uff09\u3002 \u5982\u679c\u8981\u5c06\u6574\u578b\u6216\u6d6e\u70b9\u578b\u8f6c\u6362\u6210\u6d6e\u70b9\u6570\u7c7b\u578b\uff0c\u6216\u6216\u8005\u4e00\u4e2a\u590d\u6570\u8f6c\u6362\u6210\u5176\u4ed6\u590d\u6570\u7c7b\u578b\uff0c\u7ed3\u679c\u4f1a\u56db\u820d\u4e94\u5165\u6210\u6307\u5b9a\u7cbe\u5ea6\u3002\u4f8b\u5982\uff1a \u53ef\u4ee5\u4f7f\u7528\u8d85\u51faIEEE-754 32\u4f4d\u6570\u7684\u9644\u52a0\u7cbe\u5ea6\u6765\u5b58\u50a8float32\u7c7b\u578b\u7684\u53d8\u91cfx\u7684\u503c\uff0c\u4f46float32\uff08x\uff09\u8868\u793a\u5c06x\u7684\u503c\u820d\u5165\u4e3a32\u4f4d\u7cbe\u5ea6\u7684\u7ed3\u679c\u3002x + 0.1 \u4f1a\u4f7f\u7528\u8d85\u8fc7 32 \u4f4d\u7684\u7cbe\u5ea6\uff0c\u800c float32(x+0.1) \u4e0d\u4f1a\u3002 \u5728\u6240\u6709\u6d6e\u70b9\u6570\u548c\u590d\u6570\u7684\u975e\u5e38\u91cf\u8f6c\u6362\u4e2d\uff0c\u5982\u679c\u7ed3\u6784\u7c7b\u578b\u4e0d\u80fd\u6210\u529f\u8868\u793a\u6570\u636e\uff0c\u90a3\u4e48\u7ed3\u679c\u5c06\u4f1a\u4f9d\u8d56\u4e8e\u5177\u4f53\u5e73\u53f0\u5b9e\u73b0\u3002","title":"\u6570\u5b57\u4e4b\u95f4\u7684\u8f6c\u6362"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_74","text":"\u8f6c\u6362\u4e00\u4e2a\u6709\u7b26\u53f7\u6216\u8005\u65e0\u7b26\u53f7\u7684\u6574\u578b\u503c\u4f1a\u8f6c\u6362\u6210\u5bf9\u5e94\u7684 UTF-8 \u8868\u793a\u6574\u578b\u503c\u3002\u4e0d\u5728\u8303\u56f4\u5185\u7684 Unicode \u4ee3\u7801\u70b9\u4f1a\u8f6c\u6362\u6210 \"\\uFFFD\"\u3002 string('a') // \"a\" string(-1) // \"\\ufffd\" == \"\\xef\\xbf\\xbd\" string(0xf8) // \"\\u00f8\" == \"\u00f8\" == \"\\xc3\\xb8\" type MyString string MyString(0x65e5) // \"\\u65e5\" == \"\u65e5\" == \"\\xe6\\x97\\xa5\" \u5c06\u5b57\u8282\u5207\u7247\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u7c7b\u578b\u4f1a\u751f\u6210\u4e00\u4e2a\u7531\u5207\u7247\u5143\u7d20\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 string([]byte{'h', 'e', 'l', 'l', '\\xc3', '\\xb8'}) // \"hell\u00f8\" string([]byte{}) // \"\" string([]byte(nil)) // \"\" type MyBytes []byte string(MyBytes{'h', 'e', 'l', 'l', '\\xc3', '\\xb8'}) // \"hell\u00f8\" \u5c06 rune \u5207\u7247\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u7c7b\u578b\u4f1a\u751f\u6210\u4e00\u4e2a\u7531\u5207\u7247\u5143\u7d20\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 string([]rune{0x767d, 0x9d6c, 0x7fd4}) // \"\\u767d\\u9d6c\\u7fd4\" == \"\u767d\u9d6c\u7fd4\" string([]rune{}) // \"\" string([]rune(nil)) // \"\" type MyRunes []rune string(MyRunes{0x767d, 0x9d6c, 0x7fd4}) // \"\\u767d\\u9d6c\\u7fd4\" == \"\u767d\u9d6c\u7fd4\" \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5b57\u8282\u5207\u7247\u4f1a\u751f\u6210\u7531\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5b57\u8282\u7ec4\u6210\u7684\u5207\u7247 []byte(\"hell\u00f8\") // []byte{'h', 'e', 'l', 'l', '\\xc3', '\\xb8'} []byte(\"\") // []byte{} MyBytes(\"hell\u00f8\") // []byte{'h', 'e', 'l', 'l', '\\xc3', '\\xb8'} \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210 rune \u5207\u7247\u4f1a\u751f\u6210\u7531\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a Unicode \u4ee3\u7801\u70b9\u7ec4\u6210\u7684\u5207\u7247 []rune(MyString(\"\u767d\u9d6c\u7fd4\")) // []rune{0x767d, 0x9d6c, 0x7fd4} []rune(\"\") // []rune{} MyRunes(\"\u767d\u9d6c\u7fd4\") // []rune{0x767d, 0x9d6c, 0x7fd4}","title":"\u5b57\u7b26\u4e32\u7684\u7c7b\u578b\u8f6c\u6362"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_75","text":"\u5e38\u91cf\u8868\u8fbe\u5f0f\u53ea\u5305\u542b\u5e38\u91cf\u8fd0\u7b97\u5143\u5e76\u4e14\u5728\u7f16\u8bd1\u7a0b\u5e8f\u65f6\u5c31\u5df2\u7ecf\u8ba1\u7b97\u5b8c\u6210\u3002 \u65e0\u7c7b\u578b\u5e03\u5c14\u503c\uff0c\u6570\u503c\u548c\u5b57\u7b26\u4e32\u5e38\u91cf\u90fd\u53ef\u4ee5\u5f53\u4f5c\u8fd0\u7b97\u5143\u3002\u9664\u4e86\u4f4d\u7f6e\u64cd\u4f5c\u7b26\uff0c\u5982\u679c\u4e8c\u5143\u8fd0\u7b97\u7b26\u77f3\u4e0d\u540c\u7c7b\u578b\u7684\u5e38\u91cf\uff0c\u64cd\u4f5c\u5143\uff0c\u548c\u975e\u5e03\u5c14\u503c\uff0c\u548c\u5373\u5c06\u5728\u63a5\u4e0b\u6765\u51fa\u73b0\u7684\uff1a\u6574\u578b\uff0crune\uff0c\u6d6e\u70b9\u6570\u548c\u590d\u6570\u7c7b\u578b\u3002\u4f8b\u5982\uff1a\u4e00\u4e2a\u65e0\u7c7b\u578b\u6574\u578b\u5e38\u91cf\u51cf\u53bb\u65e0\u7c7b\u578b\u590d\u6570\u5e38\u91cf\uff0c\u7ed3\u679c\u4e3a\u590d\u6570\u5e38\u91cf\u3002 \u4e00\u4e2a\u5e38\u91cf\u7684\u6bd4\u8f83\u8fd0\u7b97\u4f1a\u751f\u6210\u65e0\u7c7b\u578b\u7684\u5e03\u5c14\u5e38\u91cf\u3002\u5982\u679c\u5de6\u79fb\u8fd0\u7b97\u662f\u4e00\u4e2a\u65e0\u7c7b\u578b\u5e38\u91cf\uff0c\u7ed3\u679c\u4f1a\u662f\u4e00\u4e2a\u6574\u578b\u5e38\u91cf\u3002\u5b83\u4f1a\u548c\u539f\u6765\u5e38\u91cf\u4e3a\u76f8\u540c\u7c7b\u578b\u3002\u5176\u4ed6\u4e0e\u65e0\u7c7b\u578b\u5e38\u91cf\u7684\u8fd0\u7b97\u90fd\u4f1a\u751f\u6210\u76f8\u540c\u7c7b\u578b\u7684\u7ed3\u679c\uff08\u5e03\u5c14\u503c\uff0c\u6574\u578b\uff0c\u6d6e\u70b9\u6570\uff0c\u590d\u6570\uff0c\u5b57\u7b26\u4e32\u5e38\u91cf\uff09\u3002 const a = 2 + 3.0 // a == 5.0 (untyped floating-point constant) const b = 15 / 4 // b == 3 (untyped integer constant) const c = 15 / 4.0 // c == 3.75 (untyped floating-point constant) const \u0398 float64 = 3/2 // \u0398 == 1.0 (type float64, 3/2 is integer division) const \u03a0 float64 = 3/2. // \u03a0 == 1.5 (type float64, 3/2. is float division) const d = 1 << 3.0 // d == 8 (untyped integer constant) const e = 1.0 << 3 // e == 8 (untyped integer constant) const f = int32(1) << 33 // illegal (constant 8589934592 overflows int32) const g = float64(2) >> 1 // illegal (float64(2) is a typed floating-point constant) const h = \"foo\" > \"bar\" // h == true (untyped boolean constant) const j = true // j == true (untyped boolean constant) const k = 'w' + 1 // k == 'x' (untyped rune constant) const l = \"hi\" // l == \"hi\" (untyped string constant) const m = string(k) // m == \"x\" (type string) const \u03a3 = 1 - 0.707i // (untyped complex constant) const \u0394 = \u03a3 + 2.0e-4 // (untyped complex constant) const \u03a6 = iota*1i - 1/1i // (untyped complex constant) \u5bf9\u4e00\u4e2a\u65e0\u7c7b\u578b\u6574\u6570\uff0crune\uff0c\u6216\u6d6e\u70b9\u6570\u5e94\u7528\u5185\u7f6e\u7684 complex \u51fd\u6570\u4f1a\u751f\u6210\u65e0\u7c7b\u578b\u7684\u590d\u6570\u5e38\u91cf\u3002 const ic = complex(0, c) // ic == 3.75i (untyped complex constant) const i\u0398 = complex(0, \u0398) // i\u0398 == 1i (type complex128) \u5e38\u91cf\u8868\u8fbe\u5f0f\u603b\u662f\u4e00\u4e2a\u660e\u786e\u7684\u503c\uff1b\u4e2d\u95f4\u503c\u548c\u5e38\u91cf\u81ea\u5df1\u53ef\u4ee5\u6bd4\u8bed\u8a00\u6240\u652f\u6301\u7684\u7cbe\u5ea6\u66f4\u9ad8\uff0c\u4e0b\u9762\u7684\u58f0\u660e\u662f\u5408\u6cd5\u7684\uff1a const Huge = 1 << 100 // Huge == 1267650600228229401496703205376 (untyped integer constant) const Four int8 = Huge >> 98 // Four == 4 (type int8) \u5e38\u91cf\u7684\u9664\u6cd5\u7684\u9664\u6570\u4e0d\u80fd\u4e3a 0: 3.14 / 0.0 // illegal: division by zero \u5b9a\u4e49\u4e86\u7c7b\u578b\u7684\u5e38\u91cf\u7684\u7cbe\u5ea6\u5fc5\u987b\u6839\u636e\u5e38\u91cf\u7c7b\u578b\u5b9a\u4e49\u3002\u6240\u4ee5\u4e0b\u9762\u7684\u5e38\u91cf\u8868\u8fbe\u5f0f\u662f\u975e\u6cd5\u7684\uff1a uint(-1) // -1 cannot be represented as a uint int(3.14) // 3.14 cannot be represented as an int int64(Huge) // 1267650600228229401496703205376 cannot be represented as an int64 Four * 300 // operand 300 cannot be represented as an int8 (type of Four) Four * 100 // product 400 cannot be represented as an int8 (type of Four) \u8865\u7801\u4f7f\u7528\u7684\u4e00\u5143\u64cd\u4f5c\u7b26 ^ \u5bf9\u4e8e\u975e\u5e38\u91cf\u7684\u5339\u914d\u6a21\u5f0f\uff1a\u8865\u7801\u5bf9\u4e8e\u65e0\u7b26\u53f7\u5e38\u91cf\u4e3a 1\uff0c\u5bf9\u4e8e\u6709\u7b26\u53f7\u548c\u65e0\u7c7b\u578b\u5e38\u91cf\u4e3a -1\u3002 ^1 // untyped integer constant, equal to -2 uint8(^1) // illegal: same as uint8(-2), -2 cannot be represented as a uint8 ^uint8(1) // typed uint8 constant, same as 0xFF ^ uint8(1) = uint8(0xFE) int8(^1) // same as int8(-2) ^int8(1) // same as -1 ^ int8(1) = -2 \u5b9e\u73b0\u9650\u5236\uff1a\u7f16\u8bd1\u5668\u5728\u5904\u7406\u65e0\u7c7b\u578b\u6d6e\u70b9\u6570\u548c\u590d\u6570\u65f6\u4f1a\u53d6\u8fd1\u4f3c\u503c\uff1b\u5177\u4f53\u8bf7\u770b\u5e38\u91cf\u7ae0\u8282\u3002\u8fd9\u4e2a\u53d6\u8fd1\u4f3c\u503c\u7684\u64cd\u4f5c\u5728\u6d6e\u70b9\u6570\u5728\u6574\u6570\u4e0a\u4e0b\u6587\u65f6\u4f1a\u4ea7\u751f\u65e0\u6548\u503c\uff0c\u5373\u4f7f\u5728\u8ba1\u7b97\u8fc7\u540e\u662f\u4e00\u4e2a\u6574\u578b\u3002","title":"\u5e38\u91cf\u8868\u8fbe\u5f0f"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_76","text":"\u5728\u5305\u7ea7\u522b\uff0c\u521d\u59cb\u5316\u7684\u4f9d\u8d56\u6027\u7531\u53d8\u91cf\u58f0\u660e\u7684\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u987a\u5e8f\u51b3\u5b9a\u3002\u5426\u5219\uff0c\u5f53\u8ba1\u7b97\u8868\u8fbe\u5f0f\u5185\u7684\u64cd\u4f5c\u6570\u65f6\uff0c\u8d4b\u503c\uff0c\u8fd4\u56de\u8bed\u53e5\uff0c\u6240\u6709\u51fd\u6570\u8c03\u7528\uff0c\u65b9\u6cd5\u8c03\u7528\uff0c\u548c\u901a\u4fe1\u64cd\u4f5c\u90fd\u4f1a\u7531\u5de6\u5411\u53f3\u8ba1\u7b97\u3002 \u4f8b\u5982\uff0c\u5728\u51fd\u6570\u4f5c\u7528\u57df\u4e2d\u7684\u8d4b\u503c\uff1a y[f()], ok = g(h(), i()+x[j()], <-c), k() \u51fd\u6570\u8c03\u7528\u548c\u901a\u4fe1\u7684\u53d1\u751f\u987a\u5e8f\u4e3a\uff1a f() \uff0c h() \uff0c i() \uff0c j() \uff0c <-c \uff0c g() \u548c k() \u3002\u4f46\u662f\u5bf9 y \u548c x \u7684\u53d6\u503c\u64cd\u4f5c\u6ca1\u6709\u6307\u5b9a\u3002 a := 1 f := func() int { a++; return a } x := []int{a, f()} // x may be [1, 2] or [2, 2]: evaluation order between a and f() is not specified m := map[int]int{a: 1, a: 2} // m may be {2: 1} or {2: 2}: evaluation order between the two map assignments is not specified n := map[int]int{a: f()} // n may be {2: 3} or {3: 3}: evaluation order between the key and the value is not specified \u5728\u5305\u7ea7\u522b\uff0c\u4f9d\u8d56\u7684\u521d\u59cb\u5316\u987a\u5e8f\u4f1a\u8986\u76d6\u8fd9\u4e2a\u4ece\u5de6\u5411\u53f3\u7684\u89c4\u5219\uff1a var a, b, c = f() + v(), g(), sqr(u()) + v() func f() int { return c } func g() int { return a } func sqr(x int) int { return x*x } // functions u and v are independent of all other variables and functions","title":"\u8fd0\u7b97\u4f18\u5148\u7ea7"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_77","text":"\u8bed\u53e5\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u3002 Statement = Declaration | LabeledStmt | SimpleStmt | GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt | FallthroughStmt | Block | IfStmt | SwitchStmt | SelectStmt | ForStmt | DeferStmt . SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl .","title":"\u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_78","text":"\u7ec8\u6b62\u8bed\u53e5\u4f1a\u963b\u6b62\u76f8\u540c\u4ee3\u7801\u5757\u4e2d\u4e0b\u9762\u6240\u6709\u8bed\u53e5\u7684\u6267\u884c\u3002\u4ee5\u4e0b\u8bed\u53e5\u5c5e\u4e8e\u7ec8\u6b62\u8bed\u53e5\uff1a return \u548c goto \u8bed\u53e5 \u5bf9\u5185\u7f6e panic \u51fd\u6570\u7684\u8c03\u7528 \u4ee3\u7801\u5757\u7ed3\u675f if \u8bed\u53e5\u4e2d\uff1a else \u5206\u652f \u6240\u6709\u5206\u652f\u672b\u5c3e for \u8bed\u53e5\u4e2d\uff1a break \u8bed\u53e5\u548c\u5faa\u73af\u7ed3\u675f switch \u8bed\u53e5\uff1a \u5728 switch \u8bed\u53e5\u4e2d\u6ca1\u6709 break \u8bed\u53e5\uff0c \u6709\u4e00\u4e2a\u9ed8\u8ba4\u7684 case \u8bed\u53e5\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a case \u8bed\u53e5\u548c\u6709\u53ef\u80fd\u5b58\u5728\u7684 fallthrough \u8bed\u53e5 select \u8bed\u53e5\u4e2d\uff1a \u6ca1\u6709 break \u8bed\u53e5 \u6bcf\u4e2a case \u4e2d\u7684\u8bed\u53e5\u5217\u8868\uff0c\u5982\u679c\u5305\u542b\u9ed8\u8ba4 case \u6240\u6709\u5176\u4ed6\u8bed\u53e5\u90fd\u4e0d\u662f\u4e2d\u65ad\u8bed\u53e5\u3002 \u5982\u679c\u8bed\u53e5\u5e8f\u5217\u4e0d\u4e3a\u7a7a\u5e76\u4e14\u6700\u540e\u4e00\u4e2a\u975e\u7a7a\u8bed\u53e5\u662f\u7ec8\u6b62\u8bed\u53e5\uff0c\u90a3\u4e48\u8bed\u53e5\u5e8f\u5217\u5c31\u4ee5\u7ec8\u7ed3\u8bed\u53e5\u7ed3\u5c3e\u3002","title":"\u7ec8\u6b62\u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_79","text":"\u7a7a\u8bed\u53e5\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002 EmptyStmt = .","title":"\u7a7a\u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_80","text":"\u6807\u7b7e\u8bed\u53e5\u53ef\u4ee5\u4f5c\u4e3a goto \uff0c break \u548c continue \u8bed\u53e5\u7684\u76ee\u6807\u3002 LabeledStmt = Label \":\" Statement . Label = identifier . Error: log.Panic(\"error encountered\")","title":"\u6807\u7b7e\u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_81","text":"\u9664\u4e86\u7279\u5b9a\u7684\u5185\u7f6e\u51fd\u6570\uff0c\u4e00\u822c\u7684\u51fd\u6570\u3001\u65b9\u6cd5\u548c\u63a5\u6536\u64cd\u4f5c\u90fd\u53ef\u4ee5\u51fa\u73b0\u5728\u8868\u8fbe\u5f0f\u8bed\u53e5\u7684\u4e0a\u4e0b\u6587\u4e2d\u3002\u8fd9\u4e9b\u8bed\u53e5\u53ef\u4ee5\u4f7f\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u3002 ExpressionStmt = Expression . \u4e0b\u9762\u7684\u5185\u7f6e\u51fd\u6570\u4e0d\u5141\u8bb8\u51fa\u73b0\u5728\u8bed\u53e5\u7684\u4e0a\u4e0b\u6587\u4e2d\uff1a append cap complex imag len make new real unsafe.Alignof unsafe.Offsetof unsafe.Sizeof h(x+y) f.Close() <-ch (<-ch) len(\"foo\") // illegal if len is the built-in function","title":"\u8868\u8fbe\u5f0f\u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_82","text":"\u53d1\u9001\u8bed\u53e5\u53ef\u4ee5\u5411\u901a\u9053\u53d1\u9001\u4e00\u4e2a\u503c\u3002\u901a\u9053\u8868\u8fbe\u5f0f\u5fc5\u987b\u662f\u901a\u9053\u7c7b\u578b\uff0c\u901a\u9053\u65b9\u5411\u5fc5\u987b\u5141\u8bb8\u53d1\u9001\u64cd\u4f5c\uff0c\u5e76\u4e14\u503c\u7c7b\u578b\u662f\u53ef\u4ee5\u5206\u914d\u7ed9\u901a\u9053\u5143\u7d20\u901a\u9053\u7c7b\u578b\u3002 SendStmt = Channel \"<-\" Expression . Channel = Expression . \u901a\u9053\u7c7b\u578b\u548c\u503c\u8868\u8fbe\u5f0f\u4f1a\u5728\u53d1\u9001\u4e4b\u524d\u6c42\u503c\u3002\u53d1\u9001\u64cd\u4f5c\u4f1a\u4e00\u81f4\u963b\u585e\uff0c\u76f4\u5230\u53ef\u4ee5\u8fdb\u884c\u53d1\u9001\u64cd\u4f5c\u3002\u5982\u679c\u63a5\u6536\u8005\u5df2\u7ecf\u51c6\u5907\u597d\u5411\u6ca1\u6709\u7f13\u5b58\u7684\u901a\u9053\u53d1\u9001\u503c\u53ef\u4ee5\u7acb\u5373\u6267\u884c\u3002\u5982\u679c\u901a\u9053\u5185\u8fd8\u6709\u7f13\u5b58\u7a7a\u95f4\uff0c\u5411\u901a\u9053\u5185\u53d1\u9001\u503c\u4e5f\u4f1a\u7acb\u5373\u6267\u884c\u3002\u5411\u5173\u95ed\u7684\u901a\u9053\u53d1\u9001\u6570\u636e\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u6050\u614c\u3002\u50cf\u503c\u4e3a nil \u7684\u901a\u9053\u53d1\u9001\u6570\u636e\u4f1a\u4e00\u76f4\u963b\u585e\u3002 ch <- 3 // send value 3 to channel ch","title":"\u53d1\u9001\u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_83","text":"\u201c++\u201d \u548c \u201c--\u201d \u8bed\u53e5\u53ef\u4ee5\u9012\u589e\u6216\u8005\u9012\u51cf\u8fd0\u7b97\u5143\u4e00\u4e2a\u65e0\u7c7b\u578b\u5e38\u91cf 1\u3002\u4f5c\u4e3a\u4e00\u4e2a\u8d4b\u503c\u8bed\u53e5\uff0c\u8fd0\u7b97\u5143\u5fc5\u987b\u662f\u53ef\u5bfb\u5740\u7684\u6216\u8005 map \u7684\u7d22\u5f15\u8868\u8fbe\u5f0f\u3002 IncDecStmt = Expression ( \"++\" | \"--\" ) . \u4e0b\u9762\u7684\u8d4b\u503c\u8bed\u53e5\u5728\u8bed\u4e49\u4e0a\u662f\u7b49\u4ef7\u7684\uff1a IncDec statement Assignment x++ x += 1 x-- x -= 1","title":"\u9012\u589e/\u9012\u51cf\u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_84","text":"Assignment = ExpressionList assign_op ExpressionList . assign_op = [ add_op | mul_op ] \"=\" . \u6240\u6709\u5de6\u4fa7\u8fd0\u7b97\u5143\u90fd\u5fc5\u987b\u662f\u53ef\u5bfb\u5740\u7684\u3001map \u7d22\u5f15\u8868\u8fbe\u5f0f\u6216\u7a7a\u6807\u8bc6\u7b26\u5176\u4e2d\u4e4b\u4e00\u3002\u8fd0\u7b97\u5143\u53ef\u4ee5\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u3002 x = 1 *p = f() a[i] = 23 (k) = <-ch // same as: k = <-ch \u5bf9\u4e8e\u8d4b\u503c\u64cd\u4f5c x op= y \u5176\u4e2d op \u4e3a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u5b83\u548c x=x op (y) \u662f\u7b49\u4ef7\u7684\uff0c\u4e0d\u8fc7\u5b83\u53ea\u8ba1\u7b97\u4e00\u6b21 x\u3002 op= \u662f\u5355\u72ec\u7684\u4e00\u4e2a\u8bcd\u6c47\u5355\u5143\uff0c\u5728\u8d4b\u503c\u64cd\u4f5c\u4e2d\u5de6\u4fa7\u8868\u8fbe\u5f0f\u548c\u53f3\u4fa7\u8868\u8fbe\u5f0f\u5fc5\u987b\u90fd\u662f\u5355\u503c\u8868\u8fbe\u5f0f\uff0c\u5e76\u4e14\u5de6\u4fa7\u8868\u8fbe\u5f0f\u4e0d\u80fd\u662f\u7a7a\u767d\u6807\u8bc6\u7b26\u3002 a[i] <<= 2 i &^= 1<<n \u5143\u7956\u8d4b\u503c\u8bed\u53e5\u4f1a\u628a\u8fd0\u7b97\u8fd4\u56de\u7684\u591a\u4e2a\u503c\u5206\u522b\u5206\u914d\u7ed9\u53d8\u91cf\u5217\u8868\u3002\u5b83\u6709\u4e24\u79cd\u683c\u5f0f\uff0c\u7b2c\u4e00\u79cd\uff1a\u5b83\u662f\u8fd4\u56de\u591a\u503c\u7684\u8868\u8fbe\u5f0f\uff0c\u4f8b\u5982\u51fd\u6570\u8c03\u7528\u3001\u901a\u9053\u548c map \u8fd0\u7b97\u3001\u7c7b\u578b\u65ad\u8a00\u3002\u5de6\u4fa7\u8fd0\u7b97\u5143\u7684\u6570\u91cf\u5fc5\u987b\u7b49\u4e8e\u8fd4\u56de\u503c\u7684\u6570\u91cf\u3002\u5982\u679c\u51fd\u6570\u8fd4\u56de\u4e24\u4e2a\u503c\uff1a x, y = f() \u5b83\u4f1a\u5c06\u7b2c\u4e00\u4e2a\u8fd4\u56de\u503c\u5206\u914d\u7ed9 x \uff0c\u628a\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\u5206\u914d\u7ed9 y\u3002\u7b2c\u4e8c\u79cd\u683c\u5f0f\u4e2d\uff0c\u5de6\u4fa7\u8fd0\u7b97\u5143\u7684\u6570\u91cf\u5fc5\u987b\u7b49\u4e8e\u53f3\u4fa7\u8fd0\u7b97\u5143\u7684\u6570\u91cf\u3002\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u90fd\u53ea\u80fd\u8fd4\u56de\u5355\u4e00\u503c\uff0c\u53f3\u4fa7\u7b2c n \u4e2a\u503c\u4f1a\u8d4b\u503c\u7ed9\u5de6\u4fa7\u7b2c n \u4e2a\u53d8\u91cf\u3002 one, two, three = '\u4e00', '\u4e8c', '\u4e09' \u7a7a\u6807\u8bc6\u7b26\u53ef\u4ee5\u5728\u5206\u914d\u65f6\u5ffd\u7565\u4e00\u4e2a\u53f3\u9762\u4f4d\u7f6e\u7684\u8868\u8fbe\u5f0f\uff1a _ = x // evaluate x but ignore it x, _ = f() // evaluate f() but ignore second result value \u8d4b\u503c\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\u3002\u9996\u5148\u4f1a\u8ba1\u7b97\u5de6\u4fa7\u8fd0\u7b97\u5143\u7684\u7d22\u5f15\u8868\u8fbe\u5f0f\u548c\u6307\u9488\u7684\u89e3\u5f15\u7528\u5de5\u4f5c\u5e76\u4ee5\u4e00\u5b9a\u987a\u5e8f\u8ba1\u7b97\u53f3\u4fa7\u8868\u8fbe\u5f0f\u7684\u503c\u3002 \u7136\u540e\u4f9d\u6b21\u5bf9\u5de6\u4fa7\u8fd0\u7b97\u5143\u8d4b\u503c\u3002 a, b = b, a // exchange a and b x := []int{1, 2, 3} i := 0 i, x[i] = 1, 2 // set i = 1, x[0] = 2 i = 0 x[i], i = 2, 1 // set x[0] = 2, i = 1 x[0], x[0] = 1, 2 // set x[0] = 1, then x[0] = 2 (so x[0] == 2 at end) x[1], x[3] = 4, 5 // set x[1] = 4, then panic setting x[3] = 5. type Point struct { x, y int } var p *Point x[2], p.x = 6, 7 // set x[2] = 6, then panic setting p.x = 7 i = 2 x = []int{3, 5, 7} for i, x[i] = range x { // set i, x[2] = 0, x[0] break } // after this loop, i == 0 and x == []int{3, 5, 3} \u5728\u8d4b\u503c\u8bed\u53e5\u4e2d\u6bcf\u4e2a\u503c\u90fd\u5fc5\u987b\u80fd\u5206\u914d\u7ed9\u5de6\u4fa7\u6307\u5b9a\u7c7b\u578b\u7684\u503c\u3002\u9664\u4e86\u4ee5\u4e0b\u7279\u4f8b\uff1a \u4efb\u4f55\u7c7b\u578b\u90fd\u80fd\u5206\u914d\u7ed9\u7a7a\u6807\u8bc6\u7b26\u3002 \u5982\u679c\u628a\u65e0\u7c7b\u578b\u5e38\u91cf\u5206\u914d\u7ed9\u63a5\u53e3\u7c7b\u578b\u6216\u8005\u7a7a\u6807\u8bc6\u7b26\uff0c\u5b83\u4f1a\u8f6c\u6362\u6210\u9ed8\u8ba4\u7c7b\u578b\u3002 \u5982\u679c\u65e0\u7c7b\u578b\u7684\u5e03\u5c14\u503c\u5206\u914d\u7ed9\u4e86\u63a5\u53e3\u7c7b\u578b\u6216\u8005\u7a7a\u6807\u8bc6\u7b26\uff0c\u5b83\u4f1a\u5148\u8f6c\u6362\u6210 bool \u7c7b\u578b\u3002","title":"\u8d4b\u503c"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#if","text":"if \u8bed\u53e5\u6839\u636e\u5e03\u5c14\u503c\u8868\u8fbe\u5f0f\u7684\u503c\u6765\u51b3\u5b9a\u6267\u884c\u6761\u4ef6\u5206\u652f\u7684\u4ee3\u7801\u3002\u5982\u679c\u8868\u8fbe\u5f0f\u4e3a\u771f\uff0c\u5c31\u6267\u884c if \u5206\u652f\u5185\u7684\u4ee3\u7801\uff0c\u5426\u5219\u6267\u884c else \u5206\u652f\u7684\u4ee3\u7801\u3002 IfStmt = \"if\" [ SimpleStmt \";\" ] Expression Block [ \"else\" ( IfStmt | Block ) ] . if x > max { x = max } \u8868\u8fbe\u5f0f\u53ef\u80fd\u5148\u4e8e\u666e\u901a\u8bed\u53e5\uff0c\u5b83\u4f1a\u5728\u8868\u8fbe\u5f0f\u6c42\u503c\u4e4b\u524d\u53d1\u751f\u3002 if x := f(); x < y { return x } else if x > z { return z } else { return y }","title":"if \u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#switch","text":"","title":"switch \u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#for","text":"for \u8bed\u53e5\u53ef\u4ee5\u7528\u6765\u91cd\u590d\u6267\u884c\u4e00\u6bb5\u4ee3\u7801\u3002\u5b83\u6709\u4e09\u79cd\u683c\u5f0f\uff1a\u8fed\u4ee3\u5668\u53ef\u4ee5\u662f\u5355\u4e00\u6761\u4ef6\u3001for \u5206\u53e5\u6216\u8005 range \u8bed\u53e5\u3002 ForStmt = \"for\" [ Condition | ForClause | RangeClause ] Block . Condition = Expression .","title":"for \u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#for_1","text":"\u8fd9\u79cd\u60c5\u51b5\u4e0b for \u4f1a\u5728\u6761\u4ef6\u4e3a true \u65f6\u4e00\u76f4\u91cd\u590d\u3002\u6761\u4ef6\u4f1a\u5728\u6bcf\u6b21\u8fed\u4ee3\u65f6\u90fd\u91cd\u65b0\u8ba1\u7b97\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u6761\u4ef6\uff0c\u9ed8\u8ba4\u4e00\u76f4\u4e3a true\u3002 for a < b { a *= 2 }","title":"\u5355\u4e00\u6761\u4ef6\u7684 for \u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#for_2","text":"\u5e26\u5206\u53e5\u7684 for \u8bed\u53e5\u4e5f\u662f\u7531\u6761\u4ef6\u63a7\u5236\uff0c\u53ea\u662f\u5b83\u6709\u4e00\u4e2a\u521d\u59cb\u5316\u548c\u5bc4\u9001\u7684\u8fc7\u7a0b\u3002\u4f8b\u5982\u8d4b\u503c\u3001\u9012\u589e\u6216\u8005\u9012\u51cf\u8bed\u53e5\u3002\u521d\u59cb\u5316\u8bed\u53e5\u53ef\u4ee5\u662f\u77ed\u53d8\u91cf\u58f0\u660e\uff0c\u4f46\u662f\u5bc4\u9001\u8bed\u53e5\u4e0d\u80fd\u3002\u5728\u521d\u59cb\u5316\u8bed\u53e5\u4e2d\u58f0\u660e\u7684\u53d8\u91cf\u53ef\u4ee5\u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u3002 ForClause = [ InitStmt ] \";\" [ Condition ] \";\" [ PostStmt ] . InitStmt = SimpleStmt . PostStmt = SimpleStmt . for i := 0; i < 10; i++ { f(i) } \u5982\u679c\u521d\u59cb\u5316\u8bed\u53e5\u975e\u7a7a\uff0c\u5b83\u4f1a\u5728\u8fdb\u5165\u8fed\u4ee3\u524d\u6267\u884c\u4e00\u6b21\uff1bpost \u8bed\u53e5\u5728\u6bcf\u6b21\u5faa\u73af\u540e\u90fd\u4f1a\u6267\u884c\u4e00\u6b21\u3002\u5728\u53ea\u6709\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u7701\u7565\u5206\u53f7\u3002\u5982\u679c\u7f3a\u7701\u6761\u4ef6\u8bed\u53e5\uff0c\u9ed8\u8ba4\u4e3a true\u3002 for cond { S() } is the same as for ; cond ; { S() } for { S() } is the same as for true { S() }","title":"\u5e26\u5206\u53e5\u7684 for \u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#range-for","text":"\u5e26 range \u5206\u53e5\u7684 for \u8bed\u53e5\u53ef\u4ee5\u8bbf\u95ee\u6570\u7ec4\u3001\u5207\u7247\u3001\u5b57\u7b26\u4e32\u3001map \u7684\u6240\u6709\u5143\u7d20\uff0c\u8fd8\u53ef\u4ee5\u4ece\u901a\u9053\u4e2d\u63a5\u6536\u503c\u3002\u8fed\u4ee3\u83b7\u5f97\u5143\u7d20\u5206\u914d\u7ed9\u4e86\u76f8\u5e94\u7684\u8fed\u4ee3\u53d8\u91cf\u5e76\u6267\u884c\u4ee3\u7801\u5757\u3002 RangeClause = [ ExpressionList \"=\" | IdentifierList \":=\" ] \"range\" Expression . \u53f3\u4fa7\u7684 range \u5206\u53e5\u8868\u8fbe\u5f0f\u53eb\u505a range \u8868\u8fbe\u5f0f\uff0c\u5b83\u53ef\u80fd\u662f\u6570\u7ec4\u3001\u6570\u7ec4\u7684\u6307\u9488\u3001\u5207\u7247\u3001\u5b57\u7b26\u4e32\u3001map \u6216\u901a\u9053\u63a5\u6536\u8005\u7c7b\u578b\u3002\u5728\u5206\u914d\u65f6\uff0c\u5de6\u4fa7\u8fd0\u7b97\u5143\u5fc5\u987b\u662f\u53ef\u5bfb\u5740\u7684\u6216\u8005 map \u7684\u7d22\u5f15\u8868\u8fbe\u5f0f\uff1b\u5b83\u4eec\u4f5c\u4e3a\u8fed\u4ee3\u53d8\u91cf\u3002\u5982\u679c range \u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u901a\u9053\u7c7b\u578b\uff0c\u81f3\u5c11\u9700\u8981\u6709\u4e00\u4e2a\u53d8\u91cf\uff0c\u5b83\u4e5f\u53ef\u4ee5\u6709\u4e24\u4e2a\u53d8\u91cf\u3002\u5982\u679c\u8fed\u4ee3\u53d8\u91cf\u662f\u7a7a\u6807\u8bc6\u7b26\uff0c\u5c31\u4ee3\u8868\u5728\u5206\u53e5\u4e2d\u4e0d\u5b58\u5728\u8be5\u6807\u8bc6\u7b26\u3002 Range expression 1st value 2nd value array or slice a [n]E, *[n]E, or []E index i int a[i] E string s string type index i int see below rune map m map[K]V key k K m[k] V channel c chan E, <-chan E element e E var testdata *struct { a *[7]int } for i, _ := range testdata.a { // testdata.a is never evaluated; len(testdata.a) is constant // i ranges from 0 to 6 f(i) } var a [10]string for i, s := range a { // type of i is int // type of s is string // s == a[i] g(i, s) } var key string var val interface {} // element type of m is assignable to val m := map[string]int{\"mon\":0, \"tue\":1, \"wed\":2, \"thu\":3, \"fri\":4, \"sat\":5, \"sun\":6} for key, val = range m { h(key, val) } // key == last map key encountered in iteration // val == map[key] var ch chan Work = producer() for w := range ch { doWork(w) } // empty a channel for range ch {}","title":"\u5e26 range \u5206\u53e5\u7684 for \u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#go","text":"go \u8bed\u53e5\u4f1a\u5f00\u59cb\u5728\u76f8\u540c\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u5355\u72ec goroutine \u4e2d\u8c03\u7528\u51fd\u6570\u3002 GoStmt = \"go\" Expression . \u8868\u8fbe\u5f0f\u5fc5\u987b\u662f\u51fd\u6570\u6216\u8005\u65b9\u6cd5\u8c03\u7528\uff1b\u5b83\u4e0d\u80fd\u4f7f\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u8c03\u7528\u5185\u7f6e\u51fd\u6570\u6709\u8868\u8fbe\u5f0f\u8bed\u53e5\u7684\u9650\u5236\u3002 \u51fd\u6570\u7684\u503c\u548c\u53c2\u6570\u4f1a\u6309\u987a\u5e8f\u5728\u8c03\u7528\u7684 goroutine \u4e2d\u6c42\u503c\u3002\u4e0d\u50cf\u666e\u901a\u7684\u51fd\u6570\u8c03\u7528\uff0c\u7a0b\u5e8f\u4e0d\u4f1a\u7b49\u5f85\u51fd\u6570\u8c03\u7528\u5b8c\u6210\uff0c\u800c\u662f\u76f4\u63a5\u5f00\u542f\u4e00\u4e2a\u65b0\u7684 goroutine \u6267\u884c\u51fd\u6570\u3002\u51fd\u6570\u9000\u51fa\u65f6\uff0cgoroutine \u4e5f\u4f1a\u9000\u51fa\u3002\u51fd\u6570\u7684\u4efb\u4f55\u8fd4\u56de\u503c\u90fd\u4f1a\u88ab\u4e22\u5f03\u3002 go Server() go func(ch chan<- bool) { for { sleep(10); ch <- true }} (c)","title":"Go \u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#select","text":"select \u8bed\u53e5\u4f1a\u5728\u63a5\u6536/\u53d1\u9001\u64cd\u4f5c\u96c6\u4e2d\u9009\u62e9\u4e00\u4e2a\u6267\u884c\u3002\u5b83\u770b\u8d77\u6765\u548c switch \u5f88\u50cf\uff0c\u53ea\u4e0d\u8fc7\u662f\u4e13\u95e8\u9488\u5bf9\u901a\u4fe1\u64cd\u4f5c\u7684\u3002 SelectStmt = \"select\" \"{\" { CommClause } \"}\" . CommClause = CommCase \":\" StatementList . CommCase = \"case\" ( SendStmt | RecvStmt ) | \"default\" . RecvStmt = [ ExpressionList \"=\" | IdentifierList \":=\" ] RecvExpr . RecvExpr = Expression . \u63a5\u6536\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5c06\u63a5\u6536\u8868\u8fbe\u5f0f\u7684\u503c\u5206\u914d\u7ed9\u4e00\u4e2a\u6216\u4e24\u4e2a\u53d8\u91cf\u3002\u63a5\u6536\u8868\u8fbe\u5f0f\u5fc5\u987b\u662f\u4e00\u4e2a\u63a5\u6536\u8fd0\u7b97\u5143\uff08\u53ef\u4ee5\u4f7f\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff09\u3002\u5b83\u6700\u591a\u5141\u8bb8\u6709\u4e00\u4e2a default \u8bed\u53e5\u3002 select \u8bed\u53e5\u6267\u884c\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u5bf9\u4e8e select \u8bed\u53e5\u7684\u6240\u6709\u5206\u53e5\uff0c\u63a5\u6536\u64cd\u4f5c\u7684\u901a\u9053\u8fd0\u7b97\u5143\u3001\u901a\u9053\u3001\u53d1\u9001\u8bed\u53e5\u7684\u53f3\u4fa7\u8868\u8fbe\u5f0f\u90fd\u4f1a\u6267\u884c\u4e00\u6b21\u64cd\u4f5c\u3002 \u5982\u679c\u4e00\u4e2a\u6216\u591a\u4e2a\u901a\u4fe1\u540c\u65f6\u53d1\u751f\uff0c\u5b83\u4f1a\u901a\u8fc7\u4e00\u81f4\u6027\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6267\u884c\u3002\u5982\u679c\u6ca1\u6709 default \u8bed\u53e5\uff0cselect \u8bed\u53e5\u4f1a\u4e00\u76f4\u963b\u585e\u3002 \u9664\u4e86 default \u5206\u53e5\uff0c\u5176\u4ed6\u5206\u53e5\u53ea\u6709\u5728\u5f00\u59cb\u8fdb\u884c\u901a\u4fe1\u7684\u65f6\u5019\u624d\u4f1a\u6267\u884c\u3002 \u5982\u679c select \u5206\u53e5\u662f\u4e00\u4e2a\u63a5\u6536\u8bed\u53e5\uff0c\u5b83\u53ef\u4ee5\u7ed9\u53d8\u91cf\u5206\u914d\u503c\u3002 \u6267\u884c select \u5206\u53e5\u5185\u7684\u5185\u5bb9\u3002 \u5982\u679c\u5411 nil \u901a\u9053\u53d1\u9001\u4fe1\u606f\u5728\u6ca1\u6709 default \u5206\u53e5\u7684\u60c5\u51b5\u4e0b\u4f1a\u4e00\u76f4\u963b\u585e\u3002 var a []int var c, c1, c2, c3, c4 chan int var i1, i2 int select { case i1 = <-c1: print(\"received \", i1, \" from c1\\n\") case c2 <- i2: print(\"sent \", i2, \" to c2\\n\") case i3, ok := (<-c3): // same as: i3, ok := <-c3 if ok { print(\"received \", i3, \" from c3\\n\") } else { print(\"c3 is closed\\n\") } case a[f()] = <-c4: // same as: // case t := <-c4 // a[f()] = t default: print(\"no communication\\n\") } for { // send random sequence of bits to c select { case c <- 0: // note: no statement, no fallthrough, no folding of cases case c <- 1: } } select {} // block forever","title":"select \u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#return","text":"return \u8bed\u53e5\u4f1a\u7ec8\u6b62\u51fd\u6570 F \u7684\u6267\u884c\u5e76\u53ef\u9009\u7684\u8fd4\u56de\u4e00\u4e2a\u6216\u591a\u4e2a\u8fd4\u56de\u503c\u3002\u6240\u6709\u7684\u6ede\u540e\u51fd\u6570\u90fd\u4f1a\u5728 F \u8fd4\u56de\u5230\u5b83\u7684\u8c03\u7528\u8005\u4e4b\u524d\u6267\u884c\u3002 ReturnStmt = \"return\" [ ExpressionList ] . \u5982\u679c\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\u7c7b\u578b\uff0creturn \u4e0d\u80fd\u8fd4\u56de\u4efb\u4f55\u503c\u3002 func noResult() { return } \u6709\u4e09\u79cd\u65b9\u5f0f\u80fd\u591f\u8fd4\u56de\u6307\u5b9a\u7c7b\u578b\u7684\u503c\uff1a \u8fd4\u56de\u503c\u53ef\u4ee5\u76f4\u63a5\u5728 return \u8bed\u53e5\u4e2d\u5217\u51fa\u3002\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u90fd\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u503c\u5e76\u4e14\u80fd\u591f\u5206\u914d\u7ed9\u76f8\u5e94\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u3002 func simpleF() int { return 2 } func complexF1() (re float64, im float64) { return -7.0, -4.0 } return \u8bed\u53e5\u7684\u8868\u8fbe\u5f0f\u5217\u8868\u53ef\u4ee5\u662f\u4e00\u4e2a\u8fd4\u56de\u591a\u503c\u7684\u51fd\u6570\u8c03\u7528\u3002\u8fd9\u65f6\u4f1a\u4f7f\u7528\u4e34\u65f6\u53d8\u91cf\u6765\u83b7\u53d6\u51fd\u6570\u8c03\u7528\u7684\u8fd4\u56de\u503c\u5e76\u76f4\u63a5\u5c06\u5176\u4f5c\u4e3a return \u8bed\u53e5\u7684\u8868\u8fbe\u5f0f\u5217\u8868\u3002 func complexF2() (re float64, im float64) { return complexF1() } \u5982\u679c\u5236\u5b9a\u4e86\u8fd4\u56de\u503c\u7684\u6807\u8bc6\u7b26\u90a3\u4e48 return \u7684\u8868\u8fbe\u5f0f\u5217\u8868\u53ef\u4ee5\u4e3a\u7a7a\u3002\u8fd4\u56de\u503c\u53c2\u6570\u4f1a\u4f5c\u4e3a\u666e\u901a\u7684\u672c\u5730\u53d8\u91cf\u6309\u9700\u5206\u914d\u3002return \u8bed\u53e5\u4f1a\u76f4\u63a5\u8fd4\u56de\u5b83\u4eec\u3002 func complexF3() (re float64, im float64) { re = 7.0 im = 4.0 return } func (devnull) Write(p []byte) (n int, _ error) { n = len(p) return } \u4e0d\u7ba1\u5982\u4f55\u58f0\u660e\uff0c\u6240\u6709\u7684\u8fd4\u56de\u503c\u90fd\u4f1a\u5728\u8fdb\u5165\u51fd\u6570\u524d\u63d0\u524d\u521d\u59cb\u5316\u6210\u7c7b\u578b\u7684\u96f6\u503c\u3002return \u8bed\u53e5\u4f1a\u5728\u6240\u6709 defer \u51fd\u6570\u4e4b\u524d\u6307\u5b9a\u8fd4\u56de\u503c\u3002 \u5b9e\u73b0\u9650\u5236\uff1a\u7f16\u8bd1\u5668\u4e0d\u5141\u8bb8\u5728\u8986\u76d6\u4e86\u547d\u540d\u8fd4\u56de\u503c\u7684\u4f5c\u7528\u57df\u4e2d\u76f4\u63a5\u8fd4\u56de\u3002 func f(n int) (res int, err error) { if _, err := f(n-1); err != nil { return // invalid return statement: err is shadowed } return }","title":"return \u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#break","text":"break \u8bed\u53e5\u4f1a\u5728 for \u3001 switch \u6216 select \u8bed\u53e5\u5185\u90e8\u9000\u51fa\u5230\u76f8\u540c\u51fd\u6570\u7684\u67d0\u4e2a\u4f4d\u7f6e\u3002 BreakStmt = \"break\" [ Label ] . \u5982\u679c\u60f3\u6307\u5b9a\u6807\u7b7e\uff0c\u5b83\u5fc5\u987b\u51fa\u73b0\u5728\u5b83\u6240\u4e2d\u6b62\u7684 for \u3001 switch \u6216 select \u8bed\u53e5\u65c1\u3002 OuterLoop: for i = 0; i < n; i++ { for j = 0; j < m; j++ { switch a[i][j] { case nil: state = Error break OuterLoop case item: state = Found break OuterLoop } } }","title":"break \u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#continue","text":"continue \u8bed\u53e5\u4f1a\u63d0\u524d for \u8bed\u53e5\u7684\u4e0b\u4e00\u6b21\u8fed\u4ee3\u3002 for \u8bed\u53e5\u5fc5\u987b\u548c continue \u5728\u76f8\u540c\u51fd\u6570\u4e2d\u3002 RowLoop: for y, row := range rows { for x, data := range row { if data == endOfRow { continue RowLoop } row[x] = data + bias(x, y) } }","title":"continue \u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#goto","text":"goto \u4f1a\u5c06\u7a0b\u5e8f\u8df3\u8f6c\u5230\u76f8\u540c\u51fd\u6570\u7684\u6307\u5b9a\u6807\u7b7e\u5904\u3002 GotoStmt = \"goto\" Label . goto Error goto \u8bed\u53e5\u4e0d\u5141\u8bb8\u8df3\u8fc7\u4f5c\u7528\u57df\u5185\u7a0b\u5e8f\u53d8\u91cf\u7684\u521d\u59cb\u5316\u5de5\u4f5c\u3002 goto L // BAD v := 3 L: \u4e0a\u9762\u7684\u7a0b\u5e8f\u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a\u5b83\u8df3\u8fc7\u4e86\u53d8\u91cf v \u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u3002 if n%2 == 1 { goto L1 } for n > 0 { f() n-- L1: f() n-- } \u6807\u7b7e\u4f5c\u7528\u57df\u5916\u7684 goto \u8bed\u53e5\u4e0d\u80fd\u8df3\u8f6c\u5230\u6807\u7b7e\u5904\uff0c\u6240\u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u662f\u9519\u8bef\u7684\u3002","title":"goto \u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#fallthrough","text":"fallthrough \u8bed\u53e5\u4f1a\u8df3\u8f6c\u5230 switch \u8bed\u53e5\u4e2d\u7684\u4e0b\u4e00\u4e2a case \u5206\u53e5\u4e2d\u3002\u5b83\u5e94\u8be5\u53ea\u5728\u6700\u540e\u4e00\u4e2a\u975e\u7a7a\u5206\u53e5\u4e2d\u4f7f\u7528\u3002 FallthroughStmt = \"fallthrough\" .","title":"Fallthrough \u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#defer","text":"defer \u8bed\u53e5\u4f1a\u5728\u5305\u88f9\u51fd\u6570\u8fd4\u56de\u540e\u89e6\u53d1\u51fd\u6570\u8c03\u7528\u3002\u8fd9\u91cc\u7684\u8fd4\u56de\u6cdb\u6307\u51fd\u6570\u56e0\u4e3a return \u8bed\u53e5\u7ec8\u6b62\u3001\u5230\u8fbe\u51fd\u6570\u672b\u5c3e\u6216\u8005\u5f53\u524d goroutine \u89e6\u53d1\u8fd0\u884c\u65f6\u6050\u614c\u3002 DeferStmt = \"defer\" Expression . \u8868\u8fbe\u5f0f\u5fc5\u987b\u662f\u51fd\u6570\u6216\u8005\u65b9\u6cd5\u8c03\u7528\uff1b\u5b83\u4e0d\u80fd\u4f7f\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u8c03\u7528\u5185\u7f6e\u51fd\u6570\u4f1a\u6709\u4e00\u4e9b\u9650\u5236\u3002 \u6bcf\u6b21\u6267\u884c defer \u8bed\u53e5\u6267\u884c\u65f6\u90fd\u4f1a\u8ba1\u7b97\u51fd\u6570\u7684\u53c2\u6570\u548c\u503c\uff0c\u4f46\u662f\u5e76\u4e0d\u4f1a\u8c03\u7528\u51fd\u6570\u3002\u76f8\u53cd\uff0c\u51fd\u6570\u7684\u8c03\u7528\u662f\u5728\u5305\u88f9\u51fd\u6570\u8fd4\u56de\u540e\u8fdb\u884c\uff0c\u5b83\u4eec\u7684\u6267\u884c\u987a\u5e8f\u4e0e\u58f0\u660e\u987a\u5e8f\u6b63\u597d\u76f8\u53cd\u3002\u5982\u679c defer \u5bf9\u5e94\u7684\u51fd\u6570\u503c\u4e3a nil\uff0c\u4f1a\u5728\u8c03\u7528\u51fd\u6570\u7684\u65f6\u5019\u5bfc\u81f4\u8fd0\u884c\u65f6\u6050\u614c\u800c\u4e0d\u662f\u58f0\u660e defer \u8bed\u53e5\u7684\u65f6\u5019\u3002 \u4f8b\u5982\uff1a\u5f53 defer \u51fd\u6570\u4e3a\u51fd\u6570\u5b57\u9762\u503c\u4e14\u5305\u88f9\u51fd\u6570\u5177\u6709\u547d\u540d\u7ed3\u679c\u503c\uff0c\u6b64\u65f6\uff0c\u6211\u4eec\u5728defer \u51fd\u6570\u4e2d\u53ef\u4ee5\u8bbf\u95ee\u548c\u4fee\u6539\u547d\u540d\u7684\u7ed3\u679c\u503c\u3002defer \u51fd\u6570\u7684\u6240\u6709\u8fd4\u56de\u503c\u90fd\u4f1a\u88ab\u5ffd\u7565\u3002 lock(l) defer unlock(l) // unlocking happens before surrounding function returns // prints 3 2 1 0 before surrounding function returns for i := 0; i <= 3; i++ { defer fmt.Print(i) } // f returns 1 func f() (result int) { defer func() { result++ }() return 0 }","title":"Defer \u8bed\u53e5"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_85","text":"\u5185\u7f6e\u51fd\u6570\u662f\u9884\u5b9a\u4e49\u7684\u3002\u8c03\u7528\u4ed6\u4eec\u548c\u5176\u4ed6\u51fd\u6570\u4e00\u6837\u53ea\u662f\u4ed6\u4eec\u63a5\u53d7\u4e00\u4e2a\u7c7b\u578b\u800c\u4e0d\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 \u5185\u7f6e\u51fd\u6570\u6ca1\u6709\u6807\u51c6\u7684 Go \u7c7b\u578b\uff0c\u6240\u4ee5\u4ed6\u4eec\u53ea\u80fd\u4f5c\u4e3a\u8c03\u7528\u8868\u8fbe\u5f0f\uff1b\u800c\u4e0d\u80fd\u4f5c\u4e3a\u51fd\u6570\u7684\u503c\u3002","title":"\u5185\u7f6e\u51fd\u6570"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#close","text":"\u5bf9\u4e8e\u7ba1\u9053\u7c7b\u578b c\uff0c\u5185\u7f6e\u51fd\u6570 close(c) \u610f\u5473\u7740\u4e0d\u5728\u6709\u6570\u636e\u63d2\u5165\u5230\u7ba1\u9053\u4e2d\u3002\u5982\u679c c \u662f\u4e00\u4e2a\u53ea\u63a5\u6536\u6570\u636e\u7684\u7ba1\u9053\uff0c\u4f1a\u53d1\u751f\u9519\u8bef\u3002\u5411\u5df2\u7ecf\u5173\u95ed\u7684\u53d1\u9001\u6570\u636e\u6216\u8005\u91cd\u590d\u5173\u95ed\u5df2\u7ecf\u5173\u95ed\u7684\u7ba1\u9053\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u6050\u614c\u3002\u5173\u95ed nil \u7ba1\u9053\u4f1a\u5f15\u8d77\u8fd0\u884c\u65f6\u6050\u614c\u3002\u8c03\u7528 close \u540e\u6240\u6709\u4e4b\u524d\u53d1\u9001\u7684\u6570\u636e\u90fd\u80fd\u63a5\u6536\u5230\uff0c\u5e76\u4e14\u5728\u6700\u540e\u4e0d\u4f1a\u963b\u585e\u800c\u8fd4\u56de\u96f6\u503c\u3002\u591a\u503c\u7684\u63a5\u6536\u64cd\u4f5c\u80fd\u591f\u8fd4\u56de\u63a5\u6536\u5230\u7684\u6570\u636e\u548c\u8868\u793a\u7ba1\u9053\u662f\u5426\u5173\u95ed\u7684\u5e03\u5c14\u503c\u3002","title":"Close"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_86","text":"\u5185\u7f6e\u51fd\u6570 len \u548c cap \u53ef\u4ee5\u63a5\u6536\u591a\u79cd\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a int \u7c7b\u578b\u7ed3\u679c\u503c\u3002\u51fd\u6570\u7684\u5b9e\u73b0\u80fd\u591f\u786e\u4fdd\u7ed3\u679c\u503c\u4e0d\u4f1a\u6ea2\u51fa\u3002 Call Argument type Result len(s) string type string length in bytes [n]T, *[n]T array length (== n) []T slice length map[K]T map length (number of defined keys) chan T number of elements queued in channel buffer cap(s) [n]T, *[n]T array length (== n) []T slice capacity chan T channel buffer capacity \u5207\u7247\u7684\u5bb9\u79ef\u5e95\u5c42\u6570\u7ec4\u5305\u542b\u7684\u5143\u7d20\u4e2a\u6570\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u6709\u4ee5\u4e0b\u5173\u7cfb\uff1a 0 <= len(s) <= cap(s) nil \u5207\u7247\uff0cmap\uff0c\u6216\u8005 channel \u7684\u957f\u5ea6\u90fd\u4e3a 0\u3002 nil \u5207\u7247\uff0c\u7ba1\u9053\u7684\u5bb9\u79ef\u90fd\u4e3a 0\u3002 \u8868\u8fbe\u5f0f len(x) \u5728 s \u662f\u5b57\u7b26\u4e32\u5e38\u91cf\u65f6\u4e5f\u4e3a\u5e38\u91cf\u3002\u5982\u679c s \u4e3a\u6570\u7ec4\u6216\u8005\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\u5e76\u4e14\u8868\u8fbe\u5f0f s \u4e0d\u5305\u542b channel \u63a5\u6536\u5668\u6216\u8005\u51fd\u6570\u8c03\u7528\u90a3\u4e48 len(s) \u548c cap(s) \u4e5f\u662f\u5e38\u91cf\uff1b\u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b s \u65f6\u4e0d\u80fd\u6c42\u503c\u7684\u3002\u5176\u4ed6\u60c5\u51b5\u4e0b len \u548c cap \u4e0d\u662f\u5e38\u91cf\u5e76\u4e14 s \u662f\u53ef\u4ee5\u6c42\u503c\u7684\u3002 const ( c1 = imag(2i) // imag(2i) = 2.0 is a constant c2 = len([10]float64{2}) // [10]float64{2} contains no function calls c3 = len([10]float64{c1}) // [10]float64{c1} contains no function calls c4 = len([10]float64{imag(2i)}) // imag(2i) is a constant and no function call is issued c5 = len([10]float64{imag(z)}) // invalid: imag(z) is a (non-constant) function call ) var z complex128","title":"\u957f\u5ea6\u548c\u5bb9\u79ef"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_87","text":"\u5185\u7f6e\u51fd\u6570 new \u63a5\u6536\u4e00\u4e2a\u7c7b\u578b T\uff0c\u5b83\u4f1a\u5728\u8fd0\u884c\u65f6\u7ed9\u53d8\u91cf\u5206\u914d\u5185\u5b58\uff0c\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u7c7b\u578b T \u7684 *T \u7c7b\u578b\u6307\u9488\u3002\u53d8\u91cf\u7684\u521d\u59cb\u5316\u5728\u521d\u59cb\u5316\u503c\u7ae0\u8282\u4e2d\u4ecb\u7ecd\u3002 new(T) \u4f8b\u5982\uff1a type S struct { a int; b float64 } new(S) \u7ed9 S \u7c7b\u578b\u7684\u53d8\u91cf\u5206\u914d\u7a7a\u95f4\uff0c\u5e76\u521d\u59cb\u5316\u5b83\uff08 a=0 \uff0c b=0.0 \uff09\uff0c\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a *S \u7c7b\u578b\u503c\u4fdd\u5b58\u53d8\u91cf\u6240\u5728\u7684\u4f4d\u7f6e\u3002","title":"\u5185\u5b58\u5206\u914d"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#map_1","text":"\u5185\u7f6e\u51fd\u6570 make \u4ee5\u4e00\u4e2a\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\uff0c\u5b83\u5fc5\u987b\u662f\u4e00\u4e2a\u5207\u7247\uff0cmap \u6216\u8005\u7ba1\u9053\u7c7b\u578b\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a T \u7c7b\u578b\u7684\u503c\uff0c\u800c\u4e0d\u662f\uff08*T\uff09\u7c7b\u578b\uff0c\u5b83\u4f1a\u6309\u521d\u59cb\u5316\u503c\u7ae0\u8282\u63cf\u8ff0\u7684\u65b9\u5f0f\u8fdb\u884c\u521d\u59cb\u5316\u3002 Call Type T Result make(T, n) slice slice of type T with length n and capacity n make(T, n, m) slice slice of type T with length n and capacity m make(T) map map of type T make(T, n) map map of type T with initial space for approximately n elements make(T) channel unbuffered channel of type T make(T, n) channel buffered channel of type T, buffer size n n \u548c m \u5fc5\u987b\u662f\u6574\u6570\u7c7b\u578b\u6216\u8005\u65e0\u7c7b\u578b\u5e38\u91cf\u3002\u4e00\u4e2a\u5e38\u91cf\u53c2\u6570\u4e0d\u80fd\u4e3a\u8d1f\u6570\u5e76\u4e14\u8be5\u503c\u5728 int \u7c7b\u578b\u7684\u8303\u56f4\u5185\uff1b\u5982\u679c\u5b83\u662f\u65e0\u7c7b\u578b\u5e38\u91cf\uff0c\u4f1a\u88ab\u8f6c\u6362\u6210 int \u7c7b\u578b\u3002\u5982\u679c n \u548c m \u90fd\u662f\u5e38\u91cf\uff0c\u90a3\u4e48 n \u5fc5\u987b\u5927\u4e8e m\u3002\u5982\u679c n \u662f\u8d1f\u6570\u6216\u8005\u5927\u4e8e m \u4f1a\u5f15\u53d1\u8fd0\u884c\u65f6 panic\u3002 s := make([]int, 10, 100) // slice with len(s) == 10, cap(s) == 100 s := make([]int, 1e3) // slice with len(s) == cap(s) == 1000 s := make([]int, 1<<63) // illegal: len(s) is not representable by a value of type int s := make([]int, 10, 0) // illegal: len(s) > cap(s) c := make(chan int, 10) // channel with a buffer size of 10 m := make(map[string]int, 100) // map with initial space for approximately 100 elements \u4f7f\u7528 make \u6765\u6307\u5b9a\u5927\u5c0f\u521d\u59cb\u5316 map \u7c7b\u578b\u5c06\u4f1a\u521b\u5efa\u4e00\u4e2a\u9884\u7559 n \u4e2a\u5143\u7d20\u7a7a\u95f4\u7684 map \u7c7b\u578b\u3002\u66f4\u8be6\u7ec6\u7684\u884c\u4e3a\u4f9d\u8d56\u4e8e\u5177\u4f53\u5b9e\u73b0\u3002","title":"\u521b\u5efa\u5207\u7247\uff0cmap \u548c \u7ba1\u9053"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_88","text":"\u5185\u7f6e\u51fd\u6570 append \u548c copy \u53ef\u4ee5\u8fdb\u884c\u5207\u7247\u7684\u901a\u7528\u64cd\u4f5c\u3002\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u51fd\u6570\uff0c\u4e00\u4e2a\u662f\u62f7\u8d1d\u5185\u5b58\uff0c\u4e00\u4e2a\u662f\u5f15\u7528\u5185\u5b58\u3002 \u53ef\u53d8\u53c2\u6570\u7684\u51fd\u6570 append \u53ef\u4ee5\u5411\u5207\u7247 s \u4e2d\u8ffd\u52a0\u4e00\u4e2a\u6216\u591a\u4e2a x \u503c\uff0c\u5e76\u8fd4\u56de\u8fd9\u4e2a\u5207\u7247\u3002\u4f20\u8fdb ...T \u7684\u503c\u4f1a\u6839\u636e\u53c2\u6570\u4f20\u503c\u3002\u4f5c\u4e3a\u7279\u4f8b\uff0c append \u5728 s \u4e3a []byte \u5207\u7247\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32\u540e\u9762\u8ddf ... \u4f5c\u4e3a\u53c2\u6570\u3002 \u5982\u679c s \u7684\u5bb9\u79ef\u5bb9\u7eb3\u4e0d\u4e0b\u8fd9\u4e9b\u5143\u7d20\uff0c\u90a3\u4e48 append \u4f1a\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u8db3\u591f\u5927\u7684\u6570\u7ec4\u3002\u5426\u5219\u4f1a\u4f7f\u7528\u539f\u6765\u7684\u5e95\u5c42\u6570\u7ec4\u3002 s0 := []int{0, 0} s1 := append(s0, 2) // append a single element s1 == []int{0, 0, 2} s2 := append(s1, 3, 5, 7) // append multiple elements s2 == []int{0, 0, 2, 3, 5, 7} s3 := append(s2, s0...) // append a slice s3 == []int{0, 0, 2, 3, 5, 7, 0, 0} s4 := append(s3[3:6], s3[2:]...) // append overlapping slice s4 == []int{3, 5, 7, 2, 3, 5, 7, 0, 0} var t []interface{} t = append(t, 42, 3.1415, \"foo\") // t == []interface{}{42, 3.1415, \"foo\"} var b []byte b = append(b, \"bar\"...) // append string contents b == []byte{'b', 'a', 'r' } copy \u51fd\u6570\u4ece src \u62f7\u8d1d\u539f\u5c5e\u5230 dst \u5e76\u4e14\u8fd4\u56de\u62f7\u8d1d\u5143\u7d20\u7684\u4e2a\u6570\u3002\u53c2\u6570\u4e2d\u6240\u6709\u7684\u5143\u7d20\u7c7b\u578b\u5fc5\u987b\u662f T \u7c7b\u578b\u6216\u8005\u80fd\u8f6c\u6362\u6210 T \u7684\u7c7b\u578b\u3002\u62f7\u8d1d\u5143\u7d20\u7684\u6570\u91cf\u662f len(src) \u548c len(dst) \u4e2d\u7684\u8f83\u5c0f\u503c\u3002\u4f5c\u4e3a\u7279\u4f8b\uff0c copy \u53ef\u4ee5\u4ece string \u7c7b\u578b\u62f7\u8d1d\u5143\u7d20\u5230 []byte \u7c7b\u578b\u3002\u8fd9\u4f1a\u628a\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u5b57\u8282\u5207\u7247\u4e2d\u3002 copy(dst, src []T) int copy(dst []byte, src string) int \u4f8b\uff1a var a = [...]int{0, 1, 2, 3, 4, 5, 6, 7} var s = make([]int, 6) var b = make([]byte, 5) n1 := copy(s, a[0:]) // n1 == 6, s == []int{0, 1, 2, 3, 4, 5} n2 := copy(s, s[2:]) // n2 == 4, s == []int{2, 3, 4, 5, 4, 5} n3 := copy(b, \"Hello, World!\") // n3 == 5, b == []byte(\"Hello\")","title":"\u8ffd\u52a0\u6216\u8005\u62f7\u8d1d\u5207\u7247"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#map_2","text":"\u5185\u7f6e\u51fd\u6570 delete \u79fb\u9664 map \u7c7b\u578b m \u4e2d\u7684\u952e\u503c k\u3002k \u7684\u7c7b\u578b\u5fc5\u987b\u662f\u80fd\u591f\u8f6c\u6362\u6210 m \u952e\u7c7b\u578b\u7684\u7c7b\u578b\u3002 delete(m, k) // remove element m[k] from map m \u5982\u679c map \u7c7b\u578b m \u662f nil \u6216\u8005 m[k] \u4e0d\u5b58\u5728\uff0c\u90a3\u4e48 delete \u51fd\u6570\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002","title":"\u5220\u9664 map \u4e2d\u7684\u5143\u7d20"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_89","text":"\u6709\u4e09\u4e2a\u51fd\u6570\u53ef\u4ee5\u7ec4\u88c5\u6216\u8005\u5206\u89e3\u590d\u6570\u3002\u5185\u7f6e\u51fd\u6570 complex \u4f1a\u6784\u9020\u4e00\u4e2a\u590d\u6570\uff0c real \u548c imag \u4f1a\u5206\u89e3\u51fa\u590d\u6570\u7684\u5b9e\u90e8\u548c\u865a\u90e8\u3002 complex(realPart, imaginaryPart floatT) complexT real(complexT) floatT imag(complexT) floatT \u53c2\u6570\u7684\u7c7b\u578b\u548c\u8fd4\u56de\u503c\u7c7b\u578b\u662f\u5bf9\u5e94\u7684\u3002\u5bf9\u4e8e complex \uff0c\u4e24\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u76f8\u540c\u7684\u6d6e\u70b9\u7c7b\u578b\uff0c\u5e76\u8fd4\u56de\u7531\u76f8\u540c\u6d6e\u70b9\u6570\u7ec4\u6210\u7684\u590d\u6570\u7c7b\u578b\u3002 complex64 \u662f float32 \u5bf9\u5e94\u7684\u7c7b\u578b\uff0c complex128 \u662f float64 \u5bf9\u5e94\u7684\u53c2\u6570\u7c7b\u578b\u3002\u5982\u679c\u53c2\u6570\u662f\u4e00\u4e2a\u65e0\u7c7b\u578b\u5e38\u91cf\uff0c\u5b83\u4f1a\u8f6c\u6362\u6210\u53e6\u4e00\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u3002\u5982\u679c\u4e24\u4e2a\u53c2\u6570\u90fd\u662f\u65e0\u7c7b\u578b\u5e38\u91cf\uff0c\u4ed6\u4eec\u5fc5\u987b\u5b9e\u6570\u6216\u8005\u865a\u6570\u90e8\u5206\u4e3a\u96f6\uff0c\u5e76\u4e14\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65e0\u7c7b\u578b\u7684\u590d\u6570\u5e38\u91cf\u3002 real \u548c imag \u51fd\u6570\u548c complex \u6b63\u597d\u76f8\u53cd\u7684\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u503c\u590d\u6570\u7c7b\u578b Z \u7684\u503c z\uff0c z==Z(complex(real(z),imag(z))) \u3002 \u5982\u679c\u8fd9\u4e48\u64cd\u4f5c\u90fd\u662f\u5e38\u91cf\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u503c\u4e5f\u662f\u5e38\u91cf\u3002 var a = complex(2, -2) // complex128 const b = complex(1.0, -1.4) // untyped complex constant 1 - 1.4i x := float32(math.Cos(math.Pi/2)) // float32 var c64 = complex(5, -x) // complex64 var s uint = complex(1, 0) // untyped complex constant 1 + 0i can be converted to uint _ = complex(1, 2<<s) // illegal: 2 assumes floating-point type, cannot shift var rl = real(c64) // float32 var im = imag(a) // float64 const c = imag(b) // untyped constant -1.4 _ = imag(3 << s) // illegal: 3 assumes complex type, cannot shift","title":"\u64cd\u4f5c\u590d\u6570"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#panic","text":"\u4e24\u4e2a\u5185\u7f6e\u51fd\u6570 panic \u548c recover \uff0c\u53ef\u4ee5\u629b\u51fa\u548c\u5904\u7406\u8fd0\u884c\u65f6 panic \u548c\u7a0b\u5e8f\u7684\u9519\u8bef\u6761\u4ef6\u3002 func panic(interface{}) func recover() interface{} \u5f53\u6267\u884c F \u51fd\u6570\u65f6\uff0c\u663e\u5f0f\u7684\u8c03\u7528 panic \u6216\u8005\u8fd0\u884c\u65f6 panic \u90fd\u4f1a\u4e2d\u65ad F \u7684\u6267\u884c\u3002\u4f46\u662f F \u4e2d\u7684\u5ef6\u8fdf\u51fd\u6570\u8fd8\u4f1a\u6267\u884c\u3002\u63a5\u4e0b\u6765\u8c03\u7528 F \u51fd\u6570\u5904\u7684\u5ef6\u8fdf\u51fd\u6570\u4e5f\u4f1a\u6267\u884c\uff0c\u4e00\u76f4\u5230\u9876\u7ea7\u7684\u5ef6\u8fdf\u51fd\u6570\u3002\u9274\u4e8e\u8fd9\u70b9\uff0c\u7a0b\u5e8f\u5173\u95ed\u5e76\u4e14\u9519\u8bef\u6761\u4ef6\u53ef\u4ee5\u629b\u51fa\u3002\u5305\u62ec panic \u4e2d\u7684\u503c\u3002\u8fd9\u4e2a\u987a\u5e8f\u53eb\u505a panicking \u3002 panic(42) panic(\"unreachable\") panic(Error(\"cannot parse\")) recover \u51fd\u6570\u5141\u8bb8\u7a0b\u5e8f\u4ece\u4e00\u4e2a panicking \u4e2d\u6062\u590d\u6267\u884c\u3002\u5047\u8bbe\u51fd\u6570 G \u5ef6\u8fdf\u6267\u884c\u51fd\u6570 D \uff0c\u5728 D \u4e2d\u8c03\u7528 recover \u8fd9\u65f6\u5982\u679c\u5728 G \u6267\u884c\u65f6\u53d1\u751f panic \u4f1a\u5728 D \u4e2d\u6062\u590d\u3002\u5f53\u51fd\u6570\u6267\u884c\u5230 D\uff0c recover \u7684\u8fd4\u56de\u503c\u4f1a\u8fd4\u56de panic \u5bf9\u5e94\u7684\u9519\u8bef\uff0c\u5e76\u4e14\u7ec8\u6b62 panicking \u3002\u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b G \u51fd\u6570\u548c panic \u4e4b\u95f4\u7684\u4ee3\u7801\u4e0d\u4f1a\u6267\u884c\u3002\u4efb\u4f55\u5728 D \u4e2d G \u4e4b\u524d\u7684\u5ef6\u8fdf\u51fd\u6570\u4f1a\u8fd4\u56de\u5230\u8c03\u7528\u8005\u3002 \u5728\u4e0b\u9762\u4e24\u79cd\u60c5\u51b5\u4e0b recover \u4f1a\u8fd4\u56de nil\uff1a panic \u7684\u53c2\u6570\u4e3a nil \u643a\u7a0b\u91cc\u6ca1\u6709\u53d1\u751f panic recover \u4e0d\u662f\u5728\u5ef6\u8fdf\u51fd\u6570\u4e2d\u6267\u884c \u672c\u4f8b\u4e2d\u7684 protect \u51fd\u6570\u4f1a\u5728 g \u53d1\u751f panic \u7684\u65f6\u5019\u6062\u590d\u6267\u884c\u3002 func protect(g func()) { defer func() { log.Println(\"done\") // Println executes normally even if there is a panic if x := recover(); x != nil { log.Printf(\"run time panic: %v\", x) } }() log.Println(\"start\") g() }","title":"\u5904\u7406 panic"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_90","text":"\u8fd9\u4e2a\u5b9e\u73b0\u63d0\u4f9b\u4e86\u591a\u4e2a\u5185\u7f6e\u51fd\u6570\u6765\u5e2e\u52a9\u8fdb\u884c\u521d\u59cb\u5316\u3002\u8fd9\u4e9b\u51fd\u6570\u7528\u6765\u8f93\u51fa\u4fe1\u606f\u4f46\u662f\u4e0d\u786e\u5b9a\u4f1a\u4e00\u76f4\u5b58\u5728\u4e8e\u8bed\u8a00\u4e2d\uff0c\u4ed6\u4eec\u90fd\u6ca1\u6709\u8fd4\u56de\u503c\u3002 Function Behavior print prints all arguments; formatting of arguments is implementation-specific println like print but prints spaces between arguments and a newline at the end \u5b9e\u73b0\u9650\u5236\uff1a print \u548c println \u4e0d\u63a5\u53d7\u9664\u4e86\u5e03\u5c14\u503c\uff0c\u6570\u5b57\uff0c\u5b57\u7b26\u4e32\u4ee5\u5916\u7684\u5176\u4ed6\u7c7b\u578b\u3002","title":"\u521d\u59cb\u5316"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_91","text":"","title":"\u7a0b\u5e8f\u7684\u521d\u59cb\u5316\u548c\u6267\u884c"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_92","text":"\u5f53\u4e3a\u53d8\u91cf\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u65f6\uff0c\u4e0d\u7ba1\u662f\u58f0\u660e\u8fd8\u662f\u8c03\u7528 new \u6216\u8005\u4f7f\u7528\u5b57\u9762\u503c\u548c make \u521d\u59cb\u5316\uff0c\u53ea\u8981\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u503c\u53d8\u91cf\u90fd\u4f1a\u6709\u4e00\u4e2a\u9ed8\u8ba4\u503c\u3002\u8fd9\u6837\u7684\u5143\u7d20\u548c\u503c\u4f1a\u4f7f\u7528\u5b83\u7c7b\u578b\u7684\u96f6\u503c\uff1a false \u662f\u5e03\u5c14\u503c\u7684\u96f6\u503c\uff0c0 \u4e3a\u6570\u503c\u7c7b\u578b\u96f6\u503c\uff0c\"\" \u4e3a\u5b57\u7b26\u4e32\u96f6\u503c\uff0cnil \u4e3a\u6307\u9488\uff0c\u51fd\u6570\uff0c\u63a5\u53e3\uff0c\u5207\u7247\uff0c\u9891\u9053\uff0c\u5b57\u5178\u3002\u521d\u59cb\u5316\u4f1a\u9012\u5f52\u5b8c\u6210\uff0c\u6240\u4ee5\u7ed3\u6784\u4f53\u91cc\u7684\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e5f\u90fd\u4f1a\u6709\u5b83\u81ea\u5df1\u7684\u96f6\u503c\u3002 \u4e0b\u9762\u4e24\u4e2a\u58f0\u660e\u65f6\u76f8\u7b49\u7684\uff1a var i int var i int = 0 \u8bf7\u770b\u4e0b\u9762\u7684\u58f0\u660e\uff1a type T struct { i int; f float64; next *T } t := new(T) t.i == 0 t.f == 0.0 t.next == nil \u8fd9\u548c\u4e0b\u9762\u7684\u58f0\u660e\u65f6\u540c\u7b49\u6548\u679c\u7684\uff1a var t T","title":"\u96f6\u503c"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_93","text":"\u4fdd\u7ea7\u53d8\u91cf\u4f1a\u6309\u58f0\u660e\u7684\u987a\u5e8f\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982\u679c\u4f9d\u8d56\u5176\u4ed6\u53d8\u91cf\uff0c\u5219\u4f1a\u5728\u5176\u4ed6\u53d8\u91cf\u4e4b\u540e\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u66f4\u786e\u5207\u7684\u8bf4\uff0c\u5982\u679c\u5305\u7ea7\u53d8\u91cf\u8fd8\u6ca1\u521d\u59cb\u5316\u5e76\u4e14\u6ca1\u6709\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u6216\u8005\u8868\u8fbe\u5f0f\u4e2d\u4e0d\u5305\u542b\u5bf9\u5176\u4ed6\u672a\u521d\u59cb\u5316\u53d8\u91cf\u7684\u4f9d\u8d56\uff0c\u90a3\u4e48\u4f1a\u8ba4\u4e3a\u5b83\u6b63\u5728\u7b49\u5f85\u521d\u59cb\u5316\u3002\u521d\u59cb\u5316\u8fc7\u7a0b\u4f1a\u4ece\u6700\u65e9\u58f0\u660e\u7684\u53d8\u91cf\u5f00\u59cb\u5411\u4e0b\u4e00\u4e2a\u5305\u7ea7\u53d8\u91cf\u91cd\u590d\uff0c\u76f4\u5230\u6ca1\u6709\u9700\u8981\u521d\u59cb\u5316\u7684\u53d8\u91cf\u3002 \u5982\u679c\u5728\u521d\u59cb\u5316\u8fc7\u7a0b\u5b8c\u6210\u540e\u8fd8\u6709\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u8fd9\u4e9b\u53d8\u91cf\u53ef\u80fd\u662f\u5faa\u73af\u521d\u59cb\u5316\u4e86\uff0c\u8fd9\u4e8b\u7a0b\u5e8f\u4e0d\u662f\u5408\u6cd5\u7684\u3002 \u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\u53d8\u91cf\u7684\u58f0\u660e\u987a\u5e8f\u4f1a\u4f9d\u636e\u7f16\u8bd1\u65f6\u6587\u4ef6\u51fa\u73b0\u7684\u987a\u5e8f\uff1a\u58f0\u660e\u5728\u7b2c\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7684\u53d8\u91cf\u4f18\u5148\u4e8e\u7b2c\u4e8c\u4e2a\u6587\u4ef6\u4e2d\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u5bf9\u4f9d\u8d56\u5173\u7cfb\u7684\u5206\u6790\u4e0d\u4f1a\u6839\u636e\u53d8\u91cf\u7684\u5177\u4f53\u503c\uff0c\u5b83\u53ea\u5206\u6790\u5728\u6e90\u7801\u4e2d\u662f\u5426\u5f15\u7528\u4e86\u5176\u4ed6\u53d8\u91cf\u3002\u4f8b\u5982\uff0c\u5982\u679c\u53d8\u91cf x \u7684\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u5f15\u7528\u4e86\u53d8\u91cf y \u90a3\u4e48 x \u5c31\u4f9d\u8d56\u4e8e y\uff1a \u5f15\u7528\u4e00\u4e2a\u53d8\u91cf\u6216\u8005\u51fd\u6570\u4e2d\u7528\u5230\u4e86\u4e00\u4e2a\u53d8\u91cf \u5f15\u7528\u4e86\u4e00\u4e2a\u65b9\u6cd5\u503c m \u6216\u8005\u65b9\u6cd5\u8868\u8fbe\u5f0f t.m (\u8fd9\u91cc\u7684\u9759\u6001\u7c7b\u578b t \u4e0d\u662f\u501f\u53e3\u7c7b\u578b\uff0c\u5e76\u4e14\u65b9\u6cd5 m \u662f t \u65b9\u6cd5\u96c6\u4e2d\u7684\u65b9\u6cd5)\u3002 t.m \u7684\u8fd4\u56de\u503c\u4e0d\u4f1a\u5728\u6b64\u65f6\u5f71\u54cd\u3002 \u53d8\u91cf\uff0c\u51fd\u6570\uff0c\u6216\u8005\u65b9\u6cd5 x \u4f9d\u8d56\u53d8\u91cf y \u4f9d\u8d56\u5206\u6790\u4f1a\u5728\u6bcf\u4e2a\u5305\u4e2d\u6267\u884c\uff1b\u4ed6\u53ea\u8003\u8651\u5f53\u524d\u5305\u4e2d\u7684\u6790\u53d8\u91cf\uff0c\u51fd\u6570\uff0c\u548c\u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u58f0\u660e\uff1a var ( a = c + b b = f() c = f() d = 3 ) func f() int { d++ return d } \u521d\u59cb\u5316\u987a\u5e8f\u4e3a d\uff0cb\uff0cc\uff0ca\u3002 \u53d8\u91cf\u53ef\u4ee5\u5728\u5305\u4e2d\u58f0\u660e\u7684\u521d\u59cb\u5316\u51fd\u6570 init \u4e2d\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5b83\u6ca1\u6709\u53c2\u6570\u548c\u8fd4\u56de\u503c\u3002 func init() {} \u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u5305\u5b9a\u4e49\u591a\u4e2a\u8be5\u51fd\u6570\uff0c\u751a\u81f3\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u4e5f\u53ef\u4ee5\u3002\u5e76\u4e14\u4e0d\u4f1a\u58f0\u660e\u8be5\u8be5\u6807\u8bc6\u7b26\u3002\u56e0\u6b64 init \u51fd\u6570\u4e0d\u80fd\u5728\u7a0b\u5e8f\u4e2d\u8c03\u7528\u3002 \u8fd8\u672a\u5bfc\u5165\u7684\u5305\u4f1a\u5148\u521d\u59cb\u5316\u5305\u7ea7\u7684\u53d8\u91cf\u7136\u540e\u6309\u7167 init \u51fd\u6570\u5728\u6e90\u7801\u4e2d\u7684\u987a\u5e8f\u8c03\u7528\uff0c\u5b83\u53ef\u80fd\u5728\u5305\u7684\u591a\u4e2a\u6587\u4ef6\u4e2d\u3002\u5982\u679c\u9700\u8981\u5bfc\u5165\u4e00\u4e2a\u5305\uff0c\u5b83\u4f1a\u5728\u521d\u59cb\u5316\u81ea\u5df1\u4e4b\u524d\u5148\u521d\u59cb\u5316\u8fd9\u4e2a\u9700\u8981\u5bfc\u5165\u7684\u5305\u3002\u5982\u679c\u5bfc\u5165\u4e00\u4e2a\u5305\u591a\u6b21\uff0c\u90a3\u8fd9\u4e2a\u5305\u53ea\u4f1a\u521d\u59cb\u5316\u4e00\u6b21\u3002\u5bfc\u5165\u7684\u5305\u4e0d\u80fd\u5b58\u5728\u5faa\u73af\u5f15\u7528\u3002 \u5305\u7684\u521d\u59cb\u5316\u2014\u2014\u53d8\u91cf\u521d\u59cb\u5316\u548c\u5bf9 init \u51fd\u6570\u7684\u8c03\u7528\u4f1a\u6309\u987a\u5e8f\u53d1\u751f\u5728\u540c\u4e00\u4e2a goroutine \u4e2d\u3002 init \u51fd\u6570\u53ef\u80fd\u4f1a\u542f\u52a8\u5176\u4ed6 goroutine\u3002\u4e0d\u8fc7\u4e00\u822c init \u51fd\u6570\u90fd\u662f\u6309\u5e8f\u8fdb\u884c\u521d\u59cb\u5316\u7684\uff1a\u5b83\u53ea\u5728\u4e0a\u4e00\u6b65\u5df2\u7ecf\u6267\u884c\u5b8c\u6210\u65f6\u624d\u4f1a\u8c03\u7528\u4e0b\u4e00\u4e2a\u6b65\u9aa4\u3002 \u786e\u4fdd\u521d\u59cb\u5316\u884c\u4e3a\u662f\u53ef\u4ee5\u590d\u73b0\u7684\uff0c\u6784\u5efa\u7cfb\u7edf\u9f13\u52b1\u5728\u540c\u4e00\u4e2a\u5305\u4e2d\u5305\u542b\u591a\u4e2a\u6587\u4ef6\u8fd9\u4e9b\u6587\u4ef6\u5728\u7f16\u8bd1\u5668\u4e2d\u4f1a\u4ee5\u5b57\u6bcd\u6392\u5e8f\u3002","title":"\u5305\u7684\u521d\u59cb\u5316"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_94","text":"\u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\u7531\u4e00\u4e2a main \u5305\u5bfc\u5165\u6240\u6709\u9700\u8981\u7684\u5305\u3002 main \u5305\u5fc5\u987b\u4ee5 main \u4f5c\u4e3a\u5305\u540d\u5e76\u4e14\u58f0\u660e\u4e00\u4e2a\u6ca1\u6709\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684 main \u51fd\u6570\u3002 func main() {} \u7a0b\u5e8f\u5148\u521d\u59cb\u5316 main \u5305\u7136\u540e\u8c03\u7528 main \u51fd\u6570\u3002\u5f53 main \u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u9000\u51fa\u3002\u5b83\u4e0d\u4f1a\u7b49\u5f85\u5176\u4ed6 goroutines \u5b8c\u6210\u3002","title":"\u7a0b\u5e8f\u6267\u884c"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_95","text":"\u9884\u5b9a\u4e49\u7684\u9519\u8bef\u7c7b\u578b\u4e3a\uff1a type error interface { Error() string } \u5b83\u662f\u8868\u793a\u9519\u8bef\u4fe1\u606f\u7684\u5e38\u89c4\u63a5\u53e3\uff0cnil \u4ee3\u8868\u6ca1\u6709\u53d1\u751f\u9519\u8bef\u3002\u4f8b\u5982\uff0c\u5728\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u53ef\u4ee5\u5b9a\u4e49\u4e3a\uff1a func Read(f *File, b []byte) (n int, err error)","title":"\u9519\u8bef"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_96","text":"\u8fd0\u884c\u65f6\u9519\u8bef\uff08\u4f8b\u5982\u6570\u7ec4\u7684\u8d8a\u754c\u8bbf\u95ee\uff09\u4f1a\u9020\u6210\u8fd0\u884c\u65f6\u6050\u614c\uff0c\u5b83\u548c\u4ee5 runtime.Error \u63a5\u53e3\u5b9e\u73b0\u8c03\u7528\u5185\u7f6e\u7684 panic \u51fd\u6570\u4e00\u6837\u3002 runtime.Error \u6ee1\u8db3\u9884\u5b9a\u4e49\u7684 error \u63a5\u53e3\u3002\u4e0d\u540c\u7684\u9519\u8bef\u503c\u4ee3\u8868\u4e0d\u540c\u7684\u8fd0\u884c\u65f6\u9519\u8bef\u6761\u4ef6\u3002 package runtime type Error interface { error // and perhaps other methods }","title":"\u8fd0\u884c\u65f6\u6050\u614c"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_97","text":"","title":"\u7cfb\u7edf\u76f8\u5173"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#unsafe","text":"unsafe \u662f\u7f16\u8bd1\u5668\u5df2\u77e5\u7684\u5185\u7f6e\u5305\uff0c\u53ef\u4ee5\u901a\u8fc7\u5bfc\u5165\u8def\u5f84 unsafe \u8bbf\u95ee\u5305\u5185\u5bb9\uff0c\u63d0\u4f9b unsafe \u5305\u76ee\u7684\u662f\u652f\u6301\u5e95\u5c42\u7f16\u7a0b\uff08\u5305\u62ec\u64cd\u4f5c\u975e Go \u7c7b\u578b\u7684\u6570\u636e\u7ed3\u6784\uff09\u3002\u4f7f\u7528 unsafe \u5305\u5fc5\u987b\u81ea\u5df1\u4fdd\u8bc1\u7c7b\u578b\u5b89\u5168\u800c\u4e14\u5b83\u6709\u53ef\u80fd\u7834\u574f\u7a0b\u5e8f\u7684\u79fb\u690d\u6027\u3002 unsafe \u5305\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u63a5\u53e3\uff1a package unsafe type ArbitraryType int // \u4efb\u610f\u4e00\u4e2a Go \u7c7b\u578b\uff1b\u5b83\u4e0d\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u7c7b\u578b\u3002 type Pointer *ArbitraryType func Alignof(variable ArbitraryType) uintptr func Offsetof(selector ArbitraryType) uintptr func Sizeof(variable ArbitraryType) uintptr Pointer \u662f\u4e00\u4e2a\u6307\u9488\u7c7b\u578b\uff0c\u4f46\u662f\u4e0d\u80fd\u89e3\u5f15\u7528 Pointer \u7684\u503c\u3002\u6240\u6709\u5e95\u5c42\u7c7b\u578b uintptr \u7684\u6307\u9488\u548c\u503c\u90fd\u80fd\u8f6c\u6362\u6210 Pointer \u7c7b\u578b\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002 Pointer \u548c uintptr \u4e4b\u95f4\u7684\u8f6c\u6362\u6548\u679c\u7531\u5177\u4f53\u5b9e\u73b0\u5b9a\u4e49\u3002 var f float64 bits = *(*uint64)(unsafe.Pointer(&f)) type ptr unsafe.Pointer bits = *(*uint64)(ptr(&f)) var p ptr = nil \u5047\u8bbe\u53d8\u91cf v \u7531 var v = x \u5b9a\u4e49\u3002 Alignof \u4ee5\u8868\u8fbe\u5f0f x \u4f5c\u4e3a\u53c2\u6570\u5e76\u8fd4\u56de x \u7684\u5bf9\u9f50\u5b57\u8282\u6570\u3002 Sizeof \u4ee5\u8868\u8fbe\u5f0f x \u4f5c\u4e3a\u53c2\u6570\u5e76\u8fd4\u56de x \u7684\u5927\u5c0f\u3002 \u51fd\u6570 Offsetof \u4ee5\u9009\u62e9\u5668 s.f \uff08 s \u6216\u8005 *s \u7ed3\u6784\u4f53\u4e2d\u7684 f \u5b57\u6bb5\uff09\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd4\u56de\u5b57\u6bb5\u76f8\u5bf9\u7ed3\u6784\u4f53\u9996\u5730\u5740\u7684\u4f4d\u7f6e\u3002\u5982\u679c f \u662f\u4e00\u4e2a\u5d4c\u5165\u5b57\u6bb5\uff0c\u90a3 f \u5fc5\u987b\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\uff08\u4e0d\u80fd\u901a\u8fc7\u6307\u9488\u8fdb\u884c\u95f4\u63a5\u8bbf\u95ee\uff09\u3002\u5bf9\u4e8e\u7ed3\u6784\u4f53 s \u7684 f \u5b57\u6bb5\uff1a uintptr(unsafe.Pointer(&s)) + unsafe.Offsetof(s.f) == uintptr(unsafe.Pointer(&s.f)) \u8ba1\u7b97\u673a\u7684\u4f53\u7cfb\u7ed3\u6784\u8981\u6c42\u5bf9\u9f50\u5185\u5b58\u5730\u5740\uff08\u5bf9\u4e8e\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740\u6709\u591a\u79cd\u56e0\u7d20\u5f71\u54cd\u5bf9\u9f50\uff09\u3002 Alignof \u51fd\u6570\u83b7\u53d6\u4e00\u4e2a\u4eba\u548c\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u5e76\u8fd4\u56de\u53d8\u91cf\u5bf9\u9f50\u7684\u5b57\u8282\u6570\u3002\u5bf9\u4e8e\u53d8\u91cf x\uff1a uintptr(unsafe.Pointer(&x)) % unsafe.Alignof(x) == 0 \u7f16\u8bd1\u65f6 uintptr \u7c7b\u578b\u5e38\u91cf\u8868\u8fbe\u5f0f\u4f1a\u8c03\u7528 Alignof \uff0c Offsetof \uff0c\u548c Sizeof \u3002","title":"unsafe \u5305"},{"location":"golang/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_98","text":"\u5bf9\u4e8e\u6570\u5b57\u7c7b\u578b\uff0c\u786e\u5b9a\u6709\u4ee5\u4e0b\u5c3a\u5bf8\uff1a type size in bytes byte, uint8, int8 1 uint16, int16 2 uint32, int32, float32 4 uint64, int64, float64, complex64 8 complex128 16 Go \u4e2d\u89c4\u5b9a\u7684\u6700\u5c0f\u5bf9\u9f50\u7279\u6027\uff1a \u5bf9\u4e8e\u4efb\u610f\u53d8\u91cf\u7c7b\u578b x\uff1a unsafe.Alignof(x) \u81f3\u5c11\u4e3a 1\u3002 \u5bf9\u4e8e\u7ed3\u6784\u4f53\u7c7b\u578b\uff1a unsafe.Alignof(x) \u662f\u6240\u6709\u5185\u90e8\u5b57\u6bb5 unsafe.Alignof(x.f) \u7684\u6700\u5927\u503c\uff0c\u5e76\u4e14\u81f3\u5c11\u4e3a 1\u3002 \u5bf9\u4e8e\u6570\u7ec4\u7c7b\u578b\uff1a unsafe.Alignof(x) \u548c\u6570\u7ec4\u5143\u7d20\u7c7b\u578b\u7684 alignment \u76f8\u540c\u3002 \u7ed3\u6784\u4f53\uff08\u6570\u7ec4\uff09\u5728\u5185\u90e8\u6ca1\u6709\u5b57\u6bb5\uff08\u5143\u7d20\uff09\u7684\u65f6\u5019\u5927\u5c0f\u4e3a 0\u3002\u4e24\u4e2a\u6240\u5360\u7a7a\u95f4\u5927\u5c0f\u4e3a 0 \u7684\u4e0d\u540c\u53d8\u91cf\u53ef\u80fd\u5728\u5185\u5b58\u4e2d\u62e5\u6709\u76f8\u540c\u5730\u5740\u3002","title":"\u786e\u5b9a\u7684\u5927\u5c0f\u548c\u5bf9\u9f50\u5b57\u8282\u6570"},{"location":"golang/Golang%20%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/","text":"Golang \u5165\u95e8\u7b14\u8bb0\u601d\u7ef4\u5bfc\u56fe\u7248\uff1ahttps://www.processon.com/view/link/611b35887d9c08015c29e2ba","title":"Golang \u5165\u95e8\u7b14\u8bb0\u601d\u7ef4\u5bfc\u56fe\u7248\uff1ahttps://www.processon.com/view/link/611b35887d9c08015c29e2ba"},{"location":"golang/Golang%20%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/#golang-httpswwwprocessoncomviewlink611b35887d9c08015c29e2ba","text":"","title":"Golang \u5165\u95e8\u7b14\u8bb0\u601d\u7ef4\u5bfc\u56fe\u7248\uff1ahttps://www.processon.com/view/link/611b35887d9c08015c29e2ba"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/","text":"\u524d\u8a00 Go \u662f\u4e00\u95e8\u7b80\u5355\u6709\u8da3\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e0e\u5176\u4ed6\u8bed\u8a00\u4e00\u6837\uff0c\u5728\u4f7f\u7528\u65f6\u4e0d\u514d\u4f1a\u9047\u5230\u5f88\u591a\u5751\uff0c\u4e0d\u8fc7\u5b83\u4eec\u5927\u591a\u4e0d\u662f Go \u672c\u8eab\u7684\u8bbe\u8ba1\u7f3a\u9677\u3002\u5982\u679c\u4f60\u521a\u4ece\u5176\u4ed6\u8bed\u8a00\u8f6c\u5230 Go\uff0c\u90a3\u8fd9\u7bc7\u6587\u7ae0\u91cc\u7684\u5751\u591a\u534a\u4f1a\u8e29\u5230\u3002 \u5982\u679c\u82b1\u65f6\u95f4\u5b66\u4e60\u5b98\u65b9 doc\u3001wiki\u3001 \u8ba8\u8bba\u90ae\u4ef6\u5217\u8868 \u3001 Rob Pike \u7684\u5927\u91cf\u6587\u7ae0\u4ee5\u53ca Go \u7684\u6e90\u7801\uff0c\u4f1a\u53d1\u73b0\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u7684\u5751\u662f\u5f88\u5e38\u89c1\u7684\uff0c\u65b0\u624b\u8df3\u8fc7\u8fd9\u4e9b\u5751\uff0c\u80fd\u51cf\u5c11\u5927\u91cf\u8c03\u8bd5\u4ee3\u7801\u7684\u65f6\u95f4\u3002 \u521d\u7ea7\u7bc7\uff1a1-34 1. \u5de6\u5927\u62ec\u53f7 { \u4e0d\u80fd\u5355\u72ec\u653e\u4e00\u884c \u5728\u5176\u4ed6\u5927\u591a\u6570\u8bed\u8a00\u4e2d\uff0c { \u7684\u4f4d\u7f6e\u4f60\u81ea\u884c\u51b3\u5b9a\u3002Go \u6bd4\u8f83\u7279\u522b\uff0c\u9075\u5b88\u5206\u53f7\u6ce8\u5165\u89c4\u5219\uff08automatic semicolon injection\uff09\uff1a\u7f16\u8bd1\u5668\u4f1a\u5728\u6bcf\u884c\u4ee3\u7801\u5c3e\u90e8\u7279\u5b9a\u5206\u9694\u7b26\u540e\u52a0 ; \u6765\u5206\u9694\u591a\u6761\u8bed\u53e5\uff0c\u6bd4\u5982\u4f1a\u5728 ) \u540e\u52a0\u5206\u53f7\uff1a // \u9519\u8bef\u793a\u4f8b func main() { println(\"hello world\") } // \u7b49\u6548\u4e8e func main(); // \u65e0\u51fd\u6570\u4f53 { println(\"hello world\") } ./main.go: missing function body ./main.go: syntax error: unexpected semicolon or newline before { // \u6b63\u786e\u793a\u4f8b func main() { println(\"hello world\") } 2. \u672a\u4f7f\u7528\u7684\u53d8\u91cf \u5982\u679c\u5728\u51fd\u6570\u4f53\u4ee3\u7801\u4e2d\u6709\u672a\u4f7f\u7528\u7684\u53d8\u91cf\uff0c\u5219\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\uff0c\u4e0d\u8fc7\u5168\u5c40\u53d8\u91cf\u58f0\u660e\u4f46\u4e0d\u4f7f\u7528\u662f\u53ef\u4ee5\u7684\u3002 \u5373\u4f7f\u53d8\u91cf\u58f0\u660e\u540e\u4e3a\u53d8\u91cf\u8d4b\u503c\uff0c\u4f9d\u65e7\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\uff0c\u9700\u5728\u67d0\u5904\u4f7f\u7528\u5b83\uff1a // \u9519\u8bef\u793a\u4f8b var gvar int // \u5168\u5c40\u53d8\u91cf\uff0c\u58f0\u660e\u4e0d\u4f7f\u7528\u4e5f\u53ef\u4ee5 func main() { var one int // error: one declared and not used two := 2 // error: two declared and not used var three int // error: three declared and not used three = 3 } // \u6b63\u786e\u793a\u4f8b // \u53ef\u4ee5\u76f4\u63a5\u6ce8\u91ca\u6216\u79fb\u9664\u672a\u4f7f\u7528\u7684\u53d8\u91cf func main() { var one int _ = one two := 2 println(two) var three int one = three var four int four = four } 3. \u672a\u4f7f\u7528\u7684 import \u5982\u679c\u4f60 import \u4e00\u4e2a\u5305\uff0c\u4f46\u5305\u4e2d\u7684\u53d8\u91cf\u3001\u51fd\u6570\u3001\u63a5\u53e3\u548c\u7ed3\u6784\u4f53\u4e00\u4e2a\u90fd\u6ca1\u6709\u7528\u5230\u7684\u8bdd\uff0c\u5c06\u7f16\u8bd1\u5931\u8d25\u3002 \u53ef\u4ee5\u4f7f\u7528 _ \u4e0b\u5212\u7ebf\u7b26\u53f7\u4f5c\u4e3a\u522b\u540d\u6765\u5ffd\u7565\u5bfc\u5165\u7684\u5305\uff0c\u4ece\u800c\u907f\u514d\u7f16\u8bd1\u9519\u8bef\uff0c\u8fd9\u53ea\u4f1a\u6267\u884c package \u7684 init() // \u9519\u8bef\u793a\u4f8b import ( \"fmt\" // imported and not used: \"fmt\" \"log\" // imported and not used: \"log\" \"time\" // imported and not used: \"time\" ) func main() { } // \u6b63\u786e\u793a\u4f8b // \u53ef\u4ee5\u4f7f\u7528 goimports \u5de5\u5177\u6765\u6ce8\u91ca\u6216\u79fb\u9664\u672a\u4f7f\u7528\u5230\u7684\u5305 import ( _ \"fmt\" \"log\" \"time\" ) func main() { _ = log.Println _ = time.Now } 4. \u7b80\u77ed\u58f0\u660e\u7684\u53d8\u91cf\u53ea\u80fd\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528 // \u9519\u8bef\u793a\u4f8b myvar := 1 // syntax error: non-declaration statement outside function body func main() { } // \u6b63\u786e\u793a\u4f8b var myvar = 1 func main() { } 5. \u4f7f\u7528\u7b80\u77ed\u58f0\u660e\u6765\u91cd\u590d\u58f0\u660e\u53d8\u91cf \u4e0d\u80fd\u7528\u7b80\u77ed\u58f0\u660e\u65b9\u5f0f\u6765\u5355\u72ec\u4e3a\u4e00\u4e2a\u53d8\u91cf\u91cd\u590d\u58f0\u660e\uff0c := \u5de6\u4fa7\u81f3\u5c11\u6709\u4e00\u4e2a\u65b0\u53d8\u91cf\uff0c\u624d\u5141\u8bb8\u591a\u53d8\u91cf\u7684\u91cd\u590d\u58f0\u660e\uff1a // \u9519\u8bef\u793a\u4f8b func main() { one := 0 one := 1 // error: no new variables on left side of := } // \u6b63\u786e\u793a\u4f8b func main() { one := 0 one, two := 1, 2 // two \u662f\u65b0\u53d8\u91cf\uff0c\u5141\u8bb8 one \u7684\u91cd\u590d\u58f0\u660e\u3002\u6bd4\u5982 error \u5904\u7406\u7ecf\u5e38\u7528\u540c\u540d\u53d8\u91cf err one, two = two, one // \u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u503c\u7684\u7b80\u5199 } 6. \u4e0d\u80fd\u4f7f\u7528\u7b80\u77ed\u58f0\u660e\u6765\u8bbe\u7f6e\u5b57\u6bb5\u7684\u503c struct \u7684\u53d8\u91cf\u5b57\u6bb5\u4e0d\u80fd\u4f7f\u7528 := \u6765\u8d4b\u503c\u4ee5\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u53d8\u91cf\u6765\u907f\u514d\u89e3\u51b3\uff1a // \u9519\u8bef\u793a\u4f8b type info struct { result int } func work() (int, error) { return 3, nil } func main() { var data info data.result, err := work() // error: non-name data.result on left side of := fmt.Printf(\"info: %+v\\n\", data) } // \u6b63\u786e\u793a\u4f8b func main() { var data info var err error // err \u9700\u8981\u9884\u58f0\u660e data.result, err = work() if err != nil { fmt.Println(err) return } fmt.Printf(\"info: %+v\\n\", data) } 7. \u4e0d\u5c0f\u5fc3\u8986\u76d6\u4e86\u53d8\u91cf \u5bf9\u4ece\u52a8\u6001\u8bed\u8a00\u8f6c\u8fc7\u6765\u7684\u5f00\u53d1\u8005\u6765\u8bf4\uff0c\u7b80\u77ed\u58f0\u660e\u5f88\u597d\u7528\uff0c\u8fd9\u53ef\u80fd\u4f1a\u8ba9\u4eba\u8bef\u4f1a := \u662f\u4e00\u4e2a\u8d4b\u503c\u64cd\u4f5c\u7b26\u3002 \u5982\u679c\u4f60\u5728\u65b0\u7684\u4ee3\u7801\u5757\u4e2d\u50cf\u4e0b\u8fb9\u8fd9\u6837\u8bef\u7528\u4e86 := \uff0c\u7f16\u8bd1\u4e0d\u4f1a\u62a5\u9519\uff0c\u4f46\u662f\u53d8\u91cf\u4e0d\u4f1a\u6309\u4f60\u7684\u9884\u671f\u5de5\u4f5c\uff1a func main() { x := 1 println(x) // 1 { println(x) // 1 x := 2 println(x) // 2 // \u65b0\u7684 x \u53d8\u91cf\u7684\u4f5c\u7528\u57df\u53ea\u5728\u4ee3\u7801\u5757\u5185\u90e8 } println(x) // 1 } \u8fd9\u662f Go \u5f00\u53d1\u8005\u5e38\u72af\u7684\u9519\uff0c\u800c\u4e14\u4e0d\u6613\u88ab\u53d1\u73b0\u3002 \u53ef\u4f7f\u7528 vet \u5de5\u5177\u6765\u8bca\u65ad\u8fd9\u79cd\u53d8\u91cf\u8986\u76d6\uff0cGo \u9ed8\u8ba4\u4e0d\u505a\u8986\u76d6\u68c0\u67e5\uff0c\u6dfb\u52a0 -shadow \u9009\u9879\u6765\u542f\u7528\uff1a > go tool vet -shadow main.go main.go:9: declaration of \"x\" shadows declaration at main.go:5 \u6ce8\u610f vet \u4e0d\u4f1a\u62a5\u544a\u5168\u90e8\u88ab\u8986\u76d6\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u4f7f\u7528 go-nyet \u6765\u505a\u8fdb\u4e00\u6b65\u7684\u68c0\u6d4b\uff1a > $GOPATH/bin/go-nyet main.go main.go:10:3:Shadowing variable `x` 8. \u663e\u5f0f\u7c7b\u578b\u7684\u53d8\u91cf\u65e0\u6cd5\u4f7f\u7528 nil \u6765\u521d\u59cb\u5316 nil \u662f interface\u3001function\u3001pointer\u3001map\u3001slice \u548c channel \u7c7b\u578b\u53d8\u91cf\u7684\u9ed8\u8ba4\u521d\u59cb\u503c\u3002\u4f46\u58f0\u660e\u65f6\u4e0d\u6307\u5b9a\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u4e5f\u65e0\u6cd5\u63a8\u65ad\u51fa\u53d8\u91cf\u7684\u5177\u4f53\u7c7b\u578b\u3002 // \u9519\u8bef\u793a\u4f8b func main() { var x = nil // error: use of untyped nil _ = x } // \u6b63\u786e\u793a\u4f8b func main() { var x interface{} = nil _ = x } 9. \u76f4\u63a5\u4f7f\u7528\u503c\u4e3a nil \u7684 slice\u3001map \u5141\u8bb8\u5bf9\u503c\u4e3a nil \u7684 slice \u6dfb\u52a0\u5143\u7d20\uff0c\u4f46\u5bf9\u503c\u4e3a nil \u7684 map \u6dfb\u52a0\u5143\u7d20\u5219\u4f1a\u9020\u6210\u8fd0\u884c\u65f6 panic // map \u9519\u8bef\u793a\u4f8b func main() { var m map[string]int m[\"one\"] = 1 // error: panic: assignment to entry in nil map // m := make(map[string]int)// map \u7684\u6b63\u786e\u58f0\u660e\uff0c\u5206\u914d\u4e86\u5b9e\u9645\u7684\u5185\u5b58 } // slice \u6b63\u786e\u793a\u4f8b func main() { var s []int s = append(s, 1) } 10. map \u5bb9\u91cf \u5728\u521b\u5efa map \u7c7b\u578b\u7684\u53d8\u91cf\u65f6\u53ef\u4ee5\u6307\u5b9a\u5bb9\u91cf\uff0c\u4f46\u4e0d\u80fd\u50cf slice \u4e00\u6837\u4f7f\u7528 cap() \u6765\u68c0\u6d4b\u5206\u914d\u7a7a\u95f4\u7684\u5927\u5c0f\uff1a // \u9519\u8bef\u793a\u4f8b func main() { m := make(map[string]int, 99) println(cap(m)) // error: invalid argument m1 (type map[string]int) for cap } 11. string \u7c7b\u578b\u7684\u53d8\u91cf\u503c\u4e0d\u80fd\u4e3a nil \u5bf9\u90a3\u4e9b\u559c\u6b22\u7528 nil \u521d\u59cb\u5316\u5b57\u7b26\u4e32\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u5c31\u662f\u5751\uff1a // \u9519\u8bef\u793a\u4f8b func main() { var s string = nil // cannot use nil as type string in assignment if s == nil { // invalid operation: s == nil (mismatched types string and nil) s = \"default\" } } // \u6b63\u786e\u793a\u4f8b func main() { var s string // \u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u96f6\u503c\u662f\u7a7a\u4e32 \"\" if s == \"\" { s = \"default\" } } 12. Array \u7c7b\u578b\u7684\u503c\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570 \u5728 C/C++ \u4e2d\uff0c\u6570\u7ec4\uff08\u540d\uff09\u662f\u6307\u9488\u3002\u5c06\u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\u4f20\u8fdb\u51fd\u6570\u65f6\uff0c\u76f8\u5f53\u4e8e\u4f20\u9012\u4e86\u6570\u7ec4\u5185\u5b58\u5730\u5740\u7684\u5f15\u7528\uff0c\u5728\u51fd\u6570\u5185\u90e8\u4f1a\u6539\u53d8\u8be5\u6570\u7ec4\u7684\u503c\u3002 \u5728 Go \u4e2d\uff0c\u6570\u7ec4\u662f\u503c\u3002\u4f5c\u4e3a\u53c2\u6570\u4f20\u8fdb\u51fd\u6570\u65f6\uff0c\u4f20\u9012\u7684\u662f\u6570\u7ec4\u7684\u539f\u59cb\u503c\u62f7\u8d1d\uff0c\u6b64\u65f6\u5728\u51fd\u6570\u5185\u90e8\u662f\u65e0\u6cd5\u66f4\u65b0\u8be5\u6570\u7ec4\u7684\uff1a // \u6570\u7ec4\u4f7f\u7528\u503c\u62f7\u8d1d\u4f20\u53c2 func main() { x := [3]int{1,2,3} func(arr [3]int) { arr[0] = 7 fmt.Println(arr) // [7 2 3] }(x) fmt.Println(x) // [1 2 3] // \u5e76\u4e0d\u662f\u4f60\u4ee5\u4e3a\u7684 [7 2 3] } \u5982\u679c\u60f3\u4fee\u6539\u53c2\u6570\u6570\u7ec4\uff1a \u76f4\u63a5\u4f20\u9012\u6307\u5411\u8fd9\u4e2a\u6570\u7ec4\u7684\u6307\u9488\u7c7b\u578b\uff1a // \u4f20\u5740\u4f1a\u4fee\u6539\u539f\u6570\u636e func main() { x := [3]int{1,2,3} func(arr *[3]int) { (*arr)[0] = 7 fmt.Println(arr) // &[7 2 3] }(&x) fmt.Println(x) // [7 2 3] } \u76f4\u63a5\u4f7f\u7528 slice\uff1a\u5373\u4f7f\u51fd\u6570\u5185\u90e8\u5f97\u5230\u7684\u662f slice \u7684\u503c\u62f7\u8d1d\uff0c\u4f46\u4f9d\u65e7\u4f1a\u66f4\u65b0 slice \u7684\u539f\u59cb\u6570\u636e\uff08\u5e95\u5c42 array\uff09 // \u4f1a\u4fee\u6539 slice \u7684\u5e95\u5c42 array\uff0c\u4ece\u800c\u4fee\u6539 slice func main() { x := []int{1, 2, 3} func(arr []int) { arr[0] = 7 fmt.Println(x) // [7 2 3] }(x) fmt.Println(x) // [7 2 3] } 13. range \u904d\u5386 slice \u548c array \u65f6\u6df7\u6dc6\u4e86\u8fd4\u56de\u503c \u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684 for-in \u3001 foreach \u904d\u5386\u8bed\u53e5\u4e0d\u540c\uff0cGo \u4e2d\u7684 range \u5728\u904d\u5386\u65f6\u4f1a\u751f\u6210 2 \u4e2a\u503c\uff0c\u7b2c\u4e00\u4e2a\u662f\u5143\u7d20\u7d22\u5f15\uff0c\u7b2c\u4e8c\u4e2a\u662f\u5143\u7d20\u7684\u503c\uff1a // \u9519\u8bef\u793a\u4f8b func main() { x := []string{\"a\", \"b\", \"c\"} for v := range x { fmt.Println(v) // 0 1 2 } } // \u6b63\u786e\u793a\u4f8b func main() { x := []string{\"a\", \"b\", \"c\"} for _, v := range x { // \u4f7f\u7528 _ \u4e22\u5f03\u7d22\u5f15 fmt.Println(v) } } 14. slice \u548c array \u5176\u5b9e\u662f\u4e00\u7ef4\u6570\u636e \u770b\u8d77\u6765 Go \u652f\u6301\u591a\u7ef4\u7684 array \u548c slice\uff0c\u53ef\u4ee5\u521b\u5efa\u6570\u7ec4\u7684\u6570\u7ec4\u3001\u5207\u7247\u7684\u5207\u7247\uff0c\u4f46\u5176\u5b9e\u5e76\u4e0d\u662f\u3002 \u5bf9\u4f9d\u8d56\u52a8\u6001\u8ba1\u7b97\u591a\u7ef4\u6570\u7ec4\u503c\u7684\u5e94\u7528\u6765\u8bf4\uff0c\u5c31\u6027\u80fd\u548c\u590d\u6742\u5ea6\u800c\u8a00\uff0c\u7528 Go \u5b9e\u73b0\u7684\u6548\u679c\u5e76\u4e0d\u7406\u60f3\u3002 \u53ef\u4ee5\u4f7f\u7528\u539f\u59cb\u7684\u4e00\u7ef4\u6570\u7ec4\u3001\u201c\u72ec\u7acb\u201c \u7684\u5207\u7247\u3001\u201c\u5171\u4eab\u5e95\u5c42\u6570\u7ec4\u201d\u7684\u5207\u7247\u6765\u521b\u5efa\u52a8\u6001\u7684\u591a\u7ef4\u6570\u7ec4\u3002 \u4f7f\u7528\u539f\u59cb\u7684\u4e00\u7ef4\u6570\u7ec4\uff1a\u8981\u505a\u597d\u7d22\u5f15\u68c0\u67e5\u3001\u6ea2\u51fa\u68c0\u6d4b\u3001\u4ee5\u53ca\u5f53\u6570\u7ec4\u6ee1\u65f6\u518d\u6dfb\u52a0\u503c\u65f6\u8981\u91cd\u65b0\u505a\u5185\u5b58\u5206\u914d\u3002 \u4f7f\u7528\u201c\u72ec\u7acb\u201d\u7684\u5207\u7247\u5206\u4e24\u6b65\uff1a \u521b\u5efa\u5916\u90e8 slice \u5bf9\u6bcf\u4e2a\u5185\u90e8 slice \u8fdb\u884c\u5185\u5b58\u5206\u914d \u6ce8\u610f\u5185\u90e8\u7684 slice \u76f8\u4e92\u72ec\u7acb\uff0c\u4f7f\u5f97\u4efb\u4e00\u5185\u90e8 slice \u589e\u7f29\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6\u7684 slice // \u4f7f\u7528\u5404\u81ea\u72ec\u7acb\u7684 6 \u4e2a slice \u6765\u521b\u5efa [2][3] \u7684\u52a8\u6001\u591a\u7ef4\u6570\u7ec4 func main() { x := 2 y := 4 table := make([][]int, x) for i := range table { table[i] = make([]int, y) } } \u4f7f\u7528\u201c\u5171\u4eab\u5e95\u5c42\u6570\u7ec4\u201d\u7684\u5207\u7247 \u521b\u5efa\u4e00\u4e2a\u5b58\u653e\u539f\u59cb\u6570\u636e\u7684\u5bb9\u5668 slice \u521b\u5efa\u5176\u4ed6\u7684 slice \u5207\u5272\u539f\u59cb slice \u6765\u521d\u59cb\u5316\u5176\u4ed6\u7684 slice func main() { h, w := 2, 4 raw := make([]int, h*w) for i := range raw { raw[i] = i } // \u521d\u59cb\u5316\u539f\u59cb slice fmt.Println(raw, &raw[4]) // [0 1 2 3 4 5 6 7] 0xc420012120 table := make([][]int, h) for i := range table { // \u7b49\u95f4\u8ddd\u5207\u5272\u539f\u59cb slice\uff0c\u521b\u5efa\u52a8\u6001\u591a\u7ef4\u6570\u7ec4 table // 0: raw[0*4: 0*4 + 4] // 1: raw[1*4: 1*4 + 4] table[i] = raw[i*w : i*w + w] } fmt.Println(table, &table[1][0]) // [[0 1 2 3] [4 5 6 7]] 0xc420012120 } \u66f4\u591a\u5173\u4e8e\u591a\u7ef4\u6570\u7ec4\u7684\u53c2\u8003 go-how-is-two-dimensional-arrays-memory-representation what-is-a-concise-way-to-create-a-2d-slice-in-go 15. \u8bbf\u95ee map \u4e2d\u4e0d\u5b58\u5728\u7684 key \u548c\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u7c7b\u4f3c\uff0c\u5982\u679c\u8bbf\u95ee\u4e86 map \u4e2d\u4e0d\u5b58\u5728\u7684 key \u5219\u5e0c\u671b\u80fd\u8fd4\u56de nil\uff0c\u6bd4\u5982\u5728 PHP \u4e2d\uff1a > php -r '$v = [\"x\"=>1, \"y\"=>2]; @var_dump($v[\"z\"]);' NULL Go \u5219\u4f1a\u8fd4\u56de\u5143\u7d20\u5bf9\u5e94\u6570\u636e\u7c7b\u578b\u7684\u96f6\u503c\uff0c\u6bd4\u5982 nil \u3001 '' \u3001 false \u548c 0\uff0c\u53d6\u503c\u64cd\u4f5c\u603b\u6709\u503c\u8fd4\u56de\uff0c\u6545\u4e0d\u80fd\u901a\u8fc7\u53d6\u51fa\u6765\u7684\u503c\u6765\u5224\u65ad key \u662f\u4e0d\u662f\u5728 map \u4e2d\u3002 \u68c0\u67e5 key \u662f\u5426\u5b58\u5728\u53ef\u4ee5\u7528 map \u76f4\u63a5\u8bbf\u95ee\uff0c\u68c0\u67e5\u8fd4\u56de\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5373\u53ef\uff1a // \u9519\u8bef\u7684 key \u68c0\u6d4b\u65b9\u5f0f func main() { x := map[string]string{\"one\": \"2\", \"two\": \"\", \"three\": \"3\"} if v := x[\"two\"]; v == \"\" { fmt.Println(\"key two is no entry\") // \u952e two \u5b58\u4e0d\u5b58\u5728\u90fd\u4f1a\u8fd4\u56de\u7684\u7a7a\u5b57\u7b26\u4e32 } } // \u6b63\u786e\u793a\u4f8b func main() { x := map[string]string{\"one\": \"2\", \"two\": \"\", \"three\": \"3\"} if _, ok := x[\"two\"]; !ok { fmt.Println(\"key two is no entry\") } } 16. string \u7c7b\u578b\u7684\u503c\u662f\u5e38\u91cf\uff0c\u4e0d\u53ef\u66f4\u6539 \u5c1d\u8bd5\u4f7f\u7528\u7d22\u5f15\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u6765\u66f4\u65b0\u5b57\u7b26\u4e32\u4e2d\u7684\u4e2a\u522b\u5b57\u7b26\uff0c\u662f\u4e0d\u5141\u8bb8\u7684\u3002 string \u7c7b\u578b\u7684\u503c\u662f\u53ea\u8bfb\u7684\u4e8c\u8fdb\u5236 byte slice\uff0c\u5982\u679c\u771f\u8981\u4fee\u6539\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\uff0c\u5c06 string \u8f6c\u4e3a []byte \u4fee\u6539\u540e\uff0c\u518d\u8f6c\u4e3a string \u5373\u53ef\uff1a // \u4fee\u6539\u5b57\u7b26\u4e32\u7684\u9519\u8bef\u793a\u4f8b func main() { x := \"text\" x[0] = \"T\" // error: cannot assign to x[0] fmt.Println(x) } // \u4fee\u6539\u793a\u4f8b func main() { x := \"text\" xBytes := []byte(x) xBytes[0] = 'T' // \u6ce8\u610f\u6b64\u65f6\u7684 T \u662f rune \u7c7b\u578b x = string(xBytes) fmt.Println(x) // Text } \u6ce8\u610f\uff1a \u4e0a\u8fb9\u7684\u793a\u4f8b\u5e76\u4e0d\u662f\u66f4\u65b0\u5b57\u7b26\u4e32\u7684\u6b63\u786e\u59ff\u52bf\uff0c\u56e0\u4e3a\u4e00\u4e2a UTF8 \u7f16\u7801\u7684\u5b57\u7b26\u53ef\u80fd\u4f1a\u5360\u591a\u4e2a\u5b57\u8282\uff0c\u6bd4\u5982\u6c49\u5b57\u5c31\u9700\u8981 3~4 \u4e2a\u5b57\u8282\u6765\u5b58\u50a8\uff0c\u6b64\u65f6\u66f4\u65b0\u5176\u4e2d\u7684\u4e00\u4e2a\u5b57\u8282\u662f\u9519\u8bef\u7684\u3002 \u66f4\u65b0\u5b57\u4e32\u7684\u6b63\u786e\u59ff\u52bf\uff1a\u5c06 string \u8f6c\u4e3a rune slice\uff08\u6b64\u65f6 1 \u4e2a rune \u53ef\u80fd\u5360\u591a\u4e2a byte\uff09\uff0c\u76f4\u63a5\u66f4\u65b0 rune \u4e2d\u7684\u5b57\u7b26 func main() { x := \"text\" xRunes := []rune(x) xRunes[0] = '\u6211' x = string(xRunes) fmt.Println(x) // \u6211ext } 17. string \u4e0e byte slice \u4e4b\u95f4\u7684\u8f6c\u6362 \u5f53\u8fdb\u884c string \u548c byte slice \u76f8\u4e92\u8f6c\u6362\u65f6\uff0c\u53c2\u4e0e\u8f6c\u6362\u7684\u662f\u62f7\u8d1d\u7684\u539f\u59cb\u503c\u3002\u8fd9\u79cd\u8f6c\u6362\u7684\u8fc7\u7a0b\uff0c\u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u64cd\u4f5c\u4e0d\u540c\uff0c\u4e5f\u548c\u65b0 slice \u4e0e\u65e7 slice \u5171\u4eab\u5e95\u5c42\u6570\u7ec4\u4e0d\u540c\u3002 Go \u5728 string \u4e0e byte slice \u76f8\u4e92\u8f6c\u6362\u4e0a\u4f18\u5316\u4e86\u4e24\u70b9\uff0c\u907f\u514d\u4e86\u989d\u5916\u7684\u5185\u5b58\u5206\u914d\uff1a \u5728 map[string] \u4e2d\u67e5\u627e key \u65f6\uff0c\u4f7f\u7528\u4e86\u5bf9\u5e94\u7684 []byte \uff0c\u907f\u514d\u505a m[string(key)] \u7684\u5185\u5b58\u5206\u914d \u4f7f\u7528 for range \u8fed\u4ee3 string \u8f6c\u6362\u4e3a []byte \u7684\u8fed\u4ee3\uff1a for i,v := range []byte(str) {...} \u96fe\uff1a \u53c2\u8003\u539f\u6587 18. string \u4e0e\u7d22\u5f15\u64cd\u4f5c\u7b26 \u5bf9\u5b57\u7b26\u4e32\u7528\u7d22\u5f15\u8bbf\u95ee\u8fd4\u56de\u7684\u4e0d\u662f\u5b57\u7b26\uff0c\u800c\u662f\u4e00\u4e2a byte \u503c\u3002 \u8fd9\u79cd\u5904\u7406\u65b9\u5f0f\u548c\u5176\u4ed6\u8bed\u8a00\u4e00\u6837\uff0c\u6bd4\u5982 PHP \u4e2d\uff1a > php -r '$name=\"\u4e2d\u6587\"; var_dump($name);' # \"\u4e2d\u6587\" \u5360\u7528 6 \u4e2a\u5b57\u8282 string(6) \"\u4e2d\u6587\" > php -r '$name=\"\u4e2d\u6587\"; var_dump($name[0]);' # \u628a\u7b2c\u4e00\u4e2a\u5b57\u8282\u5f53\u505a Unicode \u5b57\u7b26\u8bfb\u53d6\uff0c\u663e\u793a U+FFFD string(1) \"\ufffd\" > php -r '$name=\"\u4e2d\u6587\"; var_dump($name[0].$name[1].$name[2]);' string(3) \"\u4e2d\" func main() { x := \"ascii\" fmt.Println(x[0]) // 97 fmt.Printf(\"%T\\n\", x[0])// uint8 } \u5982\u679c\u9700\u8981\u4f7f\u7528 for range \u8fed\u4ee3\u8bbf\u95ee\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\uff08unicode code point / rune\uff09\uff0c\u6807\u51c6\u5e93\u4e2d\u6709 \"unicode/utf8\" \u5305\u6765\u505a UTF8 \u7684\u76f8\u5173\u89e3\u7801\u7f16\u7801\u3002\u53e6\u5916 utf8string \u4e5f\u6709\u50cf func (s *String) At(i int) rune \u7b49\u5f88\u65b9\u4fbf\u7684\u5e93\u51fd\u6570\u3002 19. \u5b57\u7b26\u4e32\u5e76\u4e0d\u90fd\u662f UTF8 \u6587\u672c string \u7684\u503c\u4e0d\u5fc5\u662f UTF8 \u6587\u672c\uff0c\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u7684\u503c\u3002\u53ea\u6709\u5b57\u7b26\u4e32\u662f\u6587\u5b57\u5b57\u9762\u503c\u65f6\u624d\u662f UTF8 \u6587\u672c\uff0c\u5b57\u4e32\u53ef\u4ee5\u901a\u8fc7\u8f6c\u4e49\u6765\u5305\u542b\u5176\u4ed6\u6570\u636e\u3002 \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u662f UTF8 \u6587\u672c\uff0c\u53ef\u4f7f\u7528 \"unicode/utf8\" \u5305\u4e2d\u7684 ValidString() \u51fd\u6570\uff1a func main() { str1 := \"ABC\" fmt.Println(utf8.ValidString(str1)) // true str2 := \"A\\xfeC\" fmt.Println(utf8.ValidString(str2)) // false str3 := \"A\\\\xfeC\" fmt.Println(utf8.ValidString(str3)) // true // \u628a\u8f6c\u4e49\u5b57\u7b26\u8f6c\u4e49\u6210\u5b57\u9762\u503c } 20. \u5b57\u7b26\u4e32\u7684\u957f\u5ea6 \u5728 Python \u4e2d\uff1a data = u'\u2665' print(len(data)) # 1 \u7136\u800c\u5728 Go \u4e2d\uff1a func main() { char := \"\u2665\" fmt.Println(len(char)) // 3 } Go \u7684\u5185\u5efa\u51fd\u6570 len() \u8fd4\u56de\u7684\u662f\u5b57\u7b26\u4e32\u7684 byte \u6570\u91cf\uff0c\u800c\u4e0d\u662f\u50cf Python \u4e2d\u90a3\u6837\u662f\u8ba1\u7b97 Unicode \u5b57\u7b26\u6570\u3002 \u5982\u679c\u8981\u5f97\u5230\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u6570\uff0c\u53ef\u4f7f\u7528 \"unicode/utf8\" \u5305\u4e2d\u7684 RuneCountInString(str string) (n int) func main() { char := \"\u2665\" fmt.Println(utf8.RuneCountInString(char)) // 1 } \u6ce8\u610f\uff1a RuneCountInString \u5e76\u4e0d\u603b\u662f\u8fd4\u56de\u6211\u4eec\u770b\u5230\u7684\u5b57\u7b26\u6570\uff0c\u56e0\u4e3a\u6709\u7684\u5b57\u7b26\u4f1a\u5360\u7528 2 \u4e2a rune\uff1a func main() { char := \"\u00e9\" fmt.Println(len(char)) // 3 fmt.Println(utf8.RuneCountInString(char)) // 2 fmt.Println(\"cafe\\u0301\") // caf\u00e9 // \u6cd5\u6587\u7684 cafe\uff0c\u5b9e\u9645\u4e0a\u662f\u4e24\u4e2a rune \u7684\u7ec4\u5408 } \u53c2\u8003\uff1a normalization 21. \u5728\u591a\u884c array\u3001slice\u3001map \u8bed\u53e5\u4e2d\u7f3a\u5c11 , \u53f7 func main() { x := []int { 1, 2 // syntax error: unexpected newline, expecting comma or } } y := []int{1,2,} z := []int{1,2} // ... } \u58f0\u660e\u8bed\u53e5\u4e2d } \u6298\u53e0\u5230\u5355\u884c\u540e\uff0c\u5c3e\u90e8\u7684 , \u4e0d\u662f\u5fc5\u9700\u7684\u3002 22. log.Fatal \u548c log.Panic \u4e0d\u53ea\u662f log log \u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e0d\u540c\u7684\u65e5\u5fd7\u8bb0\u5f55\u7b49\u7ea7\uff0c\u4e0e\u5176\u4ed6\u8bed\u8a00\u7684\u65e5\u5fd7\u5e93\u4e0d\u540c\uff0cGo \u7684 log \u5305\u5728\u8c03\u7528 Fatal*() \u3001 Panic*() \u65f6\u80fd\u505a\u66f4\u591a\u65e5\u5fd7\u5916\u7684\u4e8b\uff0c\u5982\u4e2d\u65ad\u7a0b\u5e8f\u7684\u6267\u884c\u7b49\uff1a func main() { log.Fatal(\"Fatal level log: log entry\") // \u8f93\u51fa\u4fe1\u606f\u540e\uff0c\u7a0b\u5e8f\u7ec8\u6b62\u6267\u884c log.Println(\"Nomal level log: log entry\") } 23. \u5bf9\u5185\u5efa\u6570\u636e\u7ed3\u6784\u7684\u64cd\u4f5c\u5e76\u4e0d\u662f\u540c\u6b65\u7684 \u5c3d\u7ba1 Go \u672c\u8eab\u6709\u5927\u91cf\u7684\u7279\u6027\u6765\u652f\u6301\u5e76\u53d1\uff0c\u4f46\u5e76\u4e0d\u4fdd\u8bc1\u5e76\u53d1\u7684\u6570\u636e\u5b89\u5168\uff0c\u7528\u6237\u9700\u81ea\u5df1\u4fdd\u8bc1\u53d8\u91cf\u7b49\u6570\u636e\u4ee5\u539f\u5b50\u64cd\u4f5c\u66f4\u65b0\u3002 goroutine \u548c channel \u662f\u8fdb\u884c\u539f\u5b50\u64cd\u4f5c\u7684\u597d\u65b9\u6cd5\uff0c\u6216\u4f7f\u7528 \"sync\" \u5305\u4e2d\u7684\u9501\u3002 24. range \u8fed\u4ee3 string \u5f97\u5230\u7684\u503c range \u5f97\u5230\u7684\u7d22\u5f15\u662f\u5b57\u7b26\u503c\uff08Unicode point / rune\uff09\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u4f4d\u7f6e\uff0c\u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e0d\u540c\uff0c\u8fd9\u4e2a\u7d22\u5f15\u5e76\u4e0d\u76f4\u63a5\u662f\u5b57\u7b26\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u4f4d\u7f6e\u3002 \u6ce8\u610f\u4e00\u4e2a\u5b57\u7b26\u53ef\u80fd\u5360\u591a\u4e2a rune\uff0c\u6bd4\u5982\u6cd5\u6587\u5355\u8bcd caf\u00e9 \u4e2d\u7684 \u00e9\u3002\u64cd\u4f5c\u7279\u6b8a\u5b57\u7b26\u53ef\u4f7f\u7528 norm \u5305\u3002 for range \u8fed\u4ee3\u4f1a\u5c1d\u8bd5\u5c06 string \u7ffb\u8bd1\u4e3a UTF8 \u6587\u672c\uff0c\u5bf9\u4efb\u4f55\u65e0\u6548\u7684\u7801\u70b9\u90fd\u76f4\u63a5\u4f7f\u7528 0XFFFD rune\uff08\ufffd\uff09UNicode \u66ff\u4ee3\u5b57\u7b26\u6765\u8868\u793a\u3002\u5982\u679c string \u4e2d\u6709\u4efb\u4f55\u975e UTF8 \u7684\u6570\u636e\uff0c\u5e94\u5c06 string \u4fdd\u5b58\u4e3a byte slice \u518d\u8fdb\u884c\u64cd\u4f5c\u3002 func main() { data := \"A\\xfe\\x02\\xff\\x04\" for _, v := range data { fmt.Printf(\"%#x \", v) // 0x41 0xfffd 0x2 0xfffd 0x4 // \u9519\u8bef } for _, v := range []byte(data) { fmt.Printf(\"%#x \", v) // 0x41 0xfe 0x2 0xff 0x4 // \u6b63\u786e } } 25. range \u8fed\u4ee3 map \u5982\u679c\u4f60\u5e0c\u671b\u4ee5\u7279\u5b9a\u7684\u987a\u5e8f\uff08\u5982\u6309 key \u6392\u5e8f\uff09\u6765\u8fed\u4ee3 map\uff0c\u8981\u6ce8\u610f\u6bcf\u6b21\u8fed\u4ee3\u90fd\u53ef\u80fd\u4ea7\u751f\u4e0d\u4e00\u6837\u7684\u7ed3\u679c\u3002 Go \u7684\u8fd0\u884c\u65f6\u662f\u6709\u610f\u6253\u4e71\u8fed\u4ee3\u987a\u5e8f\u7684\uff0c\u6240\u4ee5\u4f60\u5f97\u5230\u7684\u8fed\u4ee3\u7ed3\u679c\u53ef\u80fd\u4e0d\u4e00\u81f4\u3002\u4f46\u4e5f\u5e76\u4e0d\u603b\u4f1a\u6253\u4e71\uff0c\u5f97\u5230\u8fde\u7eed\u76f8\u540c\u7684 5 \u4e2a\u8fed\u4ee3\u7ed3\u679c\u4e5f\u662f\u53ef\u80fd\u7684\uff0c\u5982\uff1a func main() { m := map[string]int{\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4} for k, v := range m { fmt.Println(k, v) } } \u5982\u679c\u4f60\u53bb Go Playground \u91cd\u590d\u8fd0\u884c\u4e0a\u8fb9\u7684\u4ee3\u7801\uff0c\u8f93\u51fa\u662f\u4e0d\u4f1a\u53d8\u7684\uff0c\u53ea\u6709\u4f60\u66f4\u65b0\u4ee3\u7801\u5b83\u624d\u4f1a\u91cd\u65b0\u7f16\u8bd1\u3002\u91cd\u65b0\u7f16\u8bd1\u540e\u8fed\u4ee3\u987a\u5e8f\u662f\u88ab\u6253\u4e71\u7684\uff1a 26. switch \u4e2d\u7684 fallthrough \u8bed\u53e5 switch \u8bed\u53e5\u4e2d\u7684 case \u4ee3\u7801\u5757\u4f1a\u9ed8\u8ba4\u5e26\u4e0a break\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528 fallthrough \u6765\u5f3a\u5236\u6267\u884c\u4e0b\u4e00\u4e2a case \u4ee3\u7801\u5757\u3002 func main() { isSpace := func(char byte) bool { switch char { case ' ': // \u7a7a\u683c\u7b26\u4f1a\u76f4\u63a5 break\uff0c\u8fd4\u56de false // \u548c\u5176\u4ed6\u8bed\u8a00\u4e0d\u4e00\u6837 // fallthrough // \u8fd4\u56de true case '\\t': return true } return false } fmt.Println(isSpace('\\t')) // true fmt.Println(isSpace(' ')) // false } \u4e0d\u8fc7\u4f60\u53ef\u4ee5\u5728 case \u4ee3\u7801\u5757\u672b\u5c3e\u4f7f\u7528 fallthrough \uff0c\u5f3a\u5236\u6267\u884c\u4e0b\u4e00\u4e2a case \u4ee3\u7801\u5757\u3002 \u4e5f\u53ef\u4ee5\u6539\u5199 case \u4e3a\u591a\u6761\u4ef6\u5224\u65ad\uff1a func main() { isSpace := func(char byte) bool { switch char { case ' ', '\\t': return true } return false } fmt.Println(isSpace('\\t')) // true fmt.Println(isSpace(' ')) // true } 27. \u81ea\u589e\u548c\u81ea\u51cf\u8fd0\u7b97 \u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u90fd\u81ea\u5e26\u524d\u7f6e\u540e\u7f6e\u7684 ++ \u3001 -- \u8fd0\u7b97\u3002\u4f46 Go \u7279\u7acb\u72ec\u884c\uff0c\u53bb\u6389\u4e86\u524d\u7f6e\u64cd\u4f5c\uff0c\u540c\u65f6 ++ \u3001 \u2014 \u53ea\u4f5c\u4e3a\u8fd0\u7b97\u7b26\u800c\u975e\u8868\u8fbe\u5f0f\u3002 // \u9519\u8bef\u793a\u4f8b func main() { data := []int{1, 2, 3} i := 0 ++i // syntax error: unexpected ++, expecting } fmt.Println(data[i++]) // syntax error: unexpected ++, expecting : } // \u6b63\u786e\u793a\u4f8b func main() { data := []int{1, 2, 3} i := 0 i++ fmt.Println(data[i]) // 2 } 28. \u6309\u4f4d\u53d6\u53cd \u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u4f7f\u7528 ~ \u4f5c\u4e3a\u4e00\u5143\u6309\u4f4d\u53d6\u53cd\uff08NOT\uff09\u64cd\u4f5c\u7b26\uff0cGo \u91cd\u7528 ^ XOR \u64cd\u4f5c\u7b26\u6765\u6309\u4f4d\u53d6\u53cd\uff1a // \u9519\u8bef\u7684\u53d6\u53cd\u64cd\u4f5c func main() { fmt.Println(~2) // bitwise complement operator is ^ } // \u6b63\u786e\u793a\u4f8b func main() { var d uint8 = 2 fmt.Printf(\"%08b\\n\", d) // 00000010 fmt.Printf(\"%08b\\n\", ^d) // 11111101 } \u540c\u65f6 ^ \u4e5f\u662f\u6309\u4f4d\u5f02\u6216\uff08XOR\uff09\u64cd\u4f5c\u7b26\u3002 \u4e00\u4e2a\u64cd\u4f5c\u7b26\u80fd\u91cd\u7528\u4e24\u6b21\uff0c\u662f\u56e0\u4e3a\u4e00\u5143\u7684 NOT \u64cd\u4f5c NOT 0x02 \uff0c\u4e0e\u4e8c\u5143\u7684 XOR \u64cd\u4f5c 0x22 XOR 0xff \u662f\u4e00\u81f4\u7684\u3002 Go \u4e5f\u6709\u7279\u6b8a\u7684\u64cd\u4f5c\u7b26 AND NOT &^ \u64cd\u4f5c\u7b26\uff0c\u4e0d\u540c\u4f4d\u624d\u53d61\u3002 func main() { var a uint8 = 0x82 var b uint8 = 0x02 fmt.Printf(\"%08b [A]\\n\", a) fmt.Printf(\"%08b [B]\\n\", b) fmt.Printf(\"%08b (NOT B)\\n\", ^b) fmt.Printf(\"%08b ^ %08b = %08b [B XOR 0xff]\\n\", b, 0xff, b^0xff) fmt.Printf(\"%08b ^ %08b = %08b [A XOR B]\\n\", a, b, a^b) fmt.Printf(\"%08b & %08b = %08b [A AND B]\\n\", a, b, a&b) fmt.Printf(\"%08b &^%08b = %08b [A 'AND NOT' B]\\n\", a, b, a&^b) fmt.Printf(\"%08b&(^%08b)= %08b [A AND (NOT B)]\\n\", a, b, a&(^b)) } 10000010 [A] 00000010 [B] 11111101 (NOT B) 00000010 ^ 11111111 = 11111101 [B XOR 0xff] 10000010 ^ 00000010 = 10000000 [A XOR B] 10000010 & 00000010 = 00000010 [A AND B] 10000010 &^00000010 = 10000000 [A 'AND NOT' B] 10000010&(^00000010)= 10000000 [A AND (NOT B)] 29. \u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 \u9664\u4e86\u4f4d\u6e05\u9664\uff08bit clear\uff09\u64cd\u4f5c\u7b26\uff0cGo \u4e5f\u6709\u5f88\u591a\u548c\u5176\u4ed6\u8bed\u8a00\u4e00\u6837\u7684\u4f4d\u64cd\u4f5c\u7b26\uff0c\u4f46\u4f18\u5148\u7ea7\u53e6\u5f53\u522b\u8bba\u3002 func main() { fmt.Printf(\"0x2 & 0x2 + 0x4 -> %#x\\n\", 0x2&0x2+0x4) // & \u4f18\u5148 + //prints: 0x2 & 0x2 + 0x4 -> 0x6 //Go: (0x2 & 0x2) + 0x4 //C++: 0x2 & (0x2 + 0x4) -> 0x2 fmt.Printf(\"0x2 + 0x2 << 0x1 -> %#x\\n\", 0x2+0x2<<0x1) // << \u4f18\u5148 + //prints: 0x2 + 0x2 << 0x1 -> 0x6 //Go: 0x2 + (0x2 << 0x1) //C++: (0x2 + 0x2) << 0x1 -> 0x8 fmt.Printf(\"0xf | 0x2 ^ 0x2 -> %#x\\n\", 0xf|0x2^0x2) // | \u4f18\u5148 ^ //prints: 0xf | 0x2 ^ 0x2 -> 0xd //Go: (0xf | 0x2) ^ 0x2 //C++: 0xf | (0x2 ^ 0x2) -> 0xf } \u4f18\u5148\u7ea7\u5217\u8868\uff1a Precedence Operator 5 * / % << >> & &^ 4 + - | ^ 3 == != < <= > >= 2 && 1 || 30. \u4e0d\u5bfc\u51fa\u7684 struct \u5b57\u6bb5\u65e0\u6cd5\u88ab encode \u4ee5\u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u5b57\u6bb5\u6210\u5458\u662f\u65e0\u6cd5\u88ab\u5916\u90e8\u76f4\u63a5\u8bbf\u95ee\u7684\uff0c\u6240\u4ee5 struct \u5728\u8fdb\u884c json\u3001xml\u3001gob \u7b49\u683c\u5f0f\u7684 encode \u64cd\u4f5c\u65f6\uff0c\u8fd9\u4e9b\u79c1\u6709\u5b57\u6bb5\u4f1a\u88ab\u5ffd\u7565\uff0c\u5bfc\u51fa\u65f6\u5f97\u5230\u96f6\u503c\uff1a func main() { in := MyData{1, \"two\"} fmt.Printf(\"%#v\\n\", in) // main.MyData{One:1, two:\"two\"} encoded, _ := json.Marshal(in) fmt.Println(string(encoded)) // {\"One\":1} // \u79c1\u6709\u5b57\u6bb5 two \u88ab\u5ffd\u7565\u4e86 var out MyData json.Unmarshal(encoded, &out) fmt.Printf(\"%#v\\n\", out) // main.MyData{One:1, two:\"\"} } 31. \u7a0b\u5e8f\u9000\u51fa\u65f6\u8fd8\u6709 goroutine \u5728\u6267\u884c \u7a0b\u5e8f\u9ed8\u8ba4\u4e0d\u7b49\u6240\u6709 goroutine \u90fd\u6267\u884c\u5b8c\u624d\u9000\u51fa\uff0c\u8fd9\u70b9\u9700\u8981\u7279\u522b\u6ce8\u610f\uff1a // \u4e3b\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u9000\u51fa func main() { workerCount := 2 for i := 0; i < workerCount; i++ { go doIt(i) } time.Sleep(1 * time.Second) fmt.Println(\"all done!\") } func doIt(workerID int) { fmt.Printf(\"[%v] is running\\n\", workerID) time.Sleep(3 * time.Second) // \u6a21\u62df goroutine \u6b63\u5728\u6267\u884c fmt.Printf(\"[%v] is done\\n\", workerID) } \u5982\u4e0b\uff0c main() \u4e3b\u7a0b\u5e8f\u4e0d\u7b49\u4e24\u4e2a goroutine \u6267\u884c\u5b8c\u5c31\u76f4\u63a5\u9000\u51fa\u4e86\uff1a \u5e38\u7528\u89e3\u51b3\u529e\u6cd5\uff1a\u4f7f\u7528 \"WaitGroup\" \u53d8\u91cf\uff0c\u5b83\u4f1a\u8ba9\u4e3b\u7a0b\u5e8f\u7b49\u5f85\u6240\u6709 goroutine \u6267\u884c\u5b8c\u6bd5\u518d\u9000\u51fa\u3002 \u5982\u679c\u4f60\u7684 goroutine \u8981\u505a\u6d88\u606f\u7684\u5faa\u73af\u5904\u7406\u7b49\u8017\u65f6\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5411\u5b83\u4eec\u53d1\u9001\u4e00\u6761 kill \u6d88\u606f\u6765\u5173\u95ed\u5b83\u4eec\u3002\u6216\u76f4\u63a5\u5173\u95ed\u4e00\u4e2a\u5b83\u4eec\u90fd\u7b49\u5f85\u63a5\u6536\u6570\u636e\u7684 channel\uff1a // \u7b49\u5f85\u6240\u6709 goroutine \u6267\u884c\u5b8c\u6bd5 // \u8fdb\u5165\u6b7b\u9501 func main() { var wg sync.WaitGroup done := make(chan struct{}) workerCount := 2 for i := 0; i < workerCount; i++ { wg.Add(1) go doIt(i, done, wg) } close(done) wg.Wait() fmt.Println(\"all done!\") } func doIt(workerID int, done <-chan struct{}, wg sync.WaitGroup) { fmt.Printf(\"[%v] is running\\n\", workerID) defer wg.Done() <-done fmt.Printf(\"[%v] is done\\n\", workerID) } \u6267\u884c\u7ed3\u679c\uff1a \u770b\u8d77\u6765\u597d\u50cf goroutine \u90fd\u6267\u884c\u5b8c\u4e86\uff0c\u7136\u800c\u62a5\u9519\uff1a fatal error: all goroutines are asleep - deadlock! \u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u6b7b\u9501\uff1fgoroutine \u5728\u9000\u51fa\u524d\u8c03\u7528\u4e86 wg.Done() \uff0c\u7a0b\u5e8f\u5e94\u8be5\u6b63\u5e38\u9000\u51fa\u7684\u3002 \u539f\u56e0\u662f goroutine \u5f97\u5230\u7684 \"WaitGroup\" \u53d8\u91cf\u662f var wg WaitGroup \u7684\u4e00\u4efd\u62f7\u8d1d\u503c\uff0c\u5373 doIt() \u4f20\u53c2\u53ea\u4f20\u503c\u3002\u6240\u4ee5\u54ea\u6015\u5728\u6bcf\u4e2a goroutine \u4e2d\u90fd\u8c03\u7528\u4e86 wg.Done() \uff0c \u4e3b\u7a0b\u5e8f\u4e2d\u7684 wg \u53d8\u91cf\u5e76\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\u3002 // \u7b49\u5f85\u6240\u6709 goroutine \u6267\u884c\u5b8c\u6bd5 // \u4f7f\u7528\u4f20\u5740\u65b9\u5f0f\u4e3a WaitGroup \u53d8\u91cf\u4f20\u53c2 // \u4f7f\u7528 channel \u5173\u95ed goroutine func main() { var wg sync.WaitGroup done := make(chan struct{}) ch := make(chan interface{}) workerCount := 2 for i := 0; i < workerCount; i++ { wg.Add(1) go doIt(i, ch, done, &wg) // wg \u4f20\u6307\u9488\uff0cdoIt() \u5185\u90e8\u4f1a\u6539\u53d8 wg \u7684\u503c } for i := 0; i < workerCount; i++ { // \u5411 ch \u4e2d\u53d1\u9001\u6570\u636e\uff0c\u5173\u95ed goroutine ch <- i } close(done) wg.Wait() close(ch) fmt.Println(\"all done!\") } func doIt(workerID int, ch <-chan interface{}, done <-chan struct{}, wg *sync.WaitGroup) { fmt.Printf(\"[%v] is running\\n\", workerID) defer wg.Done() for { select { case m := <-ch: fmt.Printf(\"[%v] m => %v\\n\", workerID, m) case <-done: fmt.Printf(\"[%v] is done\\n\", workerID) return } } } \u8fd0\u884c\u6548\u679c\uff1a 32. \u5411\u65e0\u7f13\u51b2\u7684 channel \u53d1\u9001\u6570\u636e\uff0c\u53ea\u8981 receiver \u51c6\u5907\u597d\u4e86\u5c31\u4f1a\u7acb\u523b\u8fd4\u56de \u53ea\u6709\u5728\u6570\u636e\u88ab receiver \u5904\u7406\u65f6\uff0csender \u624d\u4f1a\u963b\u585e\u3002\u56e0\u8fd0\u884c\u73af\u5883\u800c\u5f02\uff0c\u5728 sender \u53d1\u9001\u5b8c\u6570\u636e\u540e\uff0creceiver \u7684 goroutine \u53ef\u80fd\u6ca1\u6709\u8db3\u591f\u7684\u65f6\u95f4\u5904\u7406\u4e0b\u4e00\u4e2a\u6570\u636e\u3002\u5982\uff1a func main() { ch := make(chan string) go func() { for m := range ch { fmt.Println(\"Processed:\", m) time.Sleep(1 * time.Second) // \u6a21\u62df\u9700\u8981\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u64cd\u4f5c } }() ch <- \"cmd.1\" ch <- \"cmd.2\" // \u4e0d\u4f1a\u88ab\u63a5\u6536\u5904\u7406 } \u8fd0\u884c\u6548\u679c\uff1a 33. \u5411\u5df2\u5173\u95ed\u7684 channel \u53d1\u9001\u6570\u636e\u4f1a\u9020\u6210 panic \u4ece\u5df2\u5173\u95ed\u7684 channel \u63a5\u6536\u6570\u636e\u662f\u5b89\u5168\u7684\uff1a \u63a5\u6536\u72b6\u6001\u503c ok \u662f false \u65f6\u8868\u660e channel \u4e2d\u5df2\u6ca1\u6709\u6570\u636e\u53ef\u4ee5\u63a5\u6536\u4e86\u3002\u7c7b\u4f3c\u7684\uff0c\u4ece\u6709\u7f13\u51b2\u7684 channel \u4e2d\u63a5\u6536\u6570\u636e\uff0c\u7f13\u5b58\u7684\u6570\u636e\u83b7\u53d6\u5b8c\u518d\u6ca1\u6709\u6570\u636e\u53ef\u53d6\u65f6\uff0c\u72b6\u6001\u503c\u4e5f\u662f false \u5411\u5df2\u5173\u95ed\u7684 channel \u4e2d\u53d1\u9001\u6570\u636e\u4f1a\u9020\u6210 panic\uff1a func main() { ch := make(chan int) for i := 0; i < 3; i++ { go func(idx int) { ch <- idx }(i) } fmt.Println(<-ch) // \u8f93\u51fa\u7b2c\u4e00\u4e2a\u53d1\u9001\u7684\u503c close(ch) // \u4e0d\u80fd\u5173\u95ed\uff0c\u8fd8\u6709\u5176\u4ed6\u7684 sender time.Sleep(2 * time.Second) // \u6a21\u62df\u505a\u5176\u4ed6\u7684\u64cd\u4f5c } \u8fd0\u884c\u7ed3\u679c\uff1a \u9488\u5bf9\u4e0a\u8fb9\u6709 bug \u7684\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u53ef\u4f7f\u7528\u4e00\u4e2a\u5e9f\u5f03 channel done \u6765\u544a\u8bc9\u5269\u4f59\u7684 goroutine \u65e0\u9700\u518d\u5411 ch \u53d1\u9001\u6570\u636e\u3002\u6b64\u65f6 <- done \u7684\u7ed3\u679c\u662f {} \uff1a func main() { ch := make(chan int) done := make(chan struct{}) for i := 0; i < 3; i++ { go func(idx int) { select { case ch <- (idx + 1) * 2: fmt.Println(idx, \"Send result\") case <-done: fmt.Println(idx, \"Exiting\") } }(i) } fmt.Println(\"Result: \", <-ch) close(done) time.Sleep(3 * time.Second) } \u8fd0\u884c\u6548\u679c\uff1a 34. \u4f7f\u7528\u4e86\u503c\u4e3a nil \u7684 channel \u5728\u4e00\u4e2a\u503c\u4e3a nil \u7684 channel \u4e0a\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e\u5c06\u6c38\u4e45\u963b\u585e\uff1a func main() { var ch chan int // \u672a\u521d\u59cb\u5316\uff0c\u503c\u4e3a nil for i := 0; i < 3; i++ { go func(i int) { ch <- i }(i) } fmt.Println(\"Result: \", <-ch) time.Sleep(2 * time.Second) } runtime \u6b7b\u9501\u9519\u8bef\uff1a fatal error: all goroutines are asleep - deadlock! goroutine 1 [chan receive (nil chan)] \u5229\u7528\u8fd9\u4e2a\u6b7b\u9501\u7684\u7279\u6027\uff0c\u53ef\u4ee5\u7528\u5728 select \u4e2d\u52a8\u6001\u7684\u6253\u5f00\u548c\u5173\u95ed case \u8bed\u53e5\u5757\uff1a func main() { inCh := make(chan int) outCh := make(chan int) go func() { var in <-chan int = inCh var out chan<- int var val int for { select { case out <- val: println(\"--------\") out = nil in = inCh case val = <-in: println(\"++++++++++\") out = outCh in = nil } } }() go func() { for r := range outCh { fmt.Println(\"Result: \", r) } }() time.Sleep(0) inCh <- 1 inCh <- 2 time.Sleep(3 * time.Second) } \u8fd0\u884c\u6548\u679c\uff1a 34. \u82e5\u51fd\u6570 receiver \u4f20\u53c2\u662f\u4f20\u503c\u65b9\u5f0f\uff0c\u5219\u65e0\u6cd5\u4fee\u6539\u53c2\u6570\u7684\u539f\u6709\u503c \u65b9\u6cd5 receiver \u7684\u53c2\u6570\u4e0e\u4e00\u822c\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u4f3c\uff1a\u5982\u679c\u58f0\u660e\u4e3a\u503c\uff0c\u90a3\u65b9\u6cd5\u4f53\u5f97\u5230\u7684\u662f\u4e00\u4efd\u53c2\u6570\u7684\u503c\u62f7\u8d1d\uff0c\u6b64\u65f6\u5bf9\u53c2\u6570\u7684\u4efb\u4f55\u4fee\u6539\u90fd\u4e0d\u4f1a\u5bf9\u539f\u6709\u503c\u4ea7\u751f\u5f71\u54cd\u3002 \u9664\u975e receiver \u53c2\u6570\u662f map \u6216 slice \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u5e76\u4e14\u662f\u4ee5\u6307\u9488\u65b9\u5f0f\u66f4\u65b0 map \u4e2d\u7684\u5b57\u6bb5\u3001slice \u4e2d\u7684\u5143\u7d20\u7684\uff0c\u624d\u4f1a\u66f4\u65b0\u539f\u6709\u503c: type data struct { num int key *string items map[string]bool } func (this *data) pointerFunc() { this.num = 7 } func (this data) valueFunc() { this.num = 8 *this.key = \"valueFunc.key\" this.items[\"valueFunc\"] = true } func main() { key := \"key1\" d := data{1, &key, make(map[string]bool)} fmt.Printf(\"num=%v key=%v items=%v\\n\", d.num, *d.key, d.items) d.pointerFunc() // \u4fee\u6539 num \u7684\u503c\u4e3a 7 fmt.Printf(\"num=%v key=%v items=%v\\n\", d.num, *d.key, d.items) d.valueFunc() // \u4fee\u6539 key \u548c items \u7684\u503c fmt.Printf(\"num=%v key=%v items=%v\\n\", d.num, *d.key, d.items) } \u8fd0\u884c\u7ed3\u679c\uff1a \u4e2d\u7ea7\u7bc7\uff1a35-50 35. \u5173\u95ed HTTP \u7684\u54cd\u5e94\u4f53 \u4f7f\u7528 HTTP \u6807\u51c6\u5e93\u53d1\u8d77\u8bf7\u6c42\u3001\u83b7\u53d6\u54cd\u5e94\u65f6\uff0c\u5373\u4f7f\u4f60\u4e0d\u4ece\u54cd\u5e94\u4e2d\u8bfb\u53d6\u4efb\u4f55\u6570\u636e\u6216\u54cd\u5e94\u4e3a\u7a7a\uff0c\u90fd\u9700\u8981\u624b\u52a8\u5173\u95ed\u54cd\u5e94\u4f53\u3002\u65b0\u624b\u5f88\u5bb9\u6613\u5fd8\u8bb0\u624b\u52a8\u5173\u95ed\uff0c\u6216\u8005\u5199\u5728\u4e86\u9519\u8bef\u7684\u4f4d\u7f6e\uff1a // \u8bf7\u6c42\u5931\u8d25\u9020\u6210 panic func main() { resp, err := http.Get(\"https://api.ipify.org?format=json\") defer resp.Body.Close() // resp \u53ef\u80fd\u4e3a nil\uff0c\u4e0d\u80fd\u8bfb\u53d6 Body if err != nil { fmt.Println(err) return } body, err := ioutil.ReadAll(resp.Body) checkError(err) fmt.Println(string(body)) } func checkError(err error) { if err != nil{ log.Fatalln(err) } } \u4e0a\u8fb9\u7684\u4ee3\u7801\u80fd\u6b63\u786e\u53d1\u8d77\u8bf7\u6c42\uff0c\u4f46\u662f\u4e00\u65e6\u8bf7\u6c42\u5931\u8d25\uff0c\u53d8\u91cf resp \u503c\u4e3a nil \uff0c\u9020\u6210 panic\uff1a panic: runtime error: invalid memory address or nil pointer dereference \u5e94\u8be5\u5148\u68c0\u67e5HTTP \u54cd\u5e94\u9519\u8bef\u4e3a nil \uff0c\u518d\u8c03\u7528 resp.Body.Close() \u6765\u5173\u95ed\u54cd\u5e94\u4f53\uff1a // \u5927\u591a\u6570\u60c5\u51b5\u6b63\u786e\u7684\u793a\u4f8b func main() { resp, err := http.Get(\"https://api.ipify.org?format=json\") checkError(err) defer resp.Body.Close() // \u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u7684\u6b63\u786e\u5173\u95ed\u65b9\u5f0f body, err := ioutil.ReadAll(resp.Body) checkError(err) fmt.Println(string(body)) } \u8f93\u51fa\uff1a Get https://api.ipify.org?format=... : x509: certificate signed by unknown authority \u7edd\u5927\u591a\u6570\u8bf7\u6c42\u5931\u8d25\u7684\u60c5\u51b5\u4e0b\uff0c resp \u7684\u503c\u4e3a nil \u4e14 err \u4e3a non-nil \u3002\u4f46\u5982\u679c\u4f60\u5f97\u5230\u7684\u662f\u91cd\u5b9a\u5411\u9519\u8bef\uff0c\u90a3\u5b83\u4fe9\u7684\u503c\u90fd\u662f non-nil \uff0c\u6700\u540e\u4f9d\u65e7\u53ef\u80fd\u53d1\u751f\u5185\u5b58\u6cc4\u9732\u30022 \u4e2a\u89e3\u51b3\u529e\u6cd5\uff1a \u53ef\u4ee5\u76f4\u63a5\u5728\u5904\u7406 HTTP \u54cd\u5e94\u9519\u8bef\u7684\u4ee3\u7801\u5757\u4e2d\uff0c\u76f4\u63a5\u5173\u95ed\u975e nil \u7684\u54cd\u5e94\u4f53\u3002 \u624b\u52a8\u8c03\u7528 defer \u6765\u5173\u95ed\u54cd\u5e94\u4f53\uff1a // \u6b63\u786e\u793a\u4f8b func main() { resp, err := http.Get(\"http://www.baidu.com\") // \u5173\u95ed resp.Body \u7684\u6b63\u786e\u59ff\u52bf if resp != nil { defer resp.Body.Close() } checkError(err) defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) checkError(err) fmt.Println(string(body)) } resp.Body.Close() \u65e9\u5148\u7248\u672c\u7684\u5b9e\u73b0\u662f\u8bfb\u53d6\u54cd\u5e94\u4f53\u7684\u6570\u636e\u4e4b\u540e\u4e22\u5f03\uff0c\u4fdd\u8bc1\u4e86 keep-alive \u7684 HTTP \u8fde\u63a5\u80fd\u91cd\u7528\u5904\u7406\u4e0d\u6b62\u4e00\u4e2a\u8bf7\u6c42\u3002\u4f46 Go \u7684\u6700\u65b0\u7248\u672c\u5c06\u8bfb\u53d6\u5e76\u4e22\u5f03\u6570\u636e\u7684\u4efb\u52a1\u4ea4\u7ed9\u4e86\u7528\u6237\uff0c\u5982\u679c\u4f60\u4e0d\u5904\u7406\uff0cHTTP \u8fde\u63a5\u53ef\u80fd\u4f1a\u76f4\u63a5\u5173\u95ed\u800c\u975e\u91cd\u7528\uff0c\u53c2\u8003\u5728 Go 1.5 \u7248\u672c\u6587\u6863\u3002 \u5982\u679c\u7a0b\u5e8f\u5927\u91cf\u91cd\u7528 HTTP \u957f\u8fde\u63a5\uff0c\u4f60\u53ef\u80fd\u8981\u5728\u5904\u7406\u54cd\u5e94\u7684\u903b\u8f91\u4ee3\u7801\u4e2d\u52a0\u5165\uff1a _, err = io.Copy(ioutil.Discard, resp.Body) // \u624b\u52a8\u4e22\u5f03\u8bfb\u53d6\u5b8c\u6bd5\u7684\u6570\u636e \u5982\u679c\u4f60\u9700\u8981\u5b8c\u6574\u8bfb\u53d6\u54cd\u5e94\uff0c\u4e0a\u8fb9\u7684\u4ee3\u7801\u662f\u9700\u8981\u5199\u7684\u3002\u6bd4\u5982\u5728\u89e3\u7801 API \u7684 JSON \u54cd\u5e94\u6570\u636e\uff1a json.NewDecoder(resp.Body).Decode(&data) 36. \u5173\u95ed HTTP \u8fde\u63a5 \u4e00\u4e9b\u652f\u6301 HTTP1.1 \u6216 HTTP1.0 \u914d\u7f6e\u4e86 connection: keep-alive \u9009\u9879\u7684\u670d\u52a1\u5668\u4f1a\u4fdd\u6301\u4e00\u6bb5\u65f6\u95f4\u7684\u957f\u8fde\u63a5\u3002\u4f46\u6807\u51c6\u5e93 \"net/http\" \u7684\u8fde\u63a5\u9ed8\u8ba4\u53ea\u5728\u670d\u52a1\u5668\u4e3b\u52a8\u8981\u6c42\u5173\u95ed\u65f6\u624d\u65ad\u5f00\uff0c\u6240\u4ee5\u4f60\u7684\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u6d88\u8017\u5b8c socket \u63cf\u8ff0\u7b26\u3002\u89e3\u51b3\u529e\u6cd5\u6709 2 \u4e2a\uff0c\u8bf7\u6c42\u7ed3\u675f\u540e\uff1a \u76f4\u63a5\u8bbe\u7f6e\u8bf7\u6c42\u53d8\u91cf\u7684 Close \u5b57\u6bb5\u503c\u4e3a true \uff0c\u6bcf\u6b21\u8bf7\u6c42\u7ed3\u675f\u540e\u5c31\u4f1a\u4e3b\u52a8\u5173\u95ed\u8fde\u63a5\u3002 \u8bbe\u7f6e Header \u8bf7\u6c42\u5934\u90e8\u9009\u9879 Connection: close \uff0c\u7136\u540e\u670d\u52a1\u5668\u8fd4\u56de\u7684\u54cd\u5e94\u5934\u90e8\u4e5f\u4f1a\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u6b64\u65f6 HTTP \u6807\u51c6\u5e93\u4f1a\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5\u3002 // \u4e3b\u52a8\u5173\u95ed\u8fde\u63a5 func main() { req, err := http.NewRequest(\"GET\", \"http://golang.org\", nil) checkError(err) req.Close = true //req.Header.Add(\"Connection\", \"close\") // \u7b49\u6548\u7684\u5173\u95ed\u65b9\u5f0f resp, err := http.DefaultClient.Do(req) if resp != nil { defer resp.Body.Close() } checkError(err) body, err := ioutil.ReadAll(resp.Body) checkError(err) fmt.Println(string(body)) } \u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u914d\u7f6e\u7684 HTTP transport \u5ba2\u6237\u7aef\uff0c\u7528\u6765\u53d6\u6d88 HTTP \u5168\u5c40\u7684\u590d\u7528\u8fde\u63a5\uff1a func main() { tr := http.Transport{DisableKeepAlives: true} client := http.Client{Transport: &tr} resp, err := client.Get(\"https://golang.google.cn/\") if resp != nil { defer resp.Body.Close() } checkError(err) fmt.Println(resp.StatusCode) // 200 body, err := ioutil.ReadAll(resp.Body) checkError(err) fmt.Println(len(string(body))) } \u6839\u636e\u9700\u6c42\u9009\u62e9\u4f7f\u7528\u573a\u666f\uff1a \u82e5\u4f60\u7684\u7a0b\u5e8f\u8981\u5411\u540c\u4e00\u670d\u52a1\u5668\u53d1\u5927\u91cf\u8bf7\u6c42\uff0c\u4f7f\u7528\u9ed8\u8ba4\u7684\u4fdd\u6301\u957f\u8fde\u63a5\u3002 \u82e5\u4f60\u7684\u7a0b\u5e8f\u8981\u8fde\u63a5\u5927\u91cf\u7684\u670d\u52a1\u5668\uff0c\u4e14\u6bcf\u53f0\u670d\u52a1\u5668\u53ea\u8bf7\u6c42\u4e00\u4e24\u6b21\uff0c\u90a3\u6536\u5230\u8bf7\u6c42\u540e\u76f4\u63a5\u5173\u95ed\u8fde\u63a5\u3002\u6216\u589e\u52a0\u6700\u5927\u6587\u4ef6\u6253\u5f00\u6570 fs.file-max \u7684\u503c\u3002 37. \u5c06 JSON \u4e2d\u7684\u6570\u5b57\u89e3\u7801\u4e3a interface \u7c7b\u578b \u5728 encode/decode JSON \u6570\u636e\u65f6\uff0cGo \u9ed8\u8ba4\u4f1a\u5c06\u6570\u503c\u5f53\u505a float64 \u5904\u7406\uff0c\u6bd4\u5982\u4e0b\u8fb9\u7684\u4ee3\u7801\u4f1a\u9020\u6210 panic\uff1a func main() { var data = []byte(`{\"status\": 200}`) var result map[string]interface{} if err := json.Unmarshal(data, &result); err != nil { log.Fatalln(err) } fmt.Printf(\"%T\\n\", result[\"status\"]) // float64 var status = result[\"status\"].(int) // \u7c7b\u578b\u65ad\u8a00\u9519\u8bef fmt.Println(\"Status value: \", status) } panic: interface conversion: interface {} is float64, not int \u5982\u679c\u4f60\u5c1d\u8bd5 decode \u7684 JSON \u5b57\u6bb5\u662f\u6574\u578b\uff0c\u4f60\u53ef\u4ee5\uff1a \u5c06 int \u503c\u8f6c\u4e3a float \u7edf\u4e00\u4f7f\u7528 \u5c06 decode \u540e\u9700\u8981\u7684 float \u503c\u8f6c\u4e3a int \u4f7f\u7528 // \u5c06 decode \u7684\u503c\u8f6c\u4e3a int \u4f7f\u7528 func main() { var data = []byte(`{\"status\": 200}`) var result map[string]interface{} if err := json.Unmarshal(data, &result); err != nil { log.Fatalln(err) } var status = uint64(result[\"status\"].(float64)) fmt.Println(\"Status value: \", status) } \u4f7f\u7528 Decoder \u7c7b\u578b\u6765 decode JSON \u6570\u636e\uff0c\u660e\u786e\u8868\u793a\u5b57\u6bb5\u7684\u503c\u7c7b\u578b // \u6307\u5b9a\u5b57\u6bb5\u7c7b\u578b func main() { var data = []byte(`{\"status\": 200}`) var result map[string]interface{} var decoder = json.NewDecoder(bytes.NewReader(data)) decoder.UseNumber() if err := decoder.Decode(&result); err != nil { log.Fatalln(err) } var status, _ = result[\"status\"].(json.Number).Int64() fmt.Println(\"Status value: \", status) } // \u4f60\u53ef\u4ee5\u4f7f\u7528 string \u6765\u5b58\u50a8\u6570\u503c\u6570\u636e\uff0c\u5728 decode \u65f6\u518d\u51b3\u5b9a\u6309 int \u8fd8\u662f float \u4f7f\u7528 // \u5c06\u6570\u636e\u8f6c\u4e3a decode \u4e3a string func main() { var data = []byte({\"status\": 200}) var result map[string]interface{} var decoder = json.NewDecoder(bytes.NewReader(data)) decoder.UseNumber() if err := decoder.Decode(&result); err != nil { log.Fatalln(err) } var status uint64 err := json.Unmarshal([]byte(result[\"status\"].(json.Number).String()), &status); checkError(err) fmt.Println(\"Status value: \", status) } - \u4f7f\u7528 struct \u7c7b\u578b\u5c06\u4f60\u9700\u8981\u7684\u6570\u636e\u6620\u5c04\u4e3a\u6570\u503c\u578b // struct \u4e2d\u6307\u5b9a\u5b57\u6bb5\u7c7b\u578b func main() { var data = []byte(`{\"status\": 200}`) var result struct { Status uint64 `json:\"status\"` } err := json.NewDecoder(bytes.NewReader(data)).Decode(&result) checkError(err) fmt.Printf(\"Result: %+v\", result) } \u53ef\u4ee5\u4f7f\u7528 struct \u5c06\u6570\u503c\u7c7b\u578b\u6620\u5c04\u4e3a json.RawMessage \u539f\u751f\u6570\u636e\u7c7b\u578b \u9002\u7528\u4e8e\u5982\u679c JSON \u6570\u636e\u4e0d\u7740\u6025 decode \u6216 JSON \u67d0\u4e2a\u5b57\u6bb5\u7684\u503c\u7c7b\u578b\u4e0d\u56fa\u5b9a\u7b49\u60c5\u51b5\uff1a // \u72b6\u6001\u540d\u79f0\u53ef\u80fd\u662f int \u4e5f\u53ef\u80fd\u662f string\uff0c\u6307\u5b9a\u4e3a json.RawMessage \u7c7b\u578b func main() { records := [][]byte{ []byte(`{\"status\":200, \"tag\":\"one\"}`), []byte(`{\"status\":\"ok\", \"tag\":\"two\"}`), } for idx, record := range records { var result struct { StatusCode uint64 StatusName string Status json.RawMessage `json:\"status\"` Tag string `json:\"tag\"` } err := json.NewDecoder(bytes.NewReader(record)).Decode(&result) checkError(err) var name string err = json.Unmarshal(result.Status, &name) if err == nil { result.StatusName = name } var code uint64 err = json.Unmarshal(result.Status, &code) if err == nil { result.StatusCode = code } fmt.Printf(\"[%v] result => %+v\\n\", idx, result) } } 38. struct\u3001array\u3001slice \u548c map \u7684\u503c\u6bd4\u8f83 \u53ef\u4ee5\u4f7f\u7528\u76f8\u7b49\u8fd0\u7b97\u7b26 == \u6765\u6bd4\u8f83\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u524d\u63d0\u662f\u4e24\u4e2a\u7ed3\u6784\u4f53\u7684\u6210\u5458\u90fd\u662f\u53ef\u6bd4\u8f83\u7684\u7c7b\u578b\uff1a type data struct { num int fp float32 complex complex64 str string char rune yes bool events <-chan string handler interface{} ref *byte raw [10]byte } func main() { v1 := data{} v2 := data{} fmt.Println(\"v1 == v2: \", v1 == v2) // true } \u5982\u679c\u4e24\u4e2a\u7ed3\u6784\u4f53\u4e2d\u6709\u4efb\u610f\u6210\u5458\u662f\u4e0d\u53ef\u6bd4\u8f83\u7684\uff0c\u5c06\u4f1a\u9020\u6210\u7f16\u8bd1\u9519\u8bef\u3002\u6ce8\u610f\u6570\u7ec4\u6210\u5458\u53ea\u6709\u5728\u6570\u7ec4\u5143\u7d20\u53ef\u6bd4\u8f83\u65f6\u5019\u624d\u53ef\u6bd4\u8f83\u3002 type data struct { num int checks [10]func() bool // \u65e0\u6cd5\u6bd4\u8f83 doIt func() bool // \u65e0\u6cd5\u6bd4\u8f83 m map[string]string // \u65e0\u6cd5\u6bd4\u8f83 bytes []byte // \u65e0\u6cd5\u6bd4\u8f83 } func main() { v1 := data{} v2 := data{} fmt.Println(\"v1 == v2: \", v1 == v2) } invalid operation: v1 == v2 (struct containing [10]func() bool cannot be compared) Go \u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e93\u51fd\u6570\u6765\u6bd4\u8f83\u90a3\u4e9b\u65e0\u6cd5\u4f7f\u7528 == \u6bd4\u8f83\u7684\u53d8\u91cf\uff0c\u6bd4\u5982\u4f7f\u7528 \"reflect\" \u5305\u7684 DeepEqual() \uff1a // \u6bd4\u8f83\u76f8\u7b49\u8fd0\u7b97\u7b26\u65e0\u6cd5\u6bd4\u8f83\u7684\u5143\u7d20 func main() { v1 := data{} v2 := data{} fmt.Println(\"v1 == v2: \", reflect.DeepEqual(v1, v2)) // true m1 := map[string]string{\"one\": \"a\", \"two\": \"b\"} m2 := map[string]string{\"two\": \"b\", \"one\": \"a\"} fmt.Println(\"v1 == v2: \", reflect.DeepEqual(m1, m2)) // true s1 := []int{1, 2, 3} s2 := []int{1, 2, 3} // \u6ce8\u610f\u4e24\u4e2a slice \u76f8\u7b49\uff0c\u503c\u548c\u987a\u5e8f\u5fc5\u987b\u4e00\u81f4 fmt.Println(\"v1 == v2: \", reflect.DeepEqual(s1, s2)) // true } \u8fd9\u79cd\u6bd4\u8f83\u65b9\u5f0f\u53ef\u80fd\u6bd4\u8f83\u6162\uff0c\u6839\u636e\u4f60\u7684\u7a0b\u5e8f\u9700\u6c42\u6765\u4f7f\u7528\u3002 DeepEqual() \u8fd8\u6709\u5176\u4ed6\u7528\u6cd5\uff1a func main() { var b1 []byte = nil b2 := []byte{} fmt.Println(\"b1 == b2: \", reflect.DeepEqual(b1, b2)) // false } \u6ce8\u610f\uff1a DeepEqual() \u5e76\u4e0d\u603b\u9002\u5408\u4e8e\u6bd4\u8f83 slice func main() { var str = \"one\" var in interface{} = \"one\" fmt.Println(\"str == in: \", reflect.DeepEqual(str, in)) // true v1 := []string{\"one\", \"two\"} v2 := []string{\"two\", \"one\"} fmt.Println(\"v1 == v2: \", reflect.DeepEqual(v1, v2)) // false data := map[string]interface{}{ \"code\": 200, \"value\": []string{\"one\", \"two\"}, } encoded, _ := json.Marshal(data) var decoded map[string]interface{} json.Unmarshal(encoded, &decoded) fmt.Println(\"data == decoded: \", reflect.DeepEqual(data, decoded)) // false } \u5982\u679c\u8981\u5927\u5c0f\u5199\u4e0d\u654f\u611f\u6765\u6bd4\u8f83 byte \u6216 string \u4e2d\u7684\u82f1\u6587\u6587\u672c\uff0c\u53ef\u4ee5\u4f7f\u7528 \"bytes\" \u6216 \"strings\" \u5305\u7684 ToUpper() \u548c ToLower() \u51fd\u6570\u3002\u6bd4\u8f83\u5176\u4ed6\u8bed\u8a00\u7684 byte \u6216 string\uff0c\u5e94\u4f7f\u7528 bytes.EqualFold() \u548c strings.EqualFold() \u5982\u679c byte slice \u4e2d\u542b\u6709\u9a8c\u8bc1\u7528\u6237\u8eab\u4efd\u7684\u6570\u636e\uff08\u5bc6\u6587\u54c8\u5e0c\u3001token \u7b49\uff09\uff0c\u4e0d\u5e94\u518d\u4f7f\u7528 reflect.DeepEqual() \u3001 bytes.Equal() \u3001 bytes.Compare() \u3002\u8fd9\u4e09\u4e2a\u51fd\u6570\u5bb9\u6613\u5bf9\u7a0b\u5e8f\u9020\u6210 timing attacks \uff0c\u6b64\u65f6\u5e94\u4f7f\u7528 \"crypto/subtle\" \u5305\u4e2d\u7684 subtle.ConstantTimeCompare() \u7b49\u51fd\u6570 reflect.DeepEqual() \u8ba4\u4e3a\u7a7a slice \u4e0e nil slice \u5e76\u4e0d\u76f8\u7b49\uff0c\u4f46\u6ce8\u610f byte.Equal() \u4f1a\u8ba4\u4e3a\u4e8c\u8005\u76f8\u7b49\uff1a func main() { var b1 []byte = nil b2 := []byte{} // b1 \u4e0e b2 \u957f\u5ea6\u76f8\u7b49\u3001\u6709\u76f8\u540c\u7684\u5b57\u8282\u5e8f // nil \u4e0e slice \u5728\u5b57\u8282\u4e0a\u662f\u76f8\u540c\u7684 fmt.Println(\"b1 == b2: \", bytes.Equal(b1, b2)) // true } 39. \u4ece panic \u4e2d\u6062\u590d \u5728\u4e00\u4e2a defer \u5ef6\u8fdf\u6267\u884c\u7684\u51fd\u6570\u4e2d\u8c03\u7528 recover() \uff0c\u5b83\u4fbf\u80fd\u6355\u6349 / \u4e2d\u65ad panic // \u9519\u8bef\u7684 recover \u8c03\u7528\u793a\u4f8b func main() { recover() // \u4ec0\u4e48\u90fd\u4e0d\u4f1a\u6355\u6349 panic(\"not good\") // \u53d1\u751f panic\uff0c\u4e3b\u7a0b\u5e8f\u9000\u51fa recover() // \u4e0d\u4f1a\u88ab\u6267\u884c println(\"ok\") } // \u6b63\u786e\u7684 recover \u8c03\u7528\u793a\u4f8b func main() { defer func() { fmt.Println(\"recovered: \", recover()) }() panic(\"not good\") } \u4ece\u4e0a\u8fb9\u53ef\u4ee5\u770b\u51fa\uff0c recover() \u4ec5\u5728 defer \u6267\u884c\u7684\u51fd\u6570\u4e2d\u8c03\u7528\u624d\u4f1a\u751f\u6548\u3002 // \u9519\u8bef\u7684\u8c03\u7528\u793a\u4f8b func main() { defer func() { doRecover() }() panic(\"not good\") } func doRecover() { fmt.Println(\"recobered: \", recover()) } recobered: panic: not good 40. \u5728 range \u8fed\u4ee3 slice\u3001array\u3001map \u65f6\u901a\u8fc7\u66f4\u65b0\u5f15\u7528\u6765\u66f4\u65b0\u5143\u7d20 \u5728 range \u8fed\u4ee3\u4e2d\uff0c\u5f97\u5230\u7684\u503c\u5176\u5b9e\u662f\u5143\u7d20\u7684\u4e00\u4efd\u503c\u62f7\u8d1d\uff0c\u66f4\u65b0\u62f7\u8d1d\u5e76\u4e0d\u4f1a\u66f4\u6539\u539f\u6765\u7684\u5143\u7d20\uff0c\u5373\u662f\u62f7\u8d1d\u7684\u5730\u5740\u5e76\u4e0d\u662f\u539f\u6709\u5143\u7d20\u7684\u5730\u5740\uff1a func main() { data := []int{1, 2, 3} for _, v := range data { v *= 10 // data \u4e2d\u539f\u6709\u5143\u7d20\u662f\u4e0d\u4f1a\u88ab\u4fee\u6539\u7684 } fmt.Println(\"data: \", data) // data: [1 2 3] } \u5982\u679c\u8981\u4fee\u6539\u539f\u6709\u5143\u7d20\u7684\u503c\uff0c\u5e94\u8be5\u4f7f\u7528\u7d22\u5f15\u76f4\u63a5\u8bbf\u95ee\uff1a func main() { data := []int{1, 2, 3} for i, v := range data { data[i] = v * 10 } fmt.Println(\"data: \", data) // data: [10 20 30] } \u5982\u679c\u4f60\u7684\u96c6\u5408\u4fdd\u5b58\u7684\u662f\u6307\u5411\u503c\u7684\u6307\u9488\uff0c\u9700\u7a0d\u4f5c\u4fee\u6539\u3002\u4f9d\u65e7\u9700\u8981\u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u5143\u7d20\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u4f7f\u7528 range \u51fa\u6765\u7684\u5143\u7d20\u76f4\u63a5\u66f4\u65b0\u539f\u6709\u503c\uff1a func main() { data := []*struct{ num int }{{1}, {2}, {3},} for _, v := range data { v.num *= 10 // \u76f4\u63a5\u4f7f\u7528\u6307\u9488\u66f4\u65b0 } fmt.Println(data[0], data[1], data[2]) // &{10} &{20} &{30} } 41. slice \u4e2d\u9690\u85cf\u7684\u6570\u636e \u4ece slice \u4e2d\u91cd\u65b0\u5207\u51fa\u65b0 slice \u65f6\uff0c\u65b0 slice \u4f1a\u5f15\u7528\u539f slice \u7684\u5e95\u5c42\u6570\u7ec4\u3002\u5982\u679c\u8df3\u4e86\u8fd9\u4e2a\u5751\uff0c\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u5206\u914d\u5927\u91cf\u7684\u4e34\u65f6 slice \u6765\u6307\u5411\u539f\u5e95\u5c42\u6570\u7ec4\u7684\u90e8\u5206\u6570\u636e\uff0c\u5c06\u5bfc\u81f4\u96be\u4ee5\u9884\u6599\u7684\u5185\u5b58\u4f7f\u7528\u3002 func get() []byte { raw := make([]byte, 10000) fmt.Println(len(raw), cap(raw), &raw[0]) // 10000 10000 0xc420080000 return raw[:3] // \u91cd\u65b0\u5206\u914d\u5bb9\u91cf\u4e3a 10000 \u7684 slice } func main() { data := get() fmt.Println(len(data), cap(data), &data[0]) // 3 10000 0xc420080000 } \u53ef\u4ee5\u901a\u8fc7\u62f7\u8d1d\u4e34\u65f6 slice \u7684\u6570\u636e\uff0c\u800c\u4e0d\u662f\u91cd\u65b0\u5207\u7247\u6765\u89e3\u51b3\uff1a func get() (res []byte) { raw := make([]byte, 10000) fmt.Println(len(raw), cap(raw), &raw[0]) // 10000 10000 0xc420080000 res = make([]byte, 3) copy(res, raw[:3]) return } func main() { data := get() fmt.Println(len(data), cap(data), &data[0]) // 3 3 0xc4200160b8 } 42. Slice \u4e2d\u6570\u636e\u7684\u8bef\u7528 \u4e3e\u4e2a\u7b80\u5355\u4f8b\u5b50\uff0c\u91cd\u5199\u6587\u4ef6\u8def\u5f84\uff08\u5b58\u50a8\u5728 slice \u4e2d\uff09 \u5206\u5272\u8def\u5f84\u6765\u6307\u5411\u6bcf\u4e2a\u4e0d\u540c\u7ea7\u7684\u76ee\u5f55\uff0c\u4fee\u6539\u7b2c\u4e00\u4e2a\u76ee\u5f55\u540d\u518d\u91cd\u7ec4\u5b50\u76ee\u5f55\u540d\uff0c\u521b\u5efa\u65b0\u8def\u5f84\uff1a // \u9519\u8bef\u4f7f\u7528 slice \u7684\u62fc\u63a5\u793a\u4f8b func main() { path := []byte(\"AAAA/BBBBBBBBB\") sepIndex := bytes.IndexByte(path, '/') // 4 println(sepIndex) dir1 := path[:sepIndex] dir2 := path[sepIndex+1:] println(\"dir1: \", string(dir1)) // AAAA println(\"dir2: \", string(dir2)) // BBBBBBBBB dir1 = append(dir1, \"suffix\"...) println(\"current path: \", string(path)) // AAAAsuffixBBBB path = bytes.Join([][]byte{dir1, dir2}, []byte{'/'}) println(\"dir1: \", string(dir1)) // AAAAsuffix println(\"dir2: \", string(dir2)) // uffixBBBB println(\"new path: \", string(path)) // AAAAsuffix/uffixBBBB // \u9519\u8bef\u7ed3\u679c } \u62fc\u63a5\u7684\u7ed3\u679c\u4e0d\u662f\u6b63\u786e\u7684 AAAAsuffix/BBBBBBBBB \uff0c\u56e0\u4e3a dir1\u3001 dir2 \u4e24\u4e2a slice \u5f15\u7528\u7684\u6570\u636e\u90fd\u662f path \u7684\u5e95\u5c42\u6570\u7ec4\uff0c\u7b2c 13 \u884c\u4fee\u6539 dir1 \u540c\u65f6\u4e5f\u4fee\u6539\u4e86 path \uff0c\u4e5f\u5bfc\u81f4\u4e86 dir2 \u7684\u4fee\u6539 \u89e3\u51b3\u65b9\u6cd5\uff1a \u91cd\u65b0\u5206\u914d\u65b0\u7684 slice \u5e76\u62f7\u8d1d\u4f60\u9700\u8981\u7684\u6570\u636e \u4f7f\u7528\u5b8c\u6574\u7684 slice \u8868\u8fbe\u5f0f\uff1a input[low:high:max] \uff0c\u5bb9\u91cf\u4fbf\u8c03\u6574\u4e3a max - low // \u4f7f\u7528 full slice expression func main() { path := []byte(\"AAAA/BBBBBBBBB\") sepIndex := bytes.IndexByte(path, '/') // 4 dir1 := path[:sepIndex:sepIndex] // \u6b64\u65f6 cap(dir1) \u6307\u5b9a\u4e3a4\uff0c \u800c\u4e0d\u662f\u5148\u524d\u7684 16 dir2 := path[sepIndex+1:] dir1 = append(dir1, \"suffix\"...) path = bytes.Join([][]byte{dir1, dir2}, []byte{'/'}) println(\"dir1: \", string(dir1)) // AAAAsuffix println(\"dir2: \", string(dir2)) // BBBBBBBBB println(\"new path: \", string(path)) // AAAAsuffix/BBBBBBBBB } \u7b2c 6 \u884c\u4e2d\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u7528\u6765\u63a7\u5236 dir1 \u7684\u65b0\u5bb9\u91cf\uff0c\u518d\u5f80 dir1 \u4e2d append \u8d85\u989d\u5143\u7d20\u65f6\uff0c\u5c06\u5206\u914d\u65b0\u7684 buffer \u6765\u4fdd\u5b58\u3002\u800c\u4e0d\u662f\u8986\u76d6\u539f\u6765\u7684 path \u5e95\u5c42\u6570\u7ec4 43. \u65e7 slice \u5f53\u4f60\u4ece\u4e00\u4e2a\u5df2\u5b58\u5728\u7684 slice \u521b\u5efa\u65b0 slice \u65f6\uff0c\u4e8c\u8005\u7684\u6570\u636e\u6307\u5411\u76f8\u540c\u7684\u5e95\u5c42\u6570\u7ec4\u3002\u5982\u679c\u4f60\u7684\u7a0b\u5e8f\u4f7f\u7528\u8fd9\u4e2a\u7279\u6027\uff0c\u90a3\u9700\u8981\u6ce8\u610f \"\u65e7\"\uff08stale\uff09 slice \u95ee\u9898\u3002 \u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5411\u4e00\u4e2a slice \u4e2d\u8ffd\u52a0\u5143\u7d20\u800c\u5b83\u6307\u5411\u7684\u5e95\u5c42\u6570\u7ec4\u5bb9\u91cf\u4e0d\u8db3\u65f6\uff0c\u5c06\u4f1a\u91cd\u65b0\u5206\u914d\u4e00\u4e2a\u65b0\u6570\u7ec4\u6765\u5b58\u50a8\u6570\u636e\u3002\u800c\u5176\u4ed6 slice \u8fd8\u6307\u5411\u539f\u6765\u7684\u65e7\u5e95\u5c42\u6570\u7ec4\u3002 // \u8d85\u8fc7\u5bb9\u91cf\u5c06\u91cd\u65b0\u5206\u914d\u6570\u7ec4\u6765\u62f7\u8d1d\u503c\u3001\u91cd\u65b0\u5b58\u50a8 func main() { s1 := []int{1, 2, 3} fmt.Println(len(s1), cap(s1), s1) // 3 3 [1 2 3 ] s2 := s1[1:] fmt.Println(len(s2), cap(s2), s2) // 2 2 [2 3] for i := range s2 { s2[i] += 20 } // \u6b64\u65f6\u7684 s1 \u4e0e s2 \u662f\u6307\u5411\u540c\u4e00\u4e2a\u5e95\u5c42\u6570\u7ec4\u7684 fmt.Println(s1) // [1 22 23] fmt.Println(s2) // [22 23] s2 = append(s2, 4) // \u5411\u5bb9\u91cf\u4e3a 2 \u7684 s2 \u4e2d\u518d\u8ffd\u52a0\u5143\u7d20\uff0c\u6b64\u65f6\u5c06\u5206\u914d\u65b0\u6570\u7ec4\u6765\u5b58 for i := range s2 { s2[i] += 10 } fmt.Println(s1) // [1 22 23] // \u6b64\u65f6\u7684 s1 \u4e0d\u518d\u66f4\u65b0\uff0c\u4e3a\u65e7\u6570\u636e fmt.Println(s2) // [32 33 14] } 44. \u7c7b\u578b\u58f0\u660e\u4e0e\u65b9\u6cd5 \u4ece\u4e00\u4e2a\u73b0\u6709\u7684\u975e interface \u7c7b\u578b\u521b\u5efa\u65b0\u7c7b\u578b\u65f6\uff0c\u5e76\u4e0d\u4f1a\u7ee7\u627f\u539f\u6709\u7684\u65b9\u6cd5\uff1a // \u5b9a\u4e49 Mutex \u7684\u81ea\u5b9a\u4e49\u7c7b\u578b type myMutex sync.Mutex func main() { var mtx myMutex mtx.Lock() mtx.UnLock() } mtx.Lock undefined (type myMutex has no field or method Lock)... \u5982\u679c\u4f60\u9700\u8981\u4f7f\u7528\u539f\u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u53ef\u5c06\u539f\u7c7b\u578b\u4ee5\u533f\u540d\u5b57\u6bb5\u7684\u5f62\u5f0f\u5d4c\u5230\u4f60\u5b9a\u4e49\u7684\u65b0 struct \u4e2d\uff1a // \u7c7b\u578b\u4ee5\u5b57\u6bb5\u5f62\u5f0f\u76f4\u63a5\u5d4c\u5165 type myLocker struct { sync.Mutex } func main() { var locker myLocker locker.Lock() locker.Unlock() } interface \u7c7b\u578b\u58f0\u660e\u4e5f\u4fdd\u7559\u5b83\u7684\u65b9\u6cd5\u96c6\uff1a type myLocker sync.Locker func main() { var locker myLocker locker.Lock() locker.Unlock() } 45. \u8df3\u51fa for-switch \u548c for-select \u4ee3\u7801\u5757 \u6ca1\u6709\u6307\u5b9a\u6807\u7b7e\u7684 break \u53ea\u4f1a\u8df3\u51fa switch/select \u8bed\u53e5\uff0c\u82e5\u4e0d\u80fd\u4f7f\u7528 return \u8bed\u53e5\u8df3\u51fa\u7684\u8bdd\uff0c\u53ef\u4e3a break \u8df3\u51fa\u6807\u7b7e\u6307\u5b9a\u7684\u4ee3\u7801\u5757\uff1a // break \u914d\u5408 label \u8df3\u51fa\u6307\u5b9a\u4ee3\u7801\u5757 func main() { loop: for { switch { case true: fmt.Println(\"breaking out...\") //break // \u6b7b\u5faa\u73af\uff0c\u4e00\u76f4\u6253\u5370 breaking out... break loop } } fmt.Println(\"out...\") } goto \u867d\u7136\u4e5f\u80fd\u8df3\u8f6c\u5230\u6307\u5b9a\u4f4d\u7f6e\uff0c\u4f46\u4f9d\u65e7\u4f1a\u518d\u6b21\u8fdb\u5165 for-switch\uff0c\u6b7b\u5faa\u73af\u3002 46. for \u8bed\u53e5\u4e2d\u7684\u8fed\u4ee3\u53d8\u91cf\u4e0e\u95ed\u5305\u51fd\u6570 for \u8bed\u53e5\u4e2d\u7684\u8fed\u4ee3\u53d8\u91cf\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\u90fd\u4f1a\u91cd\u7528\uff0c\u5373 for \u4e2d\u521b\u5efa\u7684\u95ed\u5305\u51fd\u6570\u63a5\u6536\u5230\u7684\u53c2\u6570\u59cb\u7ec8\u662f\u540c\u4e00\u4e2a\u53d8\u91cf\uff0c\u5728 goroutine \u5f00\u59cb\u6267\u884c\u65f6\u90fd\u4f1a\u5f97\u5230\u540c\u4e00\u4e2a\u8fed\u4ee3\u503c\uff1a func main() { data := []string{\"one\", \"two\", \"three\"} for _, v := range data { go func() { fmt.Println(v) }() } time.Sleep(3 * time.Second) // \u8f93\u51fa three three three } \u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6cd5\uff1a\u65e0\u9700\u4fee\u6539 goroutine \u51fd\u6570\uff0c\u5728 for \u5185\u90e8\u4f7f\u7528\u5c40\u90e8\u53d8\u91cf\u4fdd\u5b58\u8fed\u4ee3\u503c\uff0c\u518d\u4f20\u53c2\uff1a func main() { data := []string{\"one\", \"two\", \"three\"} for _, v := range data { vCopy := v go func() { fmt.Println(vCopy) }() } time.Sleep(3 * time.Second) // \u8f93\u51fa one two three } \u53e6\u4e00\u4e2a\u89e3\u51b3\u65b9\u6cd5\uff1a\u76f4\u63a5\u5c06\u5f53\u524d\u7684\u8fed\u4ee3\u503c\u4ee5\u53c2\u6570\u5f62\u5f0f\u4f20\u9012\u7ed9\u533f\u540d\u51fd\u6570\uff1a func main() { data := []string{\"one\", \"two\", \"three\"} for _, v := range data { go func(in string) { fmt.Println(in) }(v) } time.Sleep(3 * time.Second) // \u8f93\u51fa one two three } \u6ce8\u610f\u4e0b\u8fb9\u8fd9\u4e2a\u7a0d\u590d\u6742\u7684 3 \u4e2a\u793a\u4f8b\u533a\u522b\uff1a type field struct { name string } func (p *field) print() { fmt.Println(p.name) } // \u9519\u8bef\u793a\u4f8b func main() { data := []field{{\"one\"}, {\"two\"}, {\"three\"}} for _, v := range data { go v.print() } time.Sleep(3 * time.Second) // \u8f93\u51fa three three three } // \u6b63\u786e\u793a\u4f8b func main() { data := []field{{\"one\"}, {\"two\"}, {\"three\"}} for _, v := range data { v := v go v.print() } time.Sleep(3 * time.Second) // \u8f93\u51fa one two three } // \u6b63\u786e\u793a\u4f8b func main() { data := []*field{{\"one\"}, {\"two\"}, {\"three\"}} for _, v := range data { // \u6b64\u65f6\u8fed\u4ee3\u503c v \u662f\u4e09\u4e2a\u5143\u7d20\u503c\u7684\u5730\u5740\uff0c\u6bcf\u6b21 v \u6307\u5411\u7684\u503c\u4e0d\u540c go v.print() } time.Sleep(3 * time.Second) // \u8f93\u51fa one two three } 47. defer \u51fd\u6570\u7684\u53c2\u6570\u503c \u5bf9 defer \u5ef6\u8fdf\u6267\u884c\u7684\u51fd\u6570\uff0c\u5b83\u7684\u53c2\u6570\u4f1a\u5728\u58f0\u660e\u65f6\u5019\u5c31\u4f1a\u6c42\u51fa\u5177\u4f53\u503c\uff0c\u800c\u4e0d\u662f\u5728\u6267\u884c\u65f6\u624d\u6c42\u503c\uff1a // \u5728 defer \u51fd\u6570\u4e2d\u53c2\u6570\u4f1a\u63d0\u524d\u6c42\u503c func main() { var i = 1 defer fmt.Println(\"result: \", func() int { return i * 2 }()) i++ } result: 2 48. defer \u51fd\u6570\u7684\u6267\u884c\u65f6\u673a \u5bf9 defer \u5ef6\u8fdf\u6267\u884c\u7684\u51fd\u6570\uff0c\u4f1a\u5728\u8c03\u7528\u5b83\u7684\u51fd\u6570\u7ed3\u675f\u65f6\u6267\u884c\uff0c\u800c\u4e0d\u662f\u5728\u8c03\u7528\u5b83\u7684\u8bed\u53e5\u5757\u7ed3\u675f\u65f6\u6267\u884c\uff0c\u6ce8\u610f\u533a\u5206\u5f00\u3002 \u6bd4\u5982\u5728\u4e00\u4e2a\u957f\u65f6\u95f4\u6267\u884c\u7684\u51fd\u6570\u91cc\uff0c\u5185\u90e8 for \u5faa\u73af\u4e2d\u4f7f\u7528 defer \u6765\u6e05\u7406\u6bcf\u6b21\u8fed\u4ee3\u4ea7\u751f\u7684\u8d44\u6e90\u8c03\u7528\uff0c\u5c31\u4f1a\u51fa\u73b0\u95ee\u9898\uff1a // \u547d\u4ee4\u884c\u53c2\u6570\u6307\u5b9a\u76ee\u5f55\u540d // \u904d\u5386\u8bfb\u53d6\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6 func main() { if len(os.Args) != 2 { os.Exit(1) } dir := os.Args[1] start, err := os.Stat(dir) if err != nil || !start.IsDir() { os.Exit(2) } var targets []string filepath.Walk(dir, func(fPath string, fInfo os.FileInfo, err error) error { if err != nil { return err } if !fInfo.Mode().IsRegular() { return nil } targets = append(targets, fPath) return nil }) for _, target := range targets { f, err := os.Open(target) if err != nil { fmt.Println(\"bad target:\", target, \"error:\", err) //error:too many open files break } defer f.Close() // \u5728\u6bcf\u6b21 for \u8bed\u53e5\u5757\u7ed3\u675f\u65f6\uff0c\u4e0d\u4f1a\u5173\u95ed\u6587\u4ef6\u8d44\u6e90 // \u4f7f\u7528 f \u8d44\u6e90 } } \u5148\u521b\u5efa 10000 \u4e2a\u6587\u4ef6\uff1a #!/bin/bash for n in {1..10000}; do echo content > \"file${n}.txt\" done \u8fd0\u884c\u6548\u679c\uff1a \u89e3\u51b3\u529e\u6cd5\uff1adefer \u5ef6\u8fdf\u6267\u884c\u7684\u51fd\u6570\u5199\u5165\u533f\u540d\u51fd\u6570\u4e2d\uff1a // \u76ee\u5f55\u904d\u5386\u6b63\u5e38 func main() { // ... for _, target := range targets { func() { f, err := os.Open(target) if err != nil { fmt.Println(\"bad target:\", target, \"error:\", err) return // \u5728\u533f\u540d\u51fd\u6570\u5185\u4f7f\u7528 return \u4ee3\u66ff break \u5373\u53ef } defer f.Close() // \u533f\u540d\u51fd\u6570\u6267\u884c\u7ed3\u675f\uff0c\u8c03\u7528\u5173\u95ed\u6587\u4ef6\u8d44\u6e90 // \u4f7f\u7528 f \u8d44\u6e90 }() } } \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u53bb\u6389 defer\uff0c\u5728\u6587\u4ef6\u8d44\u6e90\u4f7f\u7528\u5b8c\u6bd5\u540e\uff0c\u76f4\u63a5\u8c03\u7528 f.Close() \u6765\u5173\u95ed\u3002 49. \u5931\u8d25\u7684\u7c7b\u578b\u65ad\u8a00 \u5728\u7c7b\u578b\u65ad\u8a00\u8bed\u53e5\u4e2d\uff0c\u65ad\u8a00\u5931\u8d25\u5219\u4f1a\u8fd4\u56de\u76ee\u6807\u7c7b\u578b\u7684\u201c\u96f6\u503c\u201d\uff0c\u65ad\u8a00\u53d8\u91cf\u4e0e\u539f\u6765\u53d8\u91cf\u6df7\u7528\u53ef\u80fd\u51fa\u73b0\u5f02\u5e38\u60c5\u51b5\uff1a // \u9519\u8bef\u793a\u4f8b func main() { var data interface{} = \"great\" // data \u6df7\u7528 if data, ok := data.(int); ok { fmt.Println(\"[is an int], data: \", data) } else { fmt.Println(\"[not an int], data: \", data) // [isn't a int], data: 0 } } // \u6b63\u786e\u793a\u4f8b func main() { var data interface{} = \"great\" if res, ok := data.(int); ok { fmt.Println(\"[is an int], data: \", res) } else { fmt.Println(\"[not an int], data: \", data) // [not an int], data: great } } 50. \u963b\u585e\u7684 gorutinue \u4e0e\u8d44\u6e90\u6cc4\u9732 \u5728 2012 \u5e74 Google I/O \u5927\u4f1a\u4e0a\uff0cRob Pike \u7684 Go Concurrency Patterns \u6f14\u8bb2\u8ba8\u8bba Go \u7684\u51e0\u79cd\u57fa\u672c\u5e76\u53d1\u6a21\u5f0f\uff0c\u5982 \u5b8c\u6574\u4ee3\u7801 \u4e2d\u4ece\u6570\u636e\u96c6\u4e2d\u83b7\u53d6\u7b2c\u4e00\u6761\u6570\u636e\u7684\u51fd\u6570\uff1a func First(query string, replicas []Search) Result { c := make(chan Result) replicaSearch := func(i int) { c <- replicas[i](query) } for i := range replicas { go replicaSearch(i) } return <-c } \u5728\u641c\u7d22\u91cd\u590d\u65f6\u4f9d\u65e7\u6bcf\u6b21\u90fd\u8d77\u4e00\u4e2a goroutine \u53bb\u5904\u7406\uff0c\u6bcf\u4e2a goroutine \u90fd\u628a\u5b83\u7684\u641c\u7d22\u7ed3\u679c\u53d1\u9001\u5230\u7ed3\u679c channel \u4e2d\uff0cchannel \u4e2d\u6536\u5230\u7684\u7b2c\u4e00\u6761\u6570\u636e\u4f1a\u76f4\u63a5\u8fd4\u56de\u3002 \u8fd4\u56de\u5b8c\u7b2c\u4e00\u6761\u6570\u636e\u540e\uff0c\u5176\u4ed6 goroutine \u7684\u641c\u7d22\u7ed3\u679c\u600e\u4e48\u5904\u7406\uff1f\u4ed6\u4eec\u81ea\u5df1\u7684\u534f\u7a0b\u5982\u4f55\u5904\u7406\uff1f \u5728 First() \u4e2d\u7684\u7ed3\u679c channel \u662f\u65e0\u7f13\u51b2\u7684\uff0c\u8fd9\u610f\u5473\u7740\u53ea\u6709\u7b2c\u4e00\u4e2a goroutine \u80fd\u8fd4\u56de\uff0c\u7531\u4e8e\u6ca1\u6709 receiver\uff0c\u5176\u4ed6\u7684 goroutine \u4f1a\u5728\u53d1\u9001\u4e0a\u4e00\u76f4\u963b\u585e\u3002\u5982\u679c\u4f60\u5927\u91cf\u8c03\u7528\uff0c\u5219\u53ef\u80fd\u9020\u6210\u8d44\u6e90\u6cc4\u9732\u3002 \u4e3a\u907f\u514d\u6cc4\u9732\uff0c\u4f60\u5e94\u8be5\u786e\u4fdd\u6240\u6709\u7684 goroutine \u90fd\u80fd\u6b63\u786e\u9000\u51fa\uff0c\u6709 2 \u4e2a\u89e3\u51b3\u65b9\u6cd5\uff1a \u4f7f\u7528\u5e26\u7f13\u51b2\u7684 channel\uff0c\u786e\u4fdd\u80fd\u63a5\u6536\u5168\u90e8 goroutine \u7684\u8fd4\u56de\u7ed3\u679c\uff1a func First(query string, replicas ...Search) Result { c := make(chan Result,len(replicas)) searchReplica := func(i int) { c <- replicas[i](query) } for i := range replicas { go searchReplica(i) } return <-c } \u4f7f\u7528 select \u8bed\u53e5\uff0c\u914d\u5408\u80fd\u4fdd\u5b58\u4e00\u4e2a\u7f13\u51b2\u503c\u7684 channel default \u8bed\u53e5\uff1a default \u7684\u7f13\u51b2 channel \u4fdd\u8bc1\u4e86\u5373\u4f7f\u7ed3\u679c channel \u6536\u4e0d\u5230\u6570\u636e\uff0c\u4e5f\u4e0d\u4f1a\u963b\u585e goroutine func First(query string, replicas ...Search) Result { c := make(chan Result,1) searchReplica := func(i int) { select { case c <- replicas[i](query): default: } } for i := range replicas { go searchReplica(i) } return <-c } \u4f7f\u7528\u7279\u6b8a\u7684\u5e9f\u5f03\uff08cancellation\uff09 channel \u6765\u4e2d\u65ad\u5269\u4f59 goroutine \u7684\u6267\u884c\uff1a func First(query string, replicas ...Search) Result { c := make(chan Result) done := make(chan struct{}) defer close(done) searchReplica := func(i int) { select { case c <- replicas[i](query): case <- done: } } for i := range replicas { go searchReplica(i) } return <-c } Rob Pike \u4e3a\u4e86\u7b80\u5316\u6f14\u793a\uff0c\u6ca1\u6709\u63d0\u53ca\u6f14\u8bb2\u4ee3\u7801\u4e2d\u5b58\u5728\u7684\u8fd9\u4e9b\u95ee\u9898\u3002\u4e0d\u8fc7\u5bf9\u4e8e\u65b0\u624b\u6765\u8bf4\uff0c\u53ef\u80fd\u4f1a\u4e0d\u52a0\u601d\u8003\u76f4\u63a5\u4f7f\u7528\u3002 \u9ad8\u7ea7\u7bc7\uff1a51-57 51. \u4f7f\u7528\u6307\u9488\u4f5c\u4e3a\u65b9\u6cd5\u7684 receiver \u53ea\u8981\u503c\u662f\u53ef\u5bfb\u5740\u7684\uff0c\u5c31\u53ef\u4ee5\u5728\u503c\u4e0a\u76f4\u63a5\u8c03\u7528\u6307\u9488\u65b9\u6cd5\u3002\u5373\u662f\u5bf9\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5b83\u7684 receiver \u662f\u6307\u9488\u5c31\u8db3\u77e3\u3002 \u4f46\u4e0d\u662f\u6240\u6709\u503c\u90fd\u662f\u53ef\u5bfb\u5740\u7684\uff0c\u6bd4\u5982 map \u7c7b\u578b\u7684\u5143\u7d20\u3001\u901a\u8fc7 interface \u5f15\u7528\u7684\u53d8\u91cf\uff1a type data struct { name string } type printer interface { print() } func (p *data) print() { fmt.Println(\"name: \", p.name) } func main() { d1 := data{\"one\"} d1.print() // d1 \u53d8\u91cf\u53ef\u5bfb\u5740\uff0c\u53ef\u76f4\u63a5\u8c03\u7528\u6307\u9488 receiver \u7684\u65b9\u6cd5 var in printer = data{\"two\"} in.print() // \u7c7b\u578b\u4e0d\u5339\u914d m := map[string]data{ \"x\": data{\"three\"}, } m[\"x\"].print() // m[\"x\"] \u662f\u4e0d\u53ef\u5bfb\u5740\u7684 // \u53d8\u52a8\u9891\u7e41 } cannot use data literal (type data) as type printer in assignment: data does not implement printer (print method has pointer receiver) cannot call pointer method on m[\"x\"] cannot take the address of m[\"x\"] 52. \u66f4\u65b0 map \u5b57\u6bb5\u7684\u503c \u5982\u679c map \u4e00\u4e2a\u5b57\u6bb5\u7684\u503c\u662f struct \u7c7b\u578b\uff0c\u5219\u65e0\u6cd5\u76f4\u63a5\u66f4\u65b0\u8be5 struct \u7684\u5355\u4e2a\u5b57\u6bb5\uff1a // \u65e0\u6cd5\u76f4\u63a5\u66f4\u65b0 struct \u7684\u5b57\u6bb5\u503c type data struct { name string } func main() { m := map[string]data{ \"x\": {\"Tom\"}, } m[\"x\"].name = \"Jerry\" } cannot assign to struct field m[\"x\"].name in map \u56e0\u4e3a map \u4e2d\u7684\u5143\u7d20\u662f\u4e0d\u53ef\u5bfb\u5740\u7684\u3002\u9700\u533a\u5206\u5f00\u7684\u662f\uff0cslice \u7684\u5143\u7d20\u53ef\u5bfb\u5740\uff1a type data struct { name string } func main() { s := []data{{\"Tom\"}} s[0].name = \"Jerry\" fmt.Println(s) // [{Jerry}] } \u6ce8\u610f\uff1a\u4e0d\u4e45\u524d gccgo \u7f16\u8bd1\u5668\u53ef\u66f4\u65b0 map struct \u5143\u7d20\u7684\u5b57\u6bb5\u503c\uff0c\u4e0d\u8fc7\u5f88\u5feb\u4fbf\u4fee\u590d\u4e86\uff0c\u5b98\u65b9\u8ba4\u4e3a\u662f Go1.3 \u7684\u6f5c\u5728\u7279\u6027\uff0c\u65e0\u9700\u53ca\u65f6\u5b9e\u73b0\uff0c\u4f9d\u65e7\u5728 todo list \u4e2d\u3002 \u66f4\u65b0 map \u4e2d struct \u5143\u7d20\u7684\u5b57\u6bb5\u503c\uff0c\u6709 2 \u4e2a\u65b9\u6cd5\uff1a \u4f7f\u7528\u5c40\u90e8\u53d8\u91cf // \u63d0\u53d6\u6574\u4e2a struct \u5230\u5c40\u90e8\u53d8\u91cf\u4e2d\uff0c\u4fee\u6539\u5b57\u6bb5\u503c\u540e\u518d\u6574\u4e2a\u8d4b\u503c type data struct { name string } func main() { m := map[string]data{ \"x\": {\"Tom\"}, } r := m[\"x\"] r.name = \"Jerry\" m[\"x\"] = r fmt.Println(m) // map[x:{Jerry}] } \u4f7f\u7528\u6307\u5411\u5143\u7d20\u7684 map \u6307\u9488 func main() { m := map[string]*data{ \"x\": {\"Tom\"}, } m[\"x\"].name = \"Jerry\" // \u76f4\u63a5\u4fee\u6539 m[\"x\"] \u4e2d\u7684\u5b57\u6bb5 fmt.Println(m[\"x\"]) // &{Jerry} } \u4f46\u662f\u8981\u6ce8\u610f\u4e0b\u8fb9\u8fd9\u79cd\u8bef\u7528\uff1a func main() { m := map[string]*data{ \"x\": {\"Tom\"}, } m[\"z\"].name = \"what???\" fmt.Println(m[\"x\"]) } panic: runtime error: invalid memory address or nil pointer dereference 53. nil interface \u548c nil interface \u503c \u867d\u7136 interface \u770b\u8d77\u6765\u50cf\u6307\u9488\u7c7b\u578b\uff0c\u4f46\u5b83\u4e0d\u662f\u3002interface \u7c7b\u578b\u7684\u53d8\u91cf\u53ea\u6709\u5728\u7c7b\u578b\u548c\u503c\u5747\u4e3a nil \u65f6\u624d\u4e3a nil \u5982\u679c\u4f60\u7684 interface \u53d8\u91cf\u7684\u503c\u662f\u8ddf\u968f\u5176\u4ed6\u53d8\u91cf\u53d8\u5316\u7684\uff08\u96fe\uff09\uff0c\u4e0e nil \u6bd4\u8f83\u76f8\u7b49\u65f6\u5c0f\u5fc3\uff1a func main() { var data *byte var in interface{} fmt.Println(data, data == nil) // <nil> true fmt.Println(in, in == nil) // <nil> true in = data fmt.Println(in, in == nil) // <nil> false // data \u503c\u4e3a nil\uff0c\u4f46 in \u503c\u4e0d\u4e3a nil } \u5982\u679c\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u503c\u7c7b\u578b\u662f interface\uff0c\u66f4\u8981\u5c0f\u5fc3\u8fd9\u4e2a\u5751\uff1a // \u9519\u8bef\u793a\u4f8b func main() { doIt := func(arg int) interface{} { var result *struct{} = nil if arg > 0 { result = &struct{}{} } return result } if res := doIt(-1); res != nil { fmt.Println(\"Good result: \", res) // Good result: <nil> fmt.Printf(\"%T\\n\", res) // *struct {} // res \u4e0d\u662f nil\uff0c\u5b83\u7684\u503c\u4e3a nil fmt.Printf(\"%v\\n\", res) // <nil> } } // \u6b63\u786e\u793a\u4f8b func main() { doIt := func(arg int) interface{} { var result *struct{} = nil if arg > 0 { result = &struct{}{} } else { return nil // \u660e\u786e\u6307\u660e\u8fd4\u56de nil } return result } if res := doIt(-1); res != nil { fmt.Println(\"Good result: \", res) } else { fmt.Println(\"Bad result: \", res) // Bad result: <nil> } } 54. \u5806\u6808\u53d8\u91cf \u4f60\u5e76\u4e0d\u603b\u662f\u6e05\u695a\u4f60\u7684\u53d8\u91cf\u662f\u5206\u914d\u5230\u4e86\u5806\u8fd8\u662f\u6808\u3002 \u5728 C++ \u4e2d\u4f7f\u7528 new \u521b\u5efa\u7684\u53d8\u91cf\u603b\u662f\u5206\u914d\u5230\u5806\u5185\u5b58\u4e0a\u7684\uff0c\u4f46\u5728 Go \u4e2d\u5373\u4f7f\u4f7f\u7528 new() \u3001 make() \u6765\u521b\u5efa\u53d8\u91cf\uff0c\u53d8\u91cf\u4e3a\u5185\u5b58\u5206\u914d\u4f4d\u7f6e\u4f9d\u65e7\u5f52 Go \u7f16\u8bd1\u5668\u7ba1\u3002 Go \u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u53d8\u91cf\u7684\u5927\u5c0f\u53ca\u5176 \"escape analysis\" \u7684\u7ed3\u679c\u6765\u51b3\u5b9a\u53d8\u91cf\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u6545\u80fd\u51c6\u786e\u8fd4\u56de\u672c\u5730\u53d8\u91cf\u7684\u5730\u5740\uff0c\u8fd9\u5728 C/C++ \u4e2d\u662f\u4e0d\u884c\u7684\u3002 \u5728 go build \u6216 go run \u65f6\uff0c\u52a0\u5165 -m \u53c2\u6570\uff0c\u80fd\u51c6\u786e\u5206\u6790\u7a0b\u5e8f\u7684\u53d8\u91cf\u5206\u914d\u4f4d\u7f6e\uff1a 55. GOMAXPROCS\u3001Concurrency\uff08\u5e76\u53d1\uff09and Parallelism\uff08\u5e76\u884c\uff09 Go 1.4 \u53ca\u4ee5\u4e0b\u7248\u672c\uff0c\u7a0b\u5e8f\u53ea\u4f1a\u4f7f\u7528 1 \u4e2a\u6267\u884c\u4e0a\u4e0b\u6587 / OS \u7ebf\u7a0b\uff0c\u5373\u4efb\u4f55\u65f6\u95f4\u90fd\u6700\u591a\u53ea\u6709 1 \u4e2a goroutine \u5728\u6267\u884c\u3002 Go 1.5 \u7248\u672c\u5c06\u53ef\u6267\u884c\u4e0a\u4e0b\u6587\u7684\u6570\u91cf\u8bbe\u7f6e\u4e3a runtime.NumCPU() \u8fd4\u56de\u7684\u903b\u8f91 CPU \u6838\u5fc3\u6570\uff0c\u8fd9\u4e2a\u6570\u4e0e\u7cfb\u7edf\u5b9e\u9645\u603b\u7684 CPU \u903b\u8f91\u6838\u5fc3\u6570\u662f\u5426\u4e00\u81f4\uff0c\u53d6\u51b3\u4e8e\u4f60\u7684 CPU \u5206\u914d\u7ed9\u7a0b\u5e8f\u7684\u6838\u5fc3\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528 GOMAXPROCS \u73af\u5883\u53d8\u91cf\u6216\u8005\u52a8\u6001\u7684\u4f7f\u7528 runtime.GOMAXPROCS() \u6765\u8c03\u6574\u3002 \u8bef\u533a\uff1a GOMAXPROCS \u8868\u793a\u6267\u884c goroutine \u7684 CPU \u6838\u5fc3\u6570\uff0c\u53c2\u8003 \u6587\u6863 GOMAXPROCS \u7684\u503c\u662f\u53ef\u4ee5\u8d85\u8fc7 CPU \u7684\u5b9e\u9645\u6570\u91cf\u7684\uff0c\u5728 1.5 \u4e2d\u6700\u5927\u4e3a 256 func main() { fmt.Println(runtime.GOMAXPROCS(-1)) // 4 fmt.Println(runtime.NumCPU()) // 4 runtime.GOMAXPROCS(20) fmt.Println(runtime.GOMAXPROCS(-1)) // 20 runtime.GOMAXPROCS(300) fmt.Println(runtime.GOMAXPROCS(-1)) // Go 1.9.2 // 300 } 56. \u8bfb\u5199\u64cd\u4f5c\u7684\u91cd\u65b0\u6392\u5e8f Go \u53ef\u80fd\u4f1a\u91cd\u6392\u4e00\u4e9b\u64cd\u4f5c\u7684\u6267\u884c\u987a\u5e8f\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5728\u4e00\u4e2a goroutine \u4e2d\u64cd\u4f5c\u662f\u987a\u5e8f\u6267\u884c\u7684\uff0c\u4f46\u4e0d\u4fdd\u8bc1\u591a goroutine \u7684\u6267\u884c\u987a\u5e8f\uff1a var _ = runtime.GOMAXPROCS(3) var a, b int func u1() { a = 1 b = 2 } func u2() { a = 3 b = 4 } func p() { println(a) println(b) } func main() { go u1() // \u591a\u4e2a goroutine \u7684\u6267\u884c\u987a\u5e8f\u4e0d\u5b9a go u2() go p() time.Sleep(1 * time.Second) } \u8fd0\u884c\u6548\u679c\uff1a \u5982\u679c\u4f60\u60f3\u4fdd\u6301\u591a goroutine \u50cf\u4ee3\u7801\u4e2d\u7684\u90a3\u6837\u987a\u5e8f\u6267\u884c\uff0c\u53ef\u4ee5\u4f7f\u7528 channel \u6216 sync \u5305\u4e2d\u7684\u9501\u673a\u5236\u7b49\u3002 57. \u4f18\u5148\u8c03\u5ea6 \u4f60\u7684\u7a0b\u5e8f\u53ef\u80fd\u51fa\u73b0\u4e00\u4e2a goroutine \u5728\u8fd0\u884c\u65f6\u963b\u6b62\u4e86\u5176\u4ed6 goroutine \u7684\u8fd0\u884c\uff0c\u6bd4\u5982\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a\u4e0d\u8ba9\u8c03\u5ea6\u5668\u8fd0\u884c\u7684 for \u5faa\u73af\uff1a func main() { done := false go func() { done = true }() for !done { } println(\"done !\") } for \u7684\u5faa\u73af\u4f53\u4e0d\u5fc5\u4e3a\u7a7a\uff0c\u4f46\u5982\u679c\u4ee3\u7801\u4e0d\u4f1a\u89e6\u53d1\u8c03\u5ea6\u5668\u6267\u884c\uff0c\u5c06\u51fa\u73b0\u95ee\u9898\u3002 \u8c03\u5ea6\u5668\u4f1a\u5728 GC\u3001Go \u58f0\u660e\u3001\u963b\u585e channel\u3001\u963b\u585e\u7cfb\u7edf\u8c03\u7528\u548c\u9501\u64cd\u4f5c\u540e\u518d\u6267\u884c\uff0c\u4e5f\u4f1a\u5728\u975e\u5185\u8054\u51fd\u6570\u8c03\u7528\u65f6\u6267\u884c\uff1a func main() { done := false go func() { done = true }() for !done { println(\"not done !\") // \u5e76\u4e0d\u5185\u8054\u6267\u884c } println(\"done !\") } \u53ef\u4ee5\u6dfb\u52a0 -m \u53c2\u6570\u6765\u5206\u6790 for \u4ee3\u7801\u5757\u4e2d\u8c03\u7528\u7684\u5185\u8054\u51fd\u6570\uff1a \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 runtime \u5305\u4e2d\u7684 Gosched() \u6765 \u624b\u52a8\u542f\u52a8\u8c03\u5ea6\u5668\uff1a func main() { done := false go func() { done = true }() for !done { runtime.Gosched() } println(\"done !\") } \u8fd0\u884c\u6548\u679c\uff1a \u603b\u7ed3 \u611f\u8c22\u539f\u4f5c\u8005 kcqon \u603b\u7ed3\u7684\u8fd9\u7bc7\u535a\u5ba2\uff0c\u8ba9\u6211\u53d7\u76ca\u532a\u6d45\u3002 \u7531\u4e8e\u8bd1\u8005\u6c34\u5e73\u6709\u9650\uff0c\u4e0d\u514d\u51fa\u73b0\u7406\u89e3\u5931\u8bef\uff0c\u671b\u8bfb\u8005\u5728\u4e0b\u8bc4\u8bba\u533a\u6307\u51fa\uff0c\u4e0d\u80dc\u611f\u6fc0\u3002","title":"Golang \u65b0\u624b\u53ef\u80fd\u4f1a\u8e29\u7684 50 \u4e2a\u5751"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#_1","text":"Go \u662f\u4e00\u95e8\u7b80\u5355\u6709\u8da3\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e0e\u5176\u4ed6\u8bed\u8a00\u4e00\u6837\uff0c\u5728\u4f7f\u7528\u65f6\u4e0d\u514d\u4f1a\u9047\u5230\u5f88\u591a\u5751\uff0c\u4e0d\u8fc7\u5b83\u4eec\u5927\u591a\u4e0d\u662f Go \u672c\u8eab\u7684\u8bbe\u8ba1\u7f3a\u9677\u3002\u5982\u679c\u4f60\u521a\u4ece\u5176\u4ed6\u8bed\u8a00\u8f6c\u5230 Go\uff0c\u90a3\u8fd9\u7bc7\u6587\u7ae0\u91cc\u7684\u5751\u591a\u534a\u4f1a\u8e29\u5230\u3002 \u5982\u679c\u82b1\u65f6\u95f4\u5b66\u4e60\u5b98\u65b9 doc\u3001wiki\u3001 \u8ba8\u8bba\u90ae\u4ef6\u5217\u8868 \u3001 Rob Pike \u7684\u5927\u91cf\u6587\u7ae0\u4ee5\u53ca Go \u7684\u6e90\u7801\uff0c\u4f1a\u53d1\u73b0\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u7684\u5751\u662f\u5f88\u5e38\u89c1\u7684\uff0c\u65b0\u624b\u8df3\u8fc7\u8fd9\u4e9b\u5751\uff0c\u80fd\u51cf\u5c11\u5927\u91cf\u8c03\u8bd5\u4ee3\u7801\u7684\u65f6\u95f4\u3002","title":"\u524d\u8a00"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#1-34","text":"","title":"\u521d\u7ea7\u7bc7\uff1a1-34"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#1","text":"\u5728\u5176\u4ed6\u5927\u591a\u6570\u8bed\u8a00\u4e2d\uff0c { \u7684\u4f4d\u7f6e\u4f60\u81ea\u884c\u51b3\u5b9a\u3002Go \u6bd4\u8f83\u7279\u522b\uff0c\u9075\u5b88\u5206\u53f7\u6ce8\u5165\u89c4\u5219\uff08automatic semicolon injection\uff09\uff1a\u7f16\u8bd1\u5668\u4f1a\u5728\u6bcf\u884c\u4ee3\u7801\u5c3e\u90e8\u7279\u5b9a\u5206\u9694\u7b26\u540e\u52a0 ; \u6765\u5206\u9694\u591a\u6761\u8bed\u53e5\uff0c\u6bd4\u5982\u4f1a\u5728 ) \u540e\u52a0\u5206\u53f7\uff1a // \u9519\u8bef\u793a\u4f8b func main() { println(\"hello world\") } // \u7b49\u6548\u4e8e func main(); // \u65e0\u51fd\u6570\u4f53 { println(\"hello world\") } ./main.go: missing function body ./main.go: syntax error: unexpected semicolon or newline before { // \u6b63\u786e\u793a\u4f8b func main() { println(\"hello world\") }","title":"1. \u5de6\u5927\u62ec\u53f7 { \u4e0d\u80fd\u5355\u72ec\u653e\u4e00\u884c"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#2","text":"\u5982\u679c\u5728\u51fd\u6570\u4f53\u4ee3\u7801\u4e2d\u6709\u672a\u4f7f\u7528\u7684\u53d8\u91cf\uff0c\u5219\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\uff0c\u4e0d\u8fc7\u5168\u5c40\u53d8\u91cf\u58f0\u660e\u4f46\u4e0d\u4f7f\u7528\u662f\u53ef\u4ee5\u7684\u3002 \u5373\u4f7f\u53d8\u91cf\u58f0\u660e\u540e\u4e3a\u53d8\u91cf\u8d4b\u503c\uff0c\u4f9d\u65e7\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\uff0c\u9700\u5728\u67d0\u5904\u4f7f\u7528\u5b83\uff1a // \u9519\u8bef\u793a\u4f8b var gvar int // \u5168\u5c40\u53d8\u91cf\uff0c\u58f0\u660e\u4e0d\u4f7f\u7528\u4e5f\u53ef\u4ee5 func main() { var one int // error: one declared and not used two := 2 // error: two declared and not used var three int // error: three declared and not used three = 3 } // \u6b63\u786e\u793a\u4f8b // \u53ef\u4ee5\u76f4\u63a5\u6ce8\u91ca\u6216\u79fb\u9664\u672a\u4f7f\u7528\u7684\u53d8\u91cf func main() { var one int _ = one two := 2 println(two) var three int one = three var four int four = four }","title":"2. \u672a\u4f7f\u7528\u7684\u53d8\u91cf"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#3-import","text":"\u5982\u679c\u4f60 import \u4e00\u4e2a\u5305\uff0c\u4f46\u5305\u4e2d\u7684\u53d8\u91cf\u3001\u51fd\u6570\u3001\u63a5\u53e3\u548c\u7ed3\u6784\u4f53\u4e00\u4e2a\u90fd\u6ca1\u6709\u7528\u5230\u7684\u8bdd\uff0c\u5c06\u7f16\u8bd1\u5931\u8d25\u3002 \u53ef\u4ee5\u4f7f\u7528 _ \u4e0b\u5212\u7ebf\u7b26\u53f7\u4f5c\u4e3a\u522b\u540d\u6765\u5ffd\u7565\u5bfc\u5165\u7684\u5305\uff0c\u4ece\u800c\u907f\u514d\u7f16\u8bd1\u9519\u8bef\uff0c\u8fd9\u53ea\u4f1a\u6267\u884c package \u7684 init() // \u9519\u8bef\u793a\u4f8b import ( \"fmt\" // imported and not used: \"fmt\" \"log\" // imported and not used: \"log\" \"time\" // imported and not used: \"time\" ) func main() { } // \u6b63\u786e\u793a\u4f8b // \u53ef\u4ee5\u4f7f\u7528 goimports \u5de5\u5177\u6765\u6ce8\u91ca\u6216\u79fb\u9664\u672a\u4f7f\u7528\u5230\u7684\u5305 import ( _ \"fmt\" \"log\" \"time\" ) func main() { _ = log.Println _ = time.Now }","title":"3. \u672a\u4f7f\u7528\u7684 import"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#4","text":"// \u9519\u8bef\u793a\u4f8b myvar := 1 // syntax error: non-declaration statement outside function body func main() { } // \u6b63\u786e\u793a\u4f8b var myvar = 1 func main() { }","title":"4. \u7b80\u77ed\u58f0\u660e\u7684\u53d8\u91cf\u53ea\u80fd\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#5","text":"\u4e0d\u80fd\u7528\u7b80\u77ed\u58f0\u660e\u65b9\u5f0f\u6765\u5355\u72ec\u4e3a\u4e00\u4e2a\u53d8\u91cf\u91cd\u590d\u58f0\u660e\uff0c := \u5de6\u4fa7\u81f3\u5c11\u6709\u4e00\u4e2a\u65b0\u53d8\u91cf\uff0c\u624d\u5141\u8bb8\u591a\u53d8\u91cf\u7684\u91cd\u590d\u58f0\u660e\uff1a // \u9519\u8bef\u793a\u4f8b func main() { one := 0 one := 1 // error: no new variables on left side of := } // \u6b63\u786e\u793a\u4f8b func main() { one := 0 one, two := 1, 2 // two \u662f\u65b0\u53d8\u91cf\uff0c\u5141\u8bb8 one \u7684\u91cd\u590d\u58f0\u660e\u3002\u6bd4\u5982 error \u5904\u7406\u7ecf\u5e38\u7528\u540c\u540d\u53d8\u91cf err one, two = two, one // \u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u503c\u7684\u7b80\u5199 }","title":"5. \u4f7f\u7528\u7b80\u77ed\u58f0\u660e\u6765\u91cd\u590d\u58f0\u660e\u53d8\u91cf"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#6","text":"struct \u7684\u53d8\u91cf\u5b57\u6bb5\u4e0d\u80fd\u4f7f\u7528 := \u6765\u8d4b\u503c\u4ee5\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u53d8\u91cf\u6765\u907f\u514d\u89e3\u51b3\uff1a // \u9519\u8bef\u793a\u4f8b type info struct { result int } func work() (int, error) { return 3, nil } func main() { var data info data.result, err := work() // error: non-name data.result on left side of := fmt.Printf(\"info: %+v\\n\", data) } // \u6b63\u786e\u793a\u4f8b func main() { var data info var err error // err \u9700\u8981\u9884\u58f0\u660e data.result, err = work() if err != nil { fmt.Println(err) return } fmt.Printf(\"info: %+v\\n\", data) }","title":"6. \u4e0d\u80fd\u4f7f\u7528\u7b80\u77ed\u58f0\u660e\u6765\u8bbe\u7f6e\u5b57\u6bb5\u7684\u503c"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#7","text":"\u5bf9\u4ece\u52a8\u6001\u8bed\u8a00\u8f6c\u8fc7\u6765\u7684\u5f00\u53d1\u8005\u6765\u8bf4\uff0c\u7b80\u77ed\u58f0\u660e\u5f88\u597d\u7528\uff0c\u8fd9\u53ef\u80fd\u4f1a\u8ba9\u4eba\u8bef\u4f1a := \u662f\u4e00\u4e2a\u8d4b\u503c\u64cd\u4f5c\u7b26\u3002 \u5982\u679c\u4f60\u5728\u65b0\u7684\u4ee3\u7801\u5757\u4e2d\u50cf\u4e0b\u8fb9\u8fd9\u6837\u8bef\u7528\u4e86 := \uff0c\u7f16\u8bd1\u4e0d\u4f1a\u62a5\u9519\uff0c\u4f46\u662f\u53d8\u91cf\u4e0d\u4f1a\u6309\u4f60\u7684\u9884\u671f\u5de5\u4f5c\uff1a func main() { x := 1 println(x) // 1 { println(x) // 1 x := 2 println(x) // 2 // \u65b0\u7684 x \u53d8\u91cf\u7684\u4f5c\u7528\u57df\u53ea\u5728\u4ee3\u7801\u5757\u5185\u90e8 } println(x) // 1 } \u8fd9\u662f Go \u5f00\u53d1\u8005\u5e38\u72af\u7684\u9519\uff0c\u800c\u4e14\u4e0d\u6613\u88ab\u53d1\u73b0\u3002 \u53ef\u4f7f\u7528 vet \u5de5\u5177\u6765\u8bca\u65ad\u8fd9\u79cd\u53d8\u91cf\u8986\u76d6\uff0cGo \u9ed8\u8ba4\u4e0d\u505a\u8986\u76d6\u68c0\u67e5\uff0c\u6dfb\u52a0 -shadow \u9009\u9879\u6765\u542f\u7528\uff1a > go tool vet -shadow main.go main.go:9: declaration of \"x\" shadows declaration at main.go:5 \u6ce8\u610f vet \u4e0d\u4f1a\u62a5\u544a\u5168\u90e8\u88ab\u8986\u76d6\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u4f7f\u7528 go-nyet \u6765\u505a\u8fdb\u4e00\u6b65\u7684\u68c0\u6d4b\uff1a > $GOPATH/bin/go-nyet main.go main.go:10:3:Shadowing variable `x`","title":"7. \u4e0d\u5c0f\u5fc3\u8986\u76d6\u4e86\u53d8\u91cf"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#8-nil","text":"nil \u662f interface\u3001function\u3001pointer\u3001map\u3001slice \u548c channel \u7c7b\u578b\u53d8\u91cf\u7684\u9ed8\u8ba4\u521d\u59cb\u503c\u3002\u4f46\u58f0\u660e\u65f6\u4e0d\u6307\u5b9a\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u4e5f\u65e0\u6cd5\u63a8\u65ad\u51fa\u53d8\u91cf\u7684\u5177\u4f53\u7c7b\u578b\u3002 // \u9519\u8bef\u793a\u4f8b func main() { var x = nil // error: use of untyped nil _ = x } // \u6b63\u786e\u793a\u4f8b func main() { var x interface{} = nil _ = x }","title":"8. \u663e\u5f0f\u7c7b\u578b\u7684\u53d8\u91cf\u65e0\u6cd5\u4f7f\u7528 nil \u6765\u521d\u59cb\u5316"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#9-nil-slicemap","text":"\u5141\u8bb8\u5bf9\u503c\u4e3a nil \u7684 slice \u6dfb\u52a0\u5143\u7d20\uff0c\u4f46\u5bf9\u503c\u4e3a nil \u7684 map \u6dfb\u52a0\u5143\u7d20\u5219\u4f1a\u9020\u6210\u8fd0\u884c\u65f6 panic // map \u9519\u8bef\u793a\u4f8b func main() { var m map[string]int m[\"one\"] = 1 // error: panic: assignment to entry in nil map // m := make(map[string]int)// map \u7684\u6b63\u786e\u58f0\u660e\uff0c\u5206\u914d\u4e86\u5b9e\u9645\u7684\u5185\u5b58 } // slice \u6b63\u786e\u793a\u4f8b func main() { var s []int s = append(s, 1) }","title":"9. \u76f4\u63a5\u4f7f\u7528\u503c\u4e3a nil \u7684 slice\u3001map"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#10-map","text":"\u5728\u521b\u5efa map \u7c7b\u578b\u7684\u53d8\u91cf\u65f6\u53ef\u4ee5\u6307\u5b9a\u5bb9\u91cf\uff0c\u4f46\u4e0d\u80fd\u50cf slice \u4e00\u6837\u4f7f\u7528 cap() \u6765\u68c0\u6d4b\u5206\u914d\u7a7a\u95f4\u7684\u5927\u5c0f\uff1a // \u9519\u8bef\u793a\u4f8b func main() { m := make(map[string]int, 99) println(cap(m)) // error: invalid argument m1 (type map[string]int) for cap }","title":"10. map \u5bb9\u91cf"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#11-string-nil","text":"\u5bf9\u90a3\u4e9b\u559c\u6b22\u7528 nil \u521d\u59cb\u5316\u5b57\u7b26\u4e32\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u5c31\u662f\u5751\uff1a // \u9519\u8bef\u793a\u4f8b func main() { var s string = nil // cannot use nil as type string in assignment if s == nil { // invalid operation: s == nil (mismatched types string and nil) s = \"default\" } } // \u6b63\u786e\u793a\u4f8b func main() { var s string // \u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u96f6\u503c\u662f\u7a7a\u4e32 \"\" if s == \"\" { s = \"default\" } }","title":"11. string \u7c7b\u578b\u7684\u53d8\u91cf\u503c\u4e0d\u80fd\u4e3a nil"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#12-array","text":"\u5728 C/C++ \u4e2d\uff0c\u6570\u7ec4\uff08\u540d\uff09\u662f\u6307\u9488\u3002\u5c06\u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\u4f20\u8fdb\u51fd\u6570\u65f6\uff0c\u76f8\u5f53\u4e8e\u4f20\u9012\u4e86\u6570\u7ec4\u5185\u5b58\u5730\u5740\u7684\u5f15\u7528\uff0c\u5728\u51fd\u6570\u5185\u90e8\u4f1a\u6539\u53d8\u8be5\u6570\u7ec4\u7684\u503c\u3002 \u5728 Go \u4e2d\uff0c\u6570\u7ec4\u662f\u503c\u3002\u4f5c\u4e3a\u53c2\u6570\u4f20\u8fdb\u51fd\u6570\u65f6\uff0c\u4f20\u9012\u7684\u662f\u6570\u7ec4\u7684\u539f\u59cb\u503c\u62f7\u8d1d\uff0c\u6b64\u65f6\u5728\u51fd\u6570\u5185\u90e8\u662f\u65e0\u6cd5\u66f4\u65b0\u8be5\u6570\u7ec4\u7684\uff1a // \u6570\u7ec4\u4f7f\u7528\u503c\u62f7\u8d1d\u4f20\u53c2 func main() { x := [3]int{1,2,3} func(arr [3]int) { arr[0] = 7 fmt.Println(arr) // [7 2 3] }(x) fmt.Println(x) // [1 2 3] // \u5e76\u4e0d\u662f\u4f60\u4ee5\u4e3a\u7684 [7 2 3] } \u5982\u679c\u60f3\u4fee\u6539\u53c2\u6570\u6570\u7ec4\uff1a \u76f4\u63a5\u4f20\u9012\u6307\u5411\u8fd9\u4e2a\u6570\u7ec4\u7684\u6307\u9488\u7c7b\u578b\uff1a // \u4f20\u5740\u4f1a\u4fee\u6539\u539f\u6570\u636e func main() { x := [3]int{1,2,3} func(arr *[3]int) { (*arr)[0] = 7 fmt.Println(arr) // &[7 2 3] }(&x) fmt.Println(x) // [7 2 3] } \u76f4\u63a5\u4f7f\u7528 slice\uff1a\u5373\u4f7f\u51fd\u6570\u5185\u90e8\u5f97\u5230\u7684\u662f slice \u7684\u503c\u62f7\u8d1d\uff0c\u4f46\u4f9d\u65e7\u4f1a\u66f4\u65b0 slice \u7684\u539f\u59cb\u6570\u636e\uff08\u5e95\u5c42 array\uff09 // \u4f1a\u4fee\u6539 slice \u7684\u5e95\u5c42 array\uff0c\u4ece\u800c\u4fee\u6539 slice func main() { x := []int{1, 2, 3} func(arr []int) { arr[0] = 7 fmt.Println(x) // [7 2 3] }(x) fmt.Println(x) // [7 2 3] }","title":"12. Array \u7c7b\u578b\u7684\u503c\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#13-range-slice-array","text":"\u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684 for-in \u3001 foreach \u904d\u5386\u8bed\u53e5\u4e0d\u540c\uff0cGo \u4e2d\u7684 range \u5728\u904d\u5386\u65f6\u4f1a\u751f\u6210 2 \u4e2a\u503c\uff0c\u7b2c\u4e00\u4e2a\u662f\u5143\u7d20\u7d22\u5f15\uff0c\u7b2c\u4e8c\u4e2a\u662f\u5143\u7d20\u7684\u503c\uff1a // \u9519\u8bef\u793a\u4f8b func main() { x := []string{\"a\", \"b\", \"c\"} for v := range x { fmt.Println(v) // 0 1 2 } } // \u6b63\u786e\u793a\u4f8b func main() { x := []string{\"a\", \"b\", \"c\"} for _, v := range x { // \u4f7f\u7528 _ \u4e22\u5f03\u7d22\u5f15 fmt.Println(v) } }","title":"13. range \u904d\u5386 slice \u548c array \u65f6\u6df7\u6dc6\u4e86\u8fd4\u56de\u503c"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#14-slice-array","text":"\u770b\u8d77\u6765 Go \u652f\u6301\u591a\u7ef4\u7684 array \u548c slice\uff0c\u53ef\u4ee5\u521b\u5efa\u6570\u7ec4\u7684\u6570\u7ec4\u3001\u5207\u7247\u7684\u5207\u7247\uff0c\u4f46\u5176\u5b9e\u5e76\u4e0d\u662f\u3002 \u5bf9\u4f9d\u8d56\u52a8\u6001\u8ba1\u7b97\u591a\u7ef4\u6570\u7ec4\u503c\u7684\u5e94\u7528\u6765\u8bf4\uff0c\u5c31\u6027\u80fd\u548c\u590d\u6742\u5ea6\u800c\u8a00\uff0c\u7528 Go \u5b9e\u73b0\u7684\u6548\u679c\u5e76\u4e0d\u7406\u60f3\u3002 \u53ef\u4ee5\u4f7f\u7528\u539f\u59cb\u7684\u4e00\u7ef4\u6570\u7ec4\u3001\u201c\u72ec\u7acb\u201c \u7684\u5207\u7247\u3001\u201c\u5171\u4eab\u5e95\u5c42\u6570\u7ec4\u201d\u7684\u5207\u7247\u6765\u521b\u5efa\u52a8\u6001\u7684\u591a\u7ef4\u6570\u7ec4\u3002 \u4f7f\u7528\u539f\u59cb\u7684\u4e00\u7ef4\u6570\u7ec4\uff1a\u8981\u505a\u597d\u7d22\u5f15\u68c0\u67e5\u3001\u6ea2\u51fa\u68c0\u6d4b\u3001\u4ee5\u53ca\u5f53\u6570\u7ec4\u6ee1\u65f6\u518d\u6dfb\u52a0\u503c\u65f6\u8981\u91cd\u65b0\u505a\u5185\u5b58\u5206\u914d\u3002 \u4f7f\u7528\u201c\u72ec\u7acb\u201d\u7684\u5207\u7247\u5206\u4e24\u6b65\uff1a \u521b\u5efa\u5916\u90e8 slice \u5bf9\u6bcf\u4e2a\u5185\u90e8 slice \u8fdb\u884c\u5185\u5b58\u5206\u914d \u6ce8\u610f\u5185\u90e8\u7684 slice \u76f8\u4e92\u72ec\u7acb\uff0c\u4f7f\u5f97\u4efb\u4e00\u5185\u90e8 slice \u589e\u7f29\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6\u7684 slice // \u4f7f\u7528\u5404\u81ea\u72ec\u7acb\u7684 6 \u4e2a slice \u6765\u521b\u5efa [2][3] \u7684\u52a8\u6001\u591a\u7ef4\u6570\u7ec4 func main() { x := 2 y := 4 table := make([][]int, x) for i := range table { table[i] = make([]int, y) } } \u4f7f\u7528\u201c\u5171\u4eab\u5e95\u5c42\u6570\u7ec4\u201d\u7684\u5207\u7247 \u521b\u5efa\u4e00\u4e2a\u5b58\u653e\u539f\u59cb\u6570\u636e\u7684\u5bb9\u5668 slice \u521b\u5efa\u5176\u4ed6\u7684 slice \u5207\u5272\u539f\u59cb slice \u6765\u521d\u59cb\u5316\u5176\u4ed6\u7684 slice func main() { h, w := 2, 4 raw := make([]int, h*w) for i := range raw { raw[i] = i } // \u521d\u59cb\u5316\u539f\u59cb slice fmt.Println(raw, &raw[4]) // [0 1 2 3 4 5 6 7] 0xc420012120 table := make([][]int, h) for i := range table { // \u7b49\u95f4\u8ddd\u5207\u5272\u539f\u59cb slice\uff0c\u521b\u5efa\u52a8\u6001\u591a\u7ef4\u6570\u7ec4 table // 0: raw[0*4: 0*4 + 4] // 1: raw[1*4: 1*4 + 4] table[i] = raw[i*w : i*w + w] } fmt.Println(table, &table[1][0]) // [[0 1 2 3] [4 5 6 7]] 0xc420012120 } \u66f4\u591a\u5173\u4e8e\u591a\u7ef4\u6570\u7ec4\u7684\u53c2\u8003 go-how-is-two-dimensional-arrays-memory-representation what-is-a-concise-way-to-create-a-2d-slice-in-go","title":"14. slice \u548c array \u5176\u5b9e\u662f\u4e00\u7ef4\u6570\u636e"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#15-map-key","text":"\u548c\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u7c7b\u4f3c\uff0c\u5982\u679c\u8bbf\u95ee\u4e86 map \u4e2d\u4e0d\u5b58\u5728\u7684 key \u5219\u5e0c\u671b\u80fd\u8fd4\u56de nil\uff0c\u6bd4\u5982\u5728 PHP \u4e2d\uff1a > php -r '$v = [\"x\"=>1, \"y\"=>2]; @var_dump($v[\"z\"]);' NULL Go \u5219\u4f1a\u8fd4\u56de\u5143\u7d20\u5bf9\u5e94\u6570\u636e\u7c7b\u578b\u7684\u96f6\u503c\uff0c\u6bd4\u5982 nil \u3001 '' \u3001 false \u548c 0\uff0c\u53d6\u503c\u64cd\u4f5c\u603b\u6709\u503c\u8fd4\u56de\uff0c\u6545\u4e0d\u80fd\u901a\u8fc7\u53d6\u51fa\u6765\u7684\u503c\u6765\u5224\u65ad key \u662f\u4e0d\u662f\u5728 map \u4e2d\u3002 \u68c0\u67e5 key \u662f\u5426\u5b58\u5728\u53ef\u4ee5\u7528 map \u76f4\u63a5\u8bbf\u95ee\uff0c\u68c0\u67e5\u8fd4\u56de\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5373\u53ef\uff1a // \u9519\u8bef\u7684 key \u68c0\u6d4b\u65b9\u5f0f func main() { x := map[string]string{\"one\": \"2\", \"two\": \"\", \"three\": \"3\"} if v := x[\"two\"]; v == \"\" { fmt.Println(\"key two is no entry\") // \u952e two \u5b58\u4e0d\u5b58\u5728\u90fd\u4f1a\u8fd4\u56de\u7684\u7a7a\u5b57\u7b26\u4e32 } } // \u6b63\u786e\u793a\u4f8b func main() { x := map[string]string{\"one\": \"2\", \"two\": \"\", \"three\": \"3\"} if _, ok := x[\"two\"]; !ok { fmt.Println(\"key two is no entry\") } }","title":"15. \u8bbf\u95ee map \u4e2d\u4e0d\u5b58\u5728\u7684 key"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#16-string","text":"\u5c1d\u8bd5\u4f7f\u7528\u7d22\u5f15\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u6765\u66f4\u65b0\u5b57\u7b26\u4e32\u4e2d\u7684\u4e2a\u522b\u5b57\u7b26\uff0c\u662f\u4e0d\u5141\u8bb8\u7684\u3002 string \u7c7b\u578b\u7684\u503c\u662f\u53ea\u8bfb\u7684\u4e8c\u8fdb\u5236 byte slice\uff0c\u5982\u679c\u771f\u8981\u4fee\u6539\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\uff0c\u5c06 string \u8f6c\u4e3a []byte \u4fee\u6539\u540e\uff0c\u518d\u8f6c\u4e3a string \u5373\u53ef\uff1a // \u4fee\u6539\u5b57\u7b26\u4e32\u7684\u9519\u8bef\u793a\u4f8b func main() { x := \"text\" x[0] = \"T\" // error: cannot assign to x[0] fmt.Println(x) } // \u4fee\u6539\u793a\u4f8b func main() { x := \"text\" xBytes := []byte(x) xBytes[0] = 'T' // \u6ce8\u610f\u6b64\u65f6\u7684 T \u662f rune \u7c7b\u578b x = string(xBytes) fmt.Println(x) // Text } \u6ce8\u610f\uff1a \u4e0a\u8fb9\u7684\u793a\u4f8b\u5e76\u4e0d\u662f\u66f4\u65b0\u5b57\u7b26\u4e32\u7684\u6b63\u786e\u59ff\u52bf\uff0c\u56e0\u4e3a\u4e00\u4e2a UTF8 \u7f16\u7801\u7684\u5b57\u7b26\u53ef\u80fd\u4f1a\u5360\u591a\u4e2a\u5b57\u8282\uff0c\u6bd4\u5982\u6c49\u5b57\u5c31\u9700\u8981 3~4 \u4e2a\u5b57\u8282\u6765\u5b58\u50a8\uff0c\u6b64\u65f6\u66f4\u65b0\u5176\u4e2d\u7684\u4e00\u4e2a\u5b57\u8282\u662f\u9519\u8bef\u7684\u3002 \u66f4\u65b0\u5b57\u4e32\u7684\u6b63\u786e\u59ff\u52bf\uff1a\u5c06 string \u8f6c\u4e3a rune slice\uff08\u6b64\u65f6 1 \u4e2a rune \u53ef\u80fd\u5360\u591a\u4e2a byte\uff09\uff0c\u76f4\u63a5\u66f4\u65b0 rune \u4e2d\u7684\u5b57\u7b26 func main() { x := \"text\" xRunes := []rune(x) xRunes[0] = '\u6211' x = string(xRunes) fmt.Println(x) // \u6211ext }","title":"16. string \u7c7b\u578b\u7684\u503c\u662f\u5e38\u91cf\uff0c\u4e0d\u53ef\u66f4\u6539"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#17-string-byte-slice","text":"\u5f53\u8fdb\u884c string \u548c byte slice \u76f8\u4e92\u8f6c\u6362\u65f6\uff0c\u53c2\u4e0e\u8f6c\u6362\u7684\u662f\u62f7\u8d1d\u7684\u539f\u59cb\u503c\u3002\u8fd9\u79cd\u8f6c\u6362\u7684\u8fc7\u7a0b\uff0c\u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u64cd\u4f5c\u4e0d\u540c\uff0c\u4e5f\u548c\u65b0 slice \u4e0e\u65e7 slice \u5171\u4eab\u5e95\u5c42\u6570\u7ec4\u4e0d\u540c\u3002 Go \u5728 string \u4e0e byte slice \u76f8\u4e92\u8f6c\u6362\u4e0a\u4f18\u5316\u4e86\u4e24\u70b9\uff0c\u907f\u514d\u4e86\u989d\u5916\u7684\u5185\u5b58\u5206\u914d\uff1a \u5728 map[string] \u4e2d\u67e5\u627e key \u65f6\uff0c\u4f7f\u7528\u4e86\u5bf9\u5e94\u7684 []byte \uff0c\u907f\u514d\u505a m[string(key)] \u7684\u5185\u5b58\u5206\u914d \u4f7f\u7528 for range \u8fed\u4ee3 string \u8f6c\u6362\u4e3a []byte \u7684\u8fed\u4ee3\uff1a for i,v := range []byte(str) {...} \u96fe\uff1a \u53c2\u8003\u539f\u6587","title":"17. string \u4e0e byte slice \u4e4b\u95f4\u7684\u8f6c\u6362"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#18-string","text":"\u5bf9\u5b57\u7b26\u4e32\u7528\u7d22\u5f15\u8bbf\u95ee\u8fd4\u56de\u7684\u4e0d\u662f\u5b57\u7b26\uff0c\u800c\u662f\u4e00\u4e2a byte \u503c\u3002 \u8fd9\u79cd\u5904\u7406\u65b9\u5f0f\u548c\u5176\u4ed6\u8bed\u8a00\u4e00\u6837\uff0c\u6bd4\u5982 PHP \u4e2d\uff1a > php -r '$name=\"\u4e2d\u6587\"; var_dump($name);' # \"\u4e2d\u6587\" \u5360\u7528 6 \u4e2a\u5b57\u8282 string(6) \"\u4e2d\u6587\" > php -r '$name=\"\u4e2d\u6587\"; var_dump($name[0]);' # \u628a\u7b2c\u4e00\u4e2a\u5b57\u8282\u5f53\u505a Unicode \u5b57\u7b26\u8bfb\u53d6\uff0c\u663e\u793a U+FFFD string(1) \"\ufffd\" > php -r '$name=\"\u4e2d\u6587\"; var_dump($name[0].$name[1].$name[2]);' string(3) \"\u4e2d\" func main() { x := \"ascii\" fmt.Println(x[0]) // 97 fmt.Printf(\"%T\\n\", x[0])// uint8 } \u5982\u679c\u9700\u8981\u4f7f\u7528 for range \u8fed\u4ee3\u8bbf\u95ee\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\uff08unicode code point / rune\uff09\uff0c\u6807\u51c6\u5e93\u4e2d\u6709 \"unicode/utf8\" \u5305\u6765\u505a UTF8 \u7684\u76f8\u5173\u89e3\u7801\u7f16\u7801\u3002\u53e6\u5916 utf8string \u4e5f\u6709\u50cf func (s *String) At(i int) rune \u7b49\u5f88\u65b9\u4fbf\u7684\u5e93\u51fd\u6570\u3002","title":"18. string \u4e0e\u7d22\u5f15\u64cd\u4f5c\u7b26"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#19-utf8","text":"string \u7684\u503c\u4e0d\u5fc5\u662f UTF8 \u6587\u672c\uff0c\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u7684\u503c\u3002\u53ea\u6709\u5b57\u7b26\u4e32\u662f\u6587\u5b57\u5b57\u9762\u503c\u65f6\u624d\u662f UTF8 \u6587\u672c\uff0c\u5b57\u4e32\u53ef\u4ee5\u901a\u8fc7\u8f6c\u4e49\u6765\u5305\u542b\u5176\u4ed6\u6570\u636e\u3002 \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u662f UTF8 \u6587\u672c\uff0c\u53ef\u4f7f\u7528 \"unicode/utf8\" \u5305\u4e2d\u7684 ValidString() \u51fd\u6570\uff1a func main() { str1 := \"ABC\" fmt.Println(utf8.ValidString(str1)) // true str2 := \"A\\xfeC\" fmt.Println(utf8.ValidString(str2)) // false str3 := \"A\\\\xfeC\" fmt.Println(utf8.ValidString(str3)) // true // \u628a\u8f6c\u4e49\u5b57\u7b26\u8f6c\u4e49\u6210\u5b57\u9762\u503c }","title":"19. \u5b57\u7b26\u4e32\u5e76\u4e0d\u90fd\u662f UTF8 \u6587\u672c"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#20","text":"\u5728 Python \u4e2d\uff1a data = u'\u2665' print(len(data)) # 1 \u7136\u800c\u5728 Go \u4e2d\uff1a func main() { char := \"\u2665\" fmt.Println(len(char)) // 3 } Go \u7684\u5185\u5efa\u51fd\u6570 len() \u8fd4\u56de\u7684\u662f\u5b57\u7b26\u4e32\u7684 byte \u6570\u91cf\uff0c\u800c\u4e0d\u662f\u50cf Python \u4e2d\u90a3\u6837\u662f\u8ba1\u7b97 Unicode \u5b57\u7b26\u6570\u3002 \u5982\u679c\u8981\u5f97\u5230\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u6570\uff0c\u53ef\u4f7f\u7528 \"unicode/utf8\" \u5305\u4e2d\u7684 RuneCountInString(str string) (n int) func main() { char := \"\u2665\" fmt.Println(utf8.RuneCountInString(char)) // 1 } \u6ce8\u610f\uff1a RuneCountInString \u5e76\u4e0d\u603b\u662f\u8fd4\u56de\u6211\u4eec\u770b\u5230\u7684\u5b57\u7b26\u6570\uff0c\u56e0\u4e3a\u6709\u7684\u5b57\u7b26\u4f1a\u5360\u7528 2 \u4e2a rune\uff1a func main() { char := \"\u00e9\" fmt.Println(len(char)) // 3 fmt.Println(utf8.RuneCountInString(char)) // 2 fmt.Println(\"cafe\\u0301\") // caf\u00e9 // \u6cd5\u6587\u7684 cafe\uff0c\u5b9e\u9645\u4e0a\u662f\u4e24\u4e2a rune \u7684\u7ec4\u5408 } \u53c2\u8003\uff1a normalization","title":"20. \u5b57\u7b26\u4e32\u7684\u957f\u5ea6"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#21-arrayslicemap","text":"func main() { x := []int { 1, 2 // syntax error: unexpected newline, expecting comma or } } y := []int{1,2,} z := []int{1,2} // ... } \u58f0\u660e\u8bed\u53e5\u4e2d } \u6298\u53e0\u5230\u5355\u884c\u540e\uff0c\u5c3e\u90e8\u7684 , \u4e0d\u662f\u5fc5\u9700\u7684\u3002","title":"21. \u5728\u591a\u884c array\u3001slice\u3001map \u8bed\u53e5\u4e2d\u7f3a\u5c11 , \u53f7"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#22-logfatal-logpanic-log","text":"log \u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e0d\u540c\u7684\u65e5\u5fd7\u8bb0\u5f55\u7b49\u7ea7\uff0c\u4e0e\u5176\u4ed6\u8bed\u8a00\u7684\u65e5\u5fd7\u5e93\u4e0d\u540c\uff0cGo \u7684 log \u5305\u5728\u8c03\u7528 Fatal*() \u3001 Panic*() \u65f6\u80fd\u505a\u66f4\u591a\u65e5\u5fd7\u5916\u7684\u4e8b\uff0c\u5982\u4e2d\u65ad\u7a0b\u5e8f\u7684\u6267\u884c\u7b49\uff1a func main() { log.Fatal(\"Fatal level log: log entry\") // \u8f93\u51fa\u4fe1\u606f\u540e\uff0c\u7a0b\u5e8f\u7ec8\u6b62\u6267\u884c log.Println(\"Nomal level log: log entry\") }","title":"22. log.Fatal \u548c log.Panic \u4e0d\u53ea\u662f log"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#23","text":"\u5c3d\u7ba1 Go \u672c\u8eab\u6709\u5927\u91cf\u7684\u7279\u6027\u6765\u652f\u6301\u5e76\u53d1\uff0c\u4f46\u5e76\u4e0d\u4fdd\u8bc1\u5e76\u53d1\u7684\u6570\u636e\u5b89\u5168\uff0c\u7528\u6237\u9700\u81ea\u5df1\u4fdd\u8bc1\u53d8\u91cf\u7b49\u6570\u636e\u4ee5\u539f\u5b50\u64cd\u4f5c\u66f4\u65b0\u3002 goroutine \u548c channel \u662f\u8fdb\u884c\u539f\u5b50\u64cd\u4f5c\u7684\u597d\u65b9\u6cd5\uff0c\u6216\u4f7f\u7528 \"sync\" \u5305\u4e2d\u7684\u9501\u3002","title":"23. \u5bf9\u5185\u5efa\u6570\u636e\u7ed3\u6784\u7684\u64cd\u4f5c\u5e76\u4e0d\u662f\u540c\u6b65\u7684"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#24-range-string","text":"range \u5f97\u5230\u7684\u7d22\u5f15\u662f\u5b57\u7b26\u503c\uff08Unicode point / rune\uff09\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u4f4d\u7f6e\uff0c\u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e0d\u540c\uff0c\u8fd9\u4e2a\u7d22\u5f15\u5e76\u4e0d\u76f4\u63a5\u662f\u5b57\u7b26\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u4f4d\u7f6e\u3002 \u6ce8\u610f\u4e00\u4e2a\u5b57\u7b26\u53ef\u80fd\u5360\u591a\u4e2a rune\uff0c\u6bd4\u5982\u6cd5\u6587\u5355\u8bcd caf\u00e9 \u4e2d\u7684 \u00e9\u3002\u64cd\u4f5c\u7279\u6b8a\u5b57\u7b26\u53ef\u4f7f\u7528 norm \u5305\u3002 for range \u8fed\u4ee3\u4f1a\u5c1d\u8bd5\u5c06 string \u7ffb\u8bd1\u4e3a UTF8 \u6587\u672c\uff0c\u5bf9\u4efb\u4f55\u65e0\u6548\u7684\u7801\u70b9\u90fd\u76f4\u63a5\u4f7f\u7528 0XFFFD rune\uff08\ufffd\uff09UNicode \u66ff\u4ee3\u5b57\u7b26\u6765\u8868\u793a\u3002\u5982\u679c string \u4e2d\u6709\u4efb\u4f55\u975e UTF8 \u7684\u6570\u636e\uff0c\u5e94\u5c06 string \u4fdd\u5b58\u4e3a byte slice \u518d\u8fdb\u884c\u64cd\u4f5c\u3002 func main() { data := \"A\\xfe\\x02\\xff\\x04\" for _, v := range data { fmt.Printf(\"%#x \", v) // 0x41 0xfffd 0x2 0xfffd 0x4 // \u9519\u8bef } for _, v := range []byte(data) { fmt.Printf(\"%#x \", v) // 0x41 0xfe 0x2 0xff 0x4 // \u6b63\u786e } }","title":"24. range \u8fed\u4ee3 string \u5f97\u5230\u7684\u503c"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#25-range-map","text":"\u5982\u679c\u4f60\u5e0c\u671b\u4ee5\u7279\u5b9a\u7684\u987a\u5e8f\uff08\u5982\u6309 key \u6392\u5e8f\uff09\u6765\u8fed\u4ee3 map\uff0c\u8981\u6ce8\u610f\u6bcf\u6b21\u8fed\u4ee3\u90fd\u53ef\u80fd\u4ea7\u751f\u4e0d\u4e00\u6837\u7684\u7ed3\u679c\u3002 Go \u7684\u8fd0\u884c\u65f6\u662f\u6709\u610f\u6253\u4e71\u8fed\u4ee3\u987a\u5e8f\u7684\uff0c\u6240\u4ee5\u4f60\u5f97\u5230\u7684\u8fed\u4ee3\u7ed3\u679c\u53ef\u80fd\u4e0d\u4e00\u81f4\u3002\u4f46\u4e5f\u5e76\u4e0d\u603b\u4f1a\u6253\u4e71\uff0c\u5f97\u5230\u8fde\u7eed\u76f8\u540c\u7684 5 \u4e2a\u8fed\u4ee3\u7ed3\u679c\u4e5f\u662f\u53ef\u80fd\u7684\uff0c\u5982\uff1a func main() { m := map[string]int{\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4} for k, v := range m { fmt.Println(k, v) } } \u5982\u679c\u4f60\u53bb Go Playground \u91cd\u590d\u8fd0\u884c\u4e0a\u8fb9\u7684\u4ee3\u7801\uff0c\u8f93\u51fa\u662f\u4e0d\u4f1a\u53d8\u7684\uff0c\u53ea\u6709\u4f60\u66f4\u65b0\u4ee3\u7801\u5b83\u624d\u4f1a\u91cd\u65b0\u7f16\u8bd1\u3002\u91cd\u65b0\u7f16\u8bd1\u540e\u8fed\u4ee3\u987a\u5e8f\u662f\u88ab\u6253\u4e71\u7684\uff1a","title":"25. range \u8fed\u4ee3 map"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#26-switch-fallthrough","text":"switch \u8bed\u53e5\u4e2d\u7684 case \u4ee3\u7801\u5757\u4f1a\u9ed8\u8ba4\u5e26\u4e0a break\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528 fallthrough \u6765\u5f3a\u5236\u6267\u884c\u4e0b\u4e00\u4e2a case \u4ee3\u7801\u5757\u3002 func main() { isSpace := func(char byte) bool { switch char { case ' ': // \u7a7a\u683c\u7b26\u4f1a\u76f4\u63a5 break\uff0c\u8fd4\u56de false // \u548c\u5176\u4ed6\u8bed\u8a00\u4e0d\u4e00\u6837 // fallthrough // \u8fd4\u56de true case '\\t': return true } return false } fmt.Println(isSpace('\\t')) // true fmt.Println(isSpace(' ')) // false } \u4e0d\u8fc7\u4f60\u53ef\u4ee5\u5728 case \u4ee3\u7801\u5757\u672b\u5c3e\u4f7f\u7528 fallthrough \uff0c\u5f3a\u5236\u6267\u884c\u4e0b\u4e00\u4e2a case \u4ee3\u7801\u5757\u3002 \u4e5f\u53ef\u4ee5\u6539\u5199 case \u4e3a\u591a\u6761\u4ef6\u5224\u65ad\uff1a func main() { isSpace := func(char byte) bool { switch char { case ' ', '\\t': return true } return false } fmt.Println(isSpace('\\t')) // true fmt.Println(isSpace(' ')) // true }","title":"26. switch \u4e2d\u7684 fallthrough \u8bed\u53e5"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#27","text":"\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u90fd\u81ea\u5e26\u524d\u7f6e\u540e\u7f6e\u7684 ++ \u3001 -- \u8fd0\u7b97\u3002\u4f46 Go \u7279\u7acb\u72ec\u884c\uff0c\u53bb\u6389\u4e86\u524d\u7f6e\u64cd\u4f5c\uff0c\u540c\u65f6 ++ \u3001 \u2014 \u53ea\u4f5c\u4e3a\u8fd0\u7b97\u7b26\u800c\u975e\u8868\u8fbe\u5f0f\u3002 // \u9519\u8bef\u793a\u4f8b func main() { data := []int{1, 2, 3} i := 0 ++i // syntax error: unexpected ++, expecting } fmt.Println(data[i++]) // syntax error: unexpected ++, expecting : } // \u6b63\u786e\u793a\u4f8b func main() { data := []int{1, 2, 3} i := 0 i++ fmt.Println(data[i]) // 2 }","title":"27. \u81ea\u589e\u548c\u81ea\u51cf\u8fd0\u7b97"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#28","text":"\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u4f7f\u7528 ~ \u4f5c\u4e3a\u4e00\u5143\u6309\u4f4d\u53d6\u53cd\uff08NOT\uff09\u64cd\u4f5c\u7b26\uff0cGo \u91cd\u7528 ^ XOR \u64cd\u4f5c\u7b26\u6765\u6309\u4f4d\u53d6\u53cd\uff1a // \u9519\u8bef\u7684\u53d6\u53cd\u64cd\u4f5c func main() { fmt.Println(~2) // bitwise complement operator is ^ } // \u6b63\u786e\u793a\u4f8b func main() { var d uint8 = 2 fmt.Printf(\"%08b\\n\", d) // 00000010 fmt.Printf(\"%08b\\n\", ^d) // 11111101 } \u540c\u65f6 ^ \u4e5f\u662f\u6309\u4f4d\u5f02\u6216\uff08XOR\uff09\u64cd\u4f5c\u7b26\u3002 \u4e00\u4e2a\u64cd\u4f5c\u7b26\u80fd\u91cd\u7528\u4e24\u6b21\uff0c\u662f\u56e0\u4e3a\u4e00\u5143\u7684 NOT \u64cd\u4f5c NOT 0x02 \uff0c\u4e0e\u4e8c\u5143\u7684 XOR \u64cd\u4f5c 0x22 XOR 0xff \u662f\u4e00\u81f4\u7684\u3002 Go \u4e5f\u6709\u7279\u6b8a\u7684\u64cd\u4f5c\u7b26 AND NOT &^ \u64cd\u4f5c\u7b26\uff0c\u4e0d\u540c\u4f4d\u624d\u53d61\u3002 func main() { var a uint8 = 0x82 var b uint8 = 0x02 fmt.Printf(\"%08b [A]\\n\", a) fmt.Printf(\"%08b [B]\\n\", b) fmt.Printf(\"%08b (NOT B)\\n\", ^b) fmt.Printf(\"%08b ^ %08b = %08b [B XOR 0xff]\\n\", b, 0xff, b^0xff) fmt.Printf(\"%08b ^ %08b = %08b [A XOR B]\\n\", a, b, a^b) fmt.Printf(\"%08b & %08b = %08b [A AND B]\\n\", a, b, a&b) fmt.Printf(\"%08b &^%08b = %08b [A 'AND NOT' B]\\n\", a, b, a&^b) fmt.Printf(\"%08b&(^%08b)= %08b [A AND (NOT B)]\\n\", a, b, a&(^b)) } 10000010 [A] 00000010 [B] 11111101 (NOT B) 00000010 ^ 11111111 = 11111101 [B XOR 0xff] 10000010 ^ 00000010 = 10000000 [A XOR B] 10000010 & 00000010 = 00000010 [A AND B] 10000010 &^00000010 = 10000000 [A 'AND NOT' B] 10000010&(^00000010)= 10000000 [A AND (NOT B)]","title":"28. \u6309\u4f4d\u53d6\u53cd"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#29","text":"\u9664\u4e86\u4f4d\u6e05\u9664\uff08bit clear\uff09\u64cd\u4f5c\u7b26\uff0cGo \u4e5f\u6709\u5f88\u591a\u548c\u5176\u4ed6\u8bed\u8a00\u4e00\u6837\u7684\u4f4d\u64cd\u4f5c\u7b26\uff0c\u4f46\u4f18\u5148\u7ea7\u53e6\u5f53\u522b\u8bba\u3002 func main() { fmt.Printf(\"0x2 & 0x2 + 0x4 -> %#x\\n\", 0x2&0x2+0x4) // & \u4f18\u5148 + //prints: 0x2 & 0x2 + 0x4 -> 0x6 //Go: (0x2 & 0x2) + 0x4 //C++: 0x2 & (0x2 + 0x4) -> 0x2 fmt.Printf(\"0x2 + 0x2 << 0x1 -> %#x\\n\", 0x2+0x2<<0x1) // << \u4f18\u5148 + //prints: 0x2 + 0x2 << 0x1 -> 0x6 //Go: 0x2 + (0x2 << 0x1) //C++: (0x2 + 0x2) << 0x1 -> 0x8 fmt.Printf(\"0xf | 0x2 ^ 0x2 -> %#x\\n\", 0xf|0x2^0x2) // | \u4f18\u5148 ^ //prints: 0xf | 0x2 ^ 0x2 -> 0xd //Go: (0xf | 0x2) ^ 0x2 //C++: 0xf | (0x2 ^ 0x2) -> 0xf } \u4f18\u5148\u7ea7\u5217\u8868\uff1a Precedence Operator 5 * / % << >> & &^ 4 + - | ^ 3 == != < <= > >= 2 && 1 ||","title":"29. \u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#30-struct-encode","text":"\u4ee5\u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u5b57\u6bb5\u6210\u5458\u662f\u65e0\u6cd5\u88ab\u5916\u90e8\u76f4\u63a5\u8bbf\u95ee\u7684\uff0c\u6240\u4ee5 struct \u5728\u8fdb\u884c json\u3001xml\u3001gob \u7b49\u683c\u5f0f\u7684 encode \u64cd\u4f5c\u65f6\uff0c\u8fd9\u4e9b\u79c1\u6709\u5b57\u6bb5\u4f1a\u88ab\u5ffd\u7565\uff0c\u5bfc\u51fa\u65f6\u5f97\u5230\u96f6\u503c\uff1a func main() { in := MyData{1, \"two\"} fmt.Printf(\"%#v\\n\", in) // main.MyData{One:1, two:\"two\"} encoded, _ := json.Marshal(in) fmt.Println(string(encoded)) // {\"One\":1} // \u79c1\u6709\u5b57\u6bb5 two \u88ab\u5ffd\u7565\u4e86 var out MyData json.Unmarshal(encoded, &out) fmt.Printf(\"%#v\\n\", out) // main.MyData{One:1, two:\"\"} }","title":"30. \u4e0d\u5bfc\u51fa\u7684 struct \u5b57\u6bb5\u65e0\u6cd5\u88ab encode"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#31-goroutine","text":"\u7a0b\u5e8f\u9ed8\u8ba4\u4e0d\u7b49\u6240\u6709 goroutine \u90fd\u6267\u884c\u5b8c\u624d\u9000\u51fa\uff0c\u8fd9\u70b9\u9700\u8981\u7279\u522b\u6ce8\u610f\uff1a // \u4e3b\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u9000\u51fa func main() { workerCount := 2 for i := 0; i < workerCount; i++ { go doIt(i) } time.Sleep(1 * time.Second) fmt.Println(\"all done!\") } func doIt(workerID int) { fmt.Printf(\"[%v] is running\\n\", workerID) time.Sleep(3 * time.Second) // \u6a21\u62df goroutine \u6b63\u5728\u6267\u884c fmt.Printf(\"[%v] is done\\n\", workerID) } \u5982\u4e0b\uff0c main() \u4e3b\u7a0b\u5e8f\u4e0d\u7b49\u4e24\u4e2a goroutine \u6267\u884c\u5b8c\u5c31\u76f4\u63a5\u9000\u51fa\u4e86\uff1a \u5e38\u7528\u89e3\u51b3\u529e\u6cd5\uff1a\u4f7f\u7528 \"WaitGroup\" \u53d8\u91cf\uff0c\u5b83\u4f1a\u8ba9\u4e3b\u7a0b\u5e8f\u7b49\u5f85\u6240\u6709 goroutine \u6267\u884c\u5b8c\u6bd5\u518d\u9000\u51fa\u3002 \u5982\u679c\u4f60\u7684 goroutine \u8981\u505a\u6d88\u606f\u7684\u5faa\u73af\u5904\u7406\u7b49\u8017\u65f6\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5411\u5b83\u4eec\u53d1\u9001\u4e00\u6761 kill \u6d88\u606f\u6765\u5173\u95ed\u5b83\u4eec\u3002\u6216\u76f4\u63a5\u5173\u95ed\u4e00\u4e2a\u5b83\u4eec\u90fd\u7b49\u5f85\u63a5\u6536\u6570\u636e\u7684 channel\uff1a // \u7b49\u5f85\u6240\u6709 goroutine \u6267\u884c\u5b8c\u6bd5 // \u8fdb\u5165\u6b7b\u9501 func main() { var wg sync.WaitGroup done := make(chan struct{}) workerCount := 2 for i := 0; i < workerCount; i++ { wg.Add(1) go doIt(i, done, wg) } close(done) wg.Wait() fmt.Println(\"all done!\") } func doIt(workerID int, done <-chan struct{}, wg sync.WaitGroup) { fmt.Printf(\"[%v] is running\\n\", workerID) defer wg.Done() <-done fmt.Printf(\"[%v] is done\\n\", workerID) } \u6267\u884c\u7ed3\u679c\uff1a \u770b\u8d77\u6765\u597d\u50cf goroutine \u90fd\u6267\u884c\u5b8c\u4e86\uff0c\u7136\u800c\u62a5\u9519\uff1a fatal error: all goroutines are asleep - deadlock! \u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u6b7b\u9501\uff1fgoroutine \u5728\u9000\u51fa\u524d\u8c03\u7528\u4e86 wg.Done() \uff0c\u7a0b\u5e8f\u5e94\u8be5\u6b63\u5e38\u9000\u51fa\u7684\u3002 \u539f\u56e0\u662f goroutine \u5f97\u5230\u7684 \"WaitGroup\" \u53d8\u91cf\u662f var wg WaitGroup \u7684\u4e00\u4efd\u62f7\u8d1d\u503c\uff0c\u5373 doIt() \u4f20\u53c2\u53ea\u4f20\u503c\u3002\u6240\u4ee5\u54ea\u6015\u5728\u6bcf\u4e2a goroutine \u4e2d\u90fd\u8c03\u7528\u4e86 wg.Done() \uff0c \u4e3b\u7a0b\u5e8f\u4e2d\u7684 wg \u53d8\u91cf\u5e76\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\u3002 // \u7b49\u5f85\u6240\u6709 goroutine \u6267\u884c\u5b8c\u6bd5 // \u4f7f\u7528\u4f20\u5740\u65b9\u5f0f\u4e3a WaitGroup \u53d8\u91cf\u4f20\u53c2 // \u4f7f\u7528 channel \u5173\u95ed goroutine func main() { var wg sync.WaitGroup done := make(chan struct{}) ch := make(chan interface{}) workerCount := 2 for i := 0; i < workerCount; i++ { wg.Add(1) go doIt(i, ch, done, &wg) // wg \u4f20\u6307\u9488\uff0cdoIt() \u5185\u90e8\u4f1a\u6539\u53d8 wg \u7684\u503c } for i := 0; i < workerCount; i++ { // \u5411 ch \u4e2d\u53d1\u9001\u6570\u636e\uff0c\u5173\u95ed goroutine ch <- i } close(done) wg.Wait() close(ch) fmt.Println(\"all done!\") } func doIt(workerID int, ch <-chan interface{}, done <-chan struct{}, wg *sync.WaitGroup) { fmt.Printf(\"[%v] is running\\n\", workerID) defer wg.Done() for { select { case m := <-ch: fmt.Printf(\"[%v] m => %v\\n\", workerID, m) case <-done: fmt.Printf(\"[%v] is done\\n\", workerID) return } } } \u8fd0\u884c\u6548\u679c\uff1a","title":"31. \u7a0b\u5e8f\u9000\u51fa\u65f6\u8fd8\u6709 goroutine \u5728\u6267\u884c"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#32-channel-receiver","text":"\u53ea\u6709\u5728\u6570\u636e\u88ab receiver \u5904\u7406\u65f6\uff0csender \u624d\u4f1a\u963b\u585e\u3002\u56e0\u8fd0\u884c\u73af\u5883\u800c\u5f02\uff0c\u5728 sender \u53d1\u9001\u5b8c\u6570\u636e\u540e\uff0creceiver \u7684 goroutine \u53ef\u80fd\u6ca1\u6709\u8db3\u591f\u7684\u65f6\u95f4\u5904\u7406\u4e0b\u4e00\u4e2a\u6570\u636e\u3002\u5982\uff1a func main() { ch := make(chan string) go func() { for m := range ch { fmt.Println(\"Processed:\", m) time.Sleep(1 * time.Second) // \u6a21\u62df\u9700\u8981\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u64cd\u4f5c } }() ch <- \"cmd.1\" ch <- \"cmd.2\" // \u4e0d\u4f1a\u88ab\u63a5\u6536\u5904\u7406 } \u8fd0\u884c\u6548\u679c\uff1a","title":"32. \u5411\u65e0\u7f13\u51b2\u7684 channel \u53d1\u9001\u6570\u636e\uff0c\u53ea\u8981 receiver \u51c6\u5907\u597d\u4e86\u5c31\u4f1a\u7acb\u523b\u8fd4\u56de"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#33-channel-panic","text":"\u4ece\u5df2\u5173\u95ed\u7684 channel \u63a5\u6536\u6570\u636e\u662f\u5b89\u5168\u7684\uff1a \u63a5\u6536\u72b6\u6001\u503c ok \u662f false \u65f6\u8868\u660e channel \u4e2d\u5df2\u6ca1\u6709\u6570\u636e\u53ef\u4ee5\u63a5\u6536\u4e86\u3002\u7c7b\u4f3c\u7684\uff0c\u4ece\u6709\u7f13\u51b2\u7684 channel \u4e2d\u63a5\u6536\u6570\u636e\uff0c\u7f13\u5b58\u7684\u6570\u636e\u83b7\u53d6\u5b8c\u518d\u6ca1\u6709\u6570\u636e\u53ef\u53d6\u65f6\uff0c\u72b6\u6001\u503c\u4e5f\u662f false \u5411\u5df2\u5173\u95ed\u7684 channel \u4e2d\u53d1\u9001\u6570\u636e\u4f1a\u9020\u6210 panic\uff1a func main() { ch := make(chan int) for i := 0; i < 3; i++ { go func(idx int) { ch <- idx }(i) } fmt.Println(<-ch) // \u8f93\u51fa\u7b2c\u4e00\u4e2a\u53d1\u9001\u7684\u503c close(ch) // \u4e0d\u80fd\u5173\u95ed\uff0c\u8fd8\u6709\u5176\u4ed6\u7684 sender time.Sleep(2 * time.Second) // \u6a21\u62df\u505a\u5176\u4ed6\u7684\u64cd\u4f5c } \u8fd0\u884c\u7ed3\u679c\uff1a \u9488\u5bf9\u4e0a\u8fb9\u6709 bug \u7684\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u53ef\u4f7f\u7528\u4e00\u4e2a\u5e9f\u5f03 channel done \u6765\u544a\u8bc9\u5269\u4f59\u7684 goroutine \u65e0\u9700\u518d\u5411 ch \u53d1\u9001\u6570\u636e\u3002\u6b64\u65f6 <- done \u7684\u7ed3\u679c\u662f {} \uff1a func main() { ch := make(chan int) done := make(chan struct{}) for i := 0; i < 3; i++ { go func(idx int) { select { case ch <- (idx + 1) * 2: fmt.Println(idx, \"Send result\") case <-done: fmt.Println(idx, \"Exiting\") } }(i) } fmt.Println(\"Result: \", <-ch) close(done) time.Sleep(3 * time.Second) } \u8fd0\u884c\u6548\u679c\uff1a","title":"33. \u5411\u5df2\u5173\u95ed\u7684 channel \u53d1\u9001\u6570\u636e\u4f1a\u9020\u6210 panic"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#34-nil-channel","text":"\u5728\u4e00\u4e2a\u503c\u4e3a nil \u7684 channel \u4e0a\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e\u5c06\u6c38\u4e45\u963b\u585e\uff1a func main() { var ch chan int // \u672a\u521d\u59cb\u5316\uff0c\u503c\u4e3a nil for i := 0; i < 3; i++ { go func(i int) { ch <- i }(i) } fmt.Println(\"Result: \", <-ch) time.Sleep(2 * time.Second) } runtime \u6b7b\u9501\u9519\u8bef\uff1a fatal error: all goroutines are asleep - deadlock! goroutine 1 [chan receive (nil chan)] \u5229\u7528\u8fd9\u4e2a\u6b7b\u9501\u7684\u7279\u6027\uff0c\u53ef\u4ee5\u7528\u5728 select \u4e2d\u52a8\u6001\u7684\u6253\u5f00\u548c\u5173\u95ed case \u8bed\u53e5\u5757\uff1a func main() { inCh := make(chan int) outCh := make(chan int) go func() { var in <-chan int = inCh var out chan<- int var val int for { select { case out <- val: println(\"--------\") out = nil in = inCh case val = <-in: println(\"++++++++++\") out = outCh in = nil } } }() go func() { for r := range outCh { fmt.Println(\"Result: \", r) } }() time.Sleep(0) inCh <- 1 inCh <- 2 time.Sleep(3 * time.Second) } \u8fd0\u884c\u6548\u679c\uff1a","title":"34. \u4f7f\u7528\u4e86\u503c\u4e3a nil \u7684 channel"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#34-receiver","text":"\u65b9\u6cd5 receiver \u7684\u53c2\u6570\u4e0e\u4e00\u822c\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u4f3c\uff1a\u5982\u679c\u58f0\u660e\u4e3a\u503c\uff0c\u90a3\u65b9\u6cd5\u4f53\u5f97\u5230\u7684\u662f\u4e00\u4efd\u53c2\u6570\u7684\u503c\u62f7\u8d1d\uff0c\u6b64\u65f6\u5bf9\u53c2\u6570\u7684\u4efb\u4f55\u4fee\u6539\u90fd\u4e0d\u4f1a\u5bf9\u539f\u6709\u503c\u4ea7\u751f\u5f71\u54cd\u3002 \u9664\u975e receiver \u53c2\u6570\u662f map \u6216 slice \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u5e76\u4e14\u662f\u4ee5\u6307\u9488\u65b9\u5f0f\u66f4\u65b0 map \u4e2d\u7684\u5b57\u6bb5\u3001slice \u4e2d\u7684\u5143\u7d20\u7684\uff0c\u624d\u4f1a\u66f4\u65b0\u539f\u6709\u503c: type data struct { num int key *string items map[string]bool } func (this *data) pointerFunc() { this.num = 7 } func (this data) valueFunc() { this.num = 8 *this.key = \"valueFunc.key\" this.items[\"valueFunc\"] = true } func main() { key := \"key1\" d := data{1, &key, make(map[string]bool)} fmt.Printf(\"num=%v key=%v items=%v\\n\", d.num, *d.key, d.items) d.pointerFunc() // \u4fee\u6539 num \u7684\u503c\u4e3a 7 fmt.Printf(\"num=%v key=%v items=%v\\n\", d.num, *d.key, d.items) d.valueFunc() // \u4fee\u6539 key \u548c items \u7684\u503c fmt.Printf(\"num=%v key=%v items=%v\\n\", d.num, *d.key, d.items) } \u8fd0\u884c\u7ed3\u679c\uff1a","title":"34. \u82e5\u51fd\u6570 receiver \u4f20\u53c2\u662f\u4f20\u503c\u65b9\u5f0f\uff0c\u5219\u65e0\u6cd5\u4fee\u6539\u53c2\u6570\u7684\u539f\u6709\u503c"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#35-50","text":"","title":"\u4e2d\u7ea7\u7bc7\uff1a35-50"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#35-http","text":"\u4f7f\u7528 HTTP \u6807\u51c6\u5e93\u53d1\u8d77\u8bf7\u6c42\u3001\u83b7\u53d6\u54cd\u5e94\u65f6\uff0c\u5373\u4f7f\u4f60\u4e0d\u4ece\u54cd\u5e94\u4e2d\u8bfb\u53d6\u4efb\u4f55\u6570\u636e\u6216\u54cd\u5e94\u4e3a\u7a7a\uff0c\u90fd\u9700\u8981\u624b\u52a8\u5173\u95ed\u54cd\u5e94\u4f53\u3002\u65b0\u624b\u5f88\u5bb9\u6613\u5fd8\u8bb0\u624b\u52a8\u5173\u95ed\uff0c\u6216\u8005\u5199\u5728\u4e86\u9519\u8bef\u7684\u4f4d\u7f6e\uff1a // \u8bf7\u6c42\u5931\u8d25\u9020\u6210 panic func main() { resp, err := http.Get(\"https://api.ipify.org?format=json\") defer resp.Body.Close() // resp \u53ef\u80fd\u4e3a nil\uff0c\u4e0d\u80fd\u8bfb\u53d6 Body if err != nil { fmt.Println(err) return } body, err := ioutil.ReadAll(resp.Body) checkError(err) fmt.Println(string(body)) } func checkError(err error) { if err != nil{ log.Fatalln(err) } } \u4e0a\u8fb9\u7684\u4ee3\u7801\u80fd\u6b63\u786e\u53d1\u8d77\u8bf7\u6c42\uff0c\u4f46\u662f\u4e00\u65e6\u8bf7\u6c42\u5931\u8d25\uff0c\u53d8\u91cf resp \u503c\u4e3a nil \uff0c\u9020\u6210 panic\uff1a panic: runtime error: invalid memory address or nil pointer dereference \u5e94\u8be5\u5148\u68c0\u67e5HTTP \u54cd\u5e94\u9519\u8bef\u4e3a nil \uff0c\u518d\u8c03\u7528 resp.Body.Close() \u6765\u5173\u95ed\u54cd\u5e94\u4f53\uff1a // \u5927\u591a\u6570\u60c5\u51b5\u6b63\u786e\u7684\u793a\u4f8b func main() { resp, err := http.Get(\"https://api.ipify.org?format=json\") checkError(err) defer resp.Body.Close() // \u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u7684\u6b63\u786e\u5173\u95ed\u65b9\u5f0f body, err := ioutil.ReadAll(resp.Body) checkError(err) fmt.Println(string(body)) } \u8f93\u51fa\uff1a Get https://api.ipify.org?format=... : x509: certificate signed by unknown authority \u7edd\u5927\u591a\u6570\u8bf7\u6c42\u5931\u8d25\u7684\u60c5\u51b5\u4e0b\uff0c resp \u7684\u503c\u4e3a nil \u4e14 err \u4e3a non-nil \u3002\u4f46\u5982\u679c\u4f60\u5f97\u5230\u7684\u662f\u91cd\u5b9a\u5411\u9519\u8bef\uff0c\u90a3\u5b83\u4fe9\u7684\u503c\u90fd\u662f non-nil \uff0c\u6700\u540e\u4f9d\u65e7\u53ef\u80fd\u53d1\u751f\u5185\u5b58\u6cc4\u9732\u30022 \u4e2a\u89e3\u51b3\u529e\u6cd5\uff1a \u53ef\u4ee5\u76f4\u63a5\u5728\u5904\u7406 HTTP \u54cd\u5e94\u9519\u8bef\u7684\u4ee3\u7801\u5757\u4e2d\uff0c\u76f4\u63a5\u5173\u95ed\u975e nil \u7684\u54cd\u5e94\u4f53\u3002 \u624b\u52a8\u8c03\u7528 defer \u6765\u5173\u95ed\u54cd\u5e94\u4f53\uff1a // \u6b63\u786e\u793a\u4f8b func main() { resp, err := http.Get(\"http://www.baidu.com\") // \u5173\u95ed resp.Body \u7684\u6b63\u786e\u59ff\u52bf if resp != nil { defer resp.Body.Close() } checkError(err) defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) checkError(err) fmt.Println(string(body)) } resp.Body.Close() \u65e9\u5148\u7248\u672c\u7684\u5b9e\u73b0\u662f\u8bfb\u53d6\u54cd\u5e94\u4f53\u7684\u6570\u636e\u4e4b\u540e\u4e22\u5f03\uff0c\u4fdd\u8bc1\u4e86 keep-alive \u7684 HTTP \u8fde\u63a5\u80fd\u91cd\u7528\u5904\u7406\u4e0d\u6b62\u4e00\u4e2a\u8bf7\u6c42\u3002\u4f46 Go \u7684\u6700\u65b0\u7248\u672c\u5c06\u8bfb\u53d6\u5e76\u4e22\u5f03\u6570\u636e\u7684\u4efb\u52a1\u4ea4\u7ed9\u4e86\u7528\u6237\uff0c\u5982\u679c\u4f60\u4e0d\u5904\u7406\uff0cHTTP \u8fde\u63a5\u53ef\u80fd\u4f1a\u76f4\u63a5\u5173\u95ed\u800c\u975e\u91cd\u7528\uff0c\u53c2\u8003\u5728 Go 1.5 \u7248\u672c\u6587\u6863\u3002 \u5982\u679c\u7a0b\u5e8f\u5927\u91cf\u91cd\u7528 HTTP \u957f\u8fde\u63a5\uff0c\u4f60\u53ef\u80fd\u8981\u5728\u5904\u7406\u54cd\u5e94\u7684\u903b\u8f91\u4ee3\u7801\u4e2d\u52a0\u5165\uff1a _, err = io.Copy(ioutil.Discard, resp.Body) // \u624b\u52a8\u4e22\u5f03\u8bfb\u53d6\u5b8c\u6bd5\u7684\u6570\u636e \u5982\u679c\u4f60\u9700\u8981\u5b8c\u6574\u8bfb\u53d6\u54cd\u5e94\uff0c\u4e0a\u8fb9\u7684\u4ee3\u7801\u662f\u9700\u8981\u5199\u7684\u3002\u6bd4\u5982\u5728\u89e3\u7801 API \u7684 JSON \u54cd\u5e94\u6570\u636e\uff1a json.NewDecoder(resp.Body).Decode(&data)","title":"35. \u5173\u95ed HTTP \u7684\u54cd\u5e94\u4f53"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#36-http","text":"\u4e00\u4e9b\u652f\u6301 HTTP1.1 \u6216 HTTP1.0 \u914d\u7f6e\u4e86 connection: keep-alive \u9009\u9879\u7684\u670d\u52a1\u5668\u4f1a\u4fdd\u6301\u4e00\u6bb5\u65f6\u95f4\u7684\u957f\u8fde\u63a5\u3002\u4f46\u6807\u51c6\u5e93 \"net/http\" \u7684\u8fde\u63a5\u9ed8\u8ba4\u53ea\u5728\u670d\u52a1\u5668\u4e3b\u52a8\u8981\u6c42\u5173\u95ed\u65f6\u624d\u65ad\u5f00\uff0c\u6240\u4ee5\u4f60\u7684\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u6d88\u8017\u5b8c socket \u63cf\u8ff0\u7b26\u3002\u89e3\u51b3\u529e\u6cd5\u6709 2 \u4e2a\uff0c\u8bf7\u6c42\u7ed3\u675f\u540e\uff1a \u76f4\u63a5\u8bbe\u7f6e\u8bf7\u6c42\u53d8\u91cf\u7684 Close \u5b57\u6bb5\u503c\u4e3a true \uff0c\u6bcf\u6b21\u8bf7\u6c42\u7ed3\u675f\u540e\u5c31\u4f1a\u4e3b\u52a8\u5173\u95ed\u8fde\u63a5\u3002 \u8bbe\u7f6e Header \u8bf7\u6c42\u5934\u90e8\u9009\u9879 Connection: close \uff0c\u7136\u540e\u670d\u52a1\u5668\u8fd4\u56de\u7684\u54cd\u5e94\u5934\u90e8\u4e5f\u4f1a\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u6b64\u65f6 HTTP \u6807\u51c6\u5e93\u4f1a\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5\u3002 // \u4e3b\u52a8\u5173\u95ed\u8fde\u63a5 func main() { req, err := http.NewRequest(\"GET\", \"http://golang.org\", nil) checkError(err) req.Close = true //req.Header.Add(\"Connection\", \"close\") // \u7b49\u6548\u7684\u5173\u95ed\u65b9\u5f0f resp, err := http.DefaultClient.Do(req) if resp != nil { defer resp.Body.Close() } checkError(err) body, err := ioutil.ReadAll(resp.Body) checkError(err) fmt.Println(string(body)) } \u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u914d\u7f6e\u7684 HTTP transport \u5ba2\u6237\u7aef\uff0c\u7528\u6765\u53d6\u6d88 HTTP \u5168\u5c40\u7684\u590d\u7528\u8fde\u63a5\uff1a func main() { tr := http.Transport{DisableKeepAlives: true} client := http.Client{Transport: &tr} resp, err := client.Get(\"https://golang.google.cn/\") if resp != nil { defer resp.Body.Close() } checkError(err) fmt.Println(resp.StatusCode) // 200 body, err := ioutil.ReadAll(resp.Body) checkError(err) fmt.Println(len(string(body))) } \u6839\u636e\u9700\u6c42\u9009\u62e9\u4f7f\u7528\u573a\u666f\uff1a \u82e5\u4f60\u7684\u7a0b\u5e8f\u8981\u5411\u540c\u4e00\u670d\u52a1\u5668\u53d1\u5927\u91cf\u8bf7\u6c42\uff0c\u4f7f\u7528\u9ed8\u8ba4\u7684\u4fdd\u6301\u957f\u8fde\u63a5\u3002 \u82e5\u4f60\u7684\u7a0b\u5e8f\u8981\u8fde\u63a5\u5927\u91cf\u7684\u670d\u52a1\u5668\uff0c\u4e14\u6bcf\u53f0\u670d\u52a1\u5668\u53ea\u8bf7\u6c42\u4e00\u4e24\u6b21\uff0c\u90a3\u6536\u5230\u8bf7\u6c42\u540e\u76f4\u63a5\u5173\u95ed\u8fde\u63a5\u3002\u6216\u589e\u52a0\u6700\u5927\u6587\u4ef6\u6253\u5f00\u6570 fs.file-max \u7684\u503c\u3002","title":"36. \u5173\u95ed HTTP \u8fde\u63a5"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#37-json-interface","text":"\u5728 encode/decode JSON \u6570\u636e\u65f6\uff0cGo \u9ed8\u8ba4\u4f1a\u5c06\u6570\u503c\u5f53\u505a float64 \u5904\u7406\uff0c\u6bd4\u5982\u4e0b\u8fb9\u7684\u4ee3\u7801\u4f1a\u9020\u6210 panic\uff1a func main() { var data = []byte(`{\"status\": 200}`) var result map[string]interface{} if err := json.Unmarshal(data, &result); err != nil { log.Fatalln(err) } fmt.Printf(\"%T\\n\", result[\"status\"]) // float64 var status = result[\"status\"].(int) // \u7c7b\u578b\u65ad\u8a00\u9519\u8bef fmt.Println(\"Status value: \", status) } panic: interface conversion: interface {} is float64, not int \u5982\u679c\u4f60\u5c1d\u8bd5 decode \u7684 JSON \u5b57\u6bb5\u662f\u6574\u578b\uff0c\u4f60\u53ef\u4ee5\uff1a \u5c06 int \u503c\u8f6c\u4e3a float \u7edf\u4e00\u4f7f\u7528 \u5c06 decode \u540e\u9700\u8981\u7684 float \u503c\u8f6c\u4e3a int \u4f7f\u7528 // \u5c06 decode \u7684\u503c\u8f6c\u4e3a int \u4f7f\u7528 func main() { var data = []byte(`{\"status\": 200}`) var result map[string]interface{} if err := json.Unmarshal(data, &result); err != nil { log.Fatalln(err) } var status = uint64(result[\"status\"].(float64)) fmt.Println(\"Status value: \", status) } \u4f7f\u7528 Decoder \u7c7b\u578b\u6765 decode JSON \u6570\u636e\uff0c\u660e\u786e\u8868\u793a\u5b57\u6bb5\u7684\u503c\u7c7b\u578b // \u6307\u5b9a\u5b57\u6bb5\u7c7b\u578b func main() { var data = []byte(`{\"status\": 200}`) var result map[string]interface{} var decoder = json.NewDecoder(bytes.NewReader(data)) decoder.UseNumber() if err := decoder.Decode(&result); err != nil { log.Fatalln(err) } var status, _ = result[\"status\"].(json.Number).Int64() fmt.Println(\"Status value: \", status) } // \u4f60\u53ef\u4ee5\u4f7f\u7528 string \u6765\u5b58\u50a8\u6570\u503c\u6570\u636e\uff0c\u5728 decode \u65f6\u518d\u51b3\u5b9a\u6309 int \u8fd8\u662f float \u4f7f\u7528 // \u5c06\u6570\u636e\u8f6c\u4e3a decode \u4e3a string func main() { var data = []byte({\"status\": 200}) var result map[string]interface{} var decoder = json.NewDecoder(bytes.NewReader(data)) decoder.UseNumber() if err := decoder.Decode(&result); err != nil { log.Fatalln(err) } var status uint64 err := json.Unmarshal([]byte(result[\"status\"].(json.Number).String()), &status); checkError(err) fmt.Println(\"Status value: \", status) } - \u4f7f\u7528 struct \u7c7b\u578b\u5c06\u4f60\u9700\u8981\u7684\u6570\u636e\u6620\u5c04\u4e3a\u6570\u503c\u578b // struct \u4e2d\u6307\u5b9a\u5b57\u6bb5\u7c7b\u578b func main() { var data = []byte(`{\"status\": 200}`) var result struct { Status uint64 `json:\"status\"` } err := json.NewDecoder(bytes.NewReader(data)).Decode(&result) checkError(err) fmt.Printf(\"Result: %+v\", result) } \u53ef\u4ee5\u4f7f\u7528 struct \u5c06\u6570\u503c\u7c7b\u578b\u6620\u5c04\u4e3a json.RawMessage \u539f\u751f\u6570\u636e\u7c7b\u578b \u9002\u7528\u4e8e\u5982\u679c JSON \u6570\u636e\u4e0d\u7740\u6025 decode \u6216 JSON \u67d0\u4e2a\u5b57\u6bb5\u7684\u503c\u7c7b\u578b\u4e0d\u56fa\u5b9a\u7b49\u60c5\u51b5\uff1a // \u72b6\u6001\u540d\u79f0\u53ef\u80fd\u662f int \u4e5f\u53ef\u80fd\u662f string\uff0c\u6307\u5b9a\u4e3a json.RawMessage \u7c7b\u578b func main() { records := [][]byte{ []byte(`{\"status\":200, \"tag\":\"one\"}`), []byte(`{\"status\":\"ok\", \"tag\":\"two\"}`), } for idx, record := range records { var result struct { StatusCode uint64 StatusName string Status json.RawMessage `json:\"status\"` Tag string `json:\"tag\"` } err := json.NewDecoder(bytes.NewReader(record)).Decode(&result) checkError(err) var name string err = json.Unmarshal(result.Status, &name) if err == nil { result.StatusName = name } var code uint64 err = json.Unmarshal(result.Status, &code) if err == nil { result.StatusCode = code } fmt.Printf(\"[%v] result => %+v\\n\", idx, result) } }","title":"37. \u5c06 JSON \u4e2d\u7684\u6570\u5b57\u89e3\u7801\u4e3a interface \u7c7b\u578b"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#38-structarrayslice-map","text":"\u53ef\u4ee5\u4f7f\u7528\u76f8\u7b49\u8fd0\u7b97\u7b26 == \u6765\u6bd4\u8f83\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u524d\u63d0\u662f\u4e24\u4e2a\u7ed3\u6784\u4f53\u7684\u6210\u5458\u90fd\u662f\u53ef\u6bd4\u8f83\u7684\u7c7b\u578b\uff1a type data struct { num int fp float32 complex complex64 str string char rune yes bool events <-chan string handler interface{} ref *byte raw [10]byte } func main() { v1 := data{} v2 := data{} fmt.Println(\"v1 == v2: \", v1 == v2) // true } \u5982\u679c\u4e24\u4e2a\u7ed3\u6784\u4f53\u4e2d\u6709\u4efb\u610f\u6210\u5458\u662f\u4e0d\u53ef\u6bd4\u8f83\u7684\uff0c\u5c06\u4f1a\u9020\u6210\u7f16\u8bd1\u9519\u8bef\u3002\u6ce8\u610f\u6570\u7ec4\u6210\u5458\u53ea\u6709\u5728\u6570\u7ec4\u5143\u7d20\u53ef\u6bd4\u8f83\u65f6\u5019\u624d\u53ef\u6bd4\u8f83\u3002 type data struct { num int checks [10]func() bool // \u65e0\u6cd5\u6bd4\u8f83 doIt func() bool // \u65e0\u6cd5\u6bd4\u8f83 m map[string]string // \u65e0\u6cd5\u6bd4\u8f83 bytes []byte // \u65e0\u6cd5\u6bd4\u8f83 } func main() { v1 := data{} v2 := data{} fmt.Println(\"v1 == v2: \", v1 == v2) } invalid operation: v1 == v2 (struct containing [10]func() bool cannot be compared) Go \u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e93\u51fd\u6570\u6765\u6bd4\u8f83\u90a3\u4e9b\u65e0\u6cd5\u4f7f\u7528 == \u6bd4\u8f83\u7684\u53d8\u91cf\uff0c\u6bd4\u5982\u4f7f\u7528 \"reflect\" \u5305\u7684 DeepEqual() \uff1a // \u6bd4\u8f83\u76f8\u7b49\u8fd0\u7b97\u7b26\u65e0\u6cd5\u6bd4\u8f83\u7684\u5143\u7d20 func main() { v1 := data{} v2 := data{} fmt.Println(\"v1 == v2: \", reflect.DeepEqual(v1, v2)) // true m1 := map[string]string{\"one\": \"a\", \"two\": \"b\"} m2 := map[string]string{\"two\": \"b\", \"one\": \"a\"} fmt.Println(\"v1 == v2: \", reflect.DeepEqual(m1, m2)) // true s1 := []int{1, 2, 3} s2 := []int{1, 2, 3} // \u6ce8\u610f\u4e24\u4e2a slice \u76f8\u7b49\uff0c\u503c\u548c\u987a\u5e8f\u5fc5\u987b\u4e00\u81f4 fmt.Println(\"v1 == v2: \", reflect.DeepEqual(s1, s2)) // true } \u8fd9\u79cd\u6bd4\u8f83\u65b9\u5f0f\u53ef\u80fd\u6bd4\u8f83\u6162\uff0c\u6839\u636e\u4f60\u7684\u7a0b\u5e8f\u9700\u6c42\u6765\u4f7f\u7528\u3002 DeepEqual() \u8fd8\u6709\u5176\u4ed6\u7528\u6cd5\uff1a func main() { var b1 []byte = nil b2 := []byte{} fmt.Println(\"b1 == b2: \", reflect.DeepEqual(b1, b2)) // false } \u6ce8\u610f\uff1a DeepEqual() \u5e76\u4e0d\u603b\u9002\u5408\u4e8e\u6bd4\u8f83 slice func main() { var str = \"one\" var in interface{} = \"one\" fmt.Println(\"str == in: \", reflect.DeepEqual(str, in)) // true v1 := []string{\"one\", \"two\"} v2 := []string{\"two\", \"one\"} fmt.Println(\"v1 == v2: \", reflect.DeepEqual(v1, v2)) // false data := map[string]interface{}{ \"code\": 200, \"value\": []string{\"one\", \"two\"}, } encoded, _ := json.Marshal(data) var decoded map[string]interface{} json.Unmarshal(encoded, &decoded) fmt.Println(\"data == decoded: \", reflect.DeepEqual(data, decoded)) // false } \u5982\u679c\u8981\u5927\u5c0f\u5199\u4e0d\u654f\u611f\u6765\u6bd4\u8f83 byte \u6216 string \u4e2d\u7684\u82f1\u6587\u6587\u672c\uff0c\u53ef\u4ee5\u4f7f\u7528 \"bytes\" \u6216 \"strings\" \u5305\u7684 ToUpper() \u548c ToLower() \u51fd\u6570\u3002\u6bd4\u8f83\u5176\u4ed6\u8bed\u8a00\u7684 byte \u6216 string\uff0c\u5e94\u4f7f\u7528 bytes.EqualFold() \u548c strings.EqualFold() \u5982\u679c byte slice \u4e2d\u542b\u6709\u9a8c\u8bc1\u7528\u6237\u8eab\u4efd\u7684\u6570\u636e\uff08\u5bc6\u6587\u54c8\u5e0c\u3001token \u7b49\uff09\uff0c\u4e0d\u5e94\u518d\u4f7f\u7528 reflect.DeepEqual() \u3001 bytes.Equal() \u3001 bytes.Compare() \u3002\u8fd9\u4e09\u4e2a\u51fd\u6570\u5bb9\u6613\u5bf9\u7a0b\u5e8f\u9020\u6210 timing attacks \uff0c\u6b64\u65f6\u5e94\u4f7f\u7528 \"crypto/subtle\" \u5305\u4e2d\u7684 subtle.ConstantTimeCompare() \u7b49\u51fd\u6570 reflect.DeepEqual() \u8ba4\u4e3a\u7a7a slice \u4e0e nil slice \u5e76\u4e0d\u76f8\u7b49\uff0c\u4f46\u6ce8\u610f byte.Equal() \u4f1a\u8ba4\u4e3a\u4e8c\u8005\u76f8\u7b49\uff1a func main() { var b1 []byte = nil b2 := []byte{} // b1 \u4e0e b2 \u957f\u5ea6\u76f8\u7b49\u3001\u6709\u76f8\u540c\u7684\u5b57\u8282\u5e8f // nil \u4e0e slice \u5728\u5b57\u8282\u4e0a\u662f\u76f8\u540c\u7684 fmt.Println(\"b1 == b2: \", bytes.Equal(b1, b2)) // true }","title":"38. struct\u3001array\u3001slice \u548c map \u7684\u503c\u6bd4\u8f83"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#39-panic","text":"\u5728\u4e00\u4e2a defer \u5ef6\u8fdf\u6267\u884c\u7684\u51fd\u6570\u4e2d\u8c03\u7528 recover() \uff0c\u5b83\u4fbf\u80fd\u6355\u6349 / \u4e2d\u65ad panic // \u9519\u8bef\u7684 recover \u8c03\u7528\u793a\u4f8b func main() { recover() // \u4ec0\u4e48\u90fd\u4e0d\u4f1a\u6355\u6349 panic(\"not good\") // \u53d1\u751f panic\uff0c\u4e3b\u7a0b\u5e8f\u9000\u51fa recover() // \u4e0d\u4f1a\u88ab\u6267\u884c println(\"ok\") } // \u6b63\u786e\u7684 recover \u8c03\u7528\u793a\u4f8b func main() { defer func() { fmt.Println(\"recovered: \", recover()) }() panic(\"not good\") } \u4ece\u4e0a\u8fb9\u53ef\u4ee5\u770b\u51fa\uff0c recover() \u4ec5\u5728 defer \u6267\u884c\u7684\u51fd\u6570\u4e2d\u8c03\u7528\u624d\u4f1a\u751f\u6548\u3002 // \u9519\u8bef\u7684\u8c03\u7528\u793a\u4f8b func main() { defer func() { doRecover() }() panic(\"not good\") } func doRecover() { fmt.Println(\"recobered: \", recover()) } recobered: panic: not good","title":"39. \u4ece panic \u4e2d\u6062\u590d"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#40-range-slicearraymap","text":"\u5728 range \u8fed\u4ee3\u4e2d\uff0c\u5f97\u5230\u7684\u503c\u5176\u5b9e\u662f\u5143\u7d20\u7684\u4e00\u4efd\u503c\u62f7\u8d1d\uff0c\u66f4\u65b0\u62f7\u8d1d\u5e76\u4e0d\u4f1a\u66f4\u6539\u539f\u6765\u7684\u5143\u7d20\uff0c\u5373\u662f\u62f7\u8d1d\u7684\u5730\u5740\u5e76\u4e0d\u662f\u539f\u6709\u5143\u7d20\u7684\u5730\u5740\uff1a func main() { data := []int{1, 2, 3} for _, v := range data { v *= 10 // data \u4e2d\u539f\u6709\u5143\u7d20\u662f\u4e0d\u4f1a\u88ab\u4fee\u6539\u7684 } fmt.Println(\"data: \", data) // data: [1 2 3] } \u5982\u679c\u8981\u4fee\u6539\u539f\u6709\u5143\u7d20\u7684\u503c\uff0c\u5e94\u8be5\u4f7f\u7528\u7d22\u5f15\u76f4\u63a5\u8bbf\u95ee\uff1a func main() { data := []int{1, 2, 3} for i, v := range data { data[i] = v * 10 } fmt.Println(\"data: \", data) // data: [10 20 30] } \u5982\u679c\u4f60\u7684\u96c6\u5408\u4fdd\u5b58\u7684\u662f\u6307\u5411\u503c\u7684\u6307\u9488\uff0c\u9700\u7a0d\u4f5c\u4fee\u6539\u3002\u4f9d\u65e7\u9700\u8981\u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u5143\u7d20\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u4f7f\u7528 range \u51fa\u6765\u7684\u5143\u7d20\u76f4\u63a5\u66f4\u65b0\u539f\u6709\u503c\uff1a func main() { data := []*struct{ num int }{{1}, {2}, {3},} for _, v := range data { v.num *= 10 // \u76f4\u63a5\u4f7f\u7528\u6307\u9488\u66f4\u65b0 } fmt.Println(data[0], data[1], data[2]) // &{10} &{20} &{30} }","title":"40. \u5728 range \u8fed\u4ee3 slice\u3001array\u3001map \u65f6\u901a\u8fc7\u66f4\u65b0\u5f15\u7528\u6765\u66f4\u65b0\u5143\u7d20"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#41-slice","text":"\u4ece slice \u4e2d\u91cd\u65b0\u5207\u51fa\u65b0 slice \u65f6\uff0c\u65b0 slice \u4f1a\u5f15\u7528\u539f slice \u7684\u5e95\u5c42\u6570\u7ec4\u3002\u5982\u679c\u8df3\u4e86\u8fd9\u4e2a\u5751\uff0c\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u5206\u914d\u5927\u91cf\u7684\u4e34\u65f6 slice \u6765\u6307\u5411\u539f\u5e95\u5c42\u6570\u7ec4\u7684\u90e8\u5206\u6570\u636e\uff0c\u5c06\u5bfc\u81f4\u96be\u4ee5\u9884\u6599\u7684\u5185\u5b58\u4f7f\u7528\u3002 func get() []byte { raw := make([]byte, 10000) fmt.Println(len(raw), cap(raw), &raw[0]) // 10000 10000 0xc420080000 return raw[:3] // \u91cd\u65b0\u5206\u914d\u5bb9\u91cf\u4e3a 10000 \u7684 slice } func main() { data := get() fmt.Println(len(data), cap(data), &data[0]) // 3 10000 0xc420080000 } \u53ef\u4ee5\u901a\u8fc7\u62f7\u8d1d\u4e34\u65f6 slice \u7684\u6570\u636e\uff0c\u800c\u4e0d\u662f\u91cd\u65b0\u5207\u7247\u6765\u89e3\u51b3\uff1a func get() (res []byte) { raw := make([]byte, 10000) fmt.Println(len(raw), cap(raw), &raw[0]) // 10000 10000 0xc420080000 res = make([]byte, 3) copy(res, raw[:3]) return } func main() { data := get() fmt.Println(len(data), cap(data), &data[0]) // 3 3 0xc4200160b8 }","title":"41. slice \u4e2d\u9690\u85cf\u7684\u6570\u636e"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#42-slice","text":"\u4e3e\u4e2a\u7b80\u5355\u4f8b\u5b50\uff0c\u91cd\u5199\u6587\u4ef6\u8def\u5f84\uff08\u5b58\u50a8\u5728 slice \u4e2d\uff09 \u5206\u5272\u8def\u5f84\u6765\u6307\u5411\u6bcf\u4e2a\u4e0d\u540c\u7ea7\u7684\u76ee\u5f55\uff0c\u4fee\u6539\u7b2c\u4e00\u4e2a\u76ee\u5f55\u540d\u518d\u91cd\u7ec4\u5b50\u76ee\u5f55\u540d\uff0c\u521b\u5efa\u65b0\u8def\u5f84\uff1a // \u9519\u8bef\u4f7f\u7528 slice \u7684\u62fc\u63a5\u793a\u4f8b func main() { path := []byte(\"AAAA/BBBBBBBBB\") sepIndex := bytes.IndexByte(path, '/') // 4 println(sepIndex) dir1 := path[:sepIndex] dir2 := path[sepIndex+1:] println(\"dir1: \", string(dir1)) // AAAA println(\"dir2: \", string(dir2)) // BBBBBBBBB dir1 = append(dir1, \"suffix\"...) println(\"current path: \", string(path)) // AAAAsuffixBBBB path = bytes.Join([][]byte{dir1, dir2}, []byte{'/'}) println(\"dir1: \", string(dir1)) // AAAAsuffix println(\"dir2: \", string(dir2)) // uffixBBBB println(\"new path: \", string(path)) // AAAAsuffix/uffixBBBB // \u9519\u8bef\u7ed3\u679c } \u62fc\u63a5\u7684\u7ed3\u679c\u4e0d\u662f\u6b63\u786e\u7684 AAAAsuffix/BBBBBBBBB \uff0c\u56e0\u4e3a dir1\u3001 dir2 \u4e24\u4e2a slice \u5f15\u7528\u7684\u6570\u636e\u90fd\u662f path \u7684\u5e95\u5c42\u6570\u7ec4\uff0c\u7b2c 13 \u884c\u4fee\u6539 dir1 \u540c\u65f6\u4e5f\u4fee\u6539\u4e86 path \uff0c\u4e5f\u5bfc\u81f4\u4e86 dir2 \u7684\u4fee\u6539 \u89e3\u51b3\u65b9\u6cd5\uff1a \u91cd\u65b0\u5206\u914d\u65b0\u7684 slice \u5e76\u62f7\u8d1d\u4f60\u9700\u8981\u7684\u6570\u636e \u4f7f\u7528\u5b8c\u6574\u7684 slice \u8868\u8fbe\u5f0f\uff1a input[low:high:max] \uff0c\u5bb9\u91cf\u4fbf\u8c03\u6574\u4e3a max - low // \u4f7f\u7528 full slice expression func main() { path := []byte(\"AAAA/BBBBBBBBB\") sepIndex := bytes.IndexByte(path, '/') // 4 dir1 := path[:sepIndex:sepIndex] // \u6b64\u65f6 cap(dir1) \u6307\u5b9a\u4e3a4\uff0c \u800c\u4e0d\u662f\u5148\u524d\u7684 16 dir2 := path[sepIndex+1:] dir1 = append(dir1, \"suffix\"...) path = bytes.Join([][]byte{dir1, dir2}, []byte{'/'}) println(\"dir1: \", string(dir1)) // AAAAsuffix println(\"dir2: \", string(dir2)) // BBBBBBBBB println(\"new path: \", string(path)) // AAAAsuffix/BBBBBBBBB } \u7b2c 6 \u884c\u4e2d\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u7528\u6765\u63a7\u5236 dir1 \u7684\u65b0\u5bb9\u91cf\uff0c\u518d\u5f80 dir1 \u4e2d append \u8d85\u989d\u5143\u7d20\u65f6\uff0c\u5c06\u5206\u914d\u65b0\u7684 buffer \u6765\u4fdd\u5b58\u3002\u800c\u4e0d\u662f\u8986\u76d6\u539f\u6765\u7684 path \u5e95\u5c42\u6570\u7ec4","title":"42. Slice \u4e2d\u6570\u636e\u7684\u8bef\u7528"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#43-slice","text":"\u5f53\u4f60\u4ece\u4e00\u4e2a\u5df2\u5b58\u5728\u7684 slice \u521b\u5efa\u65b0 slice \u65f6\uff0c\u4e8c\u8005\u7684\u6570\u636e\u6307\u5411\u76f8\u540c\u7684\u5e95\u5c42\u6570\u7ec4\u3002\u5982\u679c\u4f60\u7684\u7a0b\u5e8f\u4f7f\u7528\u8fd9\u4e2a\u7279\u6027\uff0c\u90a3\u9700\u8981\u6ce8\u610f \"\u65e7\"\uff08stale\uff09 slice \u95ee\u9898\u3002 \u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5411\u4e00\u4e2a slice \u4e2d\u8ffd\u52a0\u5143\u7d20\u800c\u5b83\u6307\u5411\u7684\u5e95\u5c42\u6570\u7ec4\u5bb9\u91cf\u4e0d\u8db3\u65f6\uff0c\u5c06\u4f1a\u91cd\u65b0\u5206\u914d\u4e00\u4e2a\u65b0\u6570\u7ec4\u6765\u5b58\u50a8\u6570\u636e\u3002\u800c\u5176\u4ed6 slice \u8fd8\u6307\u5411\u539f\u6765\u7684\u65e7\u5e95\u5c42\u6570\u7ec4\u3002 // \u8d85\u8fc7\u5bb9\u91cf\u5c06\u91cd\u65b0\u5206\u914d\u6570\u7ec4\u6765\u62f7\u8d1d\u503c\u3001\u91cd\u65b0\u5b58\u50a8 func main() { s1 := []int{1, 2, 3} fmt.Println(len(s1), cap(s1), s1) // 3 3 [1 2 3 ] s2 := s1[1:] fmt.Println(len(s2), cap(s2), s2) // 2 2 [2 3] for i := range s2 { s2[i] += 20 } // \u6b64\u65f6\u7684 s1 \u4e0e s2 \u662f\u6307\u5411\u540c\u4e00\u4e2a\u5e95\u5c42\u6570\u7ec4\u7684 fmt.Println(s1) // [1 22 23] fmt.Println(s2) // [22 23] s2 = append(s2, 4) // \u5411\u5bb9\u91cf\u4e3a 2 \u7684 s2 \u4e2d\u518d\u8ffd\u52a0\u5143\u7d20\uff0c\u6b64\u65f6\u5c06\u5206\u914d\u65b0\u6570\u7ec4\u6765\u5b58 for i := range s2 { s2[i] += 10 } fmt.Println(s1) // [1 22 23] // \u6b64\u65f6\u7684 s1 \u4e0d\u518d\u66f4\u65b0\uff0c\u4e3a\u65e7\u6570\u636e fmt.Println(s2) // [32 33 14] }","title":"43. \u65e7 slice"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#44","text":"\u4ece\u4e00\u4e2a\u73b0\u6709\u7684\u975e interface \u7c7b\u578b\u521b\u5efa\u65b0\u7c7b\u578b\u65f6\uff0c\u5e76\u4e0d\u4f1a\u7ee7\u627f\u539f\u6709\u7684\u65b9\u6cd5\uff1a // \u5b9a\u4e49 Mutex \u7684\u81ea\u5b9a\u4e49\u7c7b\u578b type myMutex sync.Mutex func main() { var mtx myMutex mtx.Lock() mtx.UnLock() } mtx.Lock undefined (type myMutex has no field or method Lock)... \u5982\u679c\u4f60\u9700\u8981\u4f7f\u7528\u539f\u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u53ef\u5c06\u539f\u7c7b\u578b\u4ee5\u533f\u540d\u5b57\u6bb5\u7684\u5f62\u5f0f\u5d4c\u5230\u4f60\u5b9a\u4e49\u7684\u65b0 struct \u4e2d\uff1a // \u7c7b\u578b\u4ee5\u5b57\u6bb5\u5f62\u5f0f\u76f4\u63a5\u5d4c\u5165 type myLocker struct { sync.Mutex } func main() { var locker myLocker locker.Lock() locker.Unlock() } interface \u7c7b\u578b\u58f0\u660e\u4e5f\u4fdd\u7559\u5b83\u7684\u65b9\u6cd5\u96c6\uff1a type myLocker sync.Locker func main() { var locker myLocker locker.Lock() locker.Unlock() }","title":"44. \u7c7b\u578b\u58f0\u660e\u4e0e\u65b9\u6cd5"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#45-for-switch-for-select","text":"\u6ca1\u6709\u6307\u5b9a\u6807\u7b7e\u7684 break \u53ea\u4f1a\u8df3\u51fa switch/select \u8bed\u53e5\uff0c\u82e5\u4e0d\u80fd\u4f7f\u7528 return \u8bed\u53e5\u8df3\u51fa\u7684\u8bdd\uff0c\u53ef\u4e3a break \u8df3\u51fa\u6807\u7b7e\u6307\u5b9a\u7684\u4ee3\u7801\u5757\uff1a // break \u914d\u5408 label \u8df3\u51fa\u6307\u5b9a\u4ee3\u7801\u5757 func main() { loop: for { switch { case true: fmt.Println(\"breaking out...\") //break // \u6b7b\u5faa\u73af\uff0c\u4e00\u76f4\u6253\u5370 breaking out... break loop } } fmt.Println(\"out...\") } goto \u867d\u7136\u4e5f\u80fd\u8df3\u8f6c\u5230\u6307\u5b9a\u4f4d\u7f6e\uff0c\u4f46\u4f9d\u65e7\u4f1a\u518d\u6b21\u8fdb\u5165 for-switch\uff0c\u6b7b\u5faa\u73af\u3002","title":"45. \u8df3\u51fa for-switch \u548c for-select \u4ee3\u7801\u5757"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#46-for","text":"for \u8bed\u53e5\u4e2d\u7684\u8fed\u4ee3\u53d8\u91cf\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\u90fd\u4f1a\u91cd\u7528\uff0c\u5373 for \u4e2d\u521b\u5efa\u7684\u95ed\u5305\u51fd\u6570\u63a5\u6536\u5230\u7684\u53c2\u6570\u59cb\u7ec8\u662f\u540c\u4e00\u4e2a\u53d8\u91cf\uff0c\u5728 goroutine \u5f00\u59cb\u6267\u884c\u65f6\u90fd\u4f1a\u5f97\u5230\u540c\u4e00\u4e2a\u8fed\u4ee3\u503c\uff1a func main() { data := []string{\"one\", \"two\", \"three\"} for _, v := range data { go func() { fmt.Println(v) }() } time.Sleep(3 * time.Second) // \u8f93\u51fa three three three } \u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6cd5\uff1a\u65e0\u9700\u4fee\u6539 goroutine \u51fd\u6570\uff0c\u5728 for \u5185\u90e8\u4f7f\u7528\u5c40\u90e8\u53d8\u91cf\u4fdd\u5b58\u8fed\u4ee3\u503c\uff0c\u518d\u4f20\u53c2\uff1a func main() { data := []string{\"one\", \"two\", \"three\"} for _, v := range data { vCopy := v go func() { fmt.Println(vCopy) }() } time.Sleep(3 * time.Second) // \u8f93\u51fa one two three } \u53e6\u4e00\u4e2a\u89e3\u51b3\u65b9\u6cd5\uff1a\u76f4\u63a5\u5c06\u5f53\u524d\u7684\u8fed\u4ee3\u503c\u4ee5\u53c2\u6570\u5f62\u5f0f\u4f20\u9012\u7ed9\u533f\u540d\u51fd\u6570\uff1a func main() { data := []string{\"one\", \"two\", \"three\"} for _, v := range data { go func(in string) { fmt.Println(in) }(v) } time.Sleep(3 * time.Second) // \u8f93\u51fa one two three } \u6ce8\u610f\u4e0b\u8fb9\u8fd9\u4e2a\u7a0d\u590d\u6742\u7684 3 \u4e2a\u793a\u4f8b\u533a\u522b\uff1a type field struct { name string } func (p *field) print() { fmt.Println(p.name) } // \u9519\u8bef\u793a\u4f8b func main() { data := []field{{\"one\"}, {\"two\"}, {\"three\"}} for _, v := range data { go v.print() } time.Sleep(3 * time.Second) // \u8f93\u51fa three three three } // \u6b63\u786e\u793a\u4f8b func main() { data := []field{{\"one\"}, {\"two\"}, {\"three\"}} for _, v := range data { v := v go v.print() } time.Sleep(3 * time.Second) // \u8f93\u51fa one two three } // \u6b63\u786e\u793a\u4f8b func main() { data := []*field{{\"one\"}, {\"two\"}, {\"three\"}} for _, v := range data { // \u6b64\u65f6\u8fed\u4ee3\u503c v \u662f\u4e09\u4e2a\u5143\u7d20\u503c\u7684\u5730\u5740\uff0c\u6bcf\u6b21 v \u6307\u5411\u7684\u503c\u4e0d\u540c go v.print() } time.Sleep(3 * time.Second) // \u8f93\u51fa one two three }","title":"46. for \u8bed\u53e5\u4e2d\u7684\u8fed\u4ee3\u53d8\u91cf\u4e0e\u95ed\u5305\u51fd\u6570"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#47-defer","text":"\u5bf9 defer \u5ef6\u8fdf\u6267\u884c\u7684\u51fd\u6570\uff0c\u5b83\u7684\u53c2\u6570\u4f1a\u5728\u58f0\u660e\u65f6\u5019\u5c31\u4f1a\u6c42\u51fa\u5177\u4f53\u503c\uff0c\u800c\u4e0d\u662f\u5728\u6267\u884c\u65f6\u624d\u6c42\u503c\uff1a // \u5728 defer \u51fd\u6570\u4e2d\u53c2\u6570\u4f1a\u63d0\u524d\u6c42\u503c func main() { var i = 1 defer fmt.Println(\"result: \", func() int { return i * 2 }()) i++ } result: 2","title":"47. defer \u51fd\u6570\u7684\u53c2\u6570\u503c"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#48-defer","text":"\u5bf9 defer \u5ef6\u8fdf\u6267\u884c\u7684\u51fd\u6570\uff0c\u4f1a\u5728\u8c03\u7528\u5b83\u7684\u51fd\u6570\u7ed3\u675f\u65f6\u6267\u884c\uff0c\u800c\u4e0d\u662f\u5728\u8c03\u7528\u5b83\u7684\u8bed\u53e5\u5757\u7ed3\u675f\u65f6\u6267\u884c\uff0c\u6ce8\u610f\u533a\u5206\u5f00\u3002 \u6bd4\u5982\u5728\u4e00\u4e2a\u957f\u65f6\u95f4\u6267\u884c\u7684\u51fd\u6570\u91cc\uff0c\u5185\u90e8 for \u5faa\u73af\u4e2d\u4f7f\u7528 defer \u6765\u6e05\u7406\u6bcf\u6b21\u8fed\u4ee3\u4ea7\u751f\u7684\u8d44\u6e90\u8c03\u7528\uff0c\u5c31\u4f1a\u51fa\u73b0\u95ee\u9898\uff1a // \u547d\u4ee4\u884c\u53c2\u6570\u6307\u5b9a\u76ee\u5f55\u540d // \u904d\u5386\u8bfb\u53d6\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6 func main() { if len(os.Args) != 2 { os.Exit(1) } dir := os.Args[1] start, err := os.Stat(dir) if err != nil || !start.IsDir() { os.Exit(2) } var targets []string filepath.Walk(dir, func(fPath string, fInfo os.FileInfo, err error) error { if err != nil { return err } if !fInfo.Mode().IsRegular() { return nil } targets = append(targets, fPath) return nil }) for _, target := range targets { f, err := os.Open(target) if err != nil { fmt.Println(\"bad target:\", target, \"error:\", err) //error:too many open files break } defer f.Close() // \u5728\u6bcf\u6b21 for \u8bed\u53e5\u5757\u7ed3\u675f\u65f6\uff0c\u4e0d\u4f1a\u5173\u95ed\u6587\u4ef6\u8d44\u6e90 // \u4f7f\u7528 f \u8d44\u6e90 } } \u5148\u521b\u5efa 10000 \u4e2a\u6587\u4ef6\uff1a #!/bin/bash for n in {1..10000}; do echo content > \"file${n}.txt\" done \u8fd0\u884c\u6548\u679c\uff1a \u89e3\u51b3\u529e\u6cd5\uff1adefer \u5ef6\u8fdf\u6267\u884c\u7684\u51fd\u6570\u5199\u5165\u533f\u540d\u51fd\u6570\u4e2d\uff1a // \u76ee\u5f55\u904d\u5386\u6b63\u5e38 func main() { // ... for _, target := range targets { func() { f, err := os.Open(target) if err != nil { fmt.Println(\"bad target:\", target, \"error:\", err) return // \u5728\u533f\u540d\u51fd\u6570\u5185\u4f7f\u7528 return \u4ee3\u66ff break \u5373\u53ef } defer f.Close() // \u533f\u540d\u51fd\u6570\u6267\u884c\u7ed3\u675f\uff0c\u8c03\u7528\u5173\u95ed\u6587\u4ef6\u8d44\u6e90 // \u4f7f\u7528 f \u8d44\u6e90 }() } } \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u53bb\u6389 defer\uff0c\u5728\u6587\u4ef6\u8d44\u6e90\u4f7f\u7528\u5b8c\u6bd5\u540e\uff0c\u76f4\u63a5\u8c03\u7528 f.Close() \u6765\u5173\u95ed\u3002","title":"48. defer \u51fd\u6570\u7684\u6267\u884c\u65f6\u673a"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#49","text":"\u5728\u7c7b\u578b\u65ad\u8a00\u8bed\u53e5\u4e2d\uff0c\u65ad\u8a00\u5931\u8d25\u5219\u4f1a\u8fd4\u56de\u76ee\u6807\u7c7b\u578b\u7684\u201c\u96f6\u503c\u201d\uff0c\u65ad\u8a00\u53d8\u91cf\u4e0e\u539f\u6765\u53d8\u91cf\u6df7\u7528\u53ef\u80fd\u51fa\u73b0\u5f02\u5e38\u60c5\u51b5\uff1a // \u9519\u8bef\u793a\u4f8b func main() { var data interface{} = \"great\" // data \u6df7\u7528 if data, ok := data.(int); ok { fmt.Println(\"[is an int], data: \", data) } else { fmt.Println(\"[not an int], data: \", data) // [isn't a int], data: 0 } } // \u6b63\u786e\u793a\u4f8b func main() { var data interface{} = \"great\" if res, ok := data.(int); ok { fmt.Println(\"[is an int], data: \", res) } else { fmt.Println(\"[not an int], data: \", data) // [not an int], data: great } }","title":"49. \u5931\u8d25\u7684\u7c7b\u578b\u65ad\u8a00"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#50-gorutinue","text":"\u5728 2012 \u5e74 Google I/O \u5927\u4f1a\u4e0a\uff0cRob Pike \u7684 Go Concurrency Patterns \u6f14\u8bb2\u8ba8\u8bba Go \u7684\u51e0\u79cd\u57fa\u672c\u5e76\u53d1\u6a21\u5f0f\uff0c\u5982 \u5b8c\u6574\u4ee3\u7801 \u4e2d\u4ece\u6570\u636e\u96c6\u4e2d\u83b7\u53d6\u7b2c\u4e00\u6761\u6570\u636e\u7684\u51fd\u6570\uff1a func First(query string, replicas []Search) Result { c := make(chan Result) replicaSearch := func(i int) { c <- replicas[i](query) } for i := range replicas { go replicaSearch(i) } return <-c } \u5728\u641c\u7d22\u91cd\u590d\u65f6\u4f9d\u65e7\u6bcf\u6b21\u90fd\u8d77\u4e00\u4e2a goroutine \u53bb\u5904\u7406\uff0c\u6bcf\u4e2a goroutine \u90fd\u628a\u5b83\u7684\u641c\u7d22\u7ed3\u679c\u53d1\u9001\u5230\u7ed3\u679c channel \u4e2d\uff0cchannel \u4e2d\u6536\u5230\u7684\u7b2c\u4e00\u6761\u6570\u636e\u4f1a\u76f4\u63a5\u8fd4\u56de\u3002 \u8fd4\u56de\u5b8c\u7b2c\u4e00\u6761\u6570\u636e\u540e\uff0c\u5176\u4ed6 goroutine \u7684\u641c\u7d22\u7ed3\u679c\u600e\u4e48\u5904\u7406\uff1f\u4ed6\u4eec\u81ea\u5df1\u7684\u534f\u7a0b\u5982\u4f55\u5904\u7406\uff1f \u5728 First() \u4e2d\u7684\u7ed3\u679c channel \u662f\u65e0\u7f13\u51b2\u7684\uff0c\u8fd9\u610f\u5473\u7740\u53ea\u6709\u7b2c\u4e00\u4e2a goroutine \u80fd\u8fd4\u56de\uff0c\u7531\u4e8e\u6ca1\u6709 receiver\uff0c\u5176\u4ed6\u7684 goroutine \u4f1a\u5728\u53d1\u9001\u4e0a\u4e00\u76f4\u963b\u585e\u3002\u5982\u679c\u4f60\u5927\u91cf\u8c03\u7528\uff0c\u5219\u53ef\u80fd\u9020\u6210\u8d44\u6e90\u6cc4\u9732\u3002 \u4e3a\u907f\u514d\u6cc4\u9732\uff0c\u4f60\u5e94\u8be5\u786e\u4fdd\u6240\u6709\u7684 goroutine \u90fd\u80fd\u6b63\u786e\u9000\u51fa\uff0c\u6709 2 \u4e2a\u89e3\u51b3\u65b9\u6cd5\uff1a \u4f7f\u7528\u5e26\u7f13\u51b2\u7684 channel\uff0c\u786e\u4fdd\u80fd\u63a5\u6536\u5168\u90e8 goroutine \u7684\u8fd4\u56de\u7ed3\u679c\uff1a func First(query string, replicas ...Search) Result { c := make(chan Result,len(replicas)) searchReplica := func(i int) { c <- replicas[i](query) } for i := range replicas { go searchReplica(i) } return <-c } \u4f7f\u7528 select \u8bed\u53e5\uff0c\u914d\u5408\u80fd\u4fdd\u5b58\u4e00\u4e2a\u7f13\u51b2\u503c\u7684 channel default \u8bed\u53e5\uff1a default \u7684\u7f13\u51b2 channel \u4fdd\u8bc1\u4e86\u5373\u4f7f\u7ed3\u679c channel \u6536\u4e0d\u5230\u6570\u636e\uff0c\u4e5f\u4e0d\u4f1a\u963b\u585e goroutine func First(query string, replicas ...Search) Result { c := make(chan Result,1) searchReplica := func(i int) { select { case c <- replicas[i](query): default: } } for i := range replicas { go searchReplica(i) } return <-c } \u4f7f\u7528\u7279\u6b8a\u7684\u5e9f\u5f03\uff08cancellation\uff09 channel \u6765\u4e2d\u65ad\u5269\u4f59 goroutine \u7684\u6267\u884c\uff1a func First(query string, replicas ...Search) Result { c := make(chan Result) done := make(chan struct{}) defer close(done) searchReplica := func(i int) { select { case c <- replicas[i](query): case <- done: } } for i := range replicas { go searchReplica(i) } return <-c } Rob Pike \u4e3a\u4e86\u7b80\u5316\u6f14\u793a\uff0c\u6ca1\u6709\u63d0\u53ca\u6f14\u8bb2\u4ee3\u7801\u4e2d\u5b58\u5728\u7684\u8fd9\u4e9b\u95ee\u9898\u3002\u4e0d\u8fc7\u5bf9\u4e8e\u65b0\u624b\u6765\u8bf4\uff0c\u53ef\u80fd\u4f1a\u4e0d\u52a0\u601d\u8003\u76f4\u63a5\u4f7f\u7528\u3002","title":"50. \u963b\u585e\u7684 gorutinue \u4e0e\u8d44\u6e90\u6cc4\u9732"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#51-57","text":"","title":"\u9ad8\u7ea7\u7bc7\uff1a51-57"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#51-receiver","text":"\u53ea\u8981\u503c\u662f\u53ef\u5bfb\u5740\u7684\uff0c\u5c31\u53ef\u4ee5\u5728\u503c\u4e0a\u76f4\u63a5\u8c03\u7528\u6307\u9488\u65b9\u6cd5\u3002\u5373\u662f\u5bf9\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5b83\u7684 receiver \u662f\u6307\u9488\u5c31\u8db3\u77e3\u3002 \u4f46\u4e0d\u662f\u6240\u6709\u503c\u90fd\u662f\u53ef\u5bfb\u5740\u7684\uff0c\u6bd4\u5982 map \u7c7b\u578b\u7684\u5143\u7d20\u3001\u901a\u8fc7 interface \u5f15\u7528\u7684\u53d8\u91cf\uff1a type data struct { name string } type printer interface { print() } func (p *data) print() { fmt.Println(\"name: \", p.name) } func main() { d1 := data{\"one\"} d1.print() // d1 \u53d8\u91cf\u53ef\u5bfb\u5740\uff0c\u53ef\u76f4\u63a5\u8c03\u7528\u6307\u9488 receiver \u7684\u65b9\u6cd5 var in printer = data{\"two\"} in.print() // \u7c7b\u578b\u4e0d\u5339\u914d m := map[string]data{ \"x\": data{\"three\"}, } m[\"x\"].print() // m[\"x\"] \u662f\u4e0d\u53ef\u5bfb\u5740\u7684 // \u53d8\u52a8\u9891\u7e41 } cannot use data literal (type data) as type printer in assignment: data does not implement printer (print method has pointer receiver) cannot call pointer method on m[\"x\"] cannot take the address of m[\"x\"]","title":"51. \u4f7f\u7528\u6307\u9488\u4f5c\u4e3a\u65b9\u6cd5\u7684 receiver"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#52-map","text":"\u5982\u679c map \u4e00\u4e2a\u5b57\u6bb5\u7684\u503c\u662f struct \u7c7b\u578b\uff0c\u5219\u65e0\u6cd5\u76f4\u63a5\u66f4\u65b0\u8be5 struct \u7684\u5355\u4e2a\u5b57\u6bb5\uff1a // \u65e0\u6cd5\u76f4\u63a5\u66f4\u65b0 struct \u7684\u5b57\u6bb5\u503c type data struct { name string } func main() { m := map[string]data{ \"x\": {\"Tom\"}, } m[\"x\"].name = \"Jerry\" } cannot assign to struct field m[\"x\"].name in map \u56e0\u4e3a map \u4e2d\u7684\u5143\u7d20\u662f\u4e0d\u53ef\u5bfb\u5740\u7684\u3002\u9700\u533a\u5206\u5f00\u7684\u662f\uff0cslice \u7684\u5143\u7d20\u53ef\u5bfb\u5740\uff1a type data struct { name string } func main() { s := []data{{\"Tom\"}} s[0].name = \"Jerry\" fmt.Println(s) // [{Jerry}] } \u6ce8\u610f\uff1a\u4e0d\u4e45\u524d gccgo \u7f16\u8bd1\u5668\u53ef\u66f4\u65b0 map struct \u5143\u7d20\u7684\u5b57\u6bb5\u503c\uff0c\u4e0d\u8fc7\u5f88\u5feb\u4fbf\u4fee\u590d\u4e86\uff0c\u5b98\u65b9\u8ba4\u4e3a\u662f Go1.3 \u7684\u6f5c\u5728\u7279\u6027\uff0c\u65e0\u9700\u53ca\u65f6\u5b9e\u73b0\uff0c\u4f9d\u65e7\u5728 todo list \u4e2d\u3002 \u66f4\u65b0 map \u4e2d struct \u5143\u7d20\u7684\u5b57\u6bb5\u503c\uff0c\u6709 2 \u4e2a\u65b9\u6cd5\uff1a \u4f7f\u7528\u5c40\u90e8\u53d8\u91cf // \u63d0\u53d6\u6574\u4e2a struct \u5230\u5c40\u90e8\u53d8\u91cf\u4e2d\uff0c\u4fee\u6539\u5b57\u6bb5\u503c\u540e\u518d\u6574\u4e2a\u8d4b\u503c type data struct { name string } func main() { m := map[string]data{ \"x\": {\"Tom\"}, } r := m[\"x\"] r.name = \"Jerry\" m[\"x\"] = r fmt.Println(m) // map[x:{Jerry}] } \u4f7f\u7528\u6307\u5411\u5143\u7d20\u7684 map \u6307\u9488 func main() { m := map[string]*data{ \"x\": {\"Tom\"}, } m[\"x\"].name = \"Jerry\" // \u76f4\u63a5\u4fee\u6539 m[\"x\"] \u4e2d\u7684\u5b57\u6bb5 fmt.Println(m[\"x\"]) // &{Jerry} } \u4f46\u662f\u8981\u6ce8\u610f\u4e0b\u8fb9\u8fd9\u79cd\u8bef\u7528\uff1a func main() { m := map[string]*data{ \"x\": {\"Tom\"}, } m[\"z\"].name = \"what???\" fmt.Println(m[\"x\"]) } panic: runtime error: invalid memory address or nil pointer dereference","title":"52. \u66f4\u65b0 map \u5b57\u6bb5\u7684\u503c"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#53-nil-interface-nil-interface","text":"\u867d\u7136 interface \u770b\u8d77\u6765\u50cf\u6307\u9488\u7c7b\u578b\uff0c\u4f46\u5b83\u4e0d\u662f\u3002interface \u7c7b\u578b\u7684\u53d8\u91cf\u53ea\u6709\u5728\u7c7b\u578b\u548c\u503c\u5747\u4e3a nil \u65f6\u624d\u4e3a nil \u5982\u679c\u4f60\u7684 interface \u53d8\u91cf\u7684\u503c\u662f\u8ddf\u968f\u5176\u4ed6\u53d8\u91cf\u53d8\u5316\u7684\uff08\u96fe\uff09\uff0c\u4e0e nil \u6bd4\u8f83\u76f8\u7b49\u65f6\u5c0f\u5fc3\uff1a func main() { var data *byte var in interface{} fmt.Println(data, data == nil) // <nil> true fmt.Println(in, in == nil) // <nil> true in = data fmt.Println(in, in == nil) // <nil> false // data \u503c\u4e3a nil\uff0c\u4f46 in \u503c\u4e0d\u4e3a nil } \u5982\u679c\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u503c\u7c7b\u578b\u662f interface\uff0c\u66f4\u8981\u5c0f\u5fc3\u8fd9\u4e2a\u5751\uff1a // \u9519\u8bef\u793a\u4f8b func main() { doIt := func(arg int) interface{} { var result *struct{} = nil if arg > 0 { result = &struct{}{} } return result } if res := doIt(-1); res != nil { fmt.Println(\"Good result: \", res) // Good result: <nil> fmt.Printf(\"%T\\n\", res) // *struct {} // res \u4e0d\u662f nil\uff0c\u5b83\u7684\u503c\u4e3a nil fmt.Printf(\"%v\\n\", res) // <nil> } } // \u6b63\u786e\u793a\u4f8b func main() { doIt := func(arg int) interface{} { var result *struct{} = nil if arg > 0 { result = &struct{}{} } else { return nil // \u660e\u786e\u6307\u660e\u8fd4\u56de nil } return result } if res := doIt(-1); res != nil { fmt.Println(\"Good result: \", res) } else { fmt.Println(\"Bad result: \", res) // Bad result: <nil> } }","title":"53. nil interface \u548c nil interface \u503c"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#54","text":"\u4f60\u5e76\u4e0d\u603b\u662f\u6e05\u695a\u4f60\u7684\u53d8\u91cf\u662f\u5206\u914d\u5230\u4e86\u5806\u8fd8\u662f\u6808\u3002 \u5728 C++ \u4e2d\u4f7f\u7528 new \u521b\u5efa\u7684\u53d8\u91cf\u603b\u662f\u5206\u914d\u5230\u5806\u5185\u5b58\u4e0a\u7684\uff0c\u4f46\u5728 Go \u4e2d\u5373\u4f7f\u4f7f\u7528 new() \u3001 make() \u6765\u521b\u5efa\u53d8\u91cf\uff0c\u53d8\u91cf\u4e3a\u5185\u5b58\u5206\u914d\u4f4d\u7f6e\u4f9d\u65e7\u5f52 Go \u7f16\u8bd1\u5668\u7ba1\u3002 Go \u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u53d8\u91cf\u7684\u5927\u5c0f\u53ca\u5176 \"escape analysis\" \u7684\u7ed3\u679c\u6765\u51b3\u5b9a\u53d8\u91cf\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u6545\u80fd\u51c6\u786e\u8fd4\u56de\u672c\u5730\u53d8\u91cf\u7684\u5730\u5740\uff0c\u8fd9\u5728 C/C++ \u4e2d\u662f\u4e0d\u884c\u7684\u3002 \u5728 go build \u6216 go run \u65f6\uff0c\u52a0\u5165 -m \u53c2\u6570\uff0c\u80fd\u51c6\u786e\u5206\u6790\u7a0b\u5e8f\u7684\u53d8\u91cf\u5206\u914d\u4f4d\u7f6e\uff1a","title":"54. \u5806\u6808\u53d8\u91cf"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#55-gomaxprocsconcurrencyand-parallelism","text":"Go 1.4 \u53ca\u4ee5\u4e0b\u7248\u672c\uff0c\u7a0b\u5e8f\u53ea\u4f1a\u4f7f\u7528 1 \u4e2a\u6267\u884c\u4e0a\u4e0b\u6587 / OS \u7ebf\u7a0b\uff0c\u5373\u4efb\u4f55\u65f6\u95f4\u90fd\u6700\u591a\u53ea\u6709 1 \u4e2a goroutine \u5728\u6267\u884c\u3002 Go 1.5 \u7248\u672c\u5c06\u53ef\u6267\u884c\u4e0a\u4e0b\u6587\u7684\u6570\u91cf\u8bbe\u7f6e\u4e3a runtime.NumCPU() \u8fd4\u56de\u7684\u903b\u8f91 CPU \u6838\u5fc3\u6570\uff0c\u8fd9\u4e2a\u6570\u4e0e\u7cfb\u7edf\u5b9e\u9645\u603b\u7684 CPU \u903b\u8f91\u6838\u5fc3\u6570\u662f\u5426\u4e00\u81f4\uff0c\u53d6\u51b3\u4e8e\u4f60\u7684 CPU \u5206\u914d\u7ed9\u7a0b\u5e8f\u7684\u6838\u5fc3\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528 GOMAXPROCS \u73af\u5883\u53d8\u91cf\u6216\u8005\u52a8\u6001\u7684\u4f7f\u7528 runtime.GOMAXPROCS() \u6765\u8c03\u6574\u3002 \u8bef\u533a\uff1a GOMAXPROCS \u8868\u793a\u6267\u884c goroutine \u7684 CPU \u6838\u5fc3\u6570\uff0c\u53c2\u8003 \u6587\u6863 GOMAXPROCS \u7684\u503c\u662f\u53ef\u4ee5\u8d85\u8fc7 CPU \u7684\u5b9e\u9645\u6570\u91cf\u7684\uff0c\u5728 1.5 \u4e2d\u6700\u5927\u4e3a 256 func main() { fmt.Println(runtime.GOMAXPROCS(-1)) // 4 fmt.Println(runtime.NumCPU()) // 4 runtime.GOMAXPROCS(20) fmt.Println(runtime.GOMAXPROCS(-1)) // 20 runtime.GOMAXPROCS(300) fmt.Println(runtime.GOMAXPROCS(-1)) // Go 1.9.2 // 300 }","title":"55. GOMAXPROCS\u3001Concurrency\uff08\u5e76\u53d1\uff09and Parallelism\uff08\u5e76\u884c\uff09"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#56","text":"Go \u53ef\u80fd\u4f1a\u91cd\u6392\u4e00\u4e9b\u64cd\u4f5c\u7684\u6267\u884c\u987a\u5e8f\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5728\u4e00\u4e2a goroutine \u4e2d\u64cd\u4f5c\u662f\u987a\u5e8f\u6267\u884c\u7684\uff0c\u4f46\u4e0d\u4fdd\u8bc1\u591a goroutine \u7684\u6267\u884c\u987a\u5e8f\uff1a var _ = runtime.GOMAXPROCS(3) var a, b int func u1() { a = 1 b = 2 } func u2() { a = 3 b = 4 } func p() { println(a) println(b) } func main() { go u1() // \u591a\u4e2a goroutine \u7684\u6267\u884c\u987a\u5e8f\u4e0d\u5b9a go u2() go p() time.Sleep(1 * time.Second) } \u8fd0\u884c\u6548\u679c\uff1a \u5982\u679c\u4f60\u60f3\u4fdd\u6301\u591a goroutine \u50cf\u4ee3\u7801\u4e2d\u7684\u90a3\u6837\u987a\u5e8f\u6267\u884c\uff0c\u53ef\u4ee5\u4f7f\u7528 channel \u6216 sync \u5305\u4e2d\u7684\u9501\u673a\u5236\u7b49\u3002","title":"56. \u8bfb\u5199\u64cd\u4f5c\u7684\u91cd\u65b0\u6392\u5e8f"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#57","text":"\u4f60\u7684\u7a0b\u5e8f\u53ef\u80fd\u51fa\u73b0\u4e00\u4e2a goroutine \u5728\u8fd0\u884c\u65f6\u963b\u6b62\u4e86\u5176\u4ed6 goroutine \u7684\u8fd0\u884c\uff0c\u6bd4\u5982\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a\u4e0d\u8ba9\u8c03\u5ea6\u5668\u8fd0\u884c\u7684 for \u5faa\u73af\uff1a func main() { done := false go func() { done = true }() for !done { } println(\"done !\") } for \u7684\u5faa\u73af\u4f53\u4e0d\u5fc5\u4e3a\u7a7a\uff0c\u4f46\u5982\u679c\u4ee3\u7801\u4e0d\u4f1a\u89e6\u53d1\u8c03\u5ea6\u5668\u6267\u884c\uff0c\u5c06\u51fa\u73b0\u95ee\u9898\u3002 \u8c03\u5ea6\u5668\u4f1a\u5728 GC\u3001Go \u58f0\u660e\u3001\u963b\u585e channel\u3001\u963b\u585e\u7cfb\u7edf\u8c03\u7528\u548c\u9501\u64cd\u4f5c\u540e\u518d\u6267\u884c\uff0c\u4e5f\u4f1a\u5728\u975e\u5185\u8054\u51fd\u6570\u8c03\u7528\u65f6\u6267\u884c\uff1a func main() { done := false go func() { done = true }() for !done { println(\"not done !\") // \u5e76\u4e0d\u5185\u8054\u6267\u884c } println(\"done !\") } \u53ef\u4ee5\u6dfb\u52a0 -m \u53c2\u6570\u6765\u5206\u6790 for \u4ee3\u7801\u5757\u4e2d\u8c03\u7528\u7684\u5185\u8054\u51fd\u6570\uff1a \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 runtime \u5305\u4e2d\u7684 Gosched() \u6765 \u624b\u52a8\u542f\u52a8\u8c03\u5ea6\u5668\uff1a func main() { done := false go func() { done = true }() for !done { runtime.Gosched() } println(\"done !\") } \u8fd0\u884c\u6548\u679c\uff1a","title":"57. \u4f18\u5148\u8c03\u5ea6"},{"location":"golang/Golang%20%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%84%2050%20%E4%B8%AA%E5%9D%91/#_2","text":"\u611f\u8c22\u539f\u4f5c\u8005 kcqon \u603b\u7ed3\u7684\u8fd9\u7bc7\u535a\u5ba2\uff0c\u8ba9\u6211\u53d7\u76ca\u532a\u6d45\u3002 \u7531\u4e8e\u8bd1\u8005\u6c34\u5e73\u6709\u9650\uff0c\u4e0d\u514d\u51fa\u73b0\u7406\u89e3\u5931\u8bef\uff0c\u671b\u8bfb\u8005\u5728\u4e0b\u8bc4\u8bba\u533a\u6307\u51fa\uff0c\u4e0d\u80dc\u611f\u6fc0\u3002","title":"\u603b\u7ed3"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/","text":"\u80fd\u529b\u6a21\u578b \u7ea7\u522b \u6a21\u578b \u521d\u7ea7 primary \u719f\u6089\u57fa\u672c\u8bed\u6cd5\uff0c\u80fd\u591f\u770b\u61c2\u4ee3\u7801\u7684\u610f\u56fe\uff1b \u5728\u4ed6\u4eba\u6307\u5bfc\u4e0b\u80fd\u591f\u5b8c\u6210\u7528\u6237\u6545\u4e8b\u7684\u5f00\u53d1\uff0c\u7f16\u5199\u7684\u4ee3\u7801\u7b26\u5408CleanCode\u89c4\u8303\uff1b \u4e2d\u7ea7 intermediate \u80fd\u591f\u72ec\u7acb\u5b8c\u6210\u7528\u6237\u6545\u4e8b\u7684\u5f00\u53d1\u548c\u6d4b\u8bd5\uff1b \u80fd\u591f\u55c5\u51fa\u4ee3\u7801\u7684\u574f\u5473\u9053\uff0c\u5e76\u77e5\u9053\u5982\u4f55\u91cd\u6784\u8fbe\u6210\u76ee\u6807\uff1b \u9ad8\u7ea7 senior \u80fd\u591f\u5f00\u53d1\u51fa\u9ad8\u8d28\u91cf\u9ad8\u6027\u80fd\u7684\u4ee3\u7801\uff1b \u80fd\u591f\u719f\u7ec3\u4f7f\u7528\u9ad8\u7ea7\u7279\u6027\uff0c\u5f00\u53d1\u7f16\u7a0b\u6846\u67b6\u6216\u6d4b\u8bd5\u6846\u67b6\uff1b \u9009\u62e9\u9898 1\u3001 [primary] \u4e0b\u9762\u5c5e\u4e8e\u5173\u952e\u5b57\u7684\u662f\uff08\uff09 A. func B. def C. struct D. class \u53c2\u8003\u7b54\u6848\uff1aAC 2\u3001 [primary] \u5b9a\u4e49\u4e00\u4e2a\u5305\u5185\u5168\u5c40\u5b57\u7b26\u4e32\u53d8\u91cf\uff0c\u4e0b\u9762\u8bed\u6cd5\u6b63\u786e\u7684\u662f \uff08\uff09 A. var str string B. str := \"\" C. str = \"\" D. var str = \"\" \u53c2\u8003\u7b54\u6848\uff1aAD 3\u3001 [primary] \u901a\u8fc7\u6307\u9488\u53d8\u91cf p \u8bbf\u95ee\u5176\u6210\u5458\u53d8\u91cf name\uff0c\u4e0b\u9762\u8bed\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. p.name B. (*p).name C. (&p).name D. p->name \u53c2\u8003\u7b54\u6848\uff1aAB 4\u3001 [primary] \u5173\u4e8e\u63a5\u53e3\u548c\u7c7b\u7684\u8bf4\u6cd5\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. \u4e00\u4e2a\u7c7b\u53ea\u9700\u8981\u5b9e\u73b0\u4e86\u63a5\u53e3\u8981\u6c42\u7684\u6240\u6709\u51fd\u6570\uff0c\u6211\u4eec\u5c31\u8bf4\u8fd9\u4e2a\u7c7b\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3 B. \u5b9e\u73b0\u7c7b\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u5173\u5fc3\u81ea\u5df1\u5e94\u8be5\u63d0\u4f9b\u54ea\u4e9b\u65b9\u6cd5\uff0c\u4e0d\u7528\u518d\u7ea0\u7ed3\u63a5\u53e3\u9700\u8981\u62c6\u5f97\u591a\u7ec6\u624d\u5408\u7406 C. \u7c7b\u5b9e\u73b0\u63a5\u53e3\u65f6\uff0c\u9700\u8981\u5bfc\u5165\u63a5\u53e3\u6240\u5728\u7684\u5305 D. \u63a5\u53e3\u7531\u4f7f\u7528\u65b9\u6309\u81ea\u8eab\u9700\u6c42\u6765\u5b9a\u4e49\uff0c\u4f7f\u7528\u65b9\u65e0\u9700\u5173\u5fc3\u662f\u5426\u6709\u5176\u4ed6\u6a21\u5757\u5b9a\u4e49\u8fc7\u7c7b\u4f3c\u7684\u63a5\u53e3 \u53c2\u8003\u7b54\u6848\uff1aABD 5\u3001 [primary] \u5173\u4e8e\u5b57\u7b26\u4e32\u8fde\u63a5\uff0c\u4e0b\u9762\u8bed\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. str := \u2018abc\u2019 + \u2018123\u2019 B. str := \"abc\" + \"123\" C. str \uff1a= '123' + \"abc\" D. fmt.Sprintf(\"abc%d\", 123) \u53c2\u8003\u7b54\u6848\uff1aBD 6\u3001 [primary] \u5173\u4e8e\u534f\u7a0b\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u662f\uff08\uff09 A. \u534f\u7a0b\u548c\u7ebf\u7a0b\u90fd\u53ef\u4ee5\u5b9e\u73b0\u7a0b\u5e8f\u7684\u5e76\u53d1\u6267\u884c B. \u7ebf\u7a0b\u6bd4\u534f\u7a0b\u66f4\u8f7b\u91cf\u7ea7 C. \u534f\u7a0b\u4e0d\u5b58\u5728\u6b7b\u9501\u95ee\u9898 D. \u901a\u8fc7channel\u6765\u8fdb\u884c\u534f\u7a0b\u95f4\u7684\u901a\u4fe1 \u53c2\u8003\u7b54\u6848\uff1aAD 7\u3001 [intermediate] \u5173\u4e8einit\u51fd\u6570\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. \u4e00\u4e2a\u5305\u4e2d\uff0c\u53ef\u4ee5\u5305\u542b\u591a\u4e2ainit\u51fd\u6570 B. \u7a0b\u5e8f\u7f16\u8bd1\u65f6\uff0c\u5148\u6267\u884c\u5bfc\u5165\u5305\u7684init\u51fd\u6570\uff0c\u518d\u6267\u884c\u672c\u5305\u5185\u7684init\u51fd\u6570 C. main\u5305\u4e2d\uff0c\u4e0d\u80fd\u6709init\u51fd\u6570 D. init\u51fd\u6570\u53ef\u4ee5\u88ab\u5176\u4ed6\u51fd\u6570\u8c03\u7528 \u53c2\u8003\u7b54\u6848\uff1aAB 8\u3001 [primary] \u5173\u4e8e\u5faa\u73af\u8bed\u53e5\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u6709\uff08\uff09 A. \u5faa\u73af\u8bed\u53e5\u65e2\u652f\u6301for\u5173\u952e\u5b57\uff0c\u4e5f\u652f\u6301while\u548cdo-while B. \u5173\u952e\u5b57for\u7684\u57fa\u672c\u4f7f\u7528\u65b9\u6cd5\u4e0eC/C++\u4e2d\u6ca1\u6709\u4efb\u4f55\u5dee\u5f02 C. for\u5faa\u73af\u652f\u6301continue\u548cbreak\u6765\u63a7\u5236\u5faa\u73af\uff0c\u4f46\u662f\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u66f4\u9ad8\u7ea7\u7684break\uff0c\u53ef\u4ee5\u9009\u62e9\u4e2d\u65ad\u54ea\u4e00\u4e2a\u5faa\u73af D. for\u5faa\u73af\u4e0d\u652f\u6301\u4ee5\u9017\u53f7\u4e3a\u95f4\u9694\u7684\u591a\u4e2a\u8d4b\u503c\u8bed\u53e5\uff0c\u5fc5\u987b\u4f7f\u7528\u5e73\u884c\u8d4b\u503c\u7684\u65b9\u5f0f\u6765\u521d\u59cb\u5316\u591a\u4e2a\u53d8\u91cf \u53c2\u8003\u7b54\u6848\uff1aCD 9\u3001 [intermediate] \u5bf9\u4e8e\u51fd\u6570\u5b9a\u4e49\uff1a func add(args ...int) int { sum := 0 for _, arg := range args { sum += arg } return sum } \u4e0b\u9762\u5bf9add\u51fd\u6570\u8c03\u7528\u6b63\u786e\u7684\u662f\uff08\uff09 A. add(1, 2) B. add(1, 3, 7) C. add([]int{1, 2}) D. add([]int{1, 3, 7}...) \u53c2\u8003\u7b54\u6848\uff1aABD 10\u3001 [primary] \u5173\u4e8e\u7c7b\u578b\u8f6c\u5316\uff0c\u4e0b\u9762\u8bed\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. type MyInt int var i int = 1 var j MyInt = i B. type MyInt int var i int = 1 var j MyInt = (MyInt)i C. type MyInt int var i int = 1 var j MyInt = MyInt(i) D. type MyInt int var i int = 1 var j MyInt = i.(MyInt) \u53c2\u8003\u7b54\u6848\uff1aC 11\u3001 [primary] \u5173\u4e8e\u5c40\u90e8\u53d8\u91cf\u7684\u521d\u59cb\u5316\uff0c\u4e0b\u9762\u6b63\u786e\u7684\u4f7f\u7528\u65b9\u5f0f\u662f\uff08\uff09 A. var i int = 10 B. var i = 10 C. i := 10 D. i = 10 \u53c2\u8003\u7b54\u6848\uff1aABC 12\u3001 [primary] \u5173\u4e8econst\u5e38\u91cf\u5b9a\u4e49\uff0c\u4e0b\u9762\u6b63\u786e\u7684\u4f7f\u7528\u65b9\u5f0f\u662f\uff08\uff09 A. const Pi float64 = 3.14159265358979323846 const zero = 0.0 B. const ( size int64 = 1024 eof = -1 ) C. const ( ERR_ELEM_EXIST error = errors.New(\"element already exists\") ERR_ELEM_NT_EXIST error = errors.New(\"element not exists\") ) D. const u, v float32 = 0, 3 const a, b, c = 3, 4, \"foo\" \u53c2\u8003\u7b54\u6848\uff1aABD 13\u3001 [primary] \u5173\u4e8e\u5e03\u5c14\u53d8\u91cfb\u7684\u8d4b\u503c\uff0c\u4e0b\u9762\u9519\u8bef\u7684\u7528\u6cd5\u662f\uff08\uff09 A. b = true B. b = 1 C. b = bool(1) D. b = (1 == 2) \u53c2\u8003\u7b54\u6848\uff1aBC 14\u3001 [intermediate] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f\uff08\uff09 func main() { if (true) { defer fmt.Printf(\"1\") } else { defer fmt.Printf(\"2\") } fmt.Printf(\"3\") } A. 321 B. 32 C. 31 D. 13 \u53c2\u8003\u7b54\u6848\uff1aC 15\u3001 [primary] \u5173\u4e8eswitch\u8bed\u53e5\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u6709\uff08\uff09 A. \u6761\u4ef6\u8868\u8fbe\u5f0f\u5fc5\u987b\u4e3a\u5e38\u91cf\u6216\u8005\u6574\u6570 B. \u5355\u4e2acase\u4e2d\uff0c\u53ef\u4ee5\u51fa\u73b0\u591a\u4e2a\u7ed3\u679c\u9009\u9879 C. \u9700\u8981\u7528break\u6765\u660e\u786e\u9000\u51fa\u4e00\u4e2acase D. \u53ea\u6709\u5728case\u4e2d\u660e\u786e\u6dfb\u52a0fallthrough\u5173\u952e\u5b57\uff0c\u624d\u4f1a\u7ee7\u7eed\u6267\u884c\u7d27\u8ddf\u7684\u4e0b\u4e00\u4e2acase \u53c2\u8003\u7b54\u6848\uff1aBD 16\u3001 [intermediate] golang\u4e2d\u6ca1\u6709\u9690\u85cf\u7684this\u6307\u9488\uff0c\u8fd9\u53e5\u8bdd\u7684\u542b\u4e49\u662f\uff08\uff09 A. \u65b9\u6cd5\u65bd\u52a0\u7684\u5bf9\u8c61\u663e\u5f0f\u4f20\u9012\uff0c\u6ca1\u6709\u88ab\u9690\u85cf\u8d77\u6765 B. golang\u6cbf\u88ad\u4e86\u4f20\u7edf\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u7684\u8bf8\u591a\u6982\u5ff5\uff0c\u6bd4\u5982\u7ee7\u627f\u3001\u865a\u51fd\u6570\u548c\u6784\u9020\u51fd\u6570 C. golang\u7684\u9762\u5411\u5bf9\u8c61\u8868\u8fbe\u66f4\u76f4\u89c2\uff0c\u5bf9\u4e8e\u9762\u5411\u8fc7\u7a0b\u53ea\u662f\u6362\u4e86\u4e00\u79cd\u8bed\u6cd5\u5f62\u5f0f\u6765\u8868\u8fbe D. \u65b9\u6cd5\u65bd\u52a0\u7684\u5bf9\u8c61\u4e0d\u9700\u8981\u975e\u5f97\u662f\u6307\u9488\uff0c\u4e5f\u4e0d\u7528\u975e\u5f97\u53ebthis \u53c2\u8003\u7b54\u6848\uff1aACD 17\u3001 [intermediate] golang\u4e2d\u7684\u5f15\u7528\u7c7b\u578b\u5305\u62ec\uff08\uff09 A. \u6570\u7ec4\u5207\u7247 B. map C. channel D. interface \u53c2\u8003\u7b54\u6848\uff1aABCD 18\u3001 [intermediate] golang\u4e2d\u7684\u6307\u9488\u8fd0\u7b97\u5305\u62ec\uff08\uff09 A. \u53ef\u4ee5\u5bf9\u6307\u9488\u8fdb\u884c\u81ea\u589e\u6216\u81ea\u51cf\u8fd0\u7b97 B. \u53ef\u4ee5\u901a\u8fc7\u201c&\u201d\u53d6\u6307\u9488\u7684\u5730\u5740 C. \u53ef\u4ee5\u901a\u8fc7\u201c*\u201d\u53d6\u6307\u9488\u6307\u5411\u7684\u6570\u636e D. \u53ef\u4ee5\u5bf9\u6307\u9488\u8fdb\u884c\u4e0b\u6807\u8fd0\u7b97 \u53c2\u8003\u7b54\u6848\uff1aBC 19\u3001 [primary] \u5173\u4e8emain\u51fd\u6570\uff08\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u6267\u884c\u8d77\u70b9\uff09\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. main\u51fd\u6570\u4e0d\u80fd\u5e26\u53c2\u6570 B. main\u51fd\u6570\u4e0d\u80fd\u5b9a\u4e49\u8fd4\u56de\u503c C. main\u51fd\u6570\u6240\u5728\u7684\u5305\u5fc5\u987b\u4e3amain\u5305 D. main\u51fd\u6570\u4e2d\u53ef\u4ee5\u4f7f\u7528flag\u5305\u6765\u83b7\u53d6\u548c\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570 \u53c2\u8003\u7b54\u6848\uff1aABCD 20\u3001 [intermediate] \u4e0b\u9762\u8d4b\u503c\u6b63\u786e\u7684\u662f\uff08\uff09 A. var x = nil B. var x interface{} = nil C. var x string = nil D. var x error = nil \u53c2\u8003\u7b54\u6848\uff1aBD 21\u3001 [intermediate] \u5173\u4e8e\u6574\u578b\u5207\u7247\u7684\u521d\u59cb\u5316\uff0c\u4e0b\u9762\u6b63\u786e\u7684\u662f\uff08\uff09 A. s := make([]int) B. s := make([]int, 0) C. s := make([]int, 5, 10) D. s := []int{1, 2, 3, 4, 5} \u53c2\u8003\u7b54\u6848\uff1aBCD 22\u3001 [intermediate] \u4ece\u5207\u7247\u4e2d\u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u4e0b\u9762\u7684\u7b97\u6cd5\u5b9e\u73b0\u6b63\u786e\u7684\u662f\uff08\uff09 A. func (s *Slice)Remove(value interface{}) error { for i, v := range *s { if isEqual(value, v) { if i== len(*s) - 1 { *s = (*s)[:i] }else { *s = append((*s)[:i],(*s)[i + 2:]...) } return nil } } return ERR_ELEM_NT_EXIST } B. func (s *Slice)Remove(value interface{}) error { for i, v := range *s { if isEqual(value, v) { *s = append((*s)[:i],(*s)[i + 1:]) return nil } } return ERR_ELEM_NT_EXIST } C. func (s *Slice)Remove(value interface{}) error { for i, v := range *s { if isEqual(value, v) { delete(*s, v) return nil } } return ERR_ELEM_NT_EXIST } D. func (s *Slice)Remove(value interface{}) error { for i, v := range *s { if isEqual(value, v) { *s = append((*s)[:i],(*s)[i + 1:]...) return nil } } return ERR_ELEM_NT_EXIST } \u53c2\u8003\u7b54\u6848\uff1aD 23\u3001 [primary] \u5bf9\u4e8e\u5c40\u90e8\u53d8\u91cf\u6574\u578b\u5207\u7247x\u7684\u8d4b\u503c\uff0c\u4e0b\u9762\u5b9a\u4e49\u6b63\u786e\u7684\u662f\uff08\uff09 A. x := []int{ 1, 2, 3, 4, 5, 6, } B. x := []int{ 1, 2, 3, 4, 5, 6 } C. x := []int{ 1, 2, 3, 4, 5, 6} D. x := []int{1, 2, 3, 4, 5, 6,} \u53c2\u8003\u7b54\u6848\uff1aACD 24\u3001 [primary] \u5173\u4e8e\u53d8\u91cf\u7684\u81ea\u589e\u548c\u81ea\u51cf\u64cd\u4f5c\uff0c\u4e0b\u9762\u8bed\u53e5\u6b63\u786e\u7684\u662f\uff08\uff09 A. i := 1 i++ B. i := 1 j = i++ C. i := 1 ++i D. i := 1 i-- \u53c2\u8003\u7b54\u6848\uff1aAD 25\u3001 [intermediate] \u5173\u4e8e\u51fd\u6570\u58f0\u660e\uff0c\u4e0b\u9762\u8bed\u6cd5\u9519\u8bef\u7684\u662f\uff08\uff09 A. func f(a, b int) (value int, err error) B. func f(a int, b int) (value int, err error) C. func f(a, b int) (value int, error) D. func f(a int, b int) (int, int, error) \u53c2\u8003\u7b54\u6848\uff1aC 26\u3001 [intermediate] \u5982\u679cAdd\u51fd\u6570\u7684\u8c03\u7528\u4ee3\u7801\u4e3a\uff1a func main() { var a Integer = 1 var b Integer = 2 var i interface{} = &a sum := i.(*Integer).Add(b) fmt.Println(sum) } 27\u3001\u5219Add\u51fd\u6570\u5b9a\u4e49\u6b63\u786e\u7684\u662f\uff08\uff09 A. type Integer int func (a Integer) Add(b Integer) Integer { return a + b } B. type Integer int func (a Integer) Add(b *Integer) Integer { return a + *b } C. type Integer int func (a *Integer) Add(b Integer) Integer { return *a + b } D. type Integer int func (a *Integer) Add(b *Integer) Integer { return *a + *b } \u53c2\u8003\u7b54\u6848\uff1aAC 28\u3001 [intermediate] \u5982\u679cAdd\u51fd\u6570\u7684\u8c03\u7528\u4ee3\u7801\u4e3a\uff1a func main() { var a Integer = 1 var b Integer = 2 var i interface{} = a sum := i.(Integer).Add(b) fmt.Println(sum) } 29\u3001\u5219Add\u51fd\u6570\u5b9a\u4e49\u6b63\u786e\u7684\u662f\uff08\uff09 A. type Integer int func (a Integer) Add(b Integer) Integer { return a + b } B. type Integer int func (a Integer) Add(b *Integer) Integer { return a + *b } C. type Integer int func (a *Integer) Add(b Integer) Integer { return *a + b } D. type Integer int func (a *Integer) Add(b *Integer) Integer { return *a + *b } \u53c2\u8003\u7b54\u6848\uff1aA 30\u3001 [intermediate] \u5173\u4e8eGetPodAction\u5b9a\u4e49\uff0c\u4e0b\u9762\u8d4b\u503c\u6b63\u786e\u7684\u662f\uff08\uff09 type Fragment interface { Exec(transInfo *TransInfo) error } type GetPodAction struct { } func (g GetPodAction) Exec(transInfo *TransInfo) error { ... return nil } A. var fragment Fragment = new(GetPodAction) B. var fragment Fragment = GetPodAction C. var fragment Fragment = &GetPodAction{} D. var fragment Fragment = GetPodAction{} \u53c2\u8003\u7b54\u6848\uff1aACD 31\u3001 [intermediate] \u5173\u4e8eGoMock\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. GoMock\u53ef\u4ee5\u5bf9interface\u6253\u6869 B. GoMock\u53ef\u4ee5\u5bf9\u7c7b\u7684\u6210\u5458\u51fd\u6570\u6253\u6869 C. GoMock\u53ef\u4ee5\u5bf9\u51fd\u6570\u6253\u6869 D. GoMock\u6253\u6869\u540e\u7684\u4f9d\u8d56\u6ce8\u5165\u53ef\u4ee5\u901a\u8fc7GoStub\u5b8c\u6210 \u53c2\u8003\u7b54\u6848\uff1aAD 32\u3001 [intermediate] \u5173\u4e8e\u63a5\u53e3\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. \u53ea\u8981\u4e24\u4e2a\u63a5\u53e3\u62e5\u6709\u76f8\u540c\u7684\u65b9\u6cd5\u5217\u8868\uff08\u6b21\u5e8f\u4e0d\u540c\u4e0d\u8981\u7d27\uff09\uff0c\u90a3\u4e48\u5b83\u4eec\u5c31\u662f\u7b49\u4ef7\u7684\uff0c\u53ef\u4ee5\u76f8\u4e92\u8d4b\u503c B. \u5982\u679c\u63a5\u53e3A\u7684\u65b9\u6cd5\u5217\u8868\u662f\u63a5\u53e3B\u7684\u65b9\u6cd5\u5217\u8868\u7684\u5b50\u96c6\uff0c\u90a3\u4e48\u63a5\u53e3B\u53ef\u4ee5\u8d4b\u503c\u7ed9\u63a5\u53e3A C. \u63a5\u53e3\u67e5\u8be2\u662f\u5426\u6210\u529f\uff0c\u8981\u5728\u8fd0\u884c\u671f\u624d\u80fd\u591f\u786e\u5b9a D. \u63a5\u53e3\u8d4b\u503c\u662f\u5426\u53ef\u884c\uff0c\u8981\u5728\u8fd0\u884c\u671f\u624d\u80fd\u591f\u786e\u5b9a \u53c2\u8003\u7b54\u6848\uff1aABC 33\u3001 [primary] \u5173\u4e8echannel\uff0c\u4e0b\u9762\u8bed\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. var ch chan int B. ch := make(chan int) C. <- ch D. ch <- \u53c2\u8003\u7b54\u6848\uff1aABC 34\u3001 [primary] \u5173\u4e8e\u540c\u6b65\u9501\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. \u5f53\u4e00\u4e2agoroutine\u83b7\u5f97\u4e86Mutex\u540e\uff0c\u5176\u4ed6goroutine\u5c31\u53ea\u80fd\u4e56\u4e56\u7684\u7b49\u5f85\uff0c\u9664\u975e\u8be5goroutine\u91ca\u653e\u8fd9\u4e2aMutex B. RWMutex\u5728\u8bfb\u9501\u5360\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u963b\u6b62\u5199\uff0c\u4f46\u4e0d\u963b\u6b62\u8bfb C. RWMutex\u5728\u5199\u9501\u5360\u7528\u60c5\u51b5\u4e0b\uff0c\u4f1a\u963b\u6b62\u4efb\u4f55\u5176\u4ed6goroutine\uff08\u65e0\u8bba\u8bfb\u548c\u5199\uff09\u8fdb\u6765\uff0c\u6574\u4e2a\u9501\u76f8\u5f53\u4e8e\u7531\u8be5goroutine\u72ec\u5360 D. Lock()\u64cd\u4f5c\u9700\u8981\u4fdd\u8bc1\u6709Unlock()\u6216RUnlock()\u8c03\u7528\u4e0e\u4e4b\u5bf9\u5e94 \u53c2\u8003\u7b54\u6848\uff1aABC 35\u3001 [intermediate] golang\u4e2d\u5927\u591a\u6570\u6570\u636e\u7c7b\u578b\u90fd\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6709\u6548\u7684JSON\u6587\u672c\uff0c\u4e0b\u9762\u51e0\u79cd\u7c7b\u578b\u9664\u5916\uff08\uff09 A. \u6307\u9488 B. channel C. complex D. \u51fd\u6570 \u53c2\u8003\u7b54\u6848\uff1aBCD 36\u3001 [intermediate] \u5173\u4e8ego vendor\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. \u57fa\u672c\u601d\u8def\u662f\u5c06\u5f15\u7528\u7684\u5916\u90e8\u5305\u7684\u6e90\u4ee3\u7801\u653e\u5728\u5f53\u524d\u5de5\u7a0b\u7684vendor\u76ee\u5f55\u4e0b\u9762 B. \u7f16\u8bd1go\u4ee3\u7801\u4f1a\u4f18\u5148\u4ecevendor\u76ee\u5f55\u5148\u5bfb\u627e\u4f9d\u8d56\u5305 C. \u53ef\u4ee5\u6307\u5b9a\u5f15\u7528\u67d0\u4e2a\u7279\u5b9a\u7248\u672c\u7684\u5916\u90e8\u5305 D. \u6709\u4e86vendor\u76ee\u5f55\u540e\uff0c\u6253\u5305\u5f53\u524d\u7684\u5de5\u7a0b\u4ee3\u7801\u5230\u5176\u4ed6\u673a\u5668\u7684$GOPATH/src\u4e0b\u90fd\u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1 \u53c2\u8003\u7b54\u6848\uff1aABD 37\u3001 [primary] flag\u662fbool\u578b\u53d8\u91cf\uff0c\u4e0b\u9762if\u8868\u8fbe\u5f0f\u7b26\u5408\u7f16\u7801\u89c4\u8303\u7684\u662f\uff08\uff09 A. if flag == 1 B. if flag C. if flag == false D. if !flag \u53c2\u8003\u7b54\u6848\uff1aBD 38\u3001 [primary] value\u662f\u6574\u578b\u53d8\u91cf\uff0c\u4e0b\u9762if\u8868\u8fbe\u5f0f\u7b26\u5408\u7f16\u7801\u89c4\u8303\u7684\u662f\uff08\uff09 A. if value == 0 B. if value C. if value != 0 D. if !value \u53c2\u8003\u7b54\u6848\uff1aAC 39\u3001 [intermediate] \u5173\u4e8e\u51fd\u6570\u8fd4\u56de\u503c\u7684\u9519\u8bef\u8bbe\u8ba1\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. \u5982\u679c\u5931\u8d25\u539f\u56e0\u53ea\u6709\u4e00\u4e2a\uff0c\u5219\u8fd4\u56debool B. \u5982\u679c\u5931\u8d25\u539f\u56e0\u8d85\u8fc7\u4e00\u4e2a\uff0c\u5219\u8fd4\u56deerror C. \u5982\u679c\u6ca1\u6709\u5931\u8d25\u539f\u56e0\uff0c\u5219\u4e0d\u8fd4\u56debool\u6216error D. \u5982\u679c\u91cd\u8bd5\u51e0\u6b21\u53ef\u4ee5\u907f\u514d\u5931\u8d25\uff0c\u5219\u4e0d\u8981\u7acb\u5373\u8fd4\u56debool\u6216error \u53c2\u8003\u7b54\u6848\uff1aABCD 40\u3001 [intermediate] \u5173\u4e8e\u5f02\u5e38\u8bbe\u8ba1\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. \u5728\u7a0b\u5e8f\u5f00\u53d1\u9636\u6bb5\uff0c\u575a\u6301\u901f\u9519\uff0c\u8ba9\u7a0b\u5e8f\u5f02\u5e38\u5d29\u6e83 B. \u5728\u7a0b\u5e8f\u90e8\u7f72\u540e\uff0c\u5e94\u6062\u590d\u5f02\u5e38\u907f\u514d\u7a0b\u5e8f\u7ec8\u6b62 C. \u4e00\u5207\u7686\u9519\u8bef\uff0c\u4e0d\u7528\u8fdb\u884c\u5f02\u5e38\u8bbe\u8ba1 D. \u5bf9\u4e8e\u4e0d\u5e94\u8be5\u51fa\u73b0\u7684\u5206\u652f\uff0c\u4f7f\u7528\u5f02\u5e38\u5904\u7406 \u53c2\u8003\u7b54\u6848\uff1aABD 41\u3001 [intermediate] \u5173\u4e8eslice\u6216map\u64cd\u4f5c\uff0c\u4e0b\u9762\u6b63\u786e\u7684\u662f\uff08\uff09 A. var s []int s = append(s,1) B. var m map[string]int m[\"one\"] = 1 C. var s []int s = make([]int, 0) s = append(s,1) D. var m map[string]int m = make(map[string]int) m[\"one\"] = 1 \u53c2\u8003\u7b54\u6848\uff1aACD 42\u3001 [intermediate] \u5173\u4e8echannel\u7684\u7279\u6027\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. \u7ed9\u4e00\u4e2a nil channel \u53d1\u9001\u6570\u636e\uff0c\u9020\u6210\u6c38\u8fdc\u963b\u585e B. \u4ece\u4e00\u4e2a nil channel \u63a5\u6536\u6570\u636e\uff0c\u9020\u6210\u6c38\u8fdc\u963b\u585e C. \u7ed9\u4e00\u4e2a\u5df2\u7ecf\u5173\u95ed\u7684 channel \u53d1\u9001\u6570\u636e\uff0c\u5f15\u8d77 panic D. \u4ece\u4e00\u4e2a\u5df2\u7ecf\u5173\u95ed\u7684 channel \u63a5\u6536\u6570\u636e\uff0c\u5982\u679c\u7f13\u51b2\u533a\u4e2d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u96f6\u503c \u53c2\u8003\u7b54\u6848\uff1aABCD 43\u3001 [intermediate] \u5173\u4e8e\u65e0\u7f13\u51b2\u548c\u6709\u51b2\u7a81\u7684channel\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. \u65e0\u7f13\u51b2\u7684channel\u662f\u9ed8\u8ba4\u7684\u7f13\u51b2\u4e3a1\u7684channel B. \u65e0\u7f13\u51b2\u7684channel\u548c\u6709\u7f13\u51b2\u7684channel\u90fd\u662f\u540c\u6b65\u7684 C. \u65e0\u7f13\u51b2\u7684channel\u548c\u6709\u7f13\u51b2\u7684channel\u90fd\u662f\u975e\u540c\u6b65\u7684 D. \u65e0\u7f13\u51b2\u7684channel\u662f\u540c\u6b65\u7684\uff0c\u800c\u6709\u7f13\u51b2\u7684channel\u662f\u975e\u540c\u6b65\u7684 \u53c2\u8003\u7b54\u6848\uff1aD 44\u3001 [intermediate] \u5173\u4e8e\u5f02\u5e38\u7684\u89e6\u53d1\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. \u7a7a\u6307\u9488\u89e3\u6790 B. \u4e0b\u6807\u8d8a\u754c C. \u9664\u6570\u4e3a0 D. \u8c03\u7528panic\u51fd\u6570 \u53c2\u8003\u7b54\u6848\uff1aABCD 45\u3001 [intermediate] \u5173\u4e8ecap\u51fd\u6570\u7684\u9002\u7528\u7c7b\u578b\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. array B. slice C. map D. channel \u53c2\u8003\u7b54\u6848\uff1aABD 46\u3001 [intermediate] \u5173\u4e8ebeego\u6846\u67b6\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. beego\u662f\u4e00\u4e2agolang\u5b9e\u73b0\u7684\u8f7b\u91cf\u7ea7HTTP\u6846\u67b6 B. beego\u53ef\u4ee5\u901a\u8fc7\u6ce8\u91ca\u8def\u7531\u3001\u6b63\u5219\u8def\u7531\u7b49\u591a\u79cd\u65b9\u5f0f\u5b8c\u6210url\u8def\u7531\u6ce8\u5165 C. \u53ef\u4ee5\u4f7f\u7528bee new\u5de5\u5177\u751f\u6210\u7a7a\u5de5\u7a0b\uff0c\u7136\u540e\u4f7f\u7528bee run\u547d\u4ee4\u81ea\u52a8\u70ed\u7f16\u8bd1 D. beego\u6846\u67b6\u53ea\u63d0\u4f9b\u4e86\u5bf9url\u8def\u7531\u7684\u5904\u7406\uff0c \u800c\u5bf9\u4e8eMVC\u67b6\u6784\u4e2d\u7684\u6570\u636e\u5e93\u90e8\u5206\u672a\u63d0\u4f9b\u6846\u67b6\u652f\u6301 \u53c2\u8003\u7b54\u6848\uff1aABC 47\u3001 [intermediate] \u5173\u4e8egoconvey\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. goconvey\u662f\u4e00\u4e2a\u652f\u6301golang\u7684\u5355\u5143\u6d4b\u8bd5\u6846\u67b6 B. goconvey\u80fd\u591f\u81ea\u52a8\u76d1\u63a7\u6587\u4ef6\u4fee\u6539\u5e76\u542f\u52a8\u6d4b\u8bd5\uff0c\u5e76\u53ef\u4ee5\u5c06\u6d4b\u8bd5\u7ed3\u679c\u5b9e\u65f6\u8f93\u51fa\u5230web\u754c\u9762 C. goconvey\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u65ad\u8a00\u7b80\u5316\u6d4b\u8bd5\u7528\u4f8b\u7684\u7f16\u5199 D. goconvey\u65e0\u6cd5\u4e0ego test\u96c6\u6210 \u53c2\u8003\u7b54\u6848\uff1aABC 48\u3001 [intermediate] \u5173\u4e8ego vet\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. go vet\u662fgolang\u81ea\u5e26\u5de5\u5177go tool vet\u7684\u5c01\u88c5 B. \u5f53\u6267\u884cgo vet database\u65f6\uff0c\u53ef\u4ee5\u5bf9database\u6240\u5728\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u5b50\u6587\u4ef6\u5939\u8fdb\u884c\u9012\u5f52\u68c0\u6d4b C. go vet\u53ef\u4ee5\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84\u3001\u76f8\u5bf9\u8def\u5f84\u6216\u76f8\u5bf9GOPATH\u7684\u8def\u5f84\u6307\u5b9a\u5f85\u68c0\u6d4b\u7684\u5305 D. go vet\u53ef\u4ee5\u68c0\u6d4b\u51fa\u6b7b\u4ee3\u7801 \u53c2\u8003\u7b54\u6848\uff1aACD 49\u3001 [intermediate] \u5173\u4e8emap\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. map\u53cd\u5e8f\u5217\u5316\u65f6json.unmarshal\u7684\u5165\u53c2\u5fc5\u987b\u4e3amap\u7684\u5730\u5740 B. \u5728\u51fd\u6570\u8c03\u7528\u4e2d\u4f20\u9012map\uff0c\u5219\u5b50\u51fd\u6570\u4e2d\u5bf9map\u5143\u7d20\u7684\u589e\u52a0\u4e0d\u4f1a\u5bfc\u81f4\u7236\u51fd\u6570\u4e2dmap\u7684\u4fee\u6539 C. \u5728\u51fd\u6570\u8c03\u7528\u4e2d\u4f20\u9012map\uff0c\u5219\u5b50\u51fd\u6570\u4e2d\u5bf9map\u5143\u7d20\u7684\u4fee\u6539\u4e0d\u4f1a\u5bfc\u81f4\u7236\u51fd\u6570\u4e2dmap\u7684\u4fee\u6539 D. \u4e0d\u80fd\u4f7f\u7528\u5185\u7f6e\u51fd\u6570delete\u5220\u9664map\u7684\u5143\u7d20 \u53c2\u8003\u7b54\u6848\uff1aA 50\u3001 [intermediate] \u5173\u4e8eGoStub\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. GoStub\u53ef\u4ee5\u5bf9\u5168\u5c40\u53d8\u91cf\u6253\u6869 B. GoStub\u53ef\u4ee5\u5bf9\u51fd\u6570\u6253\u6869 C. GoStub\u53ef\u4ee5\u5bf9\u7c7b\u7684\u6210\u5458\u65b9\u6cd5\u6253\u6869 D. GoStub\u53ef\u4ee5\u6253\u52a8\u6001\u6869\uff0c\u6bd4\u5982\u5bf9\u4e00\u4e2a\u51fd\u6570\u6253\u6869\u540e\uff0c\u591a\u6b21\u8c03\u7528\u8be5\u51fd\u6570\u4f1a\u6709\u4e0d\u540c\u7684\u884c\u4e3a \u53c2\u8003\u7b54\u6848\uff1aABD 51\u3001 [primary] \u5173\u4e8eselect\u673a\u5236\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. select\u673a\u5236\u7528\u6765\u5904\u7406\u5f02\u6b65IO\u95ee\u9898 B. select\u673a\u5236\u6700\u5927\u7684\u4e00\u6761\u9650\u5236\u5c31\u662f\u6bcf\u4e2acase\u8bed\u53e5\u91cc\u5fc5\u987b\u662f\u4e00\u4e2aIO\u64cd\u4f5c C. golang\u5728\u8bed\u8a00\u7ea7\u522b\u652f\u6301select\u5173\u952e\u5b57 D. select\u5173\u952e\u5b57\u7684\u7528\u6cd5\u4e0eswitch\u8bed\u53e5\u975e\u5e38\u7c7b\u4f3c\uff0c\u540e\u9762\u8981\u5e26\u5224\u65ad\u6761\u4ef6 \u53c2\u8003\u7b54\u6848\uff1aABC 52\u3001 [primary] \u5173\u4e8e\u5185\u5b58\u6cc4\u9732\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09 A. golang\u6709\u81ea\u52a8\u5783\u573e\u56de\u6536\uff0c\u4e0d\u5b58\u5728\u5185\u5b58\u6cc4\u9732 B. golang\u4e2d\u68c0\u6d4b\u5185\u5b58\u6cc4\u9732\u4e3b\u8981\u4f9d\u9760\u7684\u662fpprof\u5305 C. \u5185\u5b58\u6cc4\u9732\u53ef\u4ee5\u5728\u7f16\u8bd1\u9636\u6bb5\u53d1\u73b0 D. \u5e94\u5b9a\u671f\u4f7f\u7528\u6d4f\u89c8\u5668\u6765\u67e5\u770b\u7cfb\u7edf\u7684\u5b9e\u65f6\u5185\u5b58\u4fe1\u606f\uff0c\u53ca\u65f6\u53d1\u73b0\u5185\u5b58\u6cc4\u9732\u95ee\u9898 \u53c2\u8003\u7b54\u6848\uff1aBD \u586b\u7a7a\u9898 1\u3001 [primary] \u58f0\u660e\u4e00\u4e2a\u6574\u578b\u53d8\u91cfi _ ___ \u53c2\u8003\u7b54\u6848\uff1avar i int 2\u3001 [primary] \u58f0\u660e\u4e00\u4e2a\u542b\u670910\u4e2a\u5143\u7d20\u7684\u6574\u578b\u6570\u7ec4a _ ___ \u53c2\u8003\u7b54\u6848\uff1avar a [10]int 3\u3001 [primary] \u58f0\u660e\u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u5207\u7247s _ ___ \u53c2\u8003\u7b54\u6848\uff1avar s []int 4\u3001 [primary] \u58f0\u660e\u4e00\u4e2a\u6574\u578b\u6307\u9488\u53d8\u91cfp _ ___ \u53c2\u8003\u7b54\u6848\uff1avar p *int 5\u3001 [primary] \u58f0\u660e\u4e00\u4e2akey\u4e3a\u5b57\u7b26\u4e32\u578bvalue\u4e3a\u6574\u578b\u7684map\u53d8\u91cfm _ ___ \u53c2\u8003\u7b54\u6848\uff1avar m map[string]int 6\u3001 [primary] \u58f0\u660e\u4e00\u4e2a\u5165\u53c2\u548c\u8fd4\u56de\u503c\u5747\u4e3a\u6574\u578b\u7684\u51fd\u6570\u53d8\u91cff _ ___ \u53c2\u8003\u7b54\u6848\uff1avar f func(a int) int 7\u3001 [primary] \u58f0\u660e\u4e00\u4e2a\u53ea\u7528\u4e8e\u8bfb\u53d6int\u6570\u636e\u7684\u5355\u5411channel\u53d8\u91cfch _ ___ \u53c2\u8003\u7b54\u6848\uff1avar ch <-chan int 8\u3001 [primary] \u5047\u8bbe\u6e90\u6587\u4ef6\u7684\u547d\u540d\u4e3aslice.go\uff0c\u5219\u6d4b\u8bd5\u6587\u4ef6\u7684\u547d\u540d\u4e3a _ ___ \u53c2\u8003\u7b54\u6848\uff1aslice_test.go 9\u3001 [primary] go test\u8981\u6c42\u6d4b\u8bd5\u51fd\u6570\u7684\u524d\u7f00\u5fc5\u987b\u547d\u540d\u4e3a _ ___ \u53c2\u8003\u7b54\u6848\uff1aTest 10\u3001 [intermediate] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f _ ___ for i := 0; i < 5; i++ { defer fmt.Printf(\"%d \", i) } \u53c2\u8003\u7b54\u6848\uff1a4 3 2 1 0 11\u3001 [intermediate] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f _ ___ func main() { x := 1 { x := 2 fmt.Print(x) } fmt.Println(x) } \u53c2\u8003\u7b54\u6848\uff1a21 12\u3001 [intermediate] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f _ ___ func main() { strs := []string{\"one\", \"two\", \"three\"} for _, s := range strs { go func() { time.Sleep(1 * time.Second) fmt.Printf(\"%s \", s) }() } time.Sleep(3 * time.Second) } \u53c2\u8003\u7b54\u6848\uff1athree three three 13\u3001 [intermediate] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f _ ___ func main() { x := []string{\"a\", \"b\", \"c\"} for v := range x { fmt.Print(v) } } \u53c2\u8003\u7b54\u6848\uff1a012 14\u3001 [intermediate] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f _ ___ func main() { x := []string{\"a\", \"b\", \"c\"} for _, v := range x { fmt.Print(v) } } \u53c2\u8003\u7b54\u6848\uff1aabc 15\u3001 [primary] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f _ ___ func main() { i := 1 j := 2 i, j = j, i fmt.Printf(\"%d%d\\n\", i, j) } \u53c2\u8003\u7b54\u6848\uff1a21 16\u3001 [primary] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f _ ___ func incr(p *int) int { *p++ return *p } func main() { v := 1 incr(&v) fmt.Println(v) } \u53c2\u8003\u7b54\u6848\uff1a2 17\u3001 [primary] \u542f\u52a8\u4e00\u4e2agoroutine\u7684\u5173\u952e\u5b57\u662f _ ___ \u53c2\u8003\u7b54\u6848\uff1ago 18\u3001 [intermediate] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f _ ___ type Slice []int func NewSlice() Slice { return make(Slice, 0) } func (s* Slice) Add(elem int) *Slice { *s = append(*s, elem) fmt.Print(elem) return s } func main() { s := NewSlice() defer s.Add(1).Add(2) s.Add(3) } \u53c2\u8003\u7b54\u6848\uff1a132 \u5224\u65ad\u9898 1\u3001 [primary] \u6570\u7ec4\u662f\u4e00\u4e2a\u503c\u7c7b\u578b\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aT 2\u3001 [primary] \u4f7f\u7528map\u4e0d\u9700\u8981\u5f15\u5165\u4efb\u4f55\u5e93\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aT 3\u3001 [intermediate] \u5185\u7f6e\u51fd\u6570delete\u53ef\u4ee5\u5220\u9664\u6570\u7ec4\u5207\u7247\u5185\u7684\u5143\u7d20\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aF 4\u3001 [primary] \u6307\u9488\u662f\u57fa\u7840\u7c7b\u578b\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aF 5\u3001 [primary] interface{}\u662f\u53ef\u4ee5\u6307\u5411\u4efb\u610f\u5bf9\u8c61\u7684Any\u7c7b\u578b\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aT 6\u3001 [intermediate] \u4e0b\u9762\u5173\u4e8e\u6587\u4ef6\u64cd\u4f5c\u7684\u4ee3\u7801\u53ef\u80fd\u89e6\u53d1\u5f02\u5e38\uff08\uff09 file, err := os.Open(\"test.go\") defer file.Close() if err != nil { fmt.Println(\"open file failed:\", err) return } ... \u53c2\u8003\u7b54\u6848\uff1aT 7\u3001 [primary] Golang\u4e0d\u652f\u6301\u81ea\u52a8\u5783\u573e\u56de\u6536\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aF 8\u3001 [primary] Golang\u652f\u6301\u53cd\u5c04\uff0c\u53cd\u5c04\u6700\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u662f\u505a\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aT 9\u3001 [primary] Golang\u53ef\u4ee5\u590d\u7528C/C++\u7684\u6a21\u5757\uff0c\u8fd9\u4e2a\u529f\u80fd\u53ebCgo\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aF 10\u3001 [primary] \u4e0b\u9762\u4ee3\u7801\u4e2d\u4e24\u4e2a\u659c\u70b9\u4e4b\u95f4\u7684\u4ee3\u7801\uff0c\u6bd4\u5982 json:\"x\" \uff0c\u4f5c\u7528\u662fX\u5b57\u6bb5\u5728\u4ece\u7ed3\u6784\u4f53\u5b9e\u4f8b\u7f16\u7801\u5230JSON\u6570\u636e\u683c\u5f0f\u7684\u65f6\u5019\uff0c\u4f7f\u7528x\u4f5c\u4e3a\u540d\u5b57\uff0c\u8fd9\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u79cd\u91cd\u547d\u540d\u7684\u65b9\u5f0f\uff08\uff09 type Position struct { X int `json:\"x\"` Y int `json:\"y\"` Z int `json:\"z\"` } \u53c2\u8003\u7b54\u6848\uff1aT 11\u3001 [primary] \u901a\u8fc7\u6210\u5458\u53d8\u91cf\u6216\u51fd\u6570\u9996\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u6765\u51b3\u5b9a\u5176\u4f5c\u7528\u57df\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aT 12\u3001 [primary] \u5bf9\u4e8e\u5e38\u91cf\u5b9a\u4e49zero(const zero = 0.0)\uff0czero\u662f\u6d6e\u70b9\u578b\u5e38\u91cf\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aF 13\u3001 [primary] \u5bf9\u53d8\u91cfx\u7684\u53d6\u53cd\u64cd\u4f5c\u662f~x\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aF 14\u3001 [primary] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662fxello\uff08\uff09 func main() { str := \"hello\" str[0] = 'x' fmt.Println(str) } \u53c2\u8003\u7b54\u6848\uff1aF 15\u3001 [primary] golang\u652f\u6301goto\u8bed\u53e5\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aT 16\u3001 [primary] \u4e0b\u9762\u4ee3\u7801\u4e2d\u7684\u6307\u9488p\u4e3a\u91ce\u6307\u9488\uff0c\u56e0\u4e3a\u8fd4\u56de\u7684\u6808\u5185\u5b58\u5728\u51fd\u6570\u7ed3\u675f\u65f6\u4f1a\u88ab\u91ca\u653e\uff08\uff09 type TimesMatcher struct { base int } func NewTimesMatcher(base int) *TimesMatcher{ return &TimesMatcher{base:base} } func main() { p := NewTimesMatcher(3) ... } \u53c2\u8003\u7b54\u6848\uff1aF 17\u3001 [primary] \u533f\u540d\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf\u6216\u8005\u76f4\u63a5\u6267\u884c\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aT 18\u3001 [primary] \u5982\u679c\u8c03\u7528\u65b9\u8c03\u7528\u4e86\u4e00\u4e2a\u5177\u6709\u591a\u8fd4\u56de\u503c\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u5374\u4e0d\u60f3\u5173\u5fc3\u5176\u4e2d\u7684\u67d0\u4e2a\u8fd4\u56de\u503c\uff0c\u53ef\u4ee5\u7b80\u5355\u5730\u7528\u4e00\u4e2a\u4e0b\u5212\u7ebf\u201c_\u201d\u6765\u8df3\u8fc7\u8fd9\u4e2a\u8fd4\u56de\u503c\uff0c\u8be5\u4e0b\u5212\u7ebf\u5bf9\u5e94\u7684\u53d8\u91cf\u53eb\u533f\u540d\u53d8\u91cf\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aT 19\u3001 [primary] \u5728\u51fd\u6570\u7684\u591a\u8fd4\u56de\u503c\u4e2d\uff0c\u5982\u679c\u6709error\u6216bool\u7c7b\u578b\uff0c\u5219\u4e00\u822c\u653e\u5728\u6700\u540e\u4e00\u4e2a\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aT 20\u3001 [primary] \u9519\u8bef\u662f\u4e1a\u52a1\u8fc7\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u800c\u5f02\u5e38\u4e0d\u662f\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aT 21\u3001 [primary] \u51fd\u6570\u6267\u884c\u65f6\uff0c\u5982\u679c\u7531\u4e8epanic\u5bfc\u81f4\u4e86\u5f02\u5e38\uff0c\u5219\u5ef6\u8fdf\u51fd\u6570\u4e0d\u4f1a\u6267\u884c\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aF 22\u3001 [intermediate] \u5f53\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u5982\u679c\u9047\u5230\u5f15\u7528\u7a7a\u6307\u9488\u3001\u4e0b\u6807\u8d8a\u754c\u6216\u663e\u5f0f\u8c03\u7528panic\u51fd\u6570\u7b49\u60c5\u51b5\uff0c\u5219\u5148\u89e6\u53d1panic\u51fd\u6570\u7684\u6267\u884c\uff0c\u7136\u540e\u8c03\u7528\u5ef6\u8fdf\u51fd\u6570\u3002\u8c03\u7528\u8005\u7ee7\u7eed\u4f20\u9012panic\uff0c\u56e0\u6b64\u8be5\u8fc7\u7a0b\u4e00\u76f4\u5728\u8c03\u7528\u6808\u4e2d\u91cd\u590d\u53d1\u751f\uff1a\u51fd\u6570\u505c\u6b62\u6267\u884c\uff0c\u8c03\u7528\u5ef6\u8fdf\u6267\u884c\u51fd\u6570\u3002\u5982\u679c\u4e00\u8def\u5728\u5ef6\u8fdf\u51fd\u6570\u4e2d\u6ca1\u6709recover\u51fd\u6570\u7684\u8c03\u7528\uff0c\u5219\u4f1a\u5230\u8fbe\u8be5\u643a\u7a0b\u7684\u8d77\u70b9\uff0c\u8be5\u643a\u7a0b\u7ed3\u675f\uff0c\u7136\u540e\u7ec8\u6b62\u5176\u4ed6\u6240\u6709\u643a\u7a0b\uff0c\u5176\u4ed6\u643a\u7a0b\u7684\u7ec8\u6b62\u8fc7\u7a0b\u4e5f\u662f\u91cd\u590d\u53d1\u751f\uff1a\u51fd\u6570\u505c\u6b62\u6267\u884c\uff0c\u8c03\u7528\u5ef6\u8fdf\u6267\u884c\u51fd\u6570\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aF 23\u3001 [primary] \u540c\u7ea7\u6587\u4ef6\u7684\u5305\u540d\u4e0d\u5141\u8bb8\u6709\u591a\u4e2a\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aT 24\u3001 [intermediate] \u53ef\u4ee5\u7ed9\u4efb\u610f\u7c7b\u578b\u6dfb\u52a0\u76f8\u5e94\u7684\u65b9\u6cd5\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aF 25\u3001 [primary] golang\u867d\u7136\u6ca1\u6709\u663e\u5f0f\u7684\u63d0\u4f9b\u7ee7\u627f\u8bed\u6cd5\uff0c\u4f46\u662f\u901a\u8fc7\u533f\u540d\u7ec4\u5408\u5b9e\u73b0\u4e86\u7ee7\u627f\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aT 26\u3001 [primary] \u4f7f\u7528for range\u8fed\u4ee3map\u65f6\u6bcf\u6b21\u8fed\u4ee3\u7684\u987a\u5e8f\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u56e0\u4e3amap\u7684\u8fed\u4ee3\u662f\u968f\u673a\u7684\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aT 27\u3001 [primary] switch\u540e\u9762\u53ef\u4ee5\u4e0d\u8ddf\u8868\u8fbe\u5f0f\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aT 28\u3001 [intermediate] \u7ed3\u6784\u4f53\u5728\u5e8f\u5217\u5316\u65f6\u975e\u5bfc\u51fa\u53d8\u91cf\uff08\u4ee5\u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u53d8\u91cf\u540d\uff09\u4e0d\u4f1a\u88abencode\uff0c\u56e0\u6b64\u5728decode\u65f6\u8fd9\u4e9b\u975e\u5bfc\u51fa\u53d8\u91cf\u7684\u503c\u4e3a\u5176\u7c7b\u578b\u7684\u96f6\u503c\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aT 29\u3001 [primary] golang\u4e2d\u6ca1\u6709\u6784\u9020\u51fd\u6570\u7684\u6982\u5ff5\uff0c\u5bf9\u8c61\u7684\u521b\u5efa\u901a\u5e38\u4ea4\u7531\u4e00\u4e2a\u5168\u5c40\u7684\u521b\u5efa\u51fd\u6570\u6765\u5b8c\u6210\uff0c\u4ee5NewXXX\u6765\u547d\u540d\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aT 30\u3001 [intermediate] \u5f53\u51fd\u6570deferDemo\u8fd4\u56de\u5931\u8d25\u65f6\uff0c\u5e76\u4e0d\u80fddestroy\u5df2create\u6210\u529f\u7684\u8d44\u6e90\uff08\uff09 func deferDemo() error { err := createResource1() if err != nil { return ERR_CREATE_RESOURCE1_FAILED } defer func() { if err != nil { destroyResource1() } }() err = createResource2() if err != nil { return ERR_CREATE_RESOURCE2_FAILED } defer func() { if err != nil { destroyResource2() } }() err = createResource3() if err != nil { return ERR_CREATE_RESOURCE3_FAILED } return nil } \u53c2\u8003\u7b54\u6848\uff1aF 31\u3001 [intermediate] channel\u672c\u8eab\u5fc5\u7136\u662f\u540c\u65f6\u652f\u6301\u8bfb\u5199\u7684\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u5355\u5411channel\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aF 32\u3001 [primary] import\u540e\u9762\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f\u5305\u540d\uff08\uff09 \u53c2\u8003\u7b54\u6848\uff1aF","title":"Golang\u7cbe\u7f16100\u9898"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#_1","text":"\u7ea7\u522b \u6a21\u578b \u521d\u7ea7 primary \u719f\u6089\u57fa\u672c\u8bed\u6cd5\uff0c\u80fd\u591f\u770b\u61c2\u4ee3\u7801\u7684\u610f\u56fe\uff1b \u5728\u4ed6\u4eba\u6307\u5bfc\u4e0b\u80fd\u591f\u5b8c\u6210\u7528\u6237\u6545\u4e8b\u7684\u5f00\u53d1\uff0c\u7f16\u5199\u7684\u4ee3\u7801\u7b26\u5408CleanCode\u89c4\u8303\uff1b \u4e2d\u7ea7 intermediate \u80fd\u591f\u72ec\u7acb\u5b8c\u6210\u7528\u6237\u6545\u4e8b\u7684\u5f00\u53d1\u548c\u6d4b\u8bd5\uff1b \u80fd\u591f\u55c5\u51fa\u4ee3\u7801\u7684\u574f\u5473\u9053\uff0c\u5e76\u77e5\u9053\u5982\u4f55\u91cd\u6784\u8fbe\u6210\u76ee\u6807\uff1b \u9ad8\u7ea7 senior \u80fd\u591f\u5f00\u53d1\u51fa\u9ad8\u8d28\u91cf\u9ad8\u6027\u80fd\u7684\u4ee3\u7801\uff1b \u80fd\u591f\u719f\u7ec3\u4f7f\u7528\u9ad8\u7ea7\u7279\u6027\uff0c\u5f00\u53d1\u7f16\u7a0b\u6846\u67b6\u6216\u6d4b\u8bd5\u6846\u67b6\uff1b","title":"\u80fd\u529b\u6a21\u578b"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#_2","text":"","title":"\u9009\u62e9\u9898"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#1primary","text":"A. func B. def C. struct D. class \u53c2\u8003\u7b54\u6848\uff1aAC","title":"1\u3001[primary] \u4e0b\u9762\u5c5e\u4e8e\u5173\u952e\u5b57\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#2primary","text":"A. var str string B. str := \"\" C. str = \"\" D. var str = \"\" \u53c2\u8003\u7b54\u6848\uff1aAD","title":"2\u3001[primary] \u5b9a\u4e49\u4e00\u4e2a\u5305\u5185\u5168\u5c40\u5b57\u7b26\u4e32\u53d8\u91cf\uff0c\u4e0b\u9762\u8bed\u6cd5\u6b63\u786e\u7684\u662f \uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#3primary-p-name","text":"A. p.name B. (*p).name C. (&p).name D. p->name \u53c2\u8003\u7b54\u6848\uff1aAB","title":"3\u3001[primary] \u901a\u8fc7\u6307\u9488\u53d8\u91cf p \u8bbf\u95ee\u5176\u6210\u5458\u53d8\u91cf name\uff0c\u4e0b\u9762\u8bed\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#4primary","text":"A. \u4e00\u4e2a\u7c7b\u53ea\u9700\u8981\u5b9e\u73b0\u4e86\u63a5\u53e3\u8981\u6c42\u7684\u6240\u6709\u51fd\u6570\uff0c\u6211\u4eec\u5c31\u8bf4\u8fd9\u4e2a\u7c7b\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3 B. \u5b9e\u73b0\u7c7b\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u5173\u5fc3\u81ea\u5df1\u5e94\u8be5\u63d0\u4f9b\u54ea\u4e9b\u65b9\u6cd5\uff0c\u4e0d\u7528\u518d\u7ea0\u7ed3\u63a5\u53e3\u9700\u8981\u62c6\u5f97\u591a\u7ec6\u624d\u5408\u7406 C. \u7c7b\u5b9e\u73b0\u63a5\u53e3\u65f6\uff0c\u9700\u8981\u5bfc\u5165\u63a5\u53e3\u6240\u5728\u7684\u5305 D. \u63a5\u53e3\u7531\u4f7f\u7528\u65b9\u6309\u81ea\u8eab\u9700\u6c42\u6765\u5b9a\u4e49\uff0c\u4f7f\u7528\u65b9\u65e0\u9700\u5173\u5fc3\u662f\u5426\u6709\u5176\u4ed6\u6a21\u5757\u5b9a\u4e49\u8fc7\u7c7b\u4f3c\u7684\u63a5\u53e3 \u53c2\u8003\u7b54\u6848\uff1aABD","title":"4\u3001[primary] \u5173\u4e8e\u63a5\u53e3\u548c\u7c7b\u7684\u8bf4\u6cd5\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#5primary","text":"A. str := \u2018abc\u2019 + \u2018123\u2019 B. str := \"abc\" + \"123\" C. str \uff1a= '123' + \"abc\" D. fmt.Sprintf(\"abc%d\", 123) \u53c2\u8003\u7b54\u6848\uff1aBD","title":"5\u3001[primary] \u5173\u4e8e\u5b57\u7b26\u4e32\u8fde\u63a5\uff0c\u4e0b\u9762\u8bed\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#6primary","text":"A. \u534f\u7a0b\u548c\u7ebf\u7a0b\u90fd\u53ef\u4ee5\u5b9e\u73b0\u7a0b\u5e8f\u7684\u5e76\u53d1\u6267\u884c B. \u7ebf\u7a0b\u6bd4\u534f\u7a0b\u66f4\u8f7b\u91cf\u7ea7 C. \u534f\u7a0b\u4e0d\u5b58\u5728\u6b7b\u9501\u95ee\u9898 D. \u901a\u8fc7channel\u6765\u8fdb\u884c\u534f\u7a0b\u95f4\u7684\u901a\u4fe1 \u53c2\u8003\u7b54\u6848\uff1aAD","title":"6\u3001[primary] \u5173\u4e8e\u534f\u7a0b\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#7intermediate-init","text":"A. \u4e00\u4e2a\u5305\u4e2d\uff0c\u53ef\u4ee5\u5305\u542b\u591a\u4e2ainit\u51fd\u6570 B. \u7a0b\u5e8f\u7f16\u8bd1\u65f6\uff0c\u5148\u6267\u884c\u5bfc\u5165\u5305\u7684init\u51fd\u6570\uff0c\u518d\u6267\u884c\u672c\u5305\u5185\u7684init\u51fd\u6570 C. main\u5305\u4e2d\uff0c\u4e0d\u80fd\u6709init\u51fd\u6570 D. init\u51fd\u6570\u53ef\u4ee5\u88ab\u5176\u4ed6\u51fd\u6570\u8c03\u7528 \u53c2\u8003\u7b54\u6848\uff1aAB","title":"7\u3001[intermediate] \u5173\u4e8einit\u51fd\u6570\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#8primary","text":"A. \u5faa\u73af\u8bed\u53e5\u65e2\u652f\u6301for\u5173\u952e\u5b57\uff0c\u4e5f\u652f\u6301while\u548cdo-while B. \u5173\u952e\u5b57for\u7684\u57fa\u672c\u4f7f\u7528\u65b9\u6cd5\u4e0eC/C++\u4e2d\u6ca1\u6709\u4efb\u4f55\u5dee\u5f02 C. for\u5faa\u73af\u652f\u6301continue\u548cbreak\u6765\u63a7\u5236\u5faa\u73af\uff0c\u4f46\u662f\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u66f4\u9ad8\u7ea7\u7684break\uff0c\u53ef\u4ee5\u9009\u62e9\u4e2d\u65ad\u54ea\u4e00\u4e2a\u5faa\u73af D. for\u5faa\u73af\u4e0d\u652f\u6301\u4ee5\u9017\u53f7\u4e3a\u95f4\u9694\u7684\u591a\u4e2a\u8d4b\u503c\u8bed\u53e5\uff0c\u5fc5\u987b\u4f7f\u7528\u5e73\u884c\u8d4b\u503c\u7684\u65b9\u5f0f\u6765\u521d\u59cb\u5316\u591a\u4e2a\u53d8\u91cf \u53c2\u8003\u7b54\u6848\uff1aCD","title":"8\u3001[primary] \u5173\u4e8e\u5faa\u73af\u8bed\u53e5\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u6709\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#9intermediate","text":"func add(args ...int) int { sum := 0 for _, arg := range args { sum += arg } return sum } \u4e0b\u9762\u5bf9add\u51fd\u6570\u8c03\u7528\u6b63\u786e\u7684\u662f\uff08\uff09 A. add(1, 2) B. add(1, 3, 7) C. add([]int{1, 2}) D. add([]int{1, 3, 7}...) \u53c2\u8003\u7b54\u6848\uff1aABD","title":"9\u3001[intermediate] \u5bf9\u4e8e\u51fd\u6570\u5b9a\u4e49\uff1a"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#10primary","text":"A. type MyInt int var i int = 1 var j MyInt = i B. type MyInt int var i int = 1 var j MyInt = (MyInt)i C. type MyInt int var i int = 1 var j MyInt = MyInt(i) D. type MyInt int var i int = 1 var j MyInt = i.(MyInt) \u53c2\u8003\u7b54\u6848\uff1aC","title":"10\u3001[primary] \u5173\u4e8e\u7c7b\u578b\u8f6c\u5316\uff0c\u4e0b\u9762\u8bed\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#11primary","text":"A. var i int = 10 B. var i = 10 C. i := 10 D. i = 10 \u53c2\u8003\u7b54\u6848\uff1aABC","title":"11\u3001[primary] \u5173\u4e8e\u5c40\u90e8\u53d8\u91cf\u7684\u521d\u59cb\u5316\uff0c\u4e0b\u9762\u6b63\u786e\u7684\u4f7f\u7528\u65b9\u5f0f\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#12primary-const","text":"A. const Pi float64 = 3.14159265358979323846 const zero = 0.0 B. const ( size int64 = 1024 eof = -1 ) C. const ( ERR_ELEM_EXIST error = errors.New(\"element already exists\") ERR_ELEM_NT_EXIST error = errors.New(\"element not exists\") ) D. const u, v float32 = 0, 3 const a, b, c = 3, 4, \"foo\" \u53c2\u8003\u7b54\u6848\uff1aABD","title":"12\u3001[primary] \u5173\u4e8econst\u5e38\u91cf\u5b9a\u4e49\uff0c\u4e0b\u9762\u6b63\u786e\u7684\u4f7f\u7528\u65b9\u5f0f\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#13primary-b","text":"A. b = true B. b = 1 C. b = bool(1) D. b = (1 == 2) \u53c2\u8003\u7b54\u6848\uff1aBC","title":"13\u3001[primary] \u5173\u4e8e\u5e03\u5c14\u53d8\u91cfb\u7684\u8d4b\u503c\uff0c\u4e0b\u9762\u9519\u8bef\u7684\u7528\u6cd5\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#14intermediate","text":"func main() { if (true) { defer fmt.Printf(\"1\") } else { defer fmt.Printf(\"2\") } fmt.Printf(\"3\") } A. 321 B. 32 C. 31 D. 13 \u53c2\u8003\u7b54\u6848\uff1aC","title":"14\u3001[intermediate] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#15primary-switch","text":"A. \u6761\u4ef6\u8868\u8fbe\u5f0f\u5fc5\u987b\u4e3a\u5e38\u91cf\u6216\u8005\u6574\u6570 B. \u5355\u4e2acase\u4e2d\uff0c\u53ef\u4ee5\u51fa\u73b0\u591a\u4e2a\u7ed3\u679c\u9009\u9879 C. \u9700\u8981\u7528break\u6765\u660e\u786e\u9000\u51fa\u4e00\u4e2acase D. \u53ea\u6709\u5728case\u4e2d\u660e\u786e\u6dfb\u52a0fallthrough\u5173\u952e\u5b57\uff0c\u624d\u4f1a\u7ee7\u7eed\u6267\u884c\u7d27\u8ddf\u7684\u4e0b\u4e00\u4e2acase \u53c2\u8003\u7b54\u6848\uff1aBD","title":"15\u3001[primary] \u5173\u4e8eswitch\u8bed\u53e5\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u6709\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#16intermediate-golangthis","text":"A. \u65b9\u6cd5\u65bd\u52a0\u7684\u5bf9\u8c61\u663e\u5f0f\u4f20\u9012\uff0c\u6ca1\u6709\u88ab\u9690\u85cf\u8d77\u6765 B. golang\u6cbf\u88ad\u4e86\u4f20\u7edf\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u7684\u8bf8\u591a\u6982\u5ff5\uff0c\u6bd4\u5982\u7ee7\u627f\u3001\u865a\u51fd\u6570\u548c\u6784\u9020\u51fd\u6570 C. golang\u7684\u9762\u5411\u5bf9\u8c61\u8868\u8fbe\u66f4\u76f4\u89c2\uff0c\u5bf9\u4e8e\u9762\u5411\u8fc7\u7a0b\u53ea\u662f\u6362\u4e86\u4e00\u79cd\u8bed\u6cd5\u5f62\u5f0f\u6765\u8868\u8fbe D. \u65b9\u6cd5\u65bd\u52a0\u7684\u5bf9\u8c61\u4e0d\u9700\u8981\u975e\u5f97\u662f\u6307\u9488\uff0c\u4e5f\u4e0d\u7528\u975e\u5f97\u53ebthis \u53c2\u8003\u7b54\u6848\uff1aACD","title":"16\u3001[intermediate] golang\u4e2d\u6ca1\u6709\u9690\u85cf\u7684this\u6307\u9488\uff0c\u8fd9\u53e5\u8bdd\u7684\u542b\u4e49\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#17intermediate-golang","text":"A. \u6570\u7ec4\u5207\u7247 B. map C. channel D. interface \u53c2\u8003\u7b54\u6848\uff1aABCD","title":"17\u3001[intermediate] golang\u4e2d\u7684\u5f15\u7528\u7c7b\u578b\u5305\u62ec\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#18intermediate-golang","text":"A. \u53ef\u4ee5\u5bf9\u6307\u9488\u8fdb\u884c\u81ea\u589e\u6216\u81ea\u51cf\u8fd0\u7b97 B. \u53ef\u4ee5\u901a\u8fc7\u201c&\u201d\u53d6\u6307\u9488\u7684\u5730\u5740 C. \u53ef\u4ee5\u901a\u8fc7\u201c*\u201d\u53d6\u6307\u9488\u6307\u5411\u7684\u6570\u636e D. \u53ef\u4ee5\u5bf9\u6307\u9488\u8fdb\u884c\u4e0b\u6807\u8fd0\u7b97 \u53c2\u8003\u7b54\u6848\uff1aBC","title":"18\u3001[intermediate] golang\u4e2d\u7684\u6307\u9488\u8fd0\u7b97\u5305\u62ec\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#19primary-main","text":"A. main\u51fd\u6570\u4e0d\u80fd\u5e26\u53c2\u6570 B. main\u51fd\u6570\u4e0d\u80fd\u5b9a\u4e49\u8fd4\u56de\u503c C. main\u51fd\u6570\u6240\u5728\u7684\u5305\u5fc5\u987b\u4e3amain\u5305 D. main\u51fd\u6570\u4e2d\u53ef\u4ee5\u4f7f\u7528flag\u5305\u6765\u83b7\u53d6\u548c\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570 \u53c2\u8003\u7b54\u6848\uff1aABCD","title":"19\u3001[primary] \u5173\u4e8emain\u51fd\u6570\uff08\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u6267\u884c\u8d77\u70b9\uff09\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#20intermediate","text":"A. var x = nil B. var x interface{} = nil C. var x string = nil D. var x error = nil \u53c2\u8003\u7b54\u6848\uff1aBD","title":"20\u3001[intermediate] \u4e0b\u9762\u8d4b\u503c\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#21intermediate","text":"A. s := make([]int) B. s := make([]int, 0) C. s := make([]int, 5, 10) D. s := []int{1, 2, 3, 4, 5} \u53c2\u8003\u7b54\u6848\uff1aBCD","title":"21\u3001[intermediate] \u5173\u4e8e\u6574\u578b\u5207\u7247\u7684\u521d\u59cb\u5316\uff0c\u4e0b\u9762\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#22intermediate","text":"A. func (s *Slice)Remove(value interface{}) error { for i, v := range *s { if isEqual(value, v) { if i== len(*s) - 1 { *s = (*s)[:i] }else { *s = append((*s)[:i],(*s)[i + 2:]...) } return nil } } return ERR_ELEM_NT_EXIST } B. func (s *Slice)Remove(value interface{}) error { for i, v := range *s { if isEqual(value, v) { *s = append((*s)[:i],(*s)[i + 1:]) return nil } } return ERR_ELEM_NT_EXIST } C. func (s *Slice)Remove(value interface{}) error { for i, v := range *s { if isEqual(value, v) { delete(*s, v) return nil } } return ERR_ELEM_NT_EXIST } D. func (s *Slice)Remove(value interface{}) error { for i, v := range *s { if isEqual(value, v) { *s = append((*s)[:i],(*s)[i + 1:]...) return nil } } return ERR_ELEM_NT_EXIST } \u53c2\u8003\u7b54\u6848\uff1aD","title":"22\u3001[intermediate] \u4ece\u5207\u7247\u4e2d\u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u4e0b\u9762\u7684\u7b97\u6cd5\u5b9e\u73b0\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#23primary-x","text":"A. x := []int{ 1, 2, 3, 4, 5, 6, } B. x := []int{ 1, 2, 3, 4, 5, 6 } C. x := []int{ 1, 2, 3, 4, 5, 6} D. x := []int{1, 2, 3, 4, 5, 6,} \u53c2\u8003\u7b54\u6848\uff1aACD","title":"23\u3001[primary] \u5bf9\u4e8e\u5c40\u90e8\u53d8\u91cf\u6574\u578b\u5207\u7247x\u7684\u8d4b\u503c\uff0c\u4e0b\u9762\u5b9a\u4e49\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#24primary","text":"A. i := 1 i++ B. i := 1 j = i++ C. i := 1 ++i D. i := 1 i-- \u53c2\u8003\u7b54\u6848\uff1aAD","title":"24\u3001[primary] \u5173\u4e8e\u53d8\u91cf\u7684\u81ea\u589e\u548c\u81ea\u51cf\u64cd\u4f5c\uff0c\u4e0b\u9762\u8bed\u53e5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#25intermediate","text":"A. func f(a, b int) (value int, err error) B. func f(a int, b int) (value int, err error) C. func f(a, b int) (value int, error) D. func f(a int, b int) (int, int, error) \u53c2\u8003\u7b54\u6848\uff1aC","title":"25\u3001[intermediate] \u5173\u4e8e\u51fd\u6570\u58f0\u660e\uff0c\u4e0b\u9762\u8bed\u6cd5\u9519\u8bef\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#26intermediate-add","text":"func main() { var a Integer = 1 var b Integer = 2 var i interface{} = &a sum := i.(*Integer).Add(b) fmt.Println(sum) }","title":"26\u3001[intermediate] \u5982\u679cAdd\u51fd\u6570\u7684\u8c03\u7528\u4ee3\u7801\u4e3a\uff1a"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#27add","text":"A. type Integer int func (a Integer) Add(b Integer) Integer { return a + b } B. type Integer int func (a Integer) Add(b *Integer) Integer { return a + *b } C. type Integer int func (a *Integer) Add(b Integer) Integer { return *a + b } D. type Integer int func (a *Integer) Add(b *Integer) Integer { return *a + *b } \u53c2\u8003\u7b54\u6848\uff1aAC","title":"27\u3001\u5219Add\u51fd\u6570\u5b9a\u4e49\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#28intermediate-add","text":"func main() { var a Integer = 1 var b Integer = 2 var i interface{} = a sum := i.(Integer).Add(b) fmt.Println(sum) }","title":"28\u3001[intermediate] \u5982\u679cAdd\u51fd\u6570\u7684\u8c03\u7528\u4ee3\u7801\u4e3a\uff1a"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#29add","text":"A. type Integer int func (a Integer) Add(b Integer) Integer { return a + b } B. type Integer int func (a Integer) Add(b *Integer) Integer { return a + *b } C. type Integer int func (a *Integer) Add(b Integer) Integer { return *a + b } D. type Integer int func (a *Integer) Add(b *Integer) Integer { return *a + *b } \u53c2\u8003\u7b54\u6848\uff1aA","title":"29\u3001\u5219Add\u51fd\u6570\u5b9a\u4e49\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#30intermediate-getpodaction","text":"type Fragment interface { Exec(transInfo *TransInfo) error } type GetPodAction struct { } func (g GetPodAction) Exec(transInfo *TransInfo) error { ... return nil } A. var fragment Fragment = new(GetPodAction) B. var fragment Fragment = GetPodAction C. var fragment Fragment = &GetPodAction{} D. var fragment Fragment = GetPodAction{} \u53c2\u8003\u7b54\u6848\uff1aACD","title":"30\u3001[intermediate] \u5173\u4e8eGetPodAction\u5b9a\u4e49\uff0c\u4e0b\u9762\u8d4b\u503c\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#31intermediate-gomock","text":"A. GoMock\u53ef\u4ee5\u5bf9interface\u6253\u6869 B. GoMock\u53ef\u4ee5\u5bf9\u7c7b\u7684\u6210\u5458\u51fd\u6570\u6253\u6869 C. GoMock\u53ef\u4ee5\u5bf9\u51fd\u6570\u6253\u6869 D. GoMock\u6253\u6869\u540e\u7684\u4f9d\u8d56\u6ce8\u5165\u53ef\u4ee5\u901a\u8fc7GoStub\u5b8c\u6210 \u53c2\u8003\u7b54\u6848\uff1aAD","title":"31\u3001[intermediate] \u5173\u4e8eGoMock\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#32intermediate","text":"A. \u53ea\u8981\u4e24\u4e2a\u63a5\u53e3\u62e5\u6709\u76f8\u540c\u7684\u65b9\u6cd5\u5217\u8868\uff08\u6b21\u5e8f\u4e0d\u540c\u4e0d\u8981\u7d27\uff09\uff0c\u90a3\u4e48\u5b83\u4eec\u5c31\u662f\u7b49\u4ef7\u7684\uff0c\u53ef\u4ee5\u76f8\u4e92\u8d4b\u503c B. \u5982\u679c\u63a5\u53e3A\u7684\u65b9\u6cd5\u5217\u8868\u662f\u63a5\u53e3B\u7684\u65b9\u6cd5\u5217\u8868\u7684\u5b50\u96c6\uff0c\u90a3\u4e48\u63a5\u53e3B\u53ef\u4ee5\u8d4b\u503c\u7ed9\u63a5\u53e3A C. \u63a5\u53e3\u67e5\u8be2\u662f\u5426\u6210\u529f\uff0c\u8981\u5728\u8fd0\u884c\u671f\u624d\u80fd\u591f\u786e\u5b9a D. \u63a5\u53e3\u8d4b\u503c\u662f\u5426\u53ef\u884c\uff0c\u8981\u5728\u8fd0\u884c\u671f\u624d\u80fd\u591f\u786e\u5b9a \u53c2\u8003\u7b54\u6848\uff1aABC","title":"32\u3001[intermediate] \u5173\u4e8e\u63a5\u53e3\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#33primary-channel","text":"A. var ch chan int B. ch := make(chan int) C. <- ch D. ch <- \u53c2\u8003\u7b54\u6848\uff1aABC","title":"33\u3001[primary] \u5173\u4e8echannel\uff0c\u4e0b\u9762\u8bed\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#34primary","text":"A. \u5f53\u4e00\u4e2agoroutine\u83b7\u5f97\u4e86Mutex\u540e\uff0c\u5176\u4ed6goroutine\u5c31\u53ea\u80fd\u4e56\u4e56\u7684\u7b49\u5f85\uff0c\u9664\u975e\u8be5goroutine\u91ca\u653e\u8fd9\u4e2aMutex B. RWMutex\u5728\u8bfb\u9501\u5360\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u963b\u6b62\u5199\uff0c\u4f46\u4e0d\u963b\u6b62\u8bfb C. RWMutex\u5728\u5199\u9501\u5360\u7528\u60c5\u51b5\u4e0b\uff0c\u4f1a\u963b\u6b62\u4efb\u4f55\u5176\u4ed6goroutine\uff08\u65e0\u8bba\u8bfb\u548c\u5199\uff09\u8fdb\u6765\uff0c\u6574\u4e2a\u9501\u76f8\u5f53\u4e8e\u7531\u8be5goroutine\u72ec\u5360 D. Lock()\u64cd\u4f5c\u9700\u8981\u4fdd\u8bc1\u6709Unlock()\u6216RUnlock()\u8c03\u7528\u4e0e\u4e4b\u5bf9\u5e94 \u53c2\u8003\u7b54\u6848\uff1aABC","title":"34\u3001[primary] \u5173\u4e8e\u540c\u6b65\u9501\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#35intermediate-golangjson","text":"A. \u6307\u9488 B. channel C. complex D. \u51fd\u6570 \u53c2\u8003\u7b54\u6848\uff1aBCD","title":"35\u3001[intermediate] golang\u4e2d\u5927\u591a\u6570\u6570\u636e\u7c7b\u578b\u90fd\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6709\u6548\u7684JSON\u6587\u672c\uff0c\u4e0b\u9762\u51e0\u79cd\u7c7b\u578b\u9664\u5916\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#36intermediate-go-vendor","text":"A. \u57fa\u672c\u601d\u8def\u662f\u5c06\u5f15\u7528\u7684\u5916\u90e8\u5305\u7684\u6e90\u4ee3\u7801\u653e\u5728\u5f53\u524d\u5de5\u7a0b\u7684vendor\u76ee\u5f55\u4e0b\u9762 B. \u7f16\u8bd1go\u4ee3\u7801\u4f1a\u4f18\u5148\u4ecevendor\u76ee\u5f55\u5148\u5bfb\u627e\u4f9d\u8d56\u5305 C. \u53ef\u4ee5\u6307\u5b9a\u5f15\u7528\u67d0\u4e2a\u7279\u5b9a\u7248\u672c\u7684\u5916\u90e8\u5305 D. \u6709\u4e86vendor\u76ee\u5f55\u540e\uff0c\u6253\u5305\u5f53\u524d\u7684\u5de5\u7a0b\u4ee3\u7801\u5230\u5176\u4ed6\u673a\u5668\u7684$GOPATH/src\u4e0b\u90fd\u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1 \u53c2\u8003\u7b54\u6848\uff1aABD","title":"36\u3001[intermediate] \u5173\u4e8ego vendor\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#37primary-flagboolif","text":"A. if flag == 1 B. if flag C. if flag == false D. if !flag \u53c2\u8003\u7b54\u6848\uff1aBD","title":"37\u3001[primary] flag\u662fbool\u578b\u53d8\u91cf\uff0c\u4e0b\u9762if\u8868\u8fbe\u5f0f\u7b26\u5408\u7f16\u7801\u89c4\u8303\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#38primary-valueif","text":"A. if value == 0 B. if value C. if value != 0 D. if !value \u53c2\u8003\u7b54\u6848\uff1aAC","title":"38\u3001[primary] value\u662f\u6574\u578b\u53d8\u91cf\uff0c\u4e0b\u9762if\u8868\u8fbe\u5f0f\u7b26\u5408\u7f16\u7801\u89c4\u8303\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#39intermediate","text":"A. \u5982\u679c\u5931\u8d25\u539f\u56e0\u53ea\u6709\u4e00\u4e2a\uff0c\u5219\u8fd4\u56debool B. \u5982\u679c\u5931\u8d25\u539f\u56e0\u8d85\u8fc7\u4e00\u4e2a\uff0c\u5219\u8fd4\u56deerror C. \u5982\u679c\u6ca1\u6709\u5931\u8d25\u539f\u56e0\uff0c\u5219\u4e0d\u8fd4\u56debool\u6216error D. \u5982\u679c\u91cd\u8bd5\u51e0\u6b21\u53ef\u4ee5\u907f\u514d\u5931\u8d25\uff0c\u5219\u4e0d\u8981\u7acb\u5373\u8fd4\u56debool\u6216error \u53c2\u8003\u7b54\u6848\uff1aABCD","title":"39\u3001[intermediate] \u5173\u4e8e\u51fd\u6570\u8fd4\u56de\u503c\u7684\u9519\u8bef\u8bbe\u8ba1\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#40intermediate","text":"A. \u5728\u7a0b\u5e8f\u5f00\u53d1\u9636\u6bb5\uff0c\u575a\u6301\u901f\u9519\uff0c\u8ba9\u7a0b\u5e8f\u5f02\u5e38\u5d29\u6e83 B. \u5728\u7a0b\u5e8f\u90e8\u7f72\u540e\uff0c\u5e94\u6062\u590d\u5f02\u5e38\u907f\u514d\u7a0b\u5e8f\u7ec8\u6b62 C. \u4e00\u5207\u7686\u9519\u8bef\uff0c\u4e0d\u7528\u8fdb\u884c\u5f02\u5e38\u8bbe\u8ba1 D. \u5bf9\u4e8e\u4e0d\u5e94\u8be5\u51fa\u73b0\u7684\u5206\u652f\uff0c\u4f7f\u7528\u5f02\u5e38\u5904\u7406 \u53c2\u8003\u7b54\u6848\uff1aABD","title":"40\u3001[intermediate] \u5173\u4e8e\u5f02\u5e38\u8bbe\u8ba1\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#41intermediate-slicemap","text":"A. var s []int s = append(s,1) B. var m map[string]int m[\"one\"] = 1 C. var s []int s = make([]int, 0) s = append(s,1) D. var m map[string]int m = make(map[string]int) m[\"one\"] = 1 \u53c2\u8003\u7b54\u6848\uff1aACD","title":"41\u3001[intermediate] \u5173\u4e8eslice\u6216map\u64cd\u4f5c\uff0c\u4e0b\u9762\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#42intermediate-channel","text":"A. \u7ed9\u4e00\u4e2a nil channel \u53d1\u9001\u6570\u636e\uff0c\u9020\u6210\u6c38\u8fdc\u963b\u585e B. \u4ece\u4e00\u4e2a nil channel \u63a5\u6536\u6570\u636e\uff0c\u9020\u6210\u6c38\u8fdc\u963b\u585e C. \u7ed9\u4e00\u4e2a\u5df2\u7ecf\u5173\u95ed\u7684 channel \u53d1\u9001\u6570\u636e\uff0c\u5f15\u8d77 panic D. \u4ece\u4e00\u4e2a\u5df2\u7ecf\u5173\u95ed\u7684 channel \u63a5\u6536\u6570\u636e\uff0c\u5982\u679c\u7f13\u51b2\u533a\u4e2d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u96f6\u503c \u53c2\u8003\u7b54\u6848\uff1aABCD","title":"42\u3001[intermediate] \u5173\u4e8echannel\u7684\u7279\u6027\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#43intermediate-channel","text":"A. \u65e0\u7f13\u51b2\u7684channel\u662f\u9ed8\u8ba4\u7684\u7f13\u51b2\u4e3a1\u7684channel B. \u65e0\u7f13\u51b2\u7684channel\u548c\u6709\u7f13\u51b2\u7684channel\u90fd\u662f\u540c\u6b65\u7684 C. \u65e0\u7f13\u51b2\u7684channel\u548c\u6709\u7f13\u51b2\u7684channel\u90fd\u662f\u975e\u540c\u6b65\u7684 D. \u65e0\u7f13\u51b2\u7684channel\u662f\u540c\u6b65\u7684\uff0c\u800c\u6709\u7f13\u51b2\u7684channel\u662f\u975e\u540c\u6b65\u7684 \u53c2\u8003\u7b54\u6848\uff1aD","title":"43\u3001[intermediate] \u5173\u4e8e\u65e0\u7f13\u51b2\u548c\u6709\u51b2\u7a81\u7684channel\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#44intermediate","text":"A. \u7a7a\u6307\u9488\u89e3\u6790 B. \u4e0b\u6807\u8d8a\u754c C. \u9664\u6570\u4e3a0 D. \u8c03\u7528panic\u51fd\u6570 \u53c2\u8003\u7b54\u6848\uff1aABCD","title":"44\u3001[intermediate] \u5173\u4e8e\u5f02\u5e38\u7684\u89e6\u53d1\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#45intermediate-cap","text":"A. array B. slice C. map D. channel \u53c2\u8003\u7b54\u6848\uff1aABD","title":"45\u3001[intermediate] \u5173\u4e8ecap\u51fd\u6570\u7684\u9002\u7528\u7c7b\u578b\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#46intermediate-beego","text":"A. beego\u662f\u4e00\u4e2agolang\u5b9e\u73b0\u7684\u8f7b\u91cf\u7ea7HTTP\u6846\u67b6 B. beego\u53ef\u4ee5\u901a\u8fc7\u6ce8\u91ca\u8def\u7531\u3001\u6b63\u5219\u8def\u7531\u7b49\u591a\u79cd\u65b9\u5f0f\u5b8c\u6210url\u8def\u7531\u6ce8\u5165 C. \u53ef\u4ee5\u4f7f\u7528bee new\u5de5\u5177\u751f\u6210\u7a7a\u5de5\u7a0b\uff0c\u7136\u540e\u4f7f\u7528bee run\u547d\u4ee4\u81ea\u52a8\u70ed\u7f16\u8bd1 D. beego\u6846\u67b6\u53ea\u63d0\u4f9b\u4e86\u5bf9url\u8def\u7531\u7684\u5904\u7406\uff0c \u800c\u5bf9\u4e8eMVC\u67b6\u6784\u4e2d\u7684\u6570\u636e\u5e93\u90e8\u5206\u672a\u63d0\u4f9b\u6846\u67b6\u652f\u6301 \u53c2\u8003\u7b54\u6848\uff1aABC","title":"46\u3001[intermediate] \u5173\u4e8ebeego\u6846\u67b6\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#47intermediate-goconvey","text":"A. goconvey\u662f\u4e00\u4e2a\u652f\u6301golang\u7684\u5355\u5143\u6d4b\u8bd5\u6846\u67b6 B. goconvey\u80fd\u591f\u81ea\u52a8\u76d1\u63a7\u6587\u4ef6\u4fee\u6539\u5e76\u542f\u52a8\u6d4b\u8bd5\uff0c\u5e76\u53ef\u4ee5\u5c06\u6d4b\u8bd5\u7ed3\u679c\u5b9e\u65f6\u8f93\u51fa\u5230web\u754c\u9762 C. goconvey\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u65ad\u8a00\u7b80\u5316\u6d4b\u8bd5\u7528\u4f8b\u7684\u7f16\u5199 D. goconvey\u65e0\u6cd5\u4e0ego test\u96c6\u6210 \u53c2\u8003\u7b54\u6848\uff1aABC","title":"47\u3001[intermediate] \u5173\u4e8egoconvey\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#48intermediate-go-vet","text":"A. go vet\u662fgolang\u81ea\u5e26\u5de5\u5177go tool vet\u7684\u5c01\u88c5 B. \u5f53\u6267\u884cgo vet database\u65f6\uff0c\u53ef\u4ee5\u5bf9database\u6240\u5728\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u5b50\u6587\u4ef6\u5939\u8fdb\u884c\u9012\u5f52\u68c0\u6d4b C. go vet\u53ef\u4ee5\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84\u3001\u76f8\u5bf9\u8def\u5f84\u6216\u76f8\u5bf9GOPATH\u7684\u8def\u5f84\u6307\u5b9a\u5f85\u68c0\u6d4b\u7684\u5305 D. go vet\u53ef\u4ee5\u68c0\u6d4b\u51fa\u6b7b\u4ee3\u7801 \u53c2\u8003\u7b54\u6848\uff1aACD","title":"48\u3001[intermediate] \u5173\u4e8ego vet\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#49intermediate-map","text":"A. map\u53cd\u5e8f\u5217\u5316\u65f6json.unmarshal\u7684\u5165\u53c2\u5fc5\u987b\u4e3amap\u7684\u5730\u5740 B. \u5728\u51fd\u6570\u8c03\u7528\u4e2d\u4f20\u9012map\uff0c\u5219\u5b50\u51fd\u6570\u4e2d\u5bf9map\u5143\u7d20\u7684\u589e\u52a0\u4e0d\u4f1a\u5bfc\u81f4\u7236\u51fd\u6570\u4e2dmap\u7684\u4fee\u6539 C. \u5728\u51fd\u6570\u8c03\u7528\u4e2d\u4f20\u9012map\uff0c\u5219\u5b50\u51fd\u6570\u4e2d\u5bf9map\u5143\u7d20\u7684\u4fee\u6539\u4e0d\u4f1a\u5bfc\u81f4\u7236\u51fd\u6570\u4e2dmap\u7684\u4fee\u6539 D. \u4e0d\u80fd\u4f7f\u7528\u5185\u7f6e\u51fd\u6570delete\u5220\u9664map\u7684\u5143\u7d20 \u53c2\u8003\u7b54\u6848\uff1aA","title":"49\u3001[intermediate] \u5173\u4e8emap\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#50intermediate-gostub","text":"A. GoStub\u53ef\u4ee5\u5bf9\u5168\u5c40\u53d8\u91cf\u6253\u6869 B. GoStub\u53ef\u4ee5\u5bf9\u51fd\u6570\u6253\u6869 C. GoStub\u53ef\u4ee5\u5bf9\u7c7b\u7684\u6210\u5458\u65b9\u6cd5\u6253\u6869 D. GoStub\u53ef\u4ee5\u6253\u52a8\u6001\u6869\uff0c\u6bd4\u5982\u5bf9\u4e00\u4e2a\u51fd\u6570\u6253\u6869\u540e\uff0c\u591a\u6b21\u8c03\u7528\u8be5\u51fd\u6570\u4f1a\u6709\u4e0d\u540c\u7684\u884c\u4e3a \u53c2\u8003\u7b54\u6848\uff1aABD","title":"50\u3001[intermediate] \u5173\u4e8eGoStub\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#51primary-select","text":"A. select\u673a\u5236\u7528\u6765\u5904\u7406\u5f02\u6b65IO\u95ee\u9898 B. select\u673a\u5236\u6700\u5927\u7684\u4e00\u6761\u9650\u5236\u5c31\u662f\u6bcf\u4e2acase\u8bed\u53e5\u91cc\u5fc5\u987b\u662f\u4e00\u4e2aIO\u64cd\u4f5c C. golang\u5728\u8bed\u8a00\u7ea7\u522b\u652f\u6301select\u5173\u952e\u5b57 D. select\u5173\u952e\u5b57\u7684\u7528\u6cd5\u4e0eswitch\u8bed\u53e5\u975e\u5e38\u7c7b\u4f3c\uff0c\u540e\u9762\u8981\u5e26\u5224\u65ad\u6761\u4ef6 \u53c2\u8003\u7b54\u6848\uff1aABC","title":"51\u3001[primary] \u5173\u4e8eselect\u673a\u5236\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#52primary","text":"A. golang\u6709\u81ea\u52a8\u5783\u573e\u56de\u6536\uff0c\u4e0d\u5b58\u5728\u5185\u5b58\u6cc4\u9732 B. golang\u4e2d\u68c0\u6d4b\u5185\u5b58\u6cc4\u9732\u4e3b\u8981\u4f9d\u9760\u7684\u662fpprof\u5305 C. \u5185\u5b58\u6cc4\u9732\u53ef\u4ee5\u5728\u7f16\u8bd1\u9636\u6bb5\u53d1\u73b0 D. \u5e94\u5b9a\u671f\u4f7f\u7528\u6d4f\u89c8\u5668\u6765\u67e5\u770b\u7cfb\u7edf\u7684\u5b9e\u65f6\u5185\u5b58\u4fe1\u606f\uff0c\u53ca\u65f6\u53d1\u73b0\u5185\u5b58\u6cc4\u9732\u95ee\u9898 \u53c2\u8003\u7b54\u6848\uff1aBD","title":"52\u3001[primary] \u5173\u4e8e\u5185\u5b58\u6cc4\u9732\uff0c\u4e0b\u9762\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#_3","text":"","title":"\u586b\u7a7a\u9898"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#1primary-i____","text":"\u53c2\u8003\u7b54\u6848\uff1avar i int","title":"1\u3001[primary] \u58f0\u660e\u4e00\u4e2a\u6574\u578b\u53d8\u91cfi____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#2primary-10a____","text":"\u53c2\u8003\u7b54\u6848\uff1avar a [10]int","title":"2\u3001[primary] \u58f0\u660e\u4e00\u4e2a\u542b\u670910\u4e2a\u5143\u7d20\u7684\u6574\u578b\u6570\u7ec4a____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#3primary-s____","text":"\u53c2\u8003\u7b54\u6848\uff1avar s []int","title":"3\u3001[primary] \u58f0\u660e\u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u5207\u7247s____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#4primary-p____","text":"\u53c2\u8003\u7b54\u6848\uff1avar p *int","title":"4\u3001[primary] \u58f0\u660e\u4e00\u4e2a\u6574\u578b\u6307\u9488\u53d8\u91cfp____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#5primary-keyvaluemapm____","text":"\u53c2\u8003\u7b54\u6848\uff1avar m map[string]int","title":"5\u3001[primary] \u58f0\u660e\u4e00\u4e2akey\u4e3a\u5b57\u7b26\u4e32\u578bvalue\u4e3a\u6574\u578b\u7684map\u53d8\u91cfm____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#6primary-f____","text":"\u53c2\u8003\u7b54\u6848\uff1avar f func(a int) int","title":"6\u3001[primary] \u58f0\u660e\u4e00\u4e2a\u5165\u53c2\u548c\u8fd4\u56de\u503c\u5747\u4e3a\u6574\u578b\u7684\u51fd\u6570\u53d8\u91cff____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#7primary-intchannelch____","text":"\u53c2\u8003\u7b54\u6848\uff1avar ch <-chan int","title":"7\u3001[primary] \u58f0\u660e\u4e00\u4e2a\u53ea\u7528\u4e8e\u8bfb\u53d6int\u6570\u636e\u7684\u5355\u5411channel\u53d8\u91cfch____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#8primary-slicego____","text":"\u53c2\u8003\u7b54\u6848\uff1aslice_test.go","title":"8\u3001[primary] \u5047\u8bbe\u6e90\u6587\u4ef6\u7684\u547d\u540d\u4e3aslice.go\uff0c\u5219\u6d4b\u8bd5\u6587\u4ef6\u7684\u547d\u540d\u4e3a____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#9primary-go-test____","text":"\u53c2\u8003\u7b54\u6848\uff1aTest","title":"9\u3001[primary] go test\u8981\u6c42\u6d4b\u8bd5\u51fd\u6570\u7684\u524d\u7f00\u5fc5\u987b\u547d\u540d\u4e3a____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#10intermediate-____","text":"for i := 0; i < 5; i++ { defer fmt.Printf(\"%d \", i) } \u53c2\u8003\u7b54\u6848\uff1a4 3 2 1 0","title":"10\u3001[intermediate] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#11intermediate-____","text":"func main() { x := 1 { x := 2 fmt.Print(x) } fmt.Println(x) } \u53c2\u8003\u7b54\u6848\uff1a21","title":"11\u3001[intermediate] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#12intermediate-____","text":"func main() { strs := []string{\"one\", \"two\", \"three\"} for _, s := range strs { go func() { time.Sleep(1 * time.Second) fmt.Printf(\"%s \", s) }() } time.Sleep(3 * time.Second) } \u53c2\u8003\u7b54\u6848\uff1athree three three","title":"12\u3001[intermediate] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#13intermediate-____","text":"func main() { x := []string{\"a\", \"b\", \"c\"} for v := range x { fmt.Print(v) } } \u53c2\u8003\u7b54\u6848\uff1a012","title":"13\u3001[intermediate] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#14intermediate-____","text":"func main() { x := []string{\"a\", \"b\", \"c\"} for _, v := range x { fmt.Print(v) } } \u53c2\u8003\u7b54\u6848\uff1aabc","title":"14\u3001[intermediate] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#15primary-____","text":"func main() { i := 1 j := 2 i, j = j, i fmt.Printf(\"%d%d\\n\", i, j) } \u53c2\u8003\u7b54\u6848\uff1a21","title":"15\u3001[primary] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#16primary-____","text":"func incr(p *int) int { *p++ return *p } func main() { v := 1 incr(&v) fmt.Println(v) } \u53c2\u8003\u7b54\u6848\uff1a2","title":"16\u3001[primary] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#17primary-goroutine____","text":"\u53c2\u8003\u7b54\u6848\uff1ago","title":"17\u3001[primary] \u542f\u52a8\u4e00\u4e2agoroutine\u7684\u5173\u952e\u5b57\u662f____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#18intermediate-____","text":"type Slice []int func NewSlice() Slice { return make(Slice, 0) } func (s* Slice) Add(elem int) *Slice { *s = append(*s, elem) fmt.Print(elem) return s } func main() { s := NewSlice() defer s.Add(1).Add(2) s.Add(3) } \u53c2\u8003\u7b54\u6848\uff1a132","title":"18\u3001[intermediate] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f____"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#_4","text":"","title":"\u5224\u65ad\u9898"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#1primary_1","text":"\u53c2\u8003\u7b54\u6848\uff1aT","title":"1\u3001[primary] \u6570\u7ec4\u662f\u4e00\u4e2a\u503c\u7c7b\u578b\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#2primary-map","text":"\u53c2\u8003\u7b54\u6848\uff1aT","title":"2\u3001[primary] \u4f7f\u7528map\u4e0d\u9700\u8981\u5f15\u5165\u4efb\u4f55\u5e93\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#3intermediate-delete","text":"\u53c2\u8003\u7b54\u6848\uff1aF","title":"3\u3001[intermediate] \u5185\u7f6e\u51fd\u6570delete\u53ef\u4ee5\u5220\u9664\u6570\u7ec4\u5207\u7247\u5185\u7684\u5143\u7d20\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#4primary_1","text":"\u53c2\u8003\u7b54\u6848\uff1aF","title":"4\u3001[primary] \u6307\u9488\u662f\u57fa\u7840\u7c7b\u578b\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#5primary-interfaceany","text":"\u53c2\u8003\u7b54\u6848\uff1aT","title":"5\u3001[primary] interface{}\u662f\u53ef\u4ee5\u6307\u5411\u4efb\u610f\u5bf9\u8c61\u7684Any\u7c7b\u578b\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#6intermediate","text":"file, err := os.Open(\"test.go\") defer file.Close() if err != nil { fmt.Println(\"open file failed:\", err) return } ... \u53c2\u8003\u7b54\u6848\uff1aT","title":"6\u3001[intermediate] \u4e0b\u9762\u5173\u4e8e\u6587\u4ef6\u64cd\u4f5c\u7684\u4ee3\u7801\u53ef\u80fd\u89e6\u53d1\u5f02\u5e38\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#7primary-golang","text":"\u53c2\u8003\u7b54\u6848\uff1aF","title":"7\u3001[primary] Golang\u4e0d\u652f\u6301\u81ea\u52a8\u5783\u573e\u56de\u6536\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#8primary-golang","text":"\u53c2\u8003\u7b54\u6848\uff1aT","title":"8\u3001[primary] Golang\u652f\u6301\u53cd\u5c04\uff0c\u53cd\u5c04\u6700\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u662f\u505a\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#9primary-golangcccgo","text":"\u53c2\u8003\u7b54\u6848\uff1aF","title":"9\u3001[primary] Golang\u53ef\u4ee5\u590d\u7528C/C++\u7684\u6a21\u5757\uff0c\u8fd9\u4e2a\u529f\u80fd\u53ebCgo\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#10primary-jsonxxjsonx","text":"type Position struct { X int `json:\"x\"` Y int `json:\"y\"` Z int `json:\"z\"` } \u53c2\u8003\u7b54\u6848\uff1aT","title":"10\u3001[primary] \u4e0b\u9762\u4ee3\u7801\u4e2d\u4e24\u4e2a\u659c\u70b9\u4e4b\u95f4\u7684\u4ee3\u7801\uff0c\u6bd4\u5982json:\"x\"\uff0c\u4f5c\u7528\u662fX\u5b57\u6bb5\u5728\u4ece\u7ed3\u6784\u4f53\u5b9e\u4f8b\u7f16\u7801\u5230JSON\u6570\u636e\u683c\u5f0f\u7684\u65f6\u5019\uff0c\u4f7f\u7528x\u4f5c\u4e3a\u540d\u5b57\uff0c\u8fd9\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u79cd\u91cd\u547d\u540d\u7684\u65b9\u5f0f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#11primary_1","text":"\u53c2\u8003\u7b54\u6848\uff1aT","title":"11\u3001[primary] \u901a\u8fc7\u6210\u5458\u53d8\u91cf\u6216\u51fd\u6570\u9996\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u6765\u51b3\u5b9a\u5176\u4f5c\u7528\u57df\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#12primary-zeroconst-zero-00zero","text":"\u53c2\u8003\u7b54\u6848\uff1aF","title":"12\u3001[primary] \u5bf9\u4e8e\u5e38\u91cf\u5b9a\u4e49zero(const zero = 0.0)\uff0czero\u662f\u6d6e\u70b9\u578b\u5e38\u91cf\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#13primary-xx","text":"\u53c2\u8003\u7b54\u6848\uff1aF","title":"13\u3001[primary] \u5bf9\u53d8\u91cfx\u7684\u53d6\u53cd\u64cd\u4f5c\u662f~x\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#14primary-xello","text":"func main() { str := \"hello\" str[0] = 'x' fmt.Println(str) } \u53c2\u8003\u7b54\u6848\uff1aF","title":"14\u3001[primary] \u4e0b\u9762\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662fxello\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#15primary-golanggoto","text":"\u53c2\u8003\u7b54\u6848\uff1aT","title":"15\u3001[primary] golang\u652f\u6301goto\u8bed\u53e5\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#16primary-p","text":"type TimesMatcher struct { base int } func NewTimesMatcher(base int) *TimesMatcher{ return &TimesMatcher{base:base} } func main() { p := NewTimesMatcher(3) ... } \u53c2\u8003\u7b54\u6848\uff1aF","title":"16\u3001[primary] \u4e0b\u9762\u4ee3\u7801\u4e2d\u7684\u6307\u9488p\u4e3a\u91ce\u6307\u9488\uff0c\u56e0\u4e3a\u8fd4\u56de\u7684\u6808\u5185\u5b58\u5728\u51fd\u6570\u7ed3\u675f\u65f6\u4f1a\u88ab\u91ca\u653e\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#17primary","text":"\u53c2\u8003\u7b54\u6848\uff1aT","title":"17\u3001[primary] \u533f\u540d\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf\u6216\u8005\u76f4\u63a5\u6267\u884c\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#18primary-_","text":"\u53c2\u8003\u7b54\u6848\uff1aT","title":"18\u3001[primary] \u5982\u679c\u8c03\u7528\u65b9\u8c03\u7528\u4e86\u4e00\u4e2a\u5177\u6709\u591a\u8fd4\u56de\u503c\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u5374\u4e0d\u60f3\u5173\u5fc3\u5176\u4e2d\u7684\u67d0\u4e2a\u8fd4\u56de\u503c\uff0c\u53ef\u4ee5\u7b80\u5355\u5730\u7528\u4e00\u4e2a\u4e0b\u5212\u7ebf\u201c_\u201d\u6765\u8df3\u8fc7\u8fd9\u4e2a\u8fd4\u56de\u503c\uff0c\u8be5\u4e0b\u5212\u7ebf\u5bf9\u5e94\u7684\u53d8\u91cf\u53eb\u533f\u540d\u53d8\u91cf\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#19primary-errorbool","text":"\u53c2\u8003\u7b54\u6848\uff1aT","title":"19\u3001[primary] \u5728\u51fd\u6570\u7684\u591a\u8fd4\u56de\u503c\u4e2d\uff0c\u5982\u679c\u6709error\u6216bool\u7c7b\u578b\uff0c\u5219\u4e00\u822c\u653e\u5728\u6700\u540e\u4e00\u4e2a\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#20primary","text":"\u53c2\u8003\u7b54\u6848\uff1aT","title":"20\u3001[primary] \u9519\u8bef\u662f\u4e1a\u52a1\u8fc7\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u800c\u5f02\u5e38\u4e0d\u662f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#21primary-panic","text":"\u53c2\u8003\u7b54\u6848\uff1aF","title":"21\u3001[primary] \u51fd\u6570\u6267\u884c\u65f6\uff0c\u5982\u679c\u7531\u4e8epanic\u5bfc\u81f4\u4e86\u5f02\u5e38\uff0c\u5219\u5ef6\u8fdf\u51fd\u6570\u4e0d\u4f1a\u6267\u884c\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#22intermediate-panicpanicpanicrecover","text":"\u53c2\u8003\u7b54\u6848\uff1aF","title":"22\u3001[intermediate] \u5f53\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u5982\u679c\u9047\u5230\u5f15\u7528\u7a7a\u6307\u9488\u3001\u4e0b\u6807\u8d8a\u754c\u6216\u663e\u5f0f\u8c03\u7528panic\u51fd\u6570\u7b49\u60c5\u51b5\uff0c\u5219\u5148\u89e6\u53d1panic\u51fd\u6570\u7684\u6267\u884c\uff0c\u7136\u540e\u8c03\u7528\u5ef6\u8fdf\u51fd\u6570\u3002\u8c03\u7528\u8005\u7ee7\u7eed\u4f20\u9012panic\uff0c\u56e0\u6b64\u8be5\u8fc7\u7a0b\u4e00\u76f4\u5728\u8c03\u7528\u6808\u4e2d\u91cd\u590d\u53d1\u751f\uff1a\u51fd\u6570\u505c\u6b62\u6267\u884c\uff0c\u8c03\u7528\u5ef6\u8fdf\u6267\u884c\u51fd\u6570\u3002\u5982\u679c\u4e00\u8def\u5728\u5ef6\u8fdf\u51fd\u6570\u4e2d\u6ca1\u6709recover\u51fd\u6570\u7684\u8c03\u7528\uff0c\u5219\u4f1a\u5230\u8fbe\u8be5\u643a\u7a0b\u7684\u8d77\u70b9\uff0c\u8be5\u643a\u7a0b\u7ed3\u675f\uff0c\u7136\u540e\u7ec8\u6b62\u5176\u4ed6\u6240\u6709\u643a\u7a0b\uff0c\u5176\u4ed6\u643a\u7a0b\u7684\u7ec8\u6b62\u8fc7\u7a0b\u4e5f\u662f\u91cd\u590d\u53d1\u751f\uff1a\u51fd\u6570\u505c\u6b62\u6267\u884c\uff0c\u8c03\u7528\u5ef6\u8fdf\u6267\u884c\u51fd\u6570\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#23primary","text":"\u53c2\u8003\u7b54\u6848\uff1aT","title":"23\u3001[primary] \u540c\u7ea7\u6587\u4ef6\u7684\u5305\u540d\u4e0d\u5141\u8bb8\u6709\u591a\u4e2a\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#24intermediate","text":"\u53c2\u8003\u7b54\u6848\uff1aF","title":"24\u3001[intermediate] \u53ef\u4ee5\u7ed9\u4efb\u610f\u7c7b\u578b\u6dfb\u52a0\u76f8\u5e94\u7684\u65b9\u6cd5\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#25primary-golang","text":"\u53c2\u8003\u7b54\u6848\uff1aT","title":"25\u3001[primary] golang\u867d\u7136\u6ca1\u6709\u663e\u5f0f\u7684\u63d0\u4f9b\u7ee7\u627f\u8bed\u6cd5\uff0c\u4f46\u662f\u901a\u8fc7\u533f\u540d\u7ec4\u5408\u5b9e\u73b0\u4e86\u7ee7\u627f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#26primary-for-rangemapmap","text":"\u53c2\u8003\u7b54\u6848\uff1aT","title":"26\u3001[primary] \u4f7f\u7528for range\u8fed\u4ee3map\u65f6\u6bcf\u6b21\u8fed\u4ee3\u7684\u987a\u5e8f\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u56e0\u4e3amap\u7684\u8fed\u4ee3\u662f\u968f\u673a\u7684\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#27primary-switch","text":"\u53c2\u8003\u7b54\u6848\uff1aT","title":"27\u3001[primary] switch\u540e\u9762\u53ef\u4ee5\u4e0d\u8ddf\u8868\u8fbe\u5f0f\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#28intermediate-encodedecode","text":"\u53c2\u8003\u7b54\u6848\uff1aT","title":"28\u3001[intermediate] \u7ed3\u6784\u4f53\u5728\u5e8f\u5217\u5316\u65f6\u975e\u5bfc\u51fa\u53d8\u91cf\uff08\u4ee5\u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u53d8\u91cf\u540d\uff09\u4e0d\u4f1a\u88abencode\uff0c\u56e0\u6b64\u5728decode\u65f6\u8fd9\u4e9b\u975e\u5bfc\u51fa\u53d8\u91cf\u7684\u503c\u4e3a\u5176\u7c7b\u578b\u7684\u96f6\u503c\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#29primary-golangnewxxx","text":"\u53c2\u8003\u7b54\u6848\uff1aT","title":"29\u3001[primary] golang\u4e2d\u6ca1\u6709\u6784\u9020\u51fd\u6570\u7684\u6982\u5ff5\uff0c\u5bf9\u8c61\u7684\u521b\u5efa\u901a\u5e38\u4ea4\u7531\u4e00\u4e2a\u5168\u5c40\u7684\u521b\u5efa\u51fd\u6570\u6765\u5b8c\u6210\uff0c\u4ee5NewXXX\u6765\u547d\u540d\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#30intermediate-deferdemodestroycreate","text":"func deferDemo() error { err := createResource1() if err != nil { return ERR_CREATE_RESOURCE1_FAILED } defer func() { if err != nil { destroyResource1() } }() err = createResource2() if err != nil { return ERR_CREATE_RESOURCE2_FAILED } defer func() { if err != nil { destroyResource2() } }() err = createResource3() if err != nil { return ERR_CREATE_RESOURCE3_FAILED } return nil } \u53c2\u8003\u7b54\u6848\uff1aF","title":"30\u3001[intermediate] \u5f53\u51fd\u6570deferDemo\u8fd4\u56de\u5931\u8d25\u65f6\uff0c\u5e76\u4e0d\u80fddestroy\u5df2create\u6210\u529f\u7684\u8d44\u6e90\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#31intermediate-channelchannel","text":"\u53c2\u8003\u7b54\u6848\uff1aF","title":"31\u3001[intermediate] channel\u672c\u8eab\u5fc5\u7136\u662f\u540c\u65f6\u652f\u6301\u8bfb\u5199\u7684\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u5355\u5411channel\uff08\uff09"},{"location":"golang/Golang%E7%B2%BE%E7%BC%96100%E9%A2%98/#32primary-import","text":"\u53c2\u8003\u7b54\u6848\uff1aF","title":"32\u3001[primary] import\u540e\u9762\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f\u5305\u540d\uff08\uff09"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/","text":"\u5173\u952e\u5b57 Go\u8bed\u8a00\u8bbe\u8ba1\u7684\u5173\u952e\u5b57\uff0c\u4e86\u89e3\u8fd9\u4e9b\u5173\u952e\u5b57\u6709\u52a9\u4e8e\u547d\u540d\u53d8\u91cf\u7684\u51b2\u7a81\u907f\u514d go\u7684\u4e8c\u5341\u4e94\u4e2a\u5173\u952e\u5b57 break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var \u7b80\u4ecb var \u548c const \u662f Go\u8bed\u8a00\u57fa\u7840\u91cc\u9762\u7684\u53d8\u91cf\u548c\u5e38\u91cf\u7533\u660e package \u548c import \u7528\u4e8e\u5206\u5305\u548c\u5bfc\u5165 func \u7528\u4e8e\u5b9a\u4e49\u51fd\u6570\u548c\u65b9\u6cd5 return \u7528\u4e8e\u4ece\u51fd\u6570\u8fd4\u56de defer \u7528\u4e8e\u7c7b\u4f3c\u6790\u6784\u51fd\u6570 go \u7528\u4e8e\u5e76\u53d1 select \u7528\u4e8e\u9009\u62e9\u4e0d\u540c\u7c7b\u578b\u7684\u901a\u8baf interface \u7528\u4e8e\u5b9a\u4e49\u63a5\u53e3 struct \u7528\u4e8e\u5b9a\u4e49\u62bd\u8c61\u6570\u636e\u7c7b\u578b break \u3001 case \u3001 continue \u3001 for \u3001 fallthrough \u3001 else \u3001 if \u3001 switch \u3001 goto \u3001 default \u7528\u4e8e\u6d41\u7a0b\u63a7\u5236 chan \u7528\u4e8echannel\u901a\u8baf type \u7528\u4e8e\u58f0\u660e\u81ea\u5b9a\u4e49\u7c7b\u578b map \u7528\u4e8e\u58f0\u660emap\u7c7b\u578b\u6570\u636e range \u7528\u4e8e\u8bfb\u53d6slice\u3001map\u3001channel\u6570\u636e \u6570\u636e\u7c7b\u578b\u7684\u5b9a\u4e49 \u5b9a\u4e49\u53d8\u91cf Go\u8bed\u8a00\u91cc\u9762\u5b9a\u4e49\u53d8\u91cf\u6709\u591a\u79cd\u65b9\u5f0f\u3002 \u4f7f\u7528 var \u5173\u952e\u5b57\u662fGo\u6700\u57fa\u672c\u7684\u5b9a\u4e49\u53d8\u91cf\u65b9\u5f0f\uff0c\u4e0eC\u8bed\u8a00\u4e0d\u540c\u7684\u662fGo\u628a\u53d8\u91cf\u7c7b\u578b\u653e\u5728\u53d8\u91cf\u540d\u540e\u9762\uff1a //\u5b9a\u4e49\u4e00\u4e2a\u540d\u79f0\u4e3a\u201cvariableName\u201d\uff0c\u7c7b\u578b\u4e3a\"type\"\u7684\u53d8\u91cf var variableName type \u5b9a\u4e49\u591a\u4e2a\u53d8\u91cf //\u5b9a\u4e49\u4e09\u4e2a\u7c7b\u578b\u90fd\u662f\u201ctype\u201d\u7684\u53d8\u91cf var vname1, vname2, vname3 type \u5b9a\u4e49\u53d8\u91cf\u5e76\u521d\u59cb\u5316\u503c //\u521d\u59cb\u5316\u201cvariableName\u201d\u7684\u53d8\u91cf\u4e3a\u201cvalue\u201d\u503c\uff0c\u7c7b\u578b\u662f\u201ctype\u201d var variableName type = value \u540c\u65f6\u521d\u59cb\u5316\u591a\u4e2a\u53d8\u91cf /* \u5b9a\u4e49\u4e09\u4e2a\u7c7b\u578b\u90fd\u662f\"type\"\u7684\u53d8\u91cf,\u5e76\u4e14\u5206\u522b\u521d\u59cb\u5316\u4e3a\u76f8\u5e94\u7684\u503c vname1\u4e3av1\uff0cvname2\u4e3av2\uff0cvname3\u4e3av3 */ var vname1, vname2, vname3 type= v1, v2, v3 \u662f\u4e0d\u662f\u89c9\u5f97\u4e0a\u9762\u8fd9\u6837\u7684\u5b9a\u4e49\u6709\u70b9\u7e41\u7410\uff1f\u6709\u4e00\u79cd\u5199\u6cd5\u53ef\u4ee5\u8ba9\u5b83\u53d8\u5f97\u7b80\u5355\u4e00\u70b9\u3002\u53ef\u4ee5\u76f4\u63a5\u5ffd\u7565\u7c7b\u578b\u58f0\u660e\uff0c\u90a3\u4e48\u4e0a\u9762\u7684\u4ee3\u7801\u53d8\u6210\u8fd9\u6837\u4e86\uff1a /* \u5b9a\u4e49\u4e09\u4e2a\u53d8\u91cf\uff0c\u5b83\u4eec\u5206\u522b\u521d\u59cb\u5316\u4e3a\u76f8\u5e94\u7684\u503c vname1\u4e3av1\uff0cvname2\u4e3av2\uff0cvname3\u4e3av3 \u7136\u540eGo\u4f1a\u6839\u636e\u5176\u76f8\u5e94\u503c\u7684\u7c7b\u578b\u6765\u521d\u59cb\u5316\u5b83\u4eec */ var vname1, vname2, vname3 = v1, v2, v3 \u89c9\u5f97\u4e0a\u9762\u7684\u8fd8\u662f\u6709\u4e9b\u7e41\u7410\uff0c\u7ee7\u7eed\u7b80\u5316\uff1a /* \u5b9a\u4e49\u4e09\u4e2a\u53d8\u91cf\uff0c\u5b83\u4eec\u5206\u522b\u521d\u59cb\u5316\u4e3a\u76f8\u5e94\u7684\u503c vname1\u4e3av1\uff0cvname2\u4e3av2\uff0cvname3\u4e3av3 \u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u521d\u59cb\u5316\u7684\u503c\u81ea\u52a8\u63a8\u5bfc\u51fa\u76f8\u5e94\u7684\u7c7b\u578b */ vname1, vname2, vname3 := v1, v2, v3 \u73b0\u5728\u662f\u4e0d\u662f\u770b\u4e0a\u53bb\u975e\u5e38\u7b80\u6d01\u4e86\uff1f := \u8fd9\u4e2a\u7b26\u53f7\u76f4\u63a5\u53d6\u4ee3\u4e86 var \u548c type ,\u8fd9\u79cd\u5f62\u5f0f\u53eb\u505a\u7b80\u77ed\u58f0\u660e\u3002\u4e0d\u8fc7\u5b83\u6709\u4e00\u4e2a\u9650\u5236\uff0c\u90a3\u5c31\u662f\u5b83\u53ea\u80fd\u7528\u5728\u51fd\u6570\u5185\u90e8\uff1b\u5728\u51fd\u6570\u5916\u90e8\u4f7f\u7528\u5219\u4f1a\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7\uff0c\u6240\u4ee5\u4e00\u822c\u7528 var \u65b9\u5f0f\u6765\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u3002 _ \uff08\u4e0b\u5212\u7ebf\uff09\u662f\u4e2a\u7279\u6b8a\u7684\u53d8\u91cf\u540d\uff0c\u4efb\u4f55\u8d4b\u4e88\u5b83\u7684\u503c\u90fd\u4f1a\u88ab\u4e22\u5f03\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5c06\u503c 35 \u8d4b\u4e88 b \uff0c\u5e76\u540c\u65f6\u4e22\u5f03 34 \uff1a _, b := 34, 35 Go\u5bf9\u4e8e\u5df2\u58f0\u660e\u4f46\u672a\u4f7f\u7528\u7684\u53d8\u91cf\u4f1a\u5728\u7f16\u8bd1\u9636\u6bb5\u62a5\u9519\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u5c31\u4f1a\u4ea7\u751f\u4e00\u4e2a\u9519\u8bef\uff1a\u58f0\u660e\u4e86 i \u4f46\u672a\u4f7f\u7528\u3002 package main func main() { var i int } \u5e38\u91cf \u6240\u8c13\u5e38\u91cf\uff0c\u4e5f\u5c31\u662f\u5728\u7a0b\u5e8f\u7f16\u8bd1\u9636\u6bb5\u5c31\u786e\u5b9a\u4e0b\u6765\u7684\u503c\uff0c\u800c\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u65e0\u6cd5\u6539\u53d8\u8be5\u503c\u3002\u5728Go\u7a0b\u5e8f\u4e2d\uff0c\u5e38\u91cf\u53ef\u5b9a\u4e49\u4e3a\u6570\u503c\u3001\u5e03\u5c14\u503c\u6216\u5b57\u7b26\u4e32\u7b49\u7c7b\u578b\u3002 \u5b83\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a const constantName = value //\u5982\u679c\u9700\u8981\uff0c\u4e5f\u53ef\u4ee5\u660e\u786e\u6307\u5b9a\u5e38\u91cf\u7684\u7c7b\u578b\uff1a const Pi float32 = 3.1415926 \u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u91cf\u58f0\u660e\u7684\u4f8b\u5b50\uff1a const Pi = 3.1415926 const i = 10000 const MaxThread = 10 const prefix = \"astaxie_\" Go \u5e38\u91cf\u548c\u4e00\u822c\u7a0b\u5e8f\u8bed\u8a00\u4e0d\u540c\u7684\u662f\uff0c\u53ef\u4ee5\u6307\u5b9a\u76f8\u5f53\u591a\u7684\u5c0f\u6570\u4f4d\u6570(\u4f8b\u5982200\u4f4d)\uff0c\u82e5\u6307\u5b9a\u7ed9 float32 \u81ea\u52a8\u7f29\u77ed\u4e3a 32bit \uff0c\u6307\u5b9a\u7ed9 float64 \u81ea\u52a8\u7f29\u77ed\u4e3a 64bit \uff0c\u8be6\u60c5\u53c2\u8003 http://golang.org/ref/spec#Constants (\u9700\u79d1\u5b66\u4e0a\u7f51) \u5185\u7f6e\u57fa\u7840\u7c7b\u578b Boolean \u5728Go\u4e2d\uff0c\u5e03\u5c14\u503c\u7684\u7c7b\u578b\u4e3a bool \uff0c\u503c\u662f true \u6216 false \uff0c\u9ed8\u8ba4\u4e3a false \u3002 //\u793a\u4f8b\u4ee3\u7801 var isActive bool // \u5168\u5c40\u53d8\u91cf\u58f0\u660e var enabled, disabled = true, false // \u5ffd\u7565\u7c7b\u578b\u7684\u58f0\u660e func test() { var available bool // \u4e00\u822c\u58f0\u660e valid := false // \u7b80\u77ed\u58f0\u660e available = true // \u8d4b\u503c\u64cd\u4f5c } \u6570\u503c\u7c7b\u578b \u6574\u6570\u7c7b\u578b\u6709\u65e0\u7b26\u53f7\u548c\u5e26\u7b26\u53f7\u4e24\u79cd\u3002Go\u540c\u65f6\u652f\u6301 int \u548c uint \uff0c\u8fd9\u4e24\u79cd\u7c7b\u578b\u7684\u957f\u5ea6\u76f8\u540c\uff0c\u4f46\u5177\u4f53\u957f\u5ea6\u53d6\u51b3\u4e8e\u4e0d\u540c\u7f16\u8bd1\u5668\u7684\u5b9e\u73b0\u3002Go\u91cc\u9762\u4e5f\u6709\u76f4\u63a5\u5b9a\u4e49\u597d\u4f4d\u6570\u7684\u7c7b\u578b\uff1a rune , int8 , int16 , int32 , int64 \u548c byte , uint8 , uint16 , uint32 , uint64 \u3002\u5176\u4e2d rune \u662f int32 \u7684\u522b\u79f0\uff0c byte \u662f uint8 \u7684\u522b\u79f0\u3002 \u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u8fd9\u4e9b\u7c7b\u578b\u7684\u53d8\u91cf\u4e4b\u95f4\u4e0d\u5141\u8bb8\u4e92\u76f8\u8d4b\u503c\u6216\u64cd\u4f5c\uff0c\u4e0d\u7136\u4f1a\u5728\u7f16\u8bd1\u65f6\u5f15\u8d77\u7f16\u8bd1\u5668\u62a5\u9519\u3002 \u5982\u4e0b\u7684\u4ee3\u7801\u4f1a\u4ea7\u751f\u9519\u8bef\uff1ainvalid operation: a + b (mismatched types int8 and int32) var a int8 var b int32 c:=a + b \u53e6\u5916\uff0c\u5c3d\u7ba1int\u7684\u957f\u5ea6\u662f32 bit, \u4f46int \u4e0e int32\u5e76\u4e0d\u53ef\u4ee5\u4e92\u7528\u3002 \u6d6e\u70b9\u6570\u7684\u7c7b\u578b\u6709 float32 \u548c float64 \u4e24\u79cd\uff08\u6ca1\u6709 float \u7c7b\u578b\uff09\uff0c\u9ed8\u8ba4\u662f float64 \u3002 Go\u8fd8\u652f\u6301\u590d\u6570\u3002\u5b83\u7684\u9ed8\u8ba4\u7c7b\u578b\u662f complex128 \uff0864\u4f4d\u5b9e\u6570+64\u4f4d\u865a\u6570\uff09\u3002\u5982\u679c\u9700\u8981\u5c0f\u4e00\u4e9b\u7684\uff0c\u4e5f\u6709 complex64 (32\u4f4d\u5b9e\u6570+32\u4f4d\u865a\u6570)\u3002\u590d\u6570\u7684\u5f62\u5f0f\u4e3a RE + IMi \uff0c\u5176\u4e2d RE \u662f\u5b9e\u6570\u90e8\u5206\uff0c IM \u662f\u865a\u6570\u90e8\u5206\uff0c\u800c\u6700\u540e\u7684 i \u662f\u865a\u6570\u5355\u4f4d\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528\u590d\u6570\u7684\u4f8b\u5b50\uff1a var c complex64 = 5+5i //output: (5+5i) fmt.Printf(\"Value is: %v\", c) \u5b57\u7b26\u4e32 Go\u4e2d\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u91c7\u7528 UTF-8 \u5b57\u7b26\u96c6\u7f16\u7801\u3002\u5b57\u7b26\u4e32\u662f\u7528\u4e00\u5bf9\u53cc\u5f15\u53f7\uff08 \"\" \uff09\u6216\u53cd\u5f15\u53f7\uff08 \uff09\u62ec\u8d77\u6765\u5b9a\u4e49\uff0c\u5b83\u7684\u7c7b\u578b\u662f string \u3002 //\u793a\u4f8b\u4ee3\u7801 var frenchHello string // \u58f0\u660e\u53d8\u91cf\u4e3a\u5b57\u7b26\u4e32\u7684\u4e00\u822c\u65b9\u6cd5 var emptyString string = \"\" // \u58f0\u660e\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u53d8\u91cf\uff0c\u521d\u59cb\u5316\u4e3a\u7a7a\u5b57\u7b26\u4e32 func test() { no, yes, maybe := \"no\", \"yes\", \"maybe\" // \u7b80\u77ed\u58f0\u660e\uff0c\u540c\u65f6\u58f0\u660e\u591a\u4e2a\u53d8\u91cf japaneseHello := \"Konichiwa\" // \u540c\u4e0a frenchHello = \"Bonjour\" // \u5e38\u89c4\u8d4b\u503c } \u5728Go\u4e2d\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u7f16\u8bd1\u65f6\u4f1a\u62a5\u9519\uff1acannot assign to s[0] var s string = \"hello\" s[0] = 'c' \u4f46\u5982\u679c\u771f\u7684\u60f3\u8981\u4fee\u6539\u600e\u4e48\u529e\u5462\uff1f\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u5b9e\u73b0\uff1a s := \"hello\" c := []byte(s) // \u5c06\u5b57\u7b26\u4e32 s \u8f6c\u6362\u4e3a []byte \u7c7b\u578b c[0] = 'c' s2 := string(c) // \u518d\u8f6c\u6362\u56de string \u7c7b\u578b fmt.Printf(\"%s\\n\", s2) Go\u4e2d\u53ef\u4ee5\u4f7f\u7528 + \u64cd\u4f5c\u7b26\u6765\u8fde\u63a5\u4e24\u4e2a\u5b57\u7b26\u4e32\uff1a s := \"hello,\" m := \" world\" a := s + m fmt.Printf(\"%s\\n\", a) \u4fee\u6539\u5b57\u7b26\u4e32\u4e5f\u53ef\u5199\u4e3a\uff1a s := \"hello\" s = \"c\" + s[1:] // \u5b57\u7b26\u4e32\u867d\u4e0d\u80fd\u66f4\u6539\uff0c\u4f46\u53ef\u8fdb\u884c\u5207\u7247\u64cd\u4f5c fmt.Printf(\"%s\\n\", s) \u5982\u679c\u8981\u58f0\u660e\u4e00\u4e2a\u591a\u884c\u7684\u5b57\u7b26\u4e32\u600e\u4e48\u529e\uff1f\u53ef\u4ee5\u901a\u8fc7```\u6765\u58f0\u660e\uff1a m := `hello world` ` ` \u62ec\u8d77\u7684\u5b57\u7b26\u4e32\u4e3a Raw`\u5b57\u7b26\u4e32\uff0c\u5373\u5b57\u7b26\u4e32\u5728\u4ee3\u7801\u4e2d\u7684\u5f62\u5f0f\u5c31\u662f\u6253\u5370\u65f6\u7684\u5f62\u5f0f\uff0c\u5b83\u6ca1\u6709\u5b57\u7b26\u8f6c\u4e49\uff0c\u6362\u884c\u4e5f\u5c06\u539f\u6837\u8f93\u51fa\u3002\u4f8b\u5982\u672c\u4f8b\u4e2d\u4f1a\u8f93\u51fa\uff1a hello world \u9519\u8bef\u7c7b\u578b Go\u5185\u7f6e\u6709\u4e00\u4e2a error \u7c7b\u578b\uff0c\u4e13\u95e8\u7528\u6765\u5904\u7406\u9519\u8bef\u4fe1\u606f\uff0cGo\u7684 package \u91cc\u9762\u8fd8\u4e13\u95e8\u6709\u4e00\u4e2a\u5305 errors \u6765\u5904\u7406\u9519\u8bef\uff1a err := errors.New(\"emit macho dwarf: elf header corrupted\") if err != nil { fmt.Print(err) } \u5206\u7ec4\u58f0\u660e \u5728Go\u8bed\u8a00\u4e2d\uff0c\u540c\u65f6\u58f0\u660e\u591a\u4e2a\u5e38\u91cf\u3001\u53d8\u91cf\uff0c\u6216\u8005\u5bfc\u5165\u591a\u4e2a\u5305\u65f6\uff0c\u53ef\u91c7\u7528\u5206\u7ec4\u7684\u65b9\u5f0f\u8fdb\u884c\u58f0\u660e\u3002 \u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff1a import \"fmt\" import \"os\" const i = 100 const pi = 3.1415 const prefix = \"Go_\" var i int var pi float32 var prefix string \u53ef\u4ee5\u5206\u7ec4\u5199\u6210\u5982\u4e0b\u5f62\u5f0f\uff1a import( \"fmt\" \"os\" ) const( i = 100 pi = 3.1415 prefix = \"Go_\" ) var( i int pi float32 prefix string ) iota\u679a\u4e3e Go\u91cc\u9762\u6709\u4e00\u4e2a\u5173\u952e\u5b57 iota \uff0c\u8fd9\u4e2a\u5173\u952e\u5b57\u7528\u6765\u58f0\u660e enum \u7684\u65f6\u5019\u91c7\u7528\uff0c\u5b83\u9ed8\u8ba4\u5f00\u59cb\u503c\u662f0\uff0cconst\u4e2d\u6bcf\u589e\u52a0\u4e00\u884c\u52a01\uff1a package main import ( \"fmt\" ) const ( x = iota // x == 0 y = iota // y == 1 z = iota // z == 2 w // \u5e38\u91cf\u58f0\u660e\u7701\u7565\u503c\u65f6\uff0c\u9ed8\u8ba4\u548c\u4e4b\u524d\u4e00\u4e2a\u503c\u7684\u5b57\u9762\u76f8\u540c\u3002\u8fd9\u91cc\u9690\u5f0f\u5730\u8bf4w = iota\uff0c\u56e0\u6b64w == 3\u3002\u5176\u5b9e\u4e0a\u9762y\u548cz\u53ef\u540c\u6837\u4e0d\u7528\"= iota\" ) const v = iota // \u6bcf\u9047\u5230\u4e00\u4e2aconst\u5173\u952e\u5b57\uff0ciota\u5c31\u4f1a\u91cd\u7f6e\uff0c\u6b64\u65f6v == 0 const ( h, i, j = iota, iota, iota //h=0,i=0,j=0 iota\u5728\u540c\u4e00\u884c\u503c\u76f8\u540c ) const ( a = iota //a=0 b = \"B\" c = iota //c=2 d, e, f = iota, iota, iota //d=3,e=3,f=3 g = iota //g = 4 ) func main() { fmt.Println(a, b, c, d, e, f, g, h, i, j, x, y, z, w, v) } \u9664\u975e\u88ab\u663e\u5f0f\u8bbe\u7f6e\u4e3a\u5176\u5b83\u503c\u6216 iota \uff0c\u6bcf\u4e2a const \u5206\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5e38\u91cf\u88ab\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u5b83\u76840\u503c\uff0c\u7b2c\u4e8c\u53ca\u540e\u7eed\u7684\u5e38\u91cf\u88ab\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u5b83\u524d\u9762\u90a3\u4e2a\u5e38\u91cf\u7684\u503c\uff0c\u5982\u679c\u524d\u9762\u90a3\u4e2a\u5e38\u91cf\u7684\u503c\u662f iota \uff0c\u5219\u5b83\u4e5f\u88ab\u8bbe\u7f6e\u4e3a iota \u3002 Go\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u4e00\u4e9b\u89c4\u5219 Go\u4e4b\u6240\u4ee5\u4f1a\u90a3\u4e48\u7b80\u6d01\uff0c\u662f\u56e0\u4e3a\u5b83\u6709\u4e00\u4e9b\u9ed8\u8ba4\u7684\u884c\u4e3a\uff1a \u5927\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u53d8\u91cf\u662f\u53ef\u5bfc\u51fa\u7684\uff0c\u4e5f\u5c31\u662f\u5176\u5b83\u5305\u53ef\u4ee5\u8bfb\u53d6\u7684\uff0c\u662f\u516c\u6709\u53d8\u91cf\uff1b\u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u5c31\u662f\u4e0d\u53ef\u5bfc\u51fa\u7684\uff0c\u662f\u79c1\u6709\u53d8\u91cf\u3002 \u5927\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u51fd\u6570\u4e5f\u662f\u4e00\u6837\uff0c\u76f8\u5f53\u4e8e class \u4e2d\u7684\u5e26 public \u5173\u952e\u8bcd\u7684\u516c\u6709\u51fd\u6570\uff1b\u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u5c31\u662f\u6709 private \u5173\u952e\u8bcd\u7684\u79c1\u6709\u51fd\u6570\u3002 array \u3001 slice \u3001 map array array \u5c31\u662f\u6570\u7ec4\uff0c\u5b83\u7684\u5b9a\u4e49\u65b9\u5f0f\u5982\u4e0b\uff1a var arr [n]type \u5728 [n]type \u4e2d\uff0c n \u8868\u793a\u6570\u7ec4\u7684\u957f\u5ea6\uff0c type \u8868\u793a\u5b58\u50a8\u5143\u7d20\u7684\u7c7b\u578b\u3002\u5bf9\u6570\u7ec4\u7684\u64cd\u4f5c\u548c\u5176\u5b83\u8bed\u8a00\u7c7b\u4f3c\uff0c\u90fd\u662f\u901a\u8fc7 [] \u6765\u8fdb\u884c\u8bfb\u53d6\u6216\u8d4b\u503c\uff1a var arr [10]int // \u58f0\u660e\u4e86\u4e00\u4e2aint\u7c7b\u578b\u7684\u6570\u7ec4 arr[0] = 42 // \u6570\u7ec4\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u7684 arr[1] = 13 // \u8d4b\u503c\u64cd\u4f5c fmt.Printf(\"The first element is %d\\n\", arr[0]) // \u83b7\u53d6\u6570\u636e\uff0c\u8fd4\u56de42 fmt.Printf(\"The last element is %d\\n\", arr[9]) //\u8fd4\u56de\u672a\u8d4b\u503c\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u9ed8\u8ba4\u8fd4\u56de0 \u7531\u4e8e\u957f\u5ea6\u4e5f\u662f\u6570\u7ec4\u7c7b\u578b\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64 [3]int \u4e0e [4]int \u662f\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u6570\u7ec4\u4e5f\u5c31\u4e0d\u80fd\u6539\u53d8\u957f\u5ea6\u3002\u6570\u7ec4\u4e4b\u95f4\u7684\u8d4b\u503c\u662f\u503c\u7684\u8d4b\u503c\uff0c\u5373\u5f53\u628a\u4e00\u4e2a\u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f20\u5165\u7684\u5176\u5b9e\u662f\u8be5\u6570\u7ec4\u7684\u526f\u672c\uff0c\u800c\u4e0d\u662f\u5b83\u7684\u6307\u9488\u3002\u5982\u679c\u8981\u4f7f\u7528\u6307\u9488\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u7528\u5230\u540e\u9762\u4ecb\u7ecd\u7684 slice \u7c7b\u578b\u4e86\u3002 \u6570\u7ec4\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u79cd := \u6765\u58f0\u660e a := [3]int{1, 2, 3} // \u58f0\u660e\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a3\u7684int\u6570\u7ec4 b := [10]int{1, 2, 3} // \u58f0\u660e\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a10\u7684int\u6570\u7ec4\uff0c\u5176\u4e2d\u524d\u4e09\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a1\u30012\u30013\uff0c\u5176\u5b83\u9ed8\u8ba4\u4e3a0 c := [...]int{4, 5, 6} // \u53ef\u4ee5\u7701\u7565\u957f\u5ea6\u800c\u91c7\u7528`...`\u7684\u65b9\u5f0f\uff0cGo\u4f1a\u81ea\u52a8\u6839\u636e\u5143\u7d20\u4e2a\u6570\u6765\u8ba1\u7b97\u957f\u5ea6 Go\u652f\u6301\u5d4c\u5957\u6570\u7ec4\uff0c\u5373\u591a\u7ef4\u6570\u7ec4\u3002\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u5c31\u58f0\u660e\u4e86\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff1a // \u58f0\u660e\u4e86\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u4ee5\u4e24\u4e2a\u6570\u7ec4\u4f5c\u4e3a\u5143\u7d20\uff0c\u5176\u4e2d\u6bcf\u4e2a\u6570\u7ec4\u4e2d\u53c8\u67094\u4e2aint\u7c7b\u578b\u7684\u5143\u7d20 doubleArray := [2][4]int{[4]int{1, 2, 3, 4}, [4]int{5, 6, 7, 8}} // \u4e0a\u9762\u7684\u58f0\u660e\u53ef\u4ee5\u7b80\u5316\uff0c\u76f4\u63a5\u5ffd\u7565\u5185\u90e8\u7684\u7c7b\u578b easyArray := [2][4]int{{1, 2, 3, 4}, {5, 6, 7, 8}} slice \u5728\u5f88\u591a\u5e94\u7528\u573a\u666f\u4e2d\uff0c\u6570\u7ec4\u5e76\u4e0d\u80fd\u6ee1\u8db3\u9700\u6c42\u3002\u5728\u521d\u59cb\u5b9a\u4e49\u6570\u7ec4\u65f6\uff0c\u5e76\u4e0d\u77e5\u9053\u9700\u8981\u591a\u5927\u7684\u6570\u7ec4\uff0c\u56e0\u6b64\u5c31\u9700\u8981\u201c\u52a8\u6001\u6570\u7ec4\u201d\u3002\u5728Go\u91cc\u9762\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u53eb slice slice \u5e76\u4e0d\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u52a8\u6001\u6570\u7ec4\uff0c\u800c\u662f\u4e00\u4e2a\u5f15\u7528\u7c7b\u578b\u3002 slice \u603b\u662f\u6307\u5411\u4e00\u4e2a\u5e95\u5c42 array \uff0c slice \u7684\u58f0\u660e\u4e5f\u53ef\u4ee5\u50cf array \u4e00\u6837\uff0c\u53ea\u662f\u4e0d\u9700\u8981\u957f\u5ea6\u3002 // \u548c\u58f0\u660earray\u4e00\u6837\uff0c\u53ea\u662f\u5c11\u4e86\u957f\u5ea6 var fslice []int \u63a5\u4e0b\u6765\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a slice \uff0c\u5e76\u521d\u59cb\u5316\u6570\u636e\uff0c\u5982\u4e0b\u6240\u793a\uff1a slice := []byte {'a', 'b', 'c', 'd'} slice \u53ef\u4ee5\u4ece\u4e00\u4e2a\u6570\u7ec4\u6216\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684 slice \u4e2d\u518d\u6b21\u58f0\u660e\u3002 slice \u901a\u8fc7 array[i:j] \u6765\u83b7\u53d6\uff0c\u5176\u4e2d i \u662f\u6570\u7ec4\u7684\u5f00\u59cb\u4f4d\u7f6e\uff0c j \u662f\u7ed3\u675f\u4f4d\u7f6e\uff0c\u4f46\u4e0d\u5305\u542b array[j] \uff0c\u5b83\u7684\u957f\u5ea6\u662f j-i \u3002 // \u58f0\u660e\u4e00\u4e2a\u542b\u670910\u4e2a\u5143\u7d20\u5143\u7d20\u7c7b\u578b\u4e3abyte\u7684\u6570\u7ec4 var ar = [10]byte {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'} // \u58f0\u660e\u4e24\u4e2a\u542b\u6709byte\u7684slice var a, b []byte // a\u6307\u5411\u6570\u7ec4\u7684\u7b2c3\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u5e76\u5230\u7b2c\u4e94\u4e2a\u5143\u7d20\u7ed3\u675f\uff0c a = ar[2:5] //\u73b0\u5728a\u542b\u6709\u7684\u5143\u7d20: ar[2]\u3001ar[3]\u548car[4] // b\u662f\u6570\u7ec4ar\u7684\u53e6\u4e00\u4e2aslice b = ar[3:5] // b\u7684\u5143\u7d20\u662f\uff1aar[3]\u548car[4] \u6ce8\u610f slice \u548c\u6570\u7ec4\u5728\u58f0\u660e\u65f6\u7684\u533a\u522b\uff1a\u58f0\u660e\u6570\u7ec4\u65f6\uff0c\u65b9\u62ec\u53f7\u5185\u5199\u660e\u4e86\u6570\u7ec4\u7684\u957f\u5ea6\u6216\u4f7f\u7528 ... \u81ea\u52a8\u8ba1\u7b97\u957f\u5ea6\uff0c\u800c\u58f0\u660e slice \u65f6\uff0c\u65b9\u62ec\u53f7\u5185\u6ca1\u6709\u4efb\u4f55\u5b57\u7b26\u3002 slice \u6709\u4e00\u4e9b\u7b80\u4fbf\u7684\u64cd\u4f5c slice \u7684\u9ed8\u8ba4\u5f00\u59cb\u4f4d\u7f6e\u662f0\uff0c ar[:n] \u7b49\u4ef7\u4e8e ar[0:n] slice \u7684\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u9ed8\u8ba4\u662f\u6570\u7ec4\u7684\u957f\u5ea6\uff0c ar[n:] \u7b49\u4ef7\u4e8e ar[n:len(ar)] \u5982\u679c\u4ece\u4e00\u4e2a\u6570\u7ec4\u91cc\u9762\u76f4\u63a5\u83b7\u53d6 slice \uff0c\u53ef\u4ee5\u8fd9\u6837 ar[:] \uff0c\u56e0\u4e3a\u9ed8\u8ba4\u7b2c\u4e00\u4e2a\u5e8f\u5217\u662f0\uff0c\u7b2c\u4e8c\u4e2a\u662f\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5373\u7b49\u4ef7\u4e8e ar[0:len(ar)] \u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86\u66f4\u591a\u5173\u4e8e slice \u7684\u64cd\u4f5c\uff1a // \u58f0\u660e\u4e00\u4e2a\u6570\u7ec4 var array = [10]byte{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'} // \u58f0\u660e\u4e24\u4e2aslice var aSlice, bSlice []byte // \u6f14\u793a\u4e00\u4e9b\u7b80\u4fbf\u64cd\u4f5c aSlice = array[:3] // \u7b49\u4ef7\u4e8eaSlice = array[0:3] aSlice\u5305\u542b\u5143\u7d20: a,b,c aSlice = array[5:] // \u7b49\u4ef7\u4e8eaSlice = array[5:10] aSlice\u5305\u542b\u5143\u7d20: f,g,h,i,j aSlice = array[:] // \u7b49\u4ef7\u4e8eaSlice = array[0:10] \u8fd9\u6837aSlice\u5305\u542b\u4e86\u5168\u90e8\u7684\u5143\u7d20 // \u4eceslice\u4e2d\u83b7\u53d6slice aSlice = array[3:7] // aSlice\u5305\u542b\u5143\u7d20: d,e,f,g\uff0clen=4\uff0ccap=7 bSlice = aSlice[1:3] // bSlice \u5305\u542baSlice[1], aSlice[2] \u4e5f\u5c31\u662f\u542b\u6709: e,f bSlice = aSlice[:3] // bSlice \u5305\u542b aSlice[0], aSlice[1], aSlice[2] \u4e5f\u5c31\u662f\u542b\u6709: d,e,f bSlice = aSlice[0:5] // \u5bf9slice\u7684slice\u53ef\u4ee5\u5728cap\u8303\u56f4\u5185\u6269\u5c55\uff0c\u6b64\u65f6bSlice\u5305\u542b\uff1ad,e,f,g,h bSlice = aSlice[:] // bSlice\u5305\u542b\u6240\u6709aSlice\u7684\u5143\u7d20: d,e,f,g slice \u662f\u5f15\u7528\u7c7b\u578b\uff0c\u6240\u4ee5\u5f53\u5f15\u7528\u6539\u53d8\u5176\u4e2d\u5143\u7d20\u7684\u503c\u65f6\uff0c\u5176\u5b83\u7684\u6240\u6709\u5f15\u7528\u90fd\u4f1a\u6539\u53d8\u8be5\u503c\uff0c\u4f8b\u5982\u4e0a\u9762\u7684 aSlice \u548c bSlice \uff0c\u5982\u679c\u4fee\u6539\u4e86 aSlice \u4e2d\u5143\u7d20\u7684\u503c\uff0c\u90a3\u4e48 bSlice \u76f8\u5bf9\u5e94\u7684\u503c\u4e5f\u4f1a\u6539\u53d8\u3002 \u4ece\u6982\u5ff5\u4e0a\u9762\u6765\u8bf4 slice \u50cf\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5305\u542b\u4e86\u4e09\u4e2a\u5143\u7d20\uff1a \u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u6570\u7ec4\u4e2d slice \u6307\u5b9a\u7684\u5f00\u59cb\u4f4d\u7f6e \u957f\u5ea6\uff0c\u5373 slice \u7684\u957f\u5ea6 \u6700\u5927\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f slice \u5f00\u59cb\u4f4d\u7f6e\u5230\u6570\u7ec4\u7684\u6700\u540e\u4f4d\u7f6e\u7684\u957f\u5ea6 Array_a := [10]byte{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'} Slice_a := Array_a[2:5] slice \u6709\u51e0\u4e2a\u6709\u7528\u7684\u5185\u7f6e\u51fd\u6570 len \u83b7\u53d6 slice \u7684\u957f\u5ea6 cap \u83b7\u53d6 slice \u7684\u6700\u5927\u5bb9\u91cf append \u5411 slice \u91cc\u9762\u8ffd\u52a0\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u548c slice \u4e00\u6837\u7c7b\u578b\u7684 slice copy \u51fd\u6570 copy \u4ece\u6e90 slice \u7684 src \u4e2d\u590d\u5236\u5143\u7d20\u5230\u76ee\u6807 dst \uff0c\u5e76\u4e14\u8fd4\u56de\u590d\u5236\u7684\u5143\u7d20\u7684\u4e2a\u6570 \u6ce8\uff1a append \u51fd\u6570\u4f1a\u6539\u53d8 slice \u6240\u5f15\u7528\u7684\u6570\u7ec4\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u5f71\u54cd\u5230\u5f15\u7528\u540c\u4e00\u6570\u7ec4\u7684\u5176\u5b83 slice \u3002 \u4f46\u5f53 slice \u4e2d\u6ca1\u6709\u5269\u4f59\u7a7a\u95f4\uff08\u5373 (cap-len) == 0 \uff09\u65f6\uff0c\u6b64\u65f6\u5c06\u52a8\u6001\u5206\u914d\u65b0\u7684\u6570\u7ec4\u7a7a\u95f4\u3002\u8fd4\u56de\u7684 slice \u6570\u7ec4\u6307\u9488\u5c06\u6307\u5411\u8fd9\u4e2a\u7a7a\u95f4\uff0c\u800c\u539f\u6570\u7ec4\u7684\u5185\u5bb9\u5c06\u4fdd\u6301\u4e0d\u53d8\uff1b\u5176\u5b83\u5f15\u7528\u6b64\u6570\u7ec4\u7684 slice \u5219\u4e0d\u53d7\u5f71\u54cd\u3002 \u4eceGo1.2\u5f00\u59cb slice \u652f\u6301\u4e86\u4e09\u4e2a\u53c2\u6570\u7684 slice \uff0c\u4e4b\u524d\u4e00\u76f4\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\u5728 slice \u6216\u8005 array \u57fa\u7840\u4e0a\u6765\u83b7\u53d6\u4e00\u4e2a slice var array [10]int slice := array[2:4] \u8fd9\u4e2a\u4f8b\u5b50\u91cc\u9762slice\u7684\u5bb9\u91cf\u662f8\uff0c\u65b0\u7248\u672c\u91cc\u9762\u53ef\u4ee5\u6307\u5b9a\u8fd9\u4e2a\u5bb9\u91cf slice = array[2:4:7] \u4e0a\u9762\u8fd9\u4e2a\u7684\u5bb9\u91cf\u5c31\u662f 7-2 \uff0c\u53735\u3002\u8fd9\u6837\u8fd9\u4e2a\u4ea7\u751f\u7684\u65b0\u7684 slice \u5c31\u6ca1\u529e\u6cd5\u8bbf\u95ee\u6700\u540e\u7684\u4e09\u4e2a\u5143\u7d20\u3002 \u5982\u679c slice \u662f\u8fd9\u6837\u7684\u5f62\u5f0f array[:i:j] \uff0c\u5373\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u7a7a\uff0c\u9ed8\u8ba4\u503c\u5c31\u662f0\u3002 map map`\u4e5f\u5c31\u662fPython\u4e2d\u5b57\u5178\u7684\u6982\u5ff5\uff0c\u5b83\u7684\u683c\u5f0f\u4e3a`map[keyType]valueType \u770b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c map \u7684\u8bfb\u53d6\u548c\u8bbe\u7f6e\u4e5f\u7c7b\u4f3c slice \u4e00\u6837\uff0c\u901a\u8fc7 key \u6765\u64cd\u4f5c\uff0c\u53ea\u662f slice \u7684 index \u53ea\u80fd\u662f\uff40int\uff40\u7c7b\u578b\uff0c\u800c map \u591a\u4e86\u5f88\u591a\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f int \uff0c\u53ef\u4ee5\u662f string \u53ca\u6240\u6709\u5b8c\u5168\u5b9a\u4e49\u4e86 == \u4e0e != \u64cd\u4f5c\u7684\u7c7b\u578b\u3002 // \u58f0\u660e\u4e00\u4e2akey\u662f\u5b57\u7b26\u4e32\uff0c\u503c\u4e3aint\u7684\u5b57\u5178,\u8fd9\u79cd\u65b9\u5f0f\u7684\u58f0\u660e\u9700\u8981\u5728\u4f7f\u7528\u4e4b\u524d\u4f7f\u7528make\u521d\u59cb\u5316 var numbers map[string]int // \u53e6\u4e00\u79cdmap\u7684\u58f0\u660e\u65b9\u5f0f numbers = make(map[string]int) numbers[\"one\"] = 1 //\u8d4b\u503c numbers[\"ten\"] = 10 //\u8d4b\u503c numbers[\"three\"] = 3 fmt.Println(\"\u7b2c\u4e09\u4e2a\u6570\u5b57\u662f: \", numbers[\"three\"]) // \u8bfb\u53d6\u6570\u636e // \u6253\u5370\u51fa\u6765\u5982:\u7b2c\u4e09\u4e2a\u6570\u5b57\u662f: 3 \u8fd9\u4e2a map \u5c31\u50cf\u5e73\u5e38\u770b\u5230\u7684\u8868\u683c\u4e00\u6837\uff0c\u5de6\u8fb9\u5217\u662f key \uff0c\u53f3\u8fb9\u5217\u662f\u503c \u4f7f\u7528 map \u8fc7\u7a0b\u4e2d\u9700\u8981\u6ce8\u610f\u7684\u51e0\u70b9\uff1a map \u662f\u65e0\u5e8f\u7684\uff0c\u6bcf\u6b21\u6253\u5370\u51fa\u6765\u7684 map \u90fd\u4f1a\u4e0d\u4e00\u6837\uff0c\u5b83\u4e0d\u80fd\u901a\u8fc7 index \u83b7\u53d6\uff0c\u800c\u5fc5\u987b\u901a\u8fc7 key \u83b7\u53d6 map \u7684\u957f\u5ea6\u662f\u4e0d\u56fa\u5b9a\u7684\uff0c\u4e5f\u5c31\u662f\u548c slice \u4e00\u6837\uff0c\u4e5f\u662f\u4e00\u79cd\u5f15\u7528\u7c7b\u578b \u5185\u7f6e\u7684 len \u51fd\u6570\u540c\u6837\u9002\u7528\u4e8e map \uff0c\u8fd4\u56de map \u62e5\u6709\u7684 key \u7684\u6570\u91cf map \u7684\u503c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4fee\u6539\uff0c\u901a\u8fc7 numbers[\"one\"]=11 \u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u628akey\u4e3a one \u7684\u5b57\u5178\u503c\u6539\u4e3a 11 map \u548c\u5176\u4ed6\u57fa\u672c\u578b\u522b\u4e0d\u540c\uff0c\u5b83\u4e0d\u662fthread-safe\uff0c\u5728\u591a\u4e2ago-routine\u5b58\u53d6\u65f6\uff0c\u5fc5\u987b\u4f7f\u7528mutex lock\u673a\u5236 map \u7684\u521d\u59cb\u5316\u53ef\u4ee5\u901a\u8fc7 key:val \u7684\u65b9\u5f0f\u521d\u59cb\u5316\u503c\uff0c\u540c\u65f6 map \u5185\u7f6e\u6709\u5224\u65ad\u662f\u5426\u5b58\u5728 key \u7684\u65b9\u5f0f \u901a\u8fc7 delete \u5220\u9664 map \u7684\u5143\u7d20\uff1a // \u521d\u59cb\u5316\u4e00\u4e2a\u5b57\u5178 rating := map[string]float32{\"C\":5, \"Go\":4.5, \"Python\":4.5, \"C++\":2 } // map\u6709\u4e24\u4e2a\u8fd4\u56de\u503c\uff0c\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\uff0c\u5982\u679c\u4e0d\u5b58\u5728key\uff0c\u90a3\u4e48ok\u4e3afalse\uff0c\u5982\u679c\u5b58\u5728ok\u4e3atrue csharpRating, ok := rating[\"C#\"] if ok { fmt.Println(\"C# is in the map and its rating is \", csharpRating) } else { fmt.Println(\"We have no rating associated with C# in the map\") } delete(rating, \"C\") // \u5220\u9664key\u4e3aC\u7684\u5143\u7d20 \u4e0a\u9762\u8bf4\u8fc7\u4e86\uff0c map \u4e5f\u662f\u4e00\u79cd\u5f15\u7528\u7c7b\u578b\uff0c\u5982\u679c\u4e24\u4e2a map \u540c\u65f6\u6307\u5411\u4e00\u4e2a\u5e95\u5c42\uff0c\u90a3\u4e48\u4e00\u4e2a\u6539\u53d8\uff0c\u53e6\u4e00\u4e2a\u4e5f\u76f8\u5e94\u7684\u6539\u53d8\uff1a m := make(map[string]string) m[\"Hello\"] = \"Bonjour\" m1 := m m1[\"Hello\"] = \"Salut\" // \u73b0\u5728m[\"hello\"]\u7684\u503c\u5df2\u7ecf\u662fSalut\u4e86 make \u3001 new \u64cd\u4f5c make \u7528\u4e8e\u5185\u5efa\u7c7b\u578b\uff08 map \u3001 slice \u548c channel \uff09\u7684\u5185\u5b58\u5206\u914d\u3002 new \u7528\u4e8e\u5404\u79cd\u7c7b\u578b\u7684\u5185\u5b58\u5206\u914d\u3002 \u5185\u5efa\u51fd\u6570 new \u672c\u8d28\u4e0a\u8bf4\u8ddf\u5176\u5b83\u8bed\u8a00\u4e2d\u7684\u540c\u540d\u51fd\u6570\u529f\u80fd\u4e00\u6837\uff1a new(T) \u5206\u914d\u4e86\u96f6\u503c\u586b\u5145\u7684 T \u7c7b\u578b\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u4e14\u8fd4\u56de\u5176\u5730\u5740\uff0c\u5373\u4e00\u4e2a *T \u7c7b\u578b\u7684\u503c\u3002\u7528Go\u7684\u672f\u8bed\u8bf4\uff0c\u5b83\u8fd4\u56de\u4e86\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u65b0\u5206\u914d\u7684\u7c7b\u578b T \u7684\u96f6\u503c\u3002\u6709\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff1a new \u8fd4\u56de\u6307\u9488\u3002 \u5185\u5efa\u51fd\u6570 make(T, args) \u4e0e new(T) \u6709\u7740\u4e0d\u540c\u7684\u529f\u80fd\uff0cmake\u53ea\u80fd\u521b\u5efa slice \u3001 map \u548c channel \uff0c\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a\u6709\u521d\u59cb\u503c(\u975e\u96f6)\u7684 T \u7c7b\u578b\uff0c\u800c\u4e0d\u662f *T \u3002\u672c\u8d28\u6765\u8bb2\uff0c\u5bfc\u81f4\u8fd9\u4e09\u4e2a\u7c7b\u578b\u6709\u6240\u4e0d\u540c\u7684\u539f\u56e0\u662f\u6307\u5411\u6570\u636e\u7ed3\u6784\u7684\u5f15\u7528\u5728\u4f7f\u7528\u524d\u5fc5\u987b\u88ab\u521d\u59cb\u5316\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a slice \uff0c\u662f\u4e00\u4e2a\u5305\u542b\u6307\u5411\u6570\u636e\uff08\u5185\u90e8 array \uff09\u7684\u6307\u9488\u3001\u957f\u5ea6\u548c\u5bb9\u91cf\u7684\u4e09\u9879\u63cf\u8ff0\u7b26\uff1b\u5728\u8fd9\u4e9b\u9879\u76ee\u88ab\u521d\u59cb\u5316\u4e4b\u524d\uff0c slice \u4e3a nil \u3002\u5bf9\u4e8e slice \u3001 map \u548c channel \u6765\u8bf4\uff0c make \u521d\u59cb\u5316\u4e86\u5185\u90e8\u7684\u6570\u636e\u7ed3\u6784\uff0c\u586b\u5145\u9002\u5f53\u7684\u503c\u3002 make \u8fd4\u56de\u521d\u59cb\u5316\u540e\u7684\uff08\u975e\u96f6\uff09\u503c\u3002 \u96f6\u503c \u5173\u4e8e\u201c\u96f6\u503c\u201d\uff0c\u6240\u6307\u5e76\u975e\u662f\u7a7a\u503c\uff0c\u800c\u662f\u4e00\u79cd\u201c\u53d8\u91cf\u672a\u586b\u5145\u524d\u201d\u7684\u9ed8\u8ba4\u503c\uff0c\u901a\u5e38\u4e3a0\u3002 \u6b64\u5904\u7f57\u5217 \u90e8\u5206\u7c7b\u578b \u7684 \u201c\u96f6\u503c\u201d int 0 int8 0 int32 0 int64 0 uint 0x0 rune 0 //rune\u7684\u5b9e\u9645\u7c7b\u578b\u662f int32 byte 0x0 // byte\u7684\u5b9e\u9645\u7c7b\u578b\u662f uint8 float32 0 //\u957f\u5ea6\u4e3a 4 byte float64 0 //\u957f\u5ea6\u4e3a 8 byte bool false string \"\" \u6d41\u7a0b\u63a7\u5236 Go\u4e2d\u6d41\u7a0b\u63a7\u5236\u5206\u4e09\u5927\u7c7b\uff1a\u6761\u4ef6\u5224\u65ad\uff0c\u5faa\u73af\u63a7\u5236\u548c\u65e0\u6761\u4ef6\u8df3\u8f6c\u3002 if if \u4e5f\u8bb8\u662f\u5404\u79cd\u7f16\u7a0b\u8bed\u8a00\u4e2d\u6700\u5e38\u89c1\u7684\u4e86\uff0c\u5b83\u7684\u8bed\u6cd5\u6982\u62ec\u8d77\u6765\u5c31\u662f\uff1a\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u505a\u67d0\u4e8b\uff0c\u5426\u5219\u505a\u53e6\u4e00\u4ef6\u4e8b\u3002 Go\u91cc\u9762 if \u6761\u4ef6\u5224\u65ad\u8bed\u53e5\u4e2d\u4e0d\u9700\u8981\u62ec\u53f7\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a if x > 10 { fmt.Println(\"x is greater than 10\") } else { fmt.Println(\"x is less than 10\") } Go\u7684 if \u8fd8\u6709\u4e00\u4e2a\u5f3a\u5927\u7684\u5730\u65b9\u5c31\u662f\u6761\u4ef6\u5224\u65ad\u8bed\u53e5\u91cc\u9762\u5141\u8bb8\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\uff0c\u8fd9\u4e2a\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u53ea\u80fd\u5728\u8be5\u6761\u4ef6\u903b\u8f91\u5757\u5185\uff0c\u5176\u4ed6\u5730\u65b9\u5c31\u4e0d\u8d77\u4f5c\u7528\u4e86\uff0c\u5982\u4e0b\u6240\u793a // \u8ba1\u7b97\u83b7\u53d6\u503cx,\u7136\u540e\u6839\u636ex\u8fd4\u56de\u7684\u5927\u5c0f\uff0c\u5224\u65ad\u662f\u5426\u5927\u4e8e10\u3002 if x := computedValue(); x > 10 { fmt.Println(\"x is greater than 10\") } else { fmt.Println(\"x is less than 10\") } //\u8fd9\u4e2a\u5730\u65b9\u5982\u679c\u8fd9\u6837\u8c03\u7528\u5c31\u7f16\u8bd1\u51fa\u9519\u4e86\uff0c\u56e0\u4e3ax\u662f\u6761\u4ef6\u91cc\u9762\u7684\u53d8\u91cf fmt.Println(x) \u591a\u4e2a\u6761\u4ef6\u7684\u65f6\u5019\u5982\u4e0b\u6240\u793a\uff1a if integer == 3 { fmt.Println(\"The integer is equal to 3\") } else if integer < 3 { fmt.Println(\"The integer is less than 3\") } else { fmt.Println(\"The integer is greater than 3\") } goto Go\u6709 goto \u8bed\u53e5\u2014\u2014\u8bf7\u660e\u667a\u5730\u4f7f\u7528\u5b83\u3002\u7528 goto \u8df3\u8f6c\u5230\u5fc5\u987b\u5728\u5f53\u524d\u51fd\u6570\u5185\u5b9a\u4e49\u7684\u6807\u7b7e\u3002\u4f8b\u5982\u5047\u8bbe\u8fd9\u6837\u4e00\u4e2a\u5faa\u73af\uff1a func myFunc() { i := 0 Here: //\u8fd9\u884c\u7684\u7b2c\u4e00\u4e2a\u8bcd\uff0c\u4ee5\u5192\u53f7\u7ed3\u675f\u4f5c\u4e3a\u6807\u7b7e println(i) i++ goto Here //\u8df3\u8f6c\u5230Here\u53bb } \u6807\u7b7e\u540d\u662f\u5927\u5c0f\u5199\u654f\u611f\u7684\u3002 for Go\u91cc\u9762\u6700\u5f3a\u5927\u7684\u4e00\u4e2a\u63a7\u5236\u903b\u8f91\u5c31\u662f for \uff0c\u5b83\u65e2\u53ef\u4ee5\u7528\u6765\u5faa\u73af\u8bfb\u53d6\u6570\u636e\uff0c\u53c8\u53ef\u4ee5\u5f53\u4f5c while \u6765\u63a7\u5236\u903b\u8f91\uff0c\u8fd8\u80fd\u8fed\u4ee3\u64cd\u4f5c\u3002\u5b83\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a for expression1; expression2; expression3 { //... } expression1 \u3001 expression2 \u548c expression3 \u90fd\u662f\u8868\u8fbe\u5f0f\uff0c\u5176\u4e2d expression1 \u548c expression3 \u662f\u53d8\u91cf\u58f0\u660e\u6216\u8005\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u503c\u4e4b\u7c7b\u7684\uff0c expression2 \u662f\u7528\u6765\u6761\u4ef6\u5224\u65ad\uff0c expression1 \u5728\u5faa\u73af\u5f00\u59cb\u4e4b\u524d\u8c03\u7528\uff0c expression3 \u5728\u6bcf\u8f6e\u5faa\u73af\u7ed3\u675f\u4e4b\u65f6\u8c03\u7528\u3002 \u4e00\u4e2a\u4f8b\u5b50\u6bd4\u4e0a\u9762\u8bb2\u90a3\u4e48\u591a\u66f4\u6709\u7528\uff0c\u770b\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\u5427\uff1a package main import \"fmt\" func main(){ sum := 0; for index:=0; index < 10 ; index++ { sum += index } fmt.Println(\"sum is equal to \", sum) } // \u8f93\u51fa\uff1asum is equal to 45 \u6709\u4e9b\u65f6\u5019\u9700\u8981\u8fdb\u884c\u591a\u4e2a\u8d4b\u503c\u64cd\u4f5c\uff0c\u7531\u4e8eGo\u91cc\u9762\u6ca1\u6709 , \u64cd\u4f5c\u7b26\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u5e73\u884c\u8d4b\u503c i, j = i+1, j-1 \u6709\u4e9b\u65f6\u5019\u5982\u679c\u5ffd\u7565 expression1 \u548c expression3 \uff1a sum := 1 for ; sum < 1000; { sum += sum } \u5176\u4e2d ; \u4e5f\u53ef\u4ee5\u7701\u7565\uff0c\u90a3\u4e48\u5c31\u53d8\u6210\u5982\u4e0b\u7684\u4ee3\u7801\u4e86\uff0c\u8fd9\u5c31\u662f while \u7684\u529f\u80fd\u3002 sum := 1 for sum < 1000 { sum += sum } \u5728\u5faa\u73af\u91cc\u9762\u6709\u4e24\u4e2a\u5173\u952e\u64cd\u4f5c break \u548c continue , break \u64cd\u4f5c\u662f\u8df3\u51fa\u5f53\u524d\u5faa\u73af\uff0c continue \u662f\u8df3\u8fc7\u672c\u6b21\u5faa\u73af\u3002\u5f53\u5d4c\u5957\u8fc7\u6df1\u7684\u65f6\u5019\uff0c break \u53ef\u4ee5\u914d\u5408\u6807\u7b7e\u4f7f\u7528\uff0c\u5373\u8df3\u8f6c\u81f3\u6807\u7b7e\u6240\u6307\u5b9a\u7684\u4f4d\u7f6e\uff0c\u8be6\u7ec6\u53c2\u8003\u5982\u4e0b\u4f8b\u5b50\uff1a for index := 10; index>0; index-- { if index == 5{ break // \u6216\u8005continue } fmt.Println(index) } // break\u6253\u5370\u51fa\u676510\u30019\u30018\u30017\u30016 // continue\u6253\u5370\u51fa\u676510\u30019\u30018\u30017\u30016\u30014\u30013\u30012\u30011 break \u548c continue \u8fd8\u53ef\u4ee5\u8ddf\u7740\u6807\u53f7\uff0c\u7528\u6765\u8df3\u5230\u591a\u91cd\u5faa\u73af\u4e2d\u7684\u5916\u5c42\u5faa\u73af for \u914d\u5408 range \u53ef\u4ee5\u7528\u4e8e\u8bfb\u53d6 slice \u548c map \u7684\u6570\u636e\uff1a for k,v:=range map { fmt.Println(\"map's key:\",k) fmt.Println(\"map's val:\",v) } \u7531\u4e8e Go \u652f\u6301 \u201c\u591a\u503c\u8fd4\u56de\u201d, \u800c\u5bf9\u4e8e\u201c\u58f0\u660e\u800c\u672a\u88ab\u8c03\u7528\u201d\u7684\u53d8\u91cf, \u7f16\u8bd1\u5668\u4f1a\u62a5\u9519, \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u53ef\u4ee5\u4f7f\u7528 _ \u6765\u4e22\u5f03\u4e0d\u9700\u8981\u7684\u8fd4\u56de\u503c \u4f8b\u5982 for _, v := range map{ fmt.Println(\"map's val:\", v) } switch \u6709\u4e9b\u65f6\u5019\u9700\u8981\u5199\u5f88\u591a\u7684 if-else \u6765\u5b9e\u73b0\u4e00\u4e9b\u903b\u8f91\u5904\u7406\uff0c\u8fd9\u4e2a\u65f6\u5019\u4ee3\u7801\u770b\u4e0a\u53bb\u5c31\u5f88\u4e11\u5f88\u5197\u957f\uff0c\u800c\u4e14\u4e5f\u4e0d\u6613\u4e8e\u4ee5\u540e\u7684\u7ef4\u62a4\uff0c\u8fd9\u4e2a\u65f6\u5019 switch \u5c31\u80fd\u5f88\u597d\u7684\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u5b83\u7684\u8bed\u6cd5\u5982\u4e0b switch sExpr { case expr1: some instructions case expr2: some other instructions case expr3: some other instructions default: other code } sExpr \u548c expr1 \u3001 expr2 \u3001 expr3 \u7684\u7c7b\u578b\u5fc5\u987b\u4e00\u81f4\u3002Go\u7684 switch \u975e\u5e38\u7075\u6d3b\uff0c\u8868\u8fbe\u5f0f\u4e0d\u5fc5\u662f\u5e38\u91cf\u6216\u6574\u6570\uff0c\u6267\u884c\u7684\u8fc7\u7a0b\u4ece\u4e0a\u81f3\u4e0b\uff0c\u76f4\u5230\u627e\u5230\u5339\u914d\u9879\uff1b\u800c\u5982\u679c switch \u6ca1\u6709\u8868\u8fbe\u5f0f\uff0c\u5b83\u4f1a\u5339\u914d true \u3002 i := 10 switch i { case 1: fmt.Println(\"i is equal to 1\") case 2, 3, 4: fmt.Println(\"i is equal to 2, 3 or 4\") case 10: fmt.Println(\"i is equal to 10\") default: fmt.Println(\"All I know is that i is an integer\") } \u5728\u7b2c5\u884c\u4e2d\uff0c\u628a\u5f88\u591a\u503c\u805a\u5408\u5728\u4e86\u4e00\u4e2a case \u91cc\u9762\uff0c\u540c\u65f6\uff0cGo\u91cc\u9762 switch \u9ed8\u8ba4\u76f8\u5f53\u4e8e\u6bcf\u4e2a case \u6700\u540e\u5e26\u6709 break \uff0c\u5339\u914d\u6210\u529f\u540e\u4e0d\u4f1a\u81ea\u52a8\u5411\u4e0b\u6267\u884c\u5176\u4ed6case\uff0c\u800c\u662f\u8df3\u51fa\u6574\u4e2a switch , \u4f46\u662f\u53ef\u4ee5\u4f7f\u7528 fallthrough \u5f3a\u5236\u6267\u884c\u540e\u9762\u7684case\u4ee3\u7801\u3002 integer := 6 switch integer { case 4: fmt.Println(\"The integer was <= 4\") fallthrough case 5: fmt.Println(\"The integer was <= 5\") fallthrough case 6: fmt.Println(\"The integer was <= 6\") fallthrough case 7: fmt.Println(\"The integer was <= 7\") fallthrough case 8: fmt.Println(\"The integer was <= 8\") fallthrough default: fmt.Println(\"default case\") } \u4e0a\u9762\u7684\u7a0b\u5e8f\u5c06\u8f93\u51fa The integer was <= 6 The integer was <= 7 The integer was <= 8 default case \u51fd\u6570 \u51fd\u6570\u7684\u5b9a\u4e49 \u51fd\u6570\u662fGo\u91cc\u9762\u7684\u6838\u5fc3\u8bbe\u8ba1\uff0c\u5b83\u901a\u8fc7\u5173\u952e\u5b57 func \u6765\u58f0\u660e\uff0c\u5b83\u7684\u683c\u5f0f\u5982\u4e0b\uff1a func funcName(input1 type1, input2 type2) (output1 type1, output2 type2) { //\u8fd9\u91cc\u662f\u5904\u7406\u903b\u8f91\u4ee3\u7801 //\u8fd4\u56de\u591a\u4e2a\u503c return value1, value2 } \u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa \u5173\u952e\u5b57 func \u7528\u6765\u58f0\u660e\u4e00\u4e2a\u51fd\u6570 funcName \u51fd\u6570\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u53c2\u6570\uff0c\u6bcf\u4e2a\u53c2\u6570\u540e\u9762\u5e26\u6709\u7c7b\u578b\uff0c\u901a\u8fc7 , \u5206\u9694 \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u503c \u4e0a\u9762\u8fd4\u56de\u503c\u58f0\u660e\u4e86\u4e24\u4e2a\u53d8\u91cf output1 \u548c output2 \uff0c\u5982\u679c\u4e0d\u60f3\u58f0\u660e\u4e5f\u53ef\u4ee5\uff0c\u76f4\u63a5\u5c31\u4e24\u4e2a\u7c7b\u578b \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8fd4\u56de\u503c\u4e14\u4e0d\u58f0\u660e\u8fd4\u56de\u503c\u53d8\u91cf\uff0c\u90a3\u4e48\u53ef\u4ee5\u7701\u7565 \u5305\u62ec\u8fd4\u56de\u503c\u7684\u62ec\u53f7 \u5982\u679c\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u7701\u7565\u6700\u540e\u7684\u8fd4\u56de\u4fe1\u606f \u5982\u679c\u6709\u8fd4\u56de\u503c\uff0c \u90a3\u4e48\u5fc5\u987b\u5728\u51fd\u6570\u7684\u5916\u5c42\u6dfb\u52a0return\u8bed\u53e5 \u4e0b\u9762\u6765\u770b\u4e00\u4e2a\u5b9e\u9645\u5e94\u7528\u51fd\u6570\u7684\u4f8b\u5b50\uff08\u7528\u6765\u8ba1\u7b97Max\u503c\uff09 package main import \"fmt\" // \u8fd4\u56dea\u3001b\u4e2d\u6700\u5927\u503c. func max(a, b int) int { if a > b { return a } return b } func main() { x := 3 y := 4 z := 5 max_xy := max(x, y) //\u8c03\u7528\u51fd\u6570max(x, y) max_xz := max(x, z) //\u8c03\u7528\u51fd\u6570max(x, z) fmt.Printf(\"max(%d, %d) = %d\\n\", x, y, max_xy) fmt.Printf(\"max(%d, %d) = %d\\n\", x, z, max_xz) fmt.Printf(\"max(%d, %d) = %d\\n\", y, z, max(y,z)) // \u4e5f\u53ef\u5728\u8fd9\u76f4\u63a5\u8c03\u7528\u5b83 } \u4e0a\u9762\u8fd9\u4e2a\u91cc\u9762\u53ef\u4ee5\u770b\u5230 max \u51fd\u6570\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u5b83\u4eec\u7684\u7c7b\u578b\u90fd\u662f int \uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b\u53ef\u4ee5\u7701\u7565\uff08\u5373 a,b int,\u800c\u975e a int, b int)\uff0c\u9ed8\u8ba4\u4e3a\u79bb\u5b83\u6700\u8fd1\u7684\u7c7b\u578b\uff0c\u540c\u7406\u591a\u4e8e2\u4e2a\u540c\u7c7b\u578b\u7684\u53d8\u91cf\u6216\u8005\u8fd4\u56de\u503c\u3002\u540c\u65f6\u6ce8\u610f\u5230\u5b83\u7684\u8fd4\u56de\u503c\u5c31\u662f\u4e00\u4e2a\u7c7b\u578b\uff0c\u8fd9\u4e2a\u5c31\u662f\u7701\u7565\u5199\u6cd5\u3002 \u591a\u4e2a\u8fd4\u56de\u503c Go\u8bed\u8a00\u6bd4C\u66f4\u5148\u8fdb\u7684\u7279\u6027\uff0c\u5176\u4e2d\u4e00\u70b9\u5c31\u662f\u51fd\u6570\u80fd\u591f\u8fd4\u56de\u591a\u4e2a\u503c\u3002 \u76f4\u63a5\u770b\u4f8b\u5b50 package main import \"fmt\" //\u8fd4\u56de A+B \u548c A*B func SumAndProduct(A, B int) (int, int) { return A+B, A*B } func main() { x := 3 y := 4 xPLUSy, xTIMESy := SumAndProduct(x, y) fmt.Printf(\"%d + %d = %d\\n\", x, y, xPLUSy) fmt.Printf(\"%d * %d = %d\\n\", x, y, xTIMESy) } \u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\u5230\u76f4\u63a5\u8fd4\u56de\u4e86\u4e24\u4e2a\u53c2\u6570\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u547d\u540d\u8fd4\u56de\u53c2\u6570\u7684\u53d8\u91cf\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u9762\u53ea\u662f\u7528\u4e86\u4e24\u4e2a\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u6539\u6210\u5982\u4e0b\u8fd9\u6837\u7684\u5b9a\u4e49\uff0c\u7136\u540e\u8fd4\u56de\u7684\u65f6\u5019\u4e0d\u7528\u5e26\u4e0a\u53d8\u91cf\u540d\uff0c\u56e0\u4e3a\u76f4\u63a5\u5728\u51fd\u6570\u91cc\u9762\u521d\u59cb\u5316\u4e86\u3002\u4f46\u5982\u679c\u51fd\u6570\u662f\u5bfc\u51fa\u7684(\u9996\u5b57\u6bcd\u5927\u5199)\uff0c\u5b98\u65b9\u5efa\u8bae\uff1a\u6700\u597d\u547d\u540d\u8fd4\u56de\u503c\uff0c\u56e0\u4e3a\u4e0d\u547d\u540d\u8fd4\u56de\u503c\uff0c\u867d\u7136\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\u4e86\uff0c\u4f46\u662f\u4f1a\u9020\u6210\u751f\u6210\u7684\u6587\u6863\u53ef\u8bfb\u6027\u5dee\u3002 func SumAndProduct(A, B int) (add int, Multiplied int) { add = A+B Multiplied = A*B return } \u53d8\u53c2 Go\u51fd\u6570\u652f\u6301\u53d8\u53c2\u3002\u63a5\u53d7\u53d8\u53c2\u7684\u51fd\u6570\u662f\u6709\u7740\u4e0d\u5b9a\u6570\u91cf\u7684\u53c2\u6570\u7684\u3002\u4e3a\u4e86\u505a\u5230\u8fd9\u70b9\uff0c\u9996\u5148\u9700\u8981\u5b9a\u4e49\u51fd\u6570\u4f7f\u5176\u63a5\u53d7\u53d8\u53c2\uff1a func myfunc(arg ...int) {} arg ...int \u544a\u8bc9Go\u8fd9\u4e2a\u51fd\u6570\u63a5\u53d7\u4e0d\u5b9a\u6570\u91cf\u7684\u53c2\u6570\u3002\u6ce8\u610f\uff0c\u8fd9\u4e9b\u53c2\u6570\u7684\u7c7b\u578b\u5168\u90e8\u662f int \u3002\u5728\u51fd\u6570\u4f53\u4e2d\uff0c\u53d8\u91cf arg \u662f\u4e00\u4e2a int \u7684 slice \uff1a for _, n := range arg { fmt.Printf(\"And the number is: %d\\n\", n) } \u4f20\u503c\u4e0e\u4f20\u6307\u9488 \u4f20\u4e00\u4e2a\u53c2\u6570\u503c\u5230\u88ab\u8c03\u7528\u51fd\u6570\u91cc\u9762\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u4f20\u4e86\u8fd9\u4e2a\u503c\u7684\u4e00\u4efdcopy\uff0c\u5f53\u5728\u88ab\u8c03\u7528\u51fd\u6570\u4e2d\u4fee\u6539\u53c2\u6570\u503c\u7684\u65f6\u5019\uff0c\u8c03\u7528\u51fd\u6570\u4e2d\u76f8\u5e94\u5b9e\u53c2\u4e0d\u4f1a\u53d1\u751f\u4efb\u4f55\u53d8\u5316\uff0c\u56e0\u4e3a\u6570\u503c\u53d8\u5316\u53ea\u4f5c\u7528\u5728copy\u4e0a\u3002 \u4e3a\u4e86\u9a8c\u8bc1\u4e0a\u9762\u7684\u8bf4\u6cd5\uff0c\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50 package main import \"fmt\" //\u7b80\u5355\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u5b9e\u73b0\u4e86\u53c2\u6570+1\u7684\u64cd\u4f5c func add1(a int) int { a = a+1 // \u6539\u53d8\u4e86a\u7684\u503c return a //\u8fd4\u56de\u4e00\u4e2a\u65b0\u503c } func main() { x := 3 fmt.Println(\"x = \", x) // \u5e94\u8be5\u8f93\u51fa \"x = 3\" x1 := add1(x) //\u8c03\u7528add1(x) fmt.Println(\"x+1 = \", x1) // \u5e94\u8be5\u8f93\u51fa\"x+1 = 4\" fmt.Println(\"x = \", x) // \u5e94\u8be5\u8f93\u51fa\"x = 3\" } \u867d\u7136\u8c03\u7528\u4e86 add1 \u51fd\u6570\uff0c\u5e76\u4e14\u5728 add1 \u4e2d\u6267\u884c a = a+1 \u64cd\u4f5c\uff0c\u4f46\u662f\u4e0a\u9762\u4f8b\u5b50\u4e2d x \u53d8\u91cf\u7684\u503c\u6ca1\u6709\u53d1\u751f\u53d8\u5316 \u7406\u7531\u5f88\u7b80\u5355\uff1a\u56e0\u4e3a\u5f53\u8c03\u7528 add1 \u7684\u65f6\u5019\uff0c add1 \u63a5\u6536\u7684\u53c2\u6570\u5176\u5b9e\u662f x \u7684copy\uff0c\u800c\u4e0d\u662f x \u672c\u8eab\u3002 \u5982\u679c\u771f\u7684\u9700\u8981\u4f20\u8fd9\u4e2a x \u672c\u8eab,\u8be5\u600e\u4e48\u529e\u5462\uff1f \u8fd9\u5c31\u7275\u626f\u5230\u4e86\u6240\u8c13\u7684\u6307\u9488\u3002\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u662f\u5b58\u653e\u4e8e\u4e00\u5b9a\u5730\u5740\u4e0a\u7684\uff0c\u4fee\u6539\u53d8\u91cf\u5b9e\u9645\u662f\u4fee\u6539\u53d8\u91cf\u5730\u5740\u5904\u7684\u5185\u5b58\u3002\u53ea\u6709 add1 \u51fd\u6570\u77e5\u9053 x \u53d8\u91cf\u6240\u5728\u7684\u5730\u5740\uff0c\u624d\u80fd\u4fee\u6539 x \u53d8\u91cf\u7684\u503c\u3002\u6240\u4ee5\u9700\u8981\u5c06 x \u6240\u5728\u5730\u5740 &x \u4f20\u5165\u51fd\u6570\uff0c\u5e76\u5c06\u51fd\u6570\u7684\u53c2\u6570\u7684\u7c7b\u578b\u7531 int \u6539\u4e3a *int \uff0c\u5373\u6539\u4e3a\u6307\u9488\u7c7b\u578b\uff0c\u624d\u80fd\u5728\u51fd\u6570\u4e2d\u4fee\u6539 x \u53d8\u91cf\u7684\u503c\u3002\u6b64\u65f6\u53c2\u6570\u4ecd\u7136\u662f\u6309copy\u4f20\u9012\u7684\uff0c\u53ea\u662fcopy\u7684\u662f\u4e00\u4e2a\u6307\u9488\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50 package main import \"fmt\" //\u7b80\u5355\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u5b9e\u73b0\u4e86\u53c2\u6570+1\u7684\u64cd\u4f5c func add1(a *int) int { // \u8bf7\u6ce8\u610f\uff0c *a = *a+1 // \u4fee\u6539\u4e86a\u7684\u503c return *a // \u8fd4\u56de\u65b0\u503c } func main() { x := 3 fmt.Println(\"x = \", x) // \u5e94\u8be5\u8f93\u51fa \"x = 3\" x1 := add1(&x) // \u8c03\u7528 add1(&x) \u4f20x\u7684\u5730\u5740 fmt.Println(\"x+1 = \", x1) // \u5e94\u8be5\u8f93\u51fa \"x+1 = 4\" fmt.Println(\"x = \", x) // \u5e94\u8be5\u8f93\u51fa \"x = 4\" } \u8fd9\u6837\uff0c\u5c31\u8fbe\u5230\u4e86\u4fee\u6539 x \u7684\u76ee\u7684\u3002\u90a3\u4e48\u5230\u5e95\u4f20\u6307\u9488\u6709\u4ec0\u4e48\u597d\u5904\u5462\uff1f \u4f20\u6307\u9488\u4f7f\u5f97\u591a\u4e2a\u51fd\u6570\u80fd\u64cd\u4f5c\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 \u4f20\u6307\u9488\u6bd4\u8f83\u8f7b\u91cf\u7ea7 (8bytes),\u53ea\u662f\u4f20\u5185\u5b58\u5730\u5740\uff0c\u53ef\u4ee5\u7528\u6307\u9488\u4f20\u9012\u4f53\u79ef\u5927\u7684\u7ed3\u6784\u4f53\u3002\u5982\u679c\u7528\u53c2\u6570\u503c\u4f20\u9012\u7684\u8bdd, \u5728\u6bcf\u6b21copy\u4e0a\u9762\u5c31\u4f1a\u82b1\u8d39\u76f8\u5bf9\u8f83\u591a\u7684\u7cfb\u7edf\u5f00\u9500\uff08\u5185\u5b58\u548c\u65f6\u95f4\uff09\u3002\u6240\u4ee5\u5f53\u8981\u4f20\u9012\u5927\u7684\u7ed3\u6784\u4f53\u7684\u65f6\u5019\uff0c\u7528\u6307\u9488\u662f\u4e00\u4e2a\u660e\u667a\u7684\u9009\u62e9\u3002 Go\u8bed\u8a00\u4e2d channel \uff0c slice \uff0c map \u8fd9\u4e09\u79cd\u7c7b\u578b\u7684\u5b9e\u73b0\u673a\u5236\u7c7b\u4f3c\u6307\u9488\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\uff0c\u800c\u4e0d\u7528\u53d6\u5730\u5740\u540e\u4f20\u9012\u6307\u9488\u3002\uff08\u6ce8\uff1a\u82e5\u51fd\u6570\u9700\u6539\u53d8 slice \u7684\u957f\u5ea6\uff0c\u5219\u4ecd\u9700\u8981\u53d6\u5730\u5740\u4f20\u9012\u6307\u9488\uff09 defer Go\u8bed\u8a00\u4e2d\u6709\u79cd\u4e0d\u9519\u7684\u8bbe\u8ba1\uff0c\u5373\u5ef6\u8fdf\uff08defer\uff09\u8bed\u53e5\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u6dfb\u52a0\u591a\u4e2adefer\u8bed\u53e5\u3002\u5f53\u51fd\u6570\u6267\u884c\u5230\u6700\u540e\u65f6\uff0c\u8fd9\u4e9bdefer\u8bed\u53e5\u4f1a\u6309\u7167\u9006\u5e8f\u6267\u884c\uff0c\u6700\u540e\u8be5\u51fd\u6570\u8fd4\u56de\u3002\u7279\u522b\u662f\u5f53\u8fdb\u884c\u4e00\u4e9b\u6253\u5f00\u8d44\u6e90\u7684\u64cd\u4f5c\u65f6\uff0c\u9047\u5230\u9519\u8bef\u9700\u8981\u63d0\u524d\u8fd4\u56de\uff0c\u5728\u8fd4\u56de\u524d\u9700\u8981\u5173\u95ed\u76f8\u5e94\u7684\u8d44\u6e90\uff0c\u4e0d\u7136\u5f88\u5bb9\u6613\u9020\u6210\u8d44\u6e90\u6cc4\u9732\u7b49\u95ee\u9898\u3002\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff0c\u4e00\u822c\u5199\u6253\u5f00\u4e00\u4e2a\u8d44\u6e90\u662f\u8fd9\u6837\u64cd\u4f5c\u7684\uff1a func ReadWrite() bool { file.Open(\"file\") // \u505a\u4e00\u4e9b\u5de5\u4f5c if failureX { file.Close() return false } if failureY { file.Close() return false } file.Close() return true } \u4e0a\u9762\u6709\u5f88\u591a\u91cd\u590d\u7684\u4ee3\u7801\uff0cGo\u7684 defer \u6709\u6548\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u4f7f\u7528\u5b83\u540e\uff0c\u4e0d\u4f46\u4ee3\u7801\u91cf\u51cf\u5c11\u4e86\u5f88\u591a\uff0c\u800c\u4e14\u7a0b\u5e8f\u53d8\u5f97\u66f4\u4f18\u96c5\u3002\u5728 defer \u540e\u6307\u5b9a\u7684\u51fd\u6570\u4f1a\u5728\u51fd\u6570\u9000\u51fa\u524d\u8c03\u7528\u3002 func ReadWrite() bool { file.Open(\"file\") defer file.Close() if failureX { return false } if failureY { return false } return true } \u5982\u679c\u6709\u5f88\u591a\u8c03\u7528 defer \uff0c\u90a3\u4e48 defer \u662f\u91c7\u7528\u540e\u8fdb\u5148\u51fa\u6a21\u5f0f\uff0c\u6240\u4ee5\u5982\u4e0b\u4ee3\u7801\u4f1a\u8f93\u51fa 4 3 2 1 0 for i := 0; i < 5; i++ { defer fmt.Printf(\"%d \", i) } \u901a\u5e38\u6765\u8bf4\uff0cdefer\u4f1a\u7528\u5728\u91ca\u653e\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u5173\u95ed\u6587\u4ef6\u7b49\u9700\u8981\u5728\u51fd\u6570\u7ed3\u675f\u65f6\u5904\u7406\u7684\u64cd\u4f5c\u3002 \u51fd\u6570\u4f5c\u4e3a\u503c\u3001\u7c7b\u578b \u5728Go\u4e2d\u51fd\u6570\u4e5f\u662f\u4e00\u79cd\u53d8\u91cf\uff0c\u53ef\u4ee5\u901a\u8fc7 type \u6765\u5b9a\u4e49\u5b83\uff0c\u5b83\u7684\u7c7b\u578b\u5c31\u662f\u6240\u6709\u62e5\u6709\u76f8\u540c\u7684\u53c2\u6570\uff0c\u76f8\u540c\u7684\u8fd4\u56de\u503c\u7684\u4e00\u79cd\u7c7b\u578b type typeName func(input1 inputType1 , input2 inputType2 [, ...]) (result1 resultType1 [, ...]) \u51fd\u6570\u4f5c\u4e3a\u7c7b\u578b\u5230\u5e95\u6709\u4ec0\u4e48\u597d\u5904\u5462\uff1f\u90a3\u5c31\u662f\u53ef\u4ee5\u628a\u8fd9\u4e2a\u7c7b\u578b\u7684\u51fd\u6570\u5f53\u505a\u503c\u6765\u4f20\u9012\uff0c\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50 package main import \"fmt\" type testInt func(int) bool // \u58f0\u660e\u4e86\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b func isOdd(integer int) bool { if integer%2 == 0 { return false } return true } func isEven(integer int) bool { if integer%2 == 0 { return true } return false } // \u58f0\u660e\u7684\u51fd\u6570\u7c7b\u578b\u5728\u8fd9\u4e2a\u5730\u65b9\u5f53\u505a\u4e86\u4e00\u4e2a\u53c2\u6570 func filter(slice []int, f testInt) []int { var result []int for _, value := range slice { if f(value) { result = append(result, value) } } return result } func main(){ slice := []int {1, 2, 3, 4, 5, 7} fmt.Println(\"slice = \", slice) odd := filter(slice, isOdd) // \u51fd\u6570\u5f53\u505a\u503c\u6765\u4f20\u9012\u4e86 fmt.Println(\"Odd elements of slice are: \", odd) even := filter(slice, isEven) // \u51fd\u6570\u5f53\u505a\u503c\u6765\u4f20\u9012\u4e86 fmt.Println(\"Even elements of slice are: \", even) } \u51fd\u6570\u5f53\u505a\u503c\u548c\u7c7b\u578b\u5728\u5199\u4e00\u4e9b\u901a\u7528\u63a5\u53e3\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528\uff0c\u901a\u8fc7\u4e0a\u9762\u4f8b\u5b50\u770b\u5230 testInt \u8fd9\u4e2a\u7c7b\u578b\u662f\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b\uff0c\u7136\u540e\u4e24\u4e2a filter \u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u4e0e testInt \u7c7b\u578b\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u5b9e\u73b0\u5f88\u591a\u79cd\u7684\u903b\u8f91\uff0c\u8fd9\u6837\u4f7f\u5f97\u7a0b\u5e8f\u53d8\u5f97\u975e\u5e38\u7684\u7075\u6d3b\u3002 Panic\u548cRecover Go\u6ca1\u6709\u50cfJava\u90a3\u6837\u7684\u5f02\u5e38\u673a\u5236\uff0c\u5b83\u4e0d\u80fd\u629b\u51fa\u5f02\u5e38\uff0c\u800c\u662f\u4f7f\u7528\u4e86 panic \u548c recover \u673a\u5236\u3002\u4e00\u5b9a\u8981\u8bb0\u4f4f\uff0c\u5e94\u5f53\u628a\u5b83\u4f5c\u4e3a\u6700\u540e\u7684\u624b\u6bb5\u6765\u4f7f\u7528\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ee3\u7801\u4e2d\u5e94\u5f53\u6ca1\u6709\uff0c\u6216\u8005\u5f88\u5c11\u6709 panic \u7684\u4e1c\u897f\u3002\u8fd9\u662f\u4e2a\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u8bf7\u660e\u667a\u5730\u4f7f\u7528\u5b83\u3002 Panic \u662f\u4e00\u4e2a\u5185\u5efa\u51fd\u6570\uff0c\u53ef\u4ee5\u4e2d\u65ad\u539f\u6709\u7684\u63a7\u5236\u6d41\u7a0b\uff0c\u8fdb\u5165\u4e00\u4e2a panic \u72b6\u6001\u4e2d\u3002\u5f53\u51fd\u6570 F \u8c03\u7528 panic \uff0c\u51fd\u6570F\u7684\u6267\u884c\u88ab\u4e2d\u65ad\uff0c\u4f46\u662f F \u4e2d\u7684\u5ef6\u8fdf\u51fd\u6570\u4f1a\u6b63\u5e38\u6267\u884c\uff0c\u7136\u540eF\u8fd4\u56de\u5230\u8c03\u7528\u5b83\u7684\u5730\u65b9\u3002\u5728\u8c03\u7528\u7684\u5730\u65b9\uff0c F \u7684\u884c\u4e3a\u5c31\u50cf\u8c03\u7528\u4e86 panic \u3002\u8fd9\u4e00\u8fc7\u7a0b\u7ee7\u7eed\u5411\u4e0a\uff0c\u76f4\u5230\u53d1\u751f panic \u7684 goroutine \u4e2d\u6240\u6709\u8c03\u7528\u7684\u51fd\u6570\u8fd4\u56de\uff0c\u6b64\u65f6\u7a0b\u5e8f\u9000\u51fa\u3002 panic \u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 panic \u4ea7\u751f\u3002\u4e5f\u53ef\u4ee5\u7531\u8fd0\u884c\u65f6\u9519\u8bef\u4ea7\u751f\uff0c\u4f8b\u5982\u8bbf\u95ee\u8d8a\u754c\u7684\u6570\u7ec4\u3002 Recover \u662f\u4e00\u4e2a\u5185\u5efa\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u8ba9\u8fdb\u5165 panic \u72b6\u6001\u7684 goroutine \u6062\u590d\u8fc7\u6765\u3002 recover \u4ec5\u5728\u5ef6\u8fdf\u51fd\u6570\u4e2d\u6709\u6548\u3002\u5728\u6b63\u5e38\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u8c03\u7528 recover \u4f1a\u8fd4\u56de nil \uff0c\u5e76\u4e14\u6ca1\u6709\u5176\u5b83\u4efb\u4f55\u6548\u679c\u3002\u5982\u679c\u5f53\u524d\u7684 goroutine \u9677\u5165 panic \u72b6\u6001\uff0c\u8c03\u7528 recover \u53ef\u4ee5\u6355\u83b7\u5230 panic \u7684\u8f93\u5165\u503c\uff0c\u5e76\u4e14\u6062\u590d\u6b63\u5e38\u7684\u6267\u884c\u3002 \u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\u6f14\u793a\u4e86\u5982\u4f55\u5728\u8fc7\u7a0b\u4e2d\u4f7f\u7528 panic var user = os.Getenv(\"USER\") func init() { if user == \"\" { panic(\"no value for $USER\") } } \u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\u68c0\u67e5\u4f5c\u4e3a\u5176\u53c2\u6570\u7684\u51fd\u6570\u5728\u6267\u884c\u65f6\u662f\u5426\u4f1a\u4ea7\u751f panic \uff1a func throwsPanic(f func()) (b bool) { defer func() { if x := recover(); x != nil { b = true } }() f() //\u6267\u884c\u51fd\u6570f\uff0c\u5982\u679cf\u4e2d\u51fa\u73b0\u4e86panic\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u6062\u590d\u56de\u6765 return } \u6ce8\u610f\uff1a defer \u5fc5\u987b\u5728 panic \u8bed\u53e5\u4e4b\u524d\u3002 recover \u5fc5\u987b\u914d\u5408 defer \u4f7f\u7528\u3002 main \u51fd\u6570\u548c init \u51fd\u6570 Go\u91cc\u9762\u6709\u4e24\u4e2a\u4fdd\u7559\u7684\u51fd\u6570\uff1a init \u51fd\u6570\uff08\u80fd\u591f\u5e94\u7528\u4e8e\u6240\u6709\u7684 package \uff09\u548c main \u51fd\u6570\uff08\u53ea\u80fd\u5e94\u7528\u4e8e package main \uff09\u3002\u8fd9\u4e24\u4e2a\u51fd\u6570\u5728\u5b9a\u4e49\u65f6\u4e0d\u80fd\u6709\u4efb\u4f55\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u3002\u867d\u7136\u4e00\u4e2a package \u91cc\u9762\u53ef\u4ee5\u5199\u4efb\u610f\u591a\u4e2a init \u51fd\u6570\uff0c\u4f46\u8fd9\u65e0\u8bba\u662f\u5bf9\u4e8e\u53ef\u8bfb\u6027\u8fd8\u662f\u4ee5\u540e\u7684\u53ef\u7ef4\u62a4\u6027\u6765\u8bf4\uff0c\u5f3a\u70c8\u5efa\u8bae\u7528\u6237\u5728\u4e00\u4e2a package \u4e2d\u6bcf\u4e2a\u6587\u4ef6\u53ea\u5199\u4e00\u4e2a init \u51fd\u6570\u3002 Go\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u8c03\u7528 init() \u548c main() \uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u5728\u4efb\u4f55\u5730\u65b9\u8c03\u7528\u8fd9\u4e24\u4e2a\u51fd\u6570\u3002\u6bcf\u4e2a package \u4e2d\u7684 init \u51fd\u6570\u90fd\u662f\u53ef\u9009\u7684\uff0c\u4f46 package main \u5c31\u5fc5\u987b\u5305\u542b\u4e00\u4e2a main \u51fd\u6570\u3002 \u7a0b\u5e8f\u7684\u521d\u59cb\u5316\u548c\u6267\u884c\u90fd\u8d77\u59cb\u4e8e main \u5305\u3002\u5982\u679c main \u5305\u8fd8\u5bfc\u5165\u4e86\u5176\u5b83\u7684\u5305\uff0c\u90a3\u4e48\u5c31\u4f1a\u5728\u7f16\u8bd1\u65f6\u5c06\u5b83\u4eec\u4f9d\u6b21\u5bfc\u5165\u3002\u6709\u65f6\u4e00\u4e2a\u5305\u4f1a\u88ab\u591a\u4e2a\u5305\u540c\u65f6\u5bfc\u5165\uff0c\u90a3\u4e48\u5b83\u53ea\u4f1a\u88ab\u5bfc\u5165\u4e00\u6b21\uff08\u4f8b\u5982\u5f88\u591a\u5305\u53ef\u80fd\u90fd\u4f1a\u7528\u5230 fmt \u5305\uff0c\u4f46\u5b83\u53ea\u4f1a\u88ab\u5bfc\u5165\u4e00\u6b21\uff0c\u56e0\u4e3a\u6ca1\u6709\u5fc5\u8981\u5bfc\u5165\u591a\u6b21\uff09\u3002\u5f53\u4e00\u4e2a\u5305\u88ab\u5bfc\u5165\u65f6\uff0c\u5982\u679c\u8be5\u5305\u8fd8\u5bfc\u5165\u4e86\u5176\u5b83\u7684\u5305\uff0c\u90a3\u4e48\u4f1a\u5148\u5c06\u5176\u5b83\u5305\u5bfc\u5165\u8fdb\u6765\uff0c\u7136\u540e\u518d\u5bf9\u8fd9\u4e9b\u5305\u4e2d\u7684\u5305\u7ea7\u5e38\u91cf\u548c\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u63a5\u7740\u6267\u884c init \u51fd\u6570\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u7b49\u6240\u6709\u88ab\u5bfc\u5165\u7684\u5305\u90fd\u52a0\u8f7d\u5b8c\u6bd5\u4e86\uff0c\u5c31\u4f1a\u5f00\u59cb\u5bf9 main \u5305\u4e2d\u7684\u5305\u7ea7\u5e38\u91cf\u548c\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u7136\u540e\u6267\u884c main \u5305\u4e2d\u7684 init \u51fd\u6570\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09\uff0c\u6700\u540e\u6267\u884c main \u51fd\u6570\u3002 import \u5728\u5199Go\u4ee3\u7801\u7684\u65f6\u5019\u7ecf\u5e38\u7528\u5230import\u8fd9\u4e2a\u547d\u4ee4\u7528\u6765\u5bfc\u5165\u5305\u6587\u4ef6\uff0c\u7ecf\u5e38\u770b\u5230\u7684\u65b9\u5f0f\u53c2\u8003\u5982\u4e0b\uff1a import( \"fmt\" ) \u7136\u540e\u4ee3\u7801\u91cc\u9762\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u65b9\u5f0f\u8c03\u7528 fmt.Println(\"hello world\") \u4e0a\u9762\u8fd9\u4e2afmt\u662fGo\u8bed\u8a00\u7684\u6807\u51c6\u5e93\uff0c\u5176\u5b9e\u662f\u53bb GOROOT \u73af\u5883\u53d8\u91cf\u6307\u5b9a\u76ee\u5f55\u4e0b\u53bb\u52a0\u8f7d\u8be5\u6a21\u5757\uff0c\u5f53\u7136Go\u7684import\u8fd8\u652f\u6301\u5982\u4e0b\u4e24\u79cd\u65b9\u5f0f\u6765\u52a0\u8f7d\u81ea\u5df1\u5199\u7684\u6a21\u5757\uff1a 1\u3001\u76f8\u5bf9\u8def\u5f84 import \"./model\" //\u5f53\u524d\u6587\u4ef6\u540c\u4e00\u76ee\u5f55\u7684model\u76ee\u5f55\uff0c\u4f46\u662f\u4e0d\u5efa\u8bae\u8fd9\u79cd\u65b9\u5f0f\u6765import 2\u3001\u7edd\u5bf9\u8def\u5f84 import \"shorturl/model\" //\u52a0\u8f7dgopath/src/shorturl/model\u6a21\u5757 \u4e0a\u9762\u5c55\u793a\u4e86\u4e00\u4e9bimport\u5e38\u7528\u7684\u51e0\u79cd\u65b9\u5f0f\uff0c\u4f46\u662f\u8fd8\u6709\u4e00\u4e9b \u7279\u6b8a\u7684import 1\u3001\u70b9\u64cd\u4f5c \u6709\u65f6\u5019\u4f1a\u770b\u5230\u5982\u4e0b\u7684\u65b9\u5f0f\u5bfc\u5165\u5305 import( . \"fmt\" ) \u8fd9\u4e2a\u70b9\u64cd\u4f5c\u7684\u542b\u4e49\u5c31\u662f\u8fd9\u4e2a\u5305\u5bfc\u5165\u4e4b\u540e\u5728\u8c03\u7528\u8fd9\u4e2a\u5305\u7684\u51fd\u6570\u65f6\uff0c\u53ef\u4ee5\u7701\u7565\u524d\u7f00\u7684\u5305\u540d\uff0c\u4e5f\u5c31\u662f\u524d\u9762\u8c03\u7528\u7684fmt.Println(\"hello world\")\u53ef\u4ee5\u7701\u7565\u7684\u5199\u6210 Println(\"hello world\") 2\u3001\u522b\u540d\u64cd\u4f5c \u522b\u540d\u64cd\u4f5c\u987e\u540d\u601d\u4e49\u53ef\u4ee5\u628a\u5305\u547d\u540d\u6210\u53e6\u4e00\u4e2a\u7528\u8d77\u6765\u5bb9\u6613\u8bb0\u5fc6\u7684\u540d\u5b57 import( f \"fmt\" ) \u522b\u540d\u64cd\u4f5c\u7684\u8bdd\u8c03\u7528\u5305\u51fd\u6570\u65f6\u524d\u7f00\u53d8\u6210\u4e86\u524d\u7f00\uff0c\u5373 f.Println(\"hello world\") 3\u3001_\u64cd\u4f5c \u8fd9\u4e2a\u64cd\u4f5c\u7ecf\u5e38\u662f\u8ba9\u5f88\u591a\u4eba\u8d39\u89e3\u7684\u4e00\u4e2a\u64cd\u4f5c\u7b26\uff0c\u8bf7\u770b\u4e0b\u9762\u8fd9\u4e2a import import ( \"database/sql\" _ \"github.com/ziutek/mymysql/godrv\" ) _ \u64cd\u4f5c\u5176\u5b9e\u662f\u5f15\u5165\u8be5\u5305\uff0c\u800c\u4e0d\u76f4\u63a5\u4f7f\u7528\u5305\u91cc\u9762\u7684\u51fd\u6570\uff0c\u800c\u662f\u8c03\u7528\u4e86\u8be5\u5305\u91cc\u9762\u7684 init\u51fd\u6570 \u3002 struct\u7c7b\u578b struct\u7c7b\u578b\u7684\u58f0\u660e Go\u8bed\u8a00\u4e2d\uff0c\u4e5f\u548cC\u6216\u8005\u5176\u4ed6\u8bed\u8a00\u4e00\u6837\uff0c\u53ef\u4ee5\u58f0\u660e\u65b0\u7684\u7c7b\u578b\uff0c\u4f5c\u4e3a\u5176\u5b83\u7c7b\u578b\u7684\u5c5e\u6027\u6216\u5b57\u6bb5\u7684\u5bb9\u5668\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7c7b\u578b person \u4ee3\u8868\u4e00\u4e2a\u4eba\u7684\u5b9e\u4f53\u3002\u8fd9\u4e2a\u5b9e\u4f53\u62e5\u6709\u5c5e\u6027\uff1a\u59d3\u540d\u548c\u5e74\u9f84\u3002\u8fd9\u6837\u7684\u7c7b\u578b\u79f0\u4e4b struct \u3002\u5982\u4e0b\u4ee3\u7801\u6240\u793a: type person struct { name string age int } \u58f0\u660e\u4e00\u4e2a struct \u5982\u6b64\u7b80\u5355\uff0c\u4e0a\u9762\u7684\u7c7b\u578b\u5305\u542b\u6709\u4e24\u4e2a\u5b57\u6bb5 \u4e00\u4e2a string \u7c7b\u578b\u7684\u5b57\u6bb5name\uff0c\u7528\u6765\u4fdd\u5b58\u7528\u6237\u540d\u79f0\u8fd9\u4e2a\u5c5e\u6027 \u4e00\u4e2a int \u7c7b\u578b\u7684\u5b57\u6bb5age\uff0c\u7528\u6765\u4fdd\u5b58\u7528\u6237\u5e74\u9f84\u8fd9\u4e2a\u5c5e\u6027 \u4f7f\u7528 struct \u770b\u4e0b\u9762\u7684\u4ee3\u7801 type person struct { name string age int } var P person // P\u73b0\u5728\u5c31\u662fperson\u7c7b\u578b\u7684\u53d8\u91cf\u4e86 P.name = \"Astaxie\" // \u8d4b\u503c\"Astaxie\"\u7ed9P\u7684name\u5c5e\u6027. P.age = 25 // \u8d4b\u503c\"25\"\u7ed9\u53d8\u91cfP\u7684age\u5c5e\u6027 fmt.Printf(\"The person's name is %s\", P.name) // \u8bbf\u95eeP\u7684name\u5c5e\u6027. \u9664\u4e86\u4e0a\u9762\u8fd9\u79cdP\u7684\u58f0\u660e\u4f7f\u7528\u4e4b\u5916\uff0c\u8fd8\u6709\u53e6\u5916\u51e0\u79cd\u58f0\u660e\u4f7f\u7528\u65b9\u5f0f\uff1a \u6309\u7167\u987a\u5e8f\u63d0\u4f9b\u521d\u59cb\u5316\u503c P := person{\"Tom\", 25} \u901a\u8fc7 field:value \u7684\u65b9\u5f0f\u521d\u59cb\u5316\uff0c\u8fd9\u6837\u53ef\u4ee5\u4efb\u610f\u987a\u5e8f P := person{age:24, name:\"Tom\"} \u5f53\u7136\u4e5f\u53ef\u4ee5\u901a\u8fc7 new \u51fd\u6570\u5206\u914d\u4e00\u4e2a\u6307\u9488\uff0c\u6b64\u5904P\u7684\u7c7b\u578b\u4e3a *person P := new(person) \u770b\u4e00\u4e2a\u5b8c\u6574\u7684\u4f7f\u7528 struct \u7684\u4f8b\u5b50 package main import \"fmt\" // \u58f0\u660e\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b type person struct { name string age int } // \u6bd4\u8f83\u4e24\u4e2a\u4eba\u7684\u5e74\u9f84\uff0c\u8fd4\u56de\u5e74\u9f84\u5927\u7684\u90a3\u4e2a\u4eba\uff0c\u5e76\u4e14\u8fd4\u56de\u5e74\u9f84\u5dee // struct\u4e5f\u662f\u4f20\u503c\u7684 func Older(p1, p2 person) (person, int) { if p1.age>p2.age { // \u6bd4\u8f83p1\u548cp2\u8fd9\u4e24\u4e2a\u4eba\u7684\u5e74\u9f84 return p1, p1.age-p2.age } return p2, p2.age-p1.age } func main() { var tom person // \u8d4b\u503c\u521d\u59cb\u5316 tom.name, tom.age = \"Tom\", 18 // \u4e24\u4e2a\u5b57\u6bb5\u90fd\u5199\u6e05\u695a\u7684\u521d\u59cb\u5316 bob := person{age:25, name:\"Bob\"} // \u6309\u7167struct\u5b9a\u4e49\u987a\u5e8f\u521d\u59cb\u5316\u503c paul := person{\"Paul\", 43} tb_Older, tb_diff := Older(tom, bob) tp_Older, tp_diff := Older(tom, paul) bp_Older, bp_diff := Older(bob, paul) fmt.Printf(\"Of %s and %s, %s is older by %d years\\n\", tom.name, bob.name, tb_Older.name, tb_diff) fmt.Printf(\"Of %s and %s, %s is older by %d years\\n\", tom.name, paul.name, tp_Older.name, tp_diff) fmt.Printf(\"Of %s and %s, %s is older by %d years\\n\", bob.name, paul.name, bp_Older.name, bp_diff) } struct \u7684\u533f\u540d\u5b57\u6bb5 \u5b9a\u4e49\u7684\u65f6\u5019\u662f\u5b57\u6bb5\u540d\u4e0e\u5176\u7c7b\u578b\u4e00\u4e00\u5bf9\u5e94\uff0c\u5b9e\u9645\u4e0aGo\u652f\u6301\u53ea\u63d0\u4f9b\u7c7b\u578b\uff0c\u800c\u4e0d\u5199\u5b57\u6bb5\u540d\u7684\u65b9\u5f0f\uff0c\u4e5f\u5c31\u662f\u533f\u540d\u5b57\u6bb5\uff0c\u4e5f\u79f0\u4e3a\u5d4c\u5165\u5b57\u6bb5\u3002 \u5f53\u533f\u540d\u5b57\u6bb5\u662f\u4e00\u4e2a struct \u7684\u65f6\u5019\uff0c\u90a3\u4e48\u8fd9\u4e2a struct \u6240\u62e5\u6709\u7684\u5168\u90e8\u5b57\u6bb5\u90fd\u88ab\u9690\u5f0f\u5730\u5f15\u5165\u4e86\u5f53\u524d\u5b9a\u4e49\u7684\u8fd9\u4e2a struct \u3002 \u770b\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8ba9\u4e0a\u9762\u8bf4\u7684\u8fd9\u4e9b\u66f4\u5177\u4f53\u5316 package main import \"fmt\" type Human struct { name string age int weight int } type Student struct { Human // \u533f\u540d\u5b57\u6bb5\uff0c\u90a3\u4e48\u9ed8\u8ba4Student\u5c31\u5305\u542b\u4e86Human\u7684\u6240\u6709\u5b57\u6bb5 speciality string } func main() { // \u521d\u59cb\u5316\u4e00\u4e2a\u5b66\u751f mark := Student{Human{\"Mark\", 25, 120}, \"Computer Science\"} // \u8bbf\u95ee\u76f8\u5e94\u7684\u5b57\u6bb5 fmt.Println(\"His name is \", mark.name) fmt.Println(\"His age is \", mark.age) fmt.Println(\"His weight is \", mark.weight) fmt.Println(\"His speciality is \", mark.speciality) // \u4fee\u6539\u5bf9\u5e94\u7684\u5907\u6ce8\u4fe1\u606f mark.speciality = \"AI\" fmt.Println(\"Mark changed his speciality\") fmt.Println(\"His speciality is \", mark.speciality) // \u4fee\u6539\u4ed6\u7684\u5e74\u9f84\u4fe1\u606f fmt.Println(\"Mark become old\") mark.age = 46 fmt.Println(\"His age is\", mark.age) // \u4fee\u6539\u4ed6\u7684\u4f53\u91cd\u4fe1\u606f fmt.Println(\"Mark is not an athlet anymore\") mark.weight += 60 fmt.Println(\"His weight is\", mark.weight) } \u770b\u5230Student\u8bbf\u95ee\u5c5e\u6027age\u548cname\u7684\u65f6\u5019\uff0c\u5c31\u50cf\u8bbf\u95ee\u81ea\u5df1\u6240\u6709\u7528\u7684\u5b57\u6bb5\u4e00\u6837\uff0c\u533f\u540d\u5b57\u6bb5\u5c31\u662f\u8fd9\u6837\uff0c\u80fd\u591f\u5b9e\u73b0\u5b57\u6bb5\u7684\u7ee7\u627f\u3002student\u8fd8\u80fd\u8bbf\u95eeHuman\u8fd9\u4e2a\u5b57\u6bb5\u4f5c\u4e3a\u5b57\u6bb5\u540d\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u4ee3\u7801\u3002 mark.Human = Human{\"Marcus\", 55, 220} mark.Human.age -= 1 \u901a\u8fc7\u533f\u540d\u8bbf\u95ee\u548c\u4fee\u6539\u5b57\u6bb5\u76f8\u5f53\u7684\u6709\u7528\uff0c\u4f46\u662f\u4e0d\u4ec5\u4ec5\u662f struct \u5b57\u6bb5\uff0c\u6240\u6709\u7684\u5185\u7f6e\u7c7b\u578b\u548c\u81ea\u5b9a\u4e49\u7c7b\u578b\u90fd\u662f\u53ef\u4ee5\u4f5c\u4e3a\u533f\u540d\u5b57\u6bb5\u7684\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50 package main import \"fmt\" type Skills []string type Human struct { name string age int weight int } type Student struct { Human // \u533f\u540d\u5b57\u6bb5\uff0cstruct Skills // \u533f\u540d\u5b57\u6bb5\uff0c\u81ea\u5b9a\u4e49\u7684\u7c7b\u578bstring slice int // \u5185\u7f6e\u7c7b\u578b\u4f5c\u4e3a\u533f\u540d\u5b57\u6bb5 speciality string } func main() { // \u521d\u59cb\u5316\u5b66\u751fJane jane := Student{Human:Human{\"Jane\", 35, 100}, speciality:\"Biology\"} // \u73b0\u5728\u8bbf\u95ee\u76f8\u5e94\u7684\u5b57\u6bb5 fmt.Println(\"Her name is \", jane.name) fmt.Println(\"Her age is \", jane.age) fmt.Println(\"Her weight is \", jane.weight) fmt.Println(\"Her speciality is \", jane.speciality) // \u4fee\u6539\u4ed6\u7684skill\u6280\u80fd\u5b57\u6bb5 jane.Skills = []string{\"anatomy\"} fmt.Println(\"Her skills are \", jane.Skills) fmt.Println(\"She acquired two new ones \") jane.Skills = append(jane.Skills, \"physics\", \"golang\") fmt.Println(\"Her skills now are \", jane.Skills) // \u4fee\u6539\u533f\u540d\u5185\u7f6e\u7c7b\u578b\u5b57\u6bb5 jane.int = 3 fmt.Println(\"Her preferred number is\", jane.int) } \u4ece\u4e0a\u9762\u4f8b\u5b50\u770b\u51fa\u6765 struct \u4e0d\u4ec5\u4ec5\u80fd\u591f\u5c06 struct \u4f5c\u4e3a\u533f\u540d\u5b57\u6bb5\uff0c\u81ea\u5b9a\u4e49\u7c7b\u578b\u3001\u5185\u7f6e\u7c7b\u578b\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u533f\u540d\u5b57\u6bb5\uff0c\u800c\u4e14\u53ef\u4ee5\u5728\u76f8\u5e94\u7684\u5b57\u6bb5\u4e0a\u9762\u8fdb\u884c\u51fd\u6570\u64cd\u4f5c\uff08\u5982\u4f8b\u5b50\u4e2d\u7684append\uff09\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u679chuman\u91cc\u9762\u6709\u4e00\u4e2a\u5b57\u6bb5\u53eb\u505aphone\uff0c\u800cstudent\u4e5f\u6709\u4e00\u4e2a\u5b57\u6bb5\u53eb\u505aphone\uff0c\u90a3\u4e48\u8be5\u600e\u4e48\u529e\u5462\uff1f Go\u91cc\u9762\u5f88\u7b80\u5355\u7684\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u6700\u5916\u5c42\u7684\u4f18\u5148\u8bbf\u95ee\uff0c\u4e5f\u5c31\u662f\u5f53\u901a\u8fc7 student.phone \u8bbf\u95ee\u7684\u65f6\u5019\uff0c\u662f\u8bbf\u95eestudent\u91cc\u9762\u7684\u5b57\u6bb5\uff0c\u800c\u4e0d\u662fhuman\u91cc\u9762\u7684\u5b57\u6bb5\u3002 \u8fd9\u6837\u5c31\u5141\u8bb8\u53bb\u91cd\u8f7d\u901a\u8fc7\u533f\u540d\u5b57\u6bb5\u7ee7\u627f\u7684\u4e00\u4e9b\u5b57\u6bb5\uff0c\u5f53\u7136\u5982\u679c\u60f3\u8bbf\u95ee\u91cd\u8f7d\u540e\u5bf9\u5e94\u533f\u540d\u7c7b\u578b\u91cc\u9762\u7684\u5b57\u6bb5\uff0c\u53ef\u4ee5\u901a\u8fc7\u533f\u540d\u5b57\u6bb5\u540d\u6765\u8bbf\u95ee\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50 package main import \"fmt\" type Human struct { name string age int phone string // Human\u7c7b\u578b\u62e5\u6709\u7684\u5b57\u6bb5 } type Employee struct { Human // \u533f\u540d\u5b57\u6bb5Human speciality string phone string // \u96c7\u5458\u7684phone\u5b57\u6bb5 } func main() { Bob := Employee{Human{\"Bob\", 34, \"777-444-XXXX\"}, \"Designer\", \"333-222\"} fmt.Println(\"Bob's work phone is:\", Bob.phone) // \u5982\u679c\u8981\u8bbf\u95eeHuman\u7684phone\u5b57\u6bb5 fmt.Println(\"Bob's personal phone is:\", Bob.Human.phone) } method \u51fd\u6570\u7684\u53e6\u4e00\u79cd\u5f62\u6001\uff0c\u5e26\u6709\u63a5\u6536\u8005\u7684\u51fd\u6570\uff0c\u79f0\u4e3a method method \u73b0\u5728\u5047\u8bbe\u6709\u8fd9\u4e48\u4e00\u4e2a\u573a\u666f\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2astruct\u53eb\u505a\u957f\u65b9\u5f62\uff0c\u73b0\u5728\u60f3\u8981\u8ba1\u7b97\u4ed6\u7684\u9762\u79ef\uff0c\u90a3\u4e48\u6309\u7167\u4e00\u822c\u7684\u601d\u8def\u5e94\u8be5\u4f1a\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0 package main import \"fmt\" type Rectangle struct { width, height float64 } func area(r Rectangle) float64 { return r.width*r.height } func main() { r1 := Rectangle{12, 2} r2 := Rectangle{9, 4} fmt.Println(\"Area of r1 is: \", area(r1)) fmt.Println(\"Area of r2 is: \", area(r2)) } \u8fd9\u6bb5\u4ee3\u7801\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6765\u957f\u65b9\u5f62\u7684\u9762\u79ef\uff0c\u4f46\u662farea()\u4e0d\u662f\u4f5c\u4e3aRectangle\u7684\u65b9\u6cd5\u5b9e\u73b0\u7684\uff08\u7c7b\u4f3c\u9762\u5411\u5bf9\u8c61\u91cc\u9762\u7684\u65b9\u6cd5\uff09\uff0c\u800c\u662f\u5c06Rectangle\u7684\u5bf9\u8c61\uff08\u5982r1,r2\uff09\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u51fd\u6570\u8ba1\u7b97\u9762\u79ef\u7684\u3002 \u8fd9\u6837\u5b9e\u73b0\u5f53\u7136\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u662f\u5f53\u9700\u8981\u589e\u52a0\u5706\u5f62\u3001\u6b63\u65b9\u5f62\u3001\u4e94\u8fb9\u5f62\u751a\u81f3\u5176\u5b83\u591a\u8fb9\u5f62\u7684\u65f6\u5019\uff0c\u60f3\u8ba1\u7b97\u4ed6\u4eec\u7684\u9762\u79ef\u7684\u65f6\u5019\u600e\u4e48\u529e\uff1f\u90a3\u5c31\u53ea\u80fd\u589e\u52a0\u65b0\u7684\u51fd\u6570\uff0c\u4f46\u662f\u51fd\u6570\u540d\u5c31\u5fc5\u987b\u8981\u8ddf\u7740\u6362\u4e86\uff0c\u53d8\u6210 area_rectangle, area_circle, area_triangle... \u692d\u5706\u4ee3\u8868\u51fd\u6570, \u800c\u8fd9\u4e9b\u51fd\u6570\u5e76\u4e0d\u4ece\u5c5e\u4e8estruct(\u6216\u8005\u4ee5\u9762\u5411\u5bf9\u8c61\u7684\u672f\u8bed\u6765\u8bf4\uff0c\u5e76\u4e0d\u5c5e\u4e8eclass)\uff0c\u4ed6\u4eec\u662f\u5355\u72ec\u5b58\u5728\u4e8estruct\u5916\u56f4\uff0c\u800c\u975e\u5728\u6982\u5ff5\u4e0a\u5c5e\u4e8e\u67d0\u4e2astruct\u7684\u3002 \u5f88\u663e\u7136\uff0c\u8fd9\u6837\u7684\u5b9e\u73b0\u5e76\u4e0d\u4f18\u96c5\uff0c\u5e76\u4e14\u4ece\u6982\u5ff5\u4e0a\u6765\u8bf4\"\u9762\u79ef\"\u662f\"\u5f62\u72b6\"\u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u5b83\u662f\u5c5e\u4e8e\u8fd9\u4e2a\u7279\u5b9a\u7684\u5f62\u72b6\u7684\uff0c\u5c31\u50cf\u957f\u65b9\u5f62\u7684\u957f\u548c\u5bbd\u4e00\u6837\u3002 \u57fa\u4e8e\u4e0a\u9762\u7684\u539f\u56e0\u6240\u4ee5\u5c31\u6709\u4e86 method \u7684\u6982\u5ff5\uff0c method \u662f\u9644\u5c5e\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684\u7c7b\u578b\u4e0a\u7684\uff0c\u4ed6\u7684\u8bed\u6cd5\u548c\u51fd\u6570\u7684\u58f0\u660e\u8bed\u6cd5\u51e0\u4e4e\u4e00\u6837\uff0c\u53ea\u662f\u5728 func \u540e\u9762\u589e\u52a0\u4e86\u4e00\u4e2areceiver(\u4e5f\u5c31\u662fmethod\u6240\u4f9d\u4ece\u7684\u4e3b\u4f53)\u3002 \u7528\u4e0a\u9762\u63d0\u5230\u7684\u5f62\u72b6\u7684\u4f8b\u5b50\u6765\u8bf4\uff0cmethod area() \u662f\u4f9d\u8d56\u4e8e\u67d0\u4e2a\u5f62\u72b6(\u6bd4\u5982\u8bf4Rectangle)\u6765\u53d1\u751f\u4f5c\u7528\u7684\u3002Rectangle.area()\u7684\u53d1\u51fa\u8005\u662fRectangle\uff0c area()\u662f\u5c5e\u4e8eRectangle\u7684\u65b9\u6cd5\uff0c\u800c\u975e\u4e00\u4e2a\u5916\u56f4\u51fd\u6570\u3002 \u66f4\u5177\u4f53\u5730\u8bf4\uff0cRectangle\u5b58\u5728\u5b57\u6bb5 height \u548c width, \u540c\u65f6\u5b58\u5728\u65b9\u6cd5area(), \u8fd9\u4e9b\u5b57\u6bb5\u548c\u65b9\u6cd5\u90fd\u5c5e\u4e8eRectangle\u3002 \u7528Rob Pike\u7684\u8bdd\u6765\u8bf4\u5c31\u662f\uff1a \"A method is a function with an implicit first argument, called a receiver.\" method\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a func (r ReceiverType) funcName(parameters) (results) \u4e0b\u9762\u7528\u6700\u5f00\u59cb\u7684\u4f8b\u5b50\u7528method\u6765\u5b9e\u73b0\uff1a package main import ( \"fmt\" \"math\" ) type Rectangle struct { width, height float64 } type Circle struct { radius float64 } func (r Rectangle) area() float64 { return r.width*r.height } func (c Circle) area() float64 { return c.radius * c.radius * math.Pi } func main() { r1 := Rectangle{12, 2} r2 := Rectangle{9, 4} c1 := Circle{10} c2 := Circle{25} fmt.Println(\"Area of r1 is: \", r1.area()) fmt.Println(\"Area of r2 is: \", r2.area()) fmt.Println(\"Area of c1 is: \", c1.area()) fmt.Println(\"Area of c2 is: \", c2.area()) } \u5728\u4f7f\u7528method\u7684\u65f6\u5019\u91cd\u8981\u6ce8\u610f\u51e0\u70b9 \u867d\u7136method\u7684\u540d\u5b57\u4e00\u6a21\u4e00\u6837\uff0c\u4f46\u662f\u5982\u679c\u63a5\u6536\u8005\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48method\u5c31\u4e0d\u4e00\u6837 method\u91cc\u9762\u53ef\u4ee5\u8bbf\u95ee\u63a5\u6536\u8005\u7684\u5b57\u6bb5 \u8c03\u7528method\u901a\u8fc7 . \u8bbf\u95ee\uff0c\u5c31\u50cfstruct\u91cc\u9762\u8bbf\u95ee\u5b57\u6bb5\u4e00\u6837 \u5728\u4e0a\u4f8b\uff0cmethod area() \u5206\u522b\u5c5e\u4e8eRectangle\u548cCircle\uff0c \u4e8e\u662f\u4ed6\u4eec\u7684 Receiver \u5c31\u53d8\u6210\u4e86Rectangle \u548c Circle, \u6216\u8005\u8bf4\uff0c\u8fd9\u4e2aarea()\u65b9\u6cd5 \u662f\u7531 Rectangle/Circle \u53d1\u51fa\u7684\u3002 \u503c\u5f97\u8bf4\u660e\u7684\u4e00\u70b9\u662f\uff0c\u56fe\u793a\u4e2dmethod\u7528\u865a\u7ebf\u6807\u51fa\uff0c\u610f\u601d\u662f\u6b64\u5904\u65b9\u6cd5\u7684Receiver\u662f\u4ee5\u503c\u4f20\u9012\uff0c\u800c\u975e\u5f15\u7528\u4f20\u9012\uff0c\u662f\u7684\uff0cReceiver\u8fd8\u53ef\u4ee5\u662f\u6307\u9488, \u4e24\u8005\u7684\u5dee\u522b\u5728\u4e8e, \u6307\u9488\u4f5c\u4e3aReceiver\u4f1a\u5bf9\u5b9e\u4f8b\u5bf9\u8c61\u7684\u5185\u5bb9\u53d1\u751f\u64cd\u4f5c,\u800c\u666e\u901a\u7c7b\u578b\u4f5c\u4e3aReceiver\u4ec5\u4ec5\u662f\u4ee5\u526f\u672c\u4f5c\u4e3a\u64cd\u4f5c\u5bf9\u8c61,\u5e76\u4e0d\u5bf9\u539f\u5b9e\u4f8b\u5bf9\u8c61\u53d1\u751f\u64cd\u4f5c\u3002\u540e\u6587\u5bf9\u6b64\u4f1a\u6709\u8be6\u7ec6\u8bba\u8ff0\u3002 \u90a3\u662f\u4e0d\u662fmethod\u53ea\u80fd\u4f5c\u7528\u5728struct\u4e0a\u9762\u5462\uff1f\u5f53\u7136\u4e0d\u662f\uff0c\u4ed6\u53ef\u4ee5\u5b9a\u4e49\u5728\u4efb\u4f55\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\u3001\u5185\u7f6e\u7c7b\u578b\u3001struct\u7b49\u5404\u79cd\u7c7b\u578b\u4e0a\u9762\u3002\u4ec0\u4e48\u53eb\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e0d\u5c31\u662fstruct\uff0c\u5176\u5b9e\u4e0d\u662f\u8fd9\u6837\u7684\uff0cstruct\u53ea\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u91cc\u9762\u4e00\u79cd\u6bd4\u8f83\u7279\u6b8a\u7684\u7c7b\u578b\u800c\u5df2\uff0c\u8fd8\u6709\u5176\u4ed6\u81ea\u5b9a\u4e49\u7c7b\u578b\u7533\u660e\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u8fd9\u6837\u7684\u7533\u660e\u6765\u5b9e\u73b0\u3002 type typeName typeLiteral \u8bf7\u770b\u4e0b\u9762\u8fd9\u4e2a\u7533\u660e\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u4ee3\u7801 type ages int type money float32 type months map[string]int m := months { \"January\":31, \"February\":28, ... \"December\":31, } \u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u4ee3\u7801\u91cc\u9762\u5b9a\u4e49\u6709\u610f\u4e49\u7684\u7c7b\u578b\u4e86\uff0c\u5b9e\u9645\u4e0a\u53ea\u662f\u4e00\u4e2a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u522b\u540d,\u6709\u70b9\u7c7b\u4f3c\u4e8ec\u4e2d\u7684typedef\uff0c\u4f8b\u5982\u4e0a\u9762ages\u66ff\u4ee3\u4e86int\uff0c\u56de\u5230 method \u53ef\u4ee5\u5728\u4efb\u4f55\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e2d\u5b9a\u4e49\u4efb\u610f\u591a\u7684 method \uff0c\u63a5\u4e0b\u6765\u8ba9\u770b\u4e00\u4e2a\u590d\u6742\u4e00\u70b9\u7684\u4f8b\u5b50 package main import \"fmt\" const( WHITE = iota BLACK BLUE RED YELLOW ) type Color byte type Box struct { width, height, depth float64 color Color } type BoxList []Box //a slice of boxes func (b Box) Volume() float64 { return b.width * b.height * b.depth } func (b *Box) SetColor(c Color) { b.color = c } func (bl BoxList) BiggestColor() Color { v := 0.00 k := Color(WHITE) for _, b := range bl { if bv := b.Volume(); bv > v { v = bv k = b.color } } return k } func (bl BoxList) PaintItBlack() { for i := range bl { bl[i].SetColor(BLACK) } } func (c Color) String() string { strings := []string {\"WHITE\", \"BLACK\", \"BLUE\", \"RED\", \"YELLOW\"} return strings[c] } func main() { boxes := BoxList { Box{4, 4, 4, RED}, Box{10, 10, 1, YELLOW}, Box{1, 1, 20, BLACK}, Box{10, 10, 1, BLUE}, Box{10, 30, 1, WHITE}, Box{20, 20, 20, YELLOW}, } fmt.Printf(\"We have %d boxes in our set\\n\", len(boxes)) fmt.Println(\"The volume of the first one is\", boxes[0].Volume(), \"cm\u00b3\") fmt.Println(\"The color of the last one is\",boxes[len(boxes)-1].color.String()) fmt.Println(\"The biggest one is\", boxes.BiggestColor().String()) fmt.Println(\"Let's paint them all black\") boxes.PaintItBlack() fmt.Println(\"The color of the second one is\", boxes[1].color.String()) fmt.Println(\"Obviously, now, the biggest one is\", boxes.BiggestColor().String()) } \u4e0a\u9762\u7684\u4ee3\u7801\u901a\u8fc7const\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5e38\u91cf\uff0c\u7136\u540e\u5b9a\u4e49\u4e86\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7c7b\u578b Color\u4f5c\u4e3abyte\u7684\u522b\u540d \u5b9a\u4e49\u4e86\u4e00\u4e2astruct:Box\uff0c\u542b\u6709\u4e09\u4e2a\u957f\u5bbd\u9ad8\u5b57\u6bb5\u548c\u4e00\u4e2a\u989c\u8272\u5c5e\u6027 \u5b9a\u4e49\u4e86\u4e00\u4e2aslice:BoxList\uff0c\u542b\u6709Box \u7136\u540e\u4ee5\u4e0a\u9762\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e3a\u63a5\u6536\u8005\u5b9a\u4e49\u4e86\u4e00\u4e9bmethod Volume()\u5b9a\u4e49\u4e86\u63a5\u6536\u8005\u4e3aBox\uff0c\u8fd4\u56deBox\u7684\u5bb9\u91cf SetColor(c Color)\uff0c\u628aBox\u7684\u989c\u8272\u6539\u4e3ac BiggestColor()\u5b9a\u5728\u5728BoxList\u4e0a\u9762\uff0c\u8fd4\u56delist\u91cc\u9762\u5bb9\u91cf\u6700\u5927\u7684\u989c\u8272 PaintItBlack()\u628aBoxList\u91cc\u9762\u6240\u6709Box\u7684\u989c\u8272\u5168\u90e8\u53d8\u6210\u9ed1\u8272 String()\u5b9a\u4e49\u5728Color\u4e0a\u9762\uff0c\u8fd4\u56deColor\u7684\u5177\u4f53\u989c\u8272(\u5b57\u7b26\u4e32\u683c\u5f0f) \u4e0a\u9762\u7684\u4ee3\u7801\u901a\u8fc7\u6587\u5b57\u63cf\u8ff0\u51fa\u6765\u4e4b\u540e\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1f\u4e00\u822c\u89e3\u51b3\u95ee\u9898\u90fd\u662f\u901a\u8fc7\u95ee\u9898\u7684\u63cf\u8ff0\uff0c\u53bb\u5199\u76f8\u5e94\u7684\u4ee3\u7801\u5b9e\u73b0\u3002 \u6307\u9488\u4f5c\u4e3areceiver \u73b0\u5728\u8ba9\u56de\u8fc7\u5934\u6765\u770b\u770bSetColor\u8fd9\u4e2amethod\uff0c\u5b83\u7684receiver\u662f\u4e00\u4e2a\u6307\u5411Box\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u4f7f\u7528*Box\u3002 \u5b9a\u4e49SetColor\u7684\u771f\u6b63\u76ee\u7684\u662f\u60f3\u6539\u53d8\u8fd9\u4e2aBox\u7684\u989c\u8272\uff0c\u5982\u679c\u4e0d\u4f20Box\u7684\u6307\u9488\uff0c\u90a3\u4e48SetColor\u63a5\u53d7\u7684\u5176\u5b9e\u662fBox\u7684\u4e00\u4e2acopy\uff0c\u4e5f\u5c31\u662f\u8bf4method\u5185\u5bf9\u4e8e\u989c\u8272\u503c\u7684\u4fee\u6539\uff0c\u5176\u5b9e\u53ea\u4f5c\u7528\u4e8eBox\u7684copy\uff0c\u800c\u4e0d\u662f\u771f\u6b63\u7684Box\u3002\u6240\u4ee5\u9700\u8981\u4f20\u5165\u6307\u9488\u3002 \u8fd9\u91cc\u53ef\u4ee5\u628areceiver\u5f53\u4f5cmethod\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u6765\u770b\uff0c\u7136\u540e\u7ed3\u5408\u524d\u9762\u51fd\u6570\u8bb2\u89e3\u7684\u4f20\u503c\u548c\u4f20\u5f15\u7528\u5c31\u4e0d\u96be\u7406\u89e3 \u8fd9\u91cc\u4e5f\u8bb8\u4f1a\u95eeSetColor\u51fd\u6570\u91cc\u9762\u5e94\u8be5\u8fd9\u6837\u5b9a\u4e49 *b.Color=c ,\u800c\u4e0d\u662f b.Color=c ,\u9700\u8981\u8bfb\u53d6\u5230\u6307\u9488\u76f8\u5e94\u7684\u503c\u3002 \u5176\u5b9eGo\u91cc\u9762\u8fd9\u4e24\u79cd\u65b9\u5f0f\u90fd\u662f\u6b63\u786e\u7684\uff0c\u5f53\u7528\u6307\u9488\u53bb\u8bbf\u95ee\u76f8\u5e94\u7684\u5b57\u6bb5\u65f6(\u867d\u7136\u6307\u9488\u6ca1\u6709\u4efb\u4f55\u7684\u5b57\u6bb5)\uff0cGo\u77e5\u9053\u8981\u901a\u8fc7\u6307\u9488\u53bb\u83b7\u53d6\u8fd9\u4e2a\u503c\u3002PaintItBlack\u91cc\u9762\u8c03\u7528SetColor\u7684\u65f6\u5019\u662f\u4e0d\u662f\u5e94\u8be5\u5199\u6210 (&bl[i]).SetColor(BLACK) \uff0c\u56e0\u4e3aSetColor\u7684receiver\u662f*Box\uff0c\u800c\u4e0d\u662fBox\u3002\u8fd9\u4e24\u79cd\u65b9\u5f0f\u90fd\u53ef\u4ee5\uff0c\u56e0\u4e3aGo\u77e5\u9053receiver\u662f\u6307\u9488\uff0c\u4ed6\u81ea\u52a8\u8f6c\u4e86\u3002 \u4e5f\u5c31\u662f\u8bf4\uff1a \u5982\u679c\u4e00\u4e2amethod\u7684receiver\u662f*T,\u53ef\u4ee5\u5728\u4e00\u4e2aT\u7c7b\u578b\u7684\u5b9e\u4f8b\u53d8\u91cfV\u4e0a\u9762\u8c03\u7528\u8fd9\u4e2amethod\uff0c\u800c\u4e0d\u9700\u8981&V\u53bb\u8c03\u7528\u8fd9\u4e2amethod \u7c7b\u4f3c\u7684 \u5982\u679c\u4e00\u4e2amethod\u7684receiver\u662fT\uff0c\u53ef\u4ee5\u5728\u4e00\u4e2a T\u7c7b\u578b\u7684\u53d8\u91cfP\u4e0a\u9762\u8c03\u7528\u8fd9\u4e2amethod\uff0c\u800c\u4e0d\u9700\u8981 P\u53bb\u8c03\u7528\u8fd9\u4e2amethod \u6240\u4ee5\u4e0d\u7528\u62c5\u5fc3\u662f\u8c03\u7528\u7684\u6307\u9488\u7684method\u8fd8\u662f\u4e0d\u662f\u6307\u9488\u7684method\uff0cGo\u77e5\u9053\u8981\u505a\u7684\u4e00\u5207\uff0c\u8fd9\u5bf9\u4e8e\u6709\u591a\u5e74C/C++\u7f16\u7a0b\u7ecf\u9a8c\u7684\u540c\u5b66\u6765\u8bf4\uff0c\u771f\u662f\u89e3\u51b3\u4e86\u4e00\u4e2a\u5f88\u5927\u7684\u75db\u82e6\u3002 method\u7ee7\u627f \u901a\u8fc7\u5b57\u6bb5\u7684\u7ee7\u627f\u7684\u5b66\u4e60\uff0c\u53d1\u73b0Go\u7684\u4e00\u4e2a\u795e\u5947\u4e4b\u5904\uff0cmethod\u4e5f\u662f\u53ef\u4ee5\u7ee7\u627f\u7684\u3002\u5982\u679c\u533f\u540d\u5b57\u6bb5\u5b9e\u73b0\u4e86\u4e00\u4e2amethod\uff0c\u90a3\u4e48\u5305\u542b\u8fd9\u4e2a\u533f\u540d\u5b57\u6bb5\u7684struct\u4e5f\u80fd\u8c03\u7528\u8be5method\u3002\u6765\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50 package main import \"fmt\" type Human struct { name string age int phone string } type Student struct { Human //\u533f\u540d\u5b57\u6bb5 school string } type Employee struct { Human //\u533f\u540d\u5b57\u6bb5 company string } //\u5728human\u4e0a\u9762\u5b9a\u4e49\u4e86\u4e00\u4e2amethod func (h *Human) SayHi() { fmt.Printf(\"Hi, I am %s you can call me on %s\\n\", h.name, h.phone) } func main() { mark := Student{Human{\"Mark\", 25, \"222-222-YYYY\"}, \"MIT\"} sam := Employee{Human{\"Sam\", 45, \"111-888-XXXX\"}, \"Golang Inc\"} mark.SayHi() sam.SayHi() } method\u91cd\u5199 \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679cEmployee\u60f3\u8981\u5b9e\u73b0\u81ea\u5df1\u7684SayHi,\u600e\u4e48\u529e\uff1f\u7b80\u5355\uff0c\u548c\u533f\u540d\u5b57\u6bb5\u51b2\u7a81\u4e00\u6837\u7684\u9053\u7406\uff0c\u53ef\u4ee5\u5728Employee\u4e0a\u9762\u5b9a\u4e49\u4e00\u4e2amethod\uff0c\u91cd\u5199\u4e86\u533f\u540d\u5b57\u6bb5\u7684\u65b9\u6cd5\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50 package main import \"fmt\" type Human struct { name string age int phone string } type Student struct { Human //\u533f\u540d\u5b57\u6bb5 school string } type Employee struct { Human //\u533f\u540d\u5b57\u6bb5 company string } //Human\u5b9a\u4e49method func (h *Human) SayHi() { fmt.Printf(\"Hi, I am %s you can call me on %s\\n\", h.name, h.phone) } //Employee\u7684method\u91cd\u5199Human\u7684method func (e *Employee) SayHi() { fmt.Printf(\"Hi, I am %s, I work at %s. Call me on %s\\n\", e.name, e.company, e.phone) //Yes you can split into 2 lines here. } func main() { mark := Student{Human{\"Mark\", 25, \"222-222-YYYY\"}, \"MIT\"} sam := Employee{Human{\"Sam\", 45, \"111-888-XXXX\"}, \"Golang Inc\"} mark.SayHi() sam.SayHi() } \u901a\u8fc7\u8fd9\u4e9b\u5185\u5bb9\uff0c\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u57fa\u672c\u7684\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u4e86\uff0c\u4f46\u662fGo\u91cc\u9762\u7684\u9762\u5411\u5bf9\u8c61\u662f\u5982\u6b64\u7684\u7b80\u5355\uff0c\u6ca1\u6709\u4efb\u4f55\u7684\u79c1\u6709\u3001\u516c\u6709\u5173\u952e\u5b57\uff0c\u901a\u8fc7\u5927\u5c0f\u5199\u6765\u5b9e\u73b0(\u5927\u5199\u5f00\u5934\u7684\u4e3a\u516c\u6709\uff0c\u5c0f\u5199\u5f00\u5934\u7684\u4e3a\u79c1\u6709)\uff0c\u65b9\u6cd5\u4e5f\u540c\u6837\u9002\u7528\u8fd9\u4e2a\u539f\u5219\u3002 interface Go\u8bed\u8a00\u91cc\u9762\u8bbe\u8ba1\u6700\u7cbe\u5999\u7684\u5e94\u8be5\u7b97 interface \uff0c\u5b83\u8ba9\u9762\u5411\u5bf9\u8c61\uff0c\u5185\u5bb9\u7ec4\u7ec7\u5b9e\u73b0\u975e\u5e38\u7684\u65b9\u4fbf \u4ec0\u4e48\u662finterface \u7b80\u5355\u7684\u8bf4\uff0c interface \u662f\u4e00\u7ec4 method \u7b7e\u540d\u7684\u7ec4\u5408\uff0c\u901a\u8fc7 interface \u6765\u5b9a\u4e49\u5bf9\u8c61\u7684\u4e00\u7ec4\u884c\u4e3a\u3002 \u524d\u9762\u4f8b\u5b50\u4e2d Student \u548c Employee \u90fd\u80fd SayHi \uff0c\u867d\u7136\u4ed6\u4eec\u7684\u5185\u90e8\u5b9e\u73b0\u4e0d\u4e00\u6837\uff0c\u4f46\u662f\u90a3\u4e0d\u91cd\u8981\uff0c\u91cd\u8981\u7684\u662f\u4ed6\u4eec\u90fd\u80fd say hi \u7ee7\u7eed\u505a\u66f4\u591a\u7684\u6269\u5c55\uff0c Student \u548c Employee \u5b9e\u73b0\u53e6\u4e00\u4e2a\u65b9\u6cd5 Sing \uff0c\u7136\u540e Student \u5b9e\u73b0\u65b9\u6cd5 BorrowMoney \u800c Employee \u5b9e\u73b0 SpendSalary \u3002 \u8fd9\u6837 Student \u5b9e\u73b0\u4e86\u4e09\u4e2a\u65b9\u6cd5\uff1a SayHi \u3001 Sing \u3001 BorrowMoney \uff1b\u800c Employee \u5b9e\u73b0\u4e86 SayHi \u3001 Sing \u3001 SpendSalary \u3002 \u4e0a\u9762\u8fd9\u4e9b\u65b9\u6cd5\u7684\u7ec4\u5408\u79f0\u4e3a interface (\u88ab\u5bf9\u8c61 Student \u548c Employee \u5b9e\u73b0)\u3002\u4f8b\u5982 Student \u548c Employee \u90fd\u5b9e\u73b0\u4e86 interface \uff1a SayHi \u548c Sing \uff0c\u4e5f\u5c31\u662f\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u662f\u8be5 interface \u7c7b\u578b\u3002\u800c Employee \u6ca1\u6709\u5b9e\u73b0\u8fd9\u4e2a interface\uff1aSayHi\u3001Sing \u548c BorrowMoney \uff0c\u56e0\u4e3a Employee \u6ca1\u6709\u5b9e\u73b0 BorrowMoney \u8fd9\u4e2a\u65b9\u6cd5\u3002 interface\u7c7b\u578b interface \u7c7b\u578b\u5b9a\u4e49\u4e86\u4e00\u7ec4\u65b9\u6cd5\uff0c\u5982\u679c\u67d0\u4e2a\u5bf9\u8c61\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u5219\u6b64\u5bf9\u8c61\u5c31\u5b9e\u73b0\u4e86\u6b64\u63a5\u53e3\u3002\u8be6\u7ec6\u7684\u8bed\u6cd5\u53c2\u8003\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50 type Human struct { name string age int phone string } type Student struct { Human //\u533f\u540d\u5b57\u6bb5Human school string loan float32 } type Employee struct { Human //\u533f\u540d\u5b57\u6bb5Human company string money float32 } //Human\u5bf9\u8c61\u5b9e\u73b0Sayhi\u65b9\u6cd5 func (h *Human) SayHi() { fmt.Printf(\"Hi, I am %s you can call me on %s\\n\", h.name, h.phone) } // Human\u5bf9\u8c61\u5b9e\u73b0Sing\u65b9\u6cd5 func (h *Human) Sing(lyrics string) { fmt.Println(\"La la, la la la, la la la la la...\", lyrics) } //Human\u5bf9\u8c61\u5b9e\u73b0Guzzle\u65b9\u6cd5 func (h *Human) Guzzle(beerStein string) { fmt.Println(\"Guzzle Guzzle Guzzle...\", beerStein) } // Employee\u91cd\u8f7dHuman\u7684Sayhi\u65b9\u6cd5 func (e *Employee) SayHi() { fmt.Printf(\"Hi, I am %s, I work at %s. Call me on %s\\n\", e.name, e.company, e.phone) //\u6b64\u53e5\u53ef\u4ee5\u5206\u6210\u591a\u884c } //Student\u5b9e\u73b0BorrowMoney\u65b9\u6cd5 func (s *Student) BorrowMoney(amount float32) { s.loan += amount // (again and again and...) } //Employee\u5b9e\u73b0SpendSalary\u65b9\u6cd5 func (e *Employee) SpendSalary(amount float32) { e.money -= amount // More vodka please!!! Get me through the day! } // \u5b9a\u4e49interface type Men interface { SayHi() Sing(lyrics string) Guzzle(beerStein string) } type YoungChap interface { SayHi() Sing(song string) BorrowMoney(amount float32) } type ElderlyGent interface { SayHi() Sing(song string) SpendSalary(amount float32) } \u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u77e5\u9053\uff0cinterface\u53ef\u4ee5\u88ab\u4efb\u610f\u7684\u5bf9\u8c61\u5b9e\u73b0\u3002\u770b\u5230\u4e0a\u9762\u7684Men interface\u88abHuman\u3001Student\u548cEmployee\u5b9e\u73b0\u3002\u540c\u7406\uff0c\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u591a\u4e2ainterface\uff0c\u4f8b\u5982\u4e0a\u9762\u7684Student\u5b9e\u73b0\u4e86Men\u548cYoungChap\u4e24\u4e2ainterface\u3002 \u6700\u540e\uff0c\u4efb\u610f\u7684\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u7a7ainterface(\u8fd9\u6837\u5b9a\u4e49\uff1ainterface{})\uff0c\u4e5f\u5c31\u662f\u5305\u542b0\u4e2amethod\u7684interface\u3002 interface\u503c \u90a3\u4e48interface\u91cc\u9762\u5230\u5e95\u80fd\u5b58\u4ec0\u4e48\u503c\u5462\uff1f\u5982\u679c\u5b9a\u4e49\u4e86\u4e00\u4e2ainterface\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u8fd9\u4e2a\u53d8\u91cf\u91cc\u9762\u53ef\u4ee5\u5b58\u5b9e\u73b0\u8fd9\u4e2ainterface\u7684\u4efb\u610f\u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u4f8b\u5982\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2aMen interface\u7c7b\u578b\u7684\u53d8\u91cfm\uff0c\u90a3\u4e48m\u91cc\u9762\u53ef\u4ee5\u5b58Human\u3001Student\u6216\u8005Employee\u503c\u3002 \u56e0\u4e3am\u80fd\u591f\u6301\u6709\u8fd9\u4e09\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u6240\u4ee5\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5305\u542bMen\u7c7b\u578b\u5143\u7d20\u7684slice\uff0c\u8fd9\u4e2aslice\u53ef\u4ee5\u88ab\u8d4b\u4e88\u5b9e\u73b0\u4e86Men\u63a5\u53e3\u7684\u4efb\u610f\u7ed3\u6784\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u548c\u4f20\u7edf\u610f\u4e49\u4e0a\u9762\u7684slice\u6709\u6240\u4e0d\u540c\u3002 \u6765\u770b\u4e00\u4e0b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: package main import \"fmt\" type Human struct { name string age int phone string } type Student struct { Human //\u533f\u540d\u5b57\u6bb5 school string loan float32 } type Employee struct { Human //\u533f\u540d\u5b57\u6bb5 company string money float32 } //Human\u5b9e\u73b0SayHi\u65b9\u6cd5 func (h Human) SayHi() { fmt.Printf(\"Hi, I am %s you can call me on %s\\n\", h.name, h.phone) } //Human\u5b9e\u73b0Sing\u65b9\u6cd5 func (h Human) Sing(lyrics string) { fmt.Println(\"La la la la...\", lyrics) } //Employee\u91cd\u8f7dHuman\u7684SayHi\u65b9\u6cd5 func (e Employee) SayHi() { fmt.Printf(\"Hi, I am %s, I work at %s. Call me on %s\\n\", e.name, e.company, e.phone) } // Interface Men\u88abHuman,Student\u548cEmployee\u5b9e\u73b0 // \u56e0\u4e3a\u8fd9\u4e09\u4e2a\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u8fd9\u4e24\u4e2a\u65b9\u6cd5 type Men interface { SayHi() Sing(lyrics string) } func main() { mike := Student{Human{\"Mike\", 25, \"222-222-XXX\"}, \"MIT\", 0.00} paul := Student{Human{\"Paul\", 26, \"111-222-XXX\"}, \"Harvard\", 100} sam := Employee{Human{\"Sam\", 36, \"444-222-XXX\"}, \"Golang Inc.\", 1000} tom := Employee{Human{\"Tom\", 37, \"222-444-XXX\"}, \"Things Ltd.\", 5000} //\u5b9a\u4e49Men\u7c7b\u578b\u7684\u53d8\u91cfi var i Men //i\u80fd\u5b58\u50a8Student i = mike fmt.Println(\"This is Mike, a Student:\") i.SayHi() i.Sing(\"November rain\") //i\u4e5f\u80fd\u5b58\u50a8Employee i = tom fmt.Println(\"This is tom, an Employee:\") i.SayHi() i.Sing(\"Born to be wild\") //\u5b9a\u4e49\u4e86slice Men fmt.Println(\"Let's use a slice of Men and see what happens\") x := make([]Men, 3) //\u8fd9\u4e09\u4e2a\u90fd\u662f\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20\uff0c\u4f46\u662f\u4ed6\u4eec\u5b9e\u73b0\u4e86interface\u540c\u4e00\u4e2a\u63a5\u53e3 x[0], x[1], x[2] = paul, sam, mike for _, value := range x{ value.SayHi() } } \u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u53d1\u73b0 interface \u5c31\u662f\u4e00\u7ec4\u62bd\u8c61\u65b9\u6cd5\u7684\u96c6\u5408\uff0c\u5b83\u5fc5\u987b\u7531\u5176\u4ed6\u975einterface\u7c7b\u578b\u5b9e\u73b0\uff0c\u800c\u4e0d\u80fd\u81ea\u6211\u5b9e\u73b0\uff0c Go\u901a\u8fc7interface\u5b9e\u73b0\u4e86 duck-typing :\u5373\"\u5f53\u770b\u5230\u4e00\u53ea\u9e1f\u8d70\u8d77\u6765\u50cf\u9e2d\u5b50\u3001\u6e38\u6cf3\u8d77\u6765\u50cf\u9e2d\u5b50\u3001\u53eb\u8d77\u6765\u4e5f\u50cf\u9e2d\u5b50\uff0c\u90a3\u4e48\u8fd9\u53ea\u9e1f\u5c31\u53ef\u4ee5\u88ab\u79f0\u4e3a\u9e2d\u5b50\"\u3002 \u7a7ainterface \u7a7ainterface(interface{})\u4e0d\u5305\u542b\u4efb\u4f55\u7684method\uff0c\u6b63\u56e0\u4e3a\u5982\u6b64\uff0c\u6240\u6709\u7684\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u7a7ainterface\u3002\u7a7ainterface\u5bf9\u4e8e\u63cf\u8ff0\u8d77\u4e0d\u5230\u4efb\u4f55\u7684\u4f5c\u7528(\u56e0\u4e3a\u5b83\u4e0d\u5305\u542b\u4efb\u4f55\u7684method\uff09\uff0c\u4f46\u662f\u7a7ainterface\u9700\u8981\u5b58\u50a8\u4efb\u610f\u7c7b\u578b\u7684\u6570\u503c\u7684\u65f6\u5019\u76f8\u5f53\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u7c7b\u578b\u7684\u6570\u503c\u3002\u5b83\u6709\u70b9\u7c7b\u4f3c\u4e8eC\u8bed\u8a00\u7684void*\u7c7b\u578b\u3002 // \u5b9a\u4e49a\u4e3a\u7a7a\u63a5\u53e3 var a interface{} var i int = 5 s := \"Hello world\" // a\u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u7c7b\u578b\u7684\u6570\u503c a = i a = s \u4e00\u4e2a\u51fd\u6570\u628ainterface{}\u4f5c\u4e3a\u53c2\u6570\uff0c\u90a3\u4e48\u4ed6\u53ef\u4ee5\u63a5\u53d7\u4efb\u610f\u7c7b\u578b\u7684\u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de interface{} ,\u90a3\u4e48\u4e5f\u5c31\u53ef\u4ee5\u8fd4\u56de\u4efb\u610f\u7c7b\u578b\u7684\u503c\u3002\u662f\u4e0d\u662f\u5f88\u6709\u7528\u554a\uff01 interface\u51fd\u6570\u53c2\u6570 interface\u7684\u53d8\u91cf\u53ef\u4ee5\u6301\u6709\u4efb\u610f\u5b9e\u73b0\u8be5interface\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u8fd9\u7ed9\u7f16\u5199\u51fd\u6570(\u5305\u62ecmethod)\u63d0\u4f9b\u4e86\u4e00\u4e9b\u989d\u5916\u7684\u601d\u8003\uff0c\u662f\u4e0d\u662f\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49interface\u53c2\u6570\uff0c\u8ba9\u51fd\u6570\u63a5\u53d7\u5404\u79cd\u7c7b\u578b\u7684\u53c2\u6570\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1afmt.Println\u662f\u5e38\u7528\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u662f\u5426\u6ce8\u610f\u5230\u5b83\u53ef\u4ee5\u63a5\u53d7\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e\u3002\u6253\u5f00fmt\u7684\u6e90\u7801\u6587\u4ef6\uff0c\u4f1a\u770b\u5230\u8fd9\u6837\u4e00\u4e2a\u5b9a\u4e49: type Stringer interface { String() string } \u4e5f\u5c31\u662f\u8bf4\uff0c\u4efb\u4f55\u5b9e\u73b0\u4e86String\u65b9\u6cd5\u7684\u7c7b\u578b\u90fd\u80fd\u4f5c\u4e3a\u53c2\u6570\u88ab fmt.Println \u8c03\u7528,\u6765\u8bd5\u4e00\u8bd5 package main import ( \"fmt\" \"strconv\" ) type Human struct { name string age int phone string } // \u901a\u8fc7\u8fd9\u4e2a\u65b9\u6cd5 Human \u5b9e\u73b0\u4e86 fmt.Stringer func (h Human) String() string { return \"\u2770\"+h.name+\" - \"+strconv.Itoa(h.age)+\" years - \u2706 \" +h.phone+\"\u2771\" } func main() { Bob := Human{\"Bob\", 39, \"000-7777-XXX\"} fmt.Println(\"This Human is : \", Bob) } \u73b0\u5728\u518d\u56de\u987e\u4e00\u4e0b\u524d\u9762\u7684Box\u793a\u4f8b\uff0c\u53d1\u73b0Color\u7ed3\u6784\u4e5f\u5b9a\u4e49\u4e86\u4e00\u4e2a method\uff1aString \u3002\u5176\u5b9e\u8fd9\u4e5f\u662f\u5b9e\u73b0\u4e86 fmt.Stringer \u8fd9\u4e2a interface \uff0c\u5373\u5982\u679c\u9700\u8981\u67d0\u4e2a\u7c7b\u578b\u80fd\u88abfmt\u5305\u4ee5\u7279\u6b8a\u7684\u683c\u5f0f\u8f93\u51fa\uff0c\u5c31\u5fc5\u987b\u5b9e\u73b0 Stringer \u8fd9\u4e2a\u63a5\u53e3\u3002\u5982\u679c\u6ca1\u6709\u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\uff0cfmt\u5c06\u4ee5\u9ed8\u8ba4\u7684\u65b9\u5f0f\u8f93\u51fa\u3002 //\u5b9e\u73b0\u540c\u6837\u7684\u529f\u80fd fmt.Println(\"The biggest one is\", boxes.BiggestsColor().String()) fmt.Println(\"The biggest one is\", boxes.BiggestsColor()) \u6ce8\uff1a\u5b9e\u73b0\u4e86 error \u63a5\u53e3\u7684\u5bf9\u8c61\uff08\u5373\u5b9e\u73b0\u4e86Error() string\u7684\u5bf9\u8c61\uff09\uff0c\u4f7f\u7528fmt\u8f93\u51fa\u65f6\uff0c\u4f1a\u8c03\u7528Error()\u65b9\u6cd5\uff0c\u56e0\u6b64\u4e0d\u5fc5\u518d\u5b9a\u4e49String()\u65b9\u6cd5\u4e86\u3002 interface\u53d8\u91cf\u5b58\u50a8\u7684\u7c7b\u578b interface\u7684\u53d8\u91cf\u91cc\u9762\u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u7c7b\u578b\u7684\u6570\u503c(\u8be5\u7c7b\u578b\u5b9e\u73b0\u4e86interface)\u3002\u90a3\u4e48\u600e\u4e48\u53cd\u5411\u77e5\u9053\u8fd9\u4e2a\u53d8\u91cf\u91cc\u9762\u5b9e\u9645\u4fdd\u5b58\u4e86\u7684\u662f\u54ea\u4e2a\u7c7b\u578b\u7684\u5bf9\u8c61\u5462\uff1f\u76ee\u524d\u5e38\u7528\u7684\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a Comma-ok\u65ad\u8a00 Go\u8bed\u8a00\u91cc\u9762\u6709\u4e00\u4e2a\u8bed\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\u662f\u5426\u662f\u8be5\u7c7b\u578b\u7684\u53d8\u91cf\uff1a value, ok = element.(T)\uff0c\u8fd9\u91ccvalue\u5c31\u662f\u53d8\u91cf\u7684\u503c\uff0cok\u662f\u4e00\u4e2abool\u7c7b\u578b\uff0celement\u662finterface\u53d8\u91cf\uff0cT\u662f\u65ad\u8a00\u7684\u7c7b\u578b\u3002 \u5982\u679celement\u91cc\u9762\u786e\u5b9e\u5b58\u50a8\u4e86T\u7c7b\u578b\u7684\u6570\u503c\uff0c\u90a3\u4e48ok\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002 \u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u66f4\u52a0\u6df1\u5165\u7684\u7406\u89e3\u3002 package main import ( \"fmt\" \"strconv\" ) type Element interface{} type List [] Element type Person struct { name string age int } //\u5b9a\u4e49\u4e86String\u65b9\u6cd5\uff0c\u5b9e\u73b0\u4e86fmt.Stringer func (p Person) String() string { return \"(name: \" + p.name + \" - age: \"+strconv.Itoa(p.age)+ \" years)\" } func main() { list := make(List, 3) list[0] = 1 // an int list[1] = \"Hello\" // a string list[2] = Person{\"Dennis\", 70} for index, element := range list { if value, ok := element.(int); ok { fmt.Printf(\"list[%d] is an int and its value is %d\\n\", index, value) } else if value, ok := element.(string); ok { fmt.Printf(\"list[%d] is a string and its value is %s\\n\", index, value) } else if value, ok := element.(Person); ok { fmt.Printf(\"list[%d] is a Person and its value is %s\\n\", index, value) } else { fmt.Printf(\"list[%d] is of a different type\\n\", index) } } } \u662f\u5426\u6ce8\u610f\u5230\u4e86\u591a\u4e2aif\u91cc\u9762\uff0cif\u91cc\u9762\u5141\u8bb8\u521d\u59cb\u5316\u53d8\u91cf\u3002\u65ad\u8a00\u7684\u7c7b\u578b\u8d8a\u591a\uff0c\u90a3\u4e48if else\u4e5f\u5c31\u8d8a\u591a\uff0c\u6240\u4ee5\u624d\u5f15\u51fa\u4e86\u4e0b\u9762\u8981\u4ecb\u7ecd\u7684switch\u3002 switch\u6d4b\u8bd5 \u91cd\u5199\u4e0a\u9762\u7684\u8fd9\u4e2a\u5b9e\u73b0 package main import ( \"fmt\" \"strconv\" ) type Element interface{} type List [] Element type Person struct { name string age int } //\u6253\u5370 func (p Person) String() string { return \"(name: \" + p.name + \" - age: \"+strconv.Itoa(p.age)+ \" years)\" } func main() { list := make(List, 3) list[0] = 1 //an int list[1] = \"Hello\" //a string list[2] = Person{\"Dennis\", 70} for index, element := range list{ switch value := element.(type) { case int: fmt.Printf(\"list[%d] is an int and its value is %d\\n\", index, value) case string: fmt.Printf(\"list[%d] is a string and its value is %s\\n\", index, value) case Person: fmt.Printf(\"list[%d] is a Person and its value is %s\\n\", index, value) default: fmt.Println(\"list[%d] is of a different type\", index) } } } \u8fd9\u91cc\u6709\u4e00\u70b9\u9700\u8981\u5f3a\u8c03\u7684\u662f\uff1a element.(type) \u8bed\u6cd5\u4e0d\u80fd\u5728switch\u5916\u7684\u4efb\u4f55\u903b\u8f91\u91cc\u9762\u4f7f\u7528\uff0c\u5982\u679c\u8981\u5728switch\u5916\u9762\u5224\u65ad\u4e00\u4e2a\u7c7b\u578b\u5c31\u4f7f\u7528 comma-ok \u3002 \u5d4c\u5165interface Go\u91cc\u9762\u771f\u6b63\u5438\u5f15\u4eba\u7684\u662f\u5b83\u5185\u7f6e\u7684\u903b\u8f91\u8bed\u6cd5\uff0c\u5c31\u50cf\u5728\u5b66\u4e60Struct\u65f6\u5b66\u4e60\u7684\u533f\u540d\u5b57\u6bb5\uff0c\u90a3\u4e48\u76f8\u540c\u7684\u903b\u8f91\u5f15\u5165\u5230interface\u91cc\u9762\uff0c\u66f4\u52a0\u5b8c\u7f8e\u4e86\u3002\u5982\u679c\u4e00\u4e2ainterface1\u4f5c\u4e3ainterface2\u7684\u4e00\u4e2a\u5d4c\u5165\u5b57\u6bb5\uff0c\u90a3\u4e48interface2\u9690\u5f0f\u7684\u5305\u542b\u4e86interface1\u91cc\u9762\u7684method\u3002 \u53ef\u4ee5\u770b\u5230\u6e90\u7801\u5305 container/heap \u91cc\u9762\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u5b9a\u4e49 type Interface interface { sort.Interface //\u5d4c\u5165\u5b57\u6bb5sort.Interface Push(x interface{}) //a Push method to push elements into the heap Pop() interface{} //a Pop elements that pops elements from the heap } \u770b\u5230 sort.Interface \u5176\u5b9e\u5c31\u662f\u5d4c\u5165\u5b57\u6bb5\uff0c\u628a sort.Interface \u7684\u6240\u6709 method \u7ed9\u9690\u5f0f\u7684\u5305\u542b\u8fdb\u6765\u4e86\u3002\u4e5f\u5c31\u662f\u4e0b\u9762\u4e09\u4e2a\u65b9\u6cd5\uff1a type Interface interface { // Len is the number of elements in the collection. Len() int // Less returns whether the element with index i should sort // before the element with index j. Less(i, j int) bool // Swap swaps the elements with indexes i and j. Swap(i, j int) } \u53e6\u4e00\u4e2a\u4f8b\u5b50\u5c31\u662fio\u5305\u4e0b\u9762\u7684 io.ReadWriter \uff0c\u5b83\u5305\u542b\u4e86io\u5305\u4e0b\u9762\u7684 Reader \u548c Writer \u4e24\u4e2a interface \uff1a // io.ReadWriter type ReadWriter interface { Reader Writer } \u53cd\u5c04 Go\u8bed\u8a00\u5b9e\u73b0\u4e86\u53cd\u5c04\uff0c\u6240\u8c13\u53cd\u5c04\u5c31\u662f\u80fd\u68c0\u67e5\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u7684\u72b6\u6001\u3002\u4e00\u822c\u7528\u5230\u7684\u5305\u662f reflect \u5305\u3002\u5982\u4f55\u8fd0\u7528 reflect \u5305\uff0c\u5b98\u65b9\u7684\u8fd9\u7bc7\u6587\u7ae0\u8be6\u7ec6\u7684\u8bb2\u89e3\u4e86 reflect \u5305\u7684\u5b9e\u73b0\u539f\u7406\uff0c laws of reflection \u94fe\u63a5\u5730\u5740\u4e3a http://golang.org/doc/articles/laws_of_reflection.html \u4f7f\u7528reflect\u4e00\u822c\u5206\u6210\u4e09\u6b65\uff0c\u4e0b\u9762\u7b80\u8981\u7684\u8bb2\u89e3\u4e00\u4e0b\uff1a\u8981\u53bb\u53cd\u5c04\u662f\u4e00\u4e2a\u7c7b\u578b\u7684\u503c(\u8fd9\u4e9b\u503c\u90fd\u5b9e\u73b0\u4e86 \u7a7ainterface )\uff0c\u9996\u5148\u9700\u8981\u628a\u5b83\u8f6c\u5316\u6210 reflect \u5bf9\u8c61( reflect.Type \u6216\u8005 reflect.Value \uff0c\u6839\u636e\u4e0d\u540c\u7684\u60c5\u51b5\u8c03\u7528\u4e0d\u540c\u7684\u51fd\u6570)\u3002\u8fd9\u4e24\u79cd\u83b7\u53d6\u65b9\u5f0f\u5982\u4e0b\uff1a t := reflect.TypeOf(i) //\u5f97\u5230\u7c7b\u578b\u7684\u5143\u6570\u636e,\u901a\u8fc7t\u80fd\u83b7\u53d6\u7c7b\u578b\u5b9a\u4e49\u91cc\u9762\u7684\u6240\u6709\u5143\u7d20 v := reflect.ValueOf(i) //\u5f97\u5230\u5b9e\u9645\u7684\u503c\uff0c\u901a\u8fc7v\u83b7\u53d6\u5b58\u50a8\u5728\u91cc\u9762\u7684\u503c\uff0c\u8fd8\u53ef\u4ee5\u53bb\u6539\u53d8\u503c \u8f6c\u5316\u4e3areflect\u5bf9\u8c61\u4e4b\u540e\u5c31\u53ef\u4ee5\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\u4e86\uff0c\u4e5f\u5c31\u662f\u5c06reflect\u5bf9\u8c61\u8f6c\u5316\u6210\u76f8\u5e94\u7684\u503c\uff0c\u4f8b\u5982 tag := t.Elem().Field(0).Tag //\u83b7\u53d6\u5b9a\u4e49\u5728struct\u91cc\u9762\u7684\u6807\u7b7e name := v.Elem().Field(0).String() //\u83b7\u53d6\u5b58\u50a8\u5728\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u91cc\u9762\u7684\u503c \u83b7\u53d6\u53cd\u5c04\u503c\u80fd\u8fd4\u56de\u76f8\u5e94\u7684\u7c7b\u578b\u548c\u6570\u503c var x float64 = 3.4 v := reflect.ValueOf(x) fmt.Println(\"type:\", v.Type()) fmt.Println(\"kind is float64:\", v.Kind() == reflect.Float64) fmt.Println(\"value:\", v.Float()) \u6700\u540e\uff0c\u53cd\u5c04\u7684\u8bdd\uff0c\u90a3\u4e48\u53cd\u5c04\u7684\u5b57\u6bb5\u5fc5\u987b\u662f\u53ef\u4fee\u6539\u7684\uff0c\u524d\u9762\u5b66\u4e60\u8fc7\u4f20\u503c\u548c\u4f20\u5f15\u7528\uff0c\u8fd9\u4e2a\u91cc\u9762\u4e5f\u662f\u4e00\u6837\u7684\u9053\u7406\u3002\u53cd\u5c04\u7684\u5b57\u6bb5\u5fc5\u987b\u662f\u53ef\u8bfb\u5199\u7684\u610f\u601d\u662f\uff0c\u5982\u679c\u4e0b\u9762\u8fd9\u6837\u5199\uff0c\u90a3\u4e48\u4f1a\u53d1\u751f\u9519\u8bef var x float64 = 3.4 v := reflect.ValueOf(x) v.SetFloat(7.1) \u5982\u679c\u8981\u4fee\u6539\u76f8\u5e94\u7684\u503c\uff0c\u5fc5\u987b\u8fd9\u6837\u5199 var x float64 = 3.4 p := reflect.ValueOf(&x) v := p.Elem() v.SetFloat(7.1) \u5e76\u53d1 Go\u4ece\u8bed\u8a00\u5c42\u9762\u652f\u6301\u4e86\u5e76\u884c\u3002 goroutine goroutine \u662f Go \u5e76\u884c\u8bbe\u8ba1\u7684\u6838\u5fc3\u3002 goroutine \u8bf4\u5230\u5e95\u5176\u5b9e\u5c31\u662f\u534f\u7a0b\uff0c\u4f46\u662f\u5b83\u6bd4\u7ebf\u7a0b\u66f4\u5c0f\uff0c\u5341\u51e0\u4e2a goroutine \u53ef\u80fd\u4f53\u73b0\u5728\u5e95\u5c42\u5c31\u662f\u4e94\u516d\u4e2a\u7ebf\u7a0b\uff0cGo\u8bed\u8a00\u5185\u90e8\u5b9e\u73b0\u4e86\u8fd9\u4e9b goroutine \u4e4b\u95f4\u7684\u5185\u5b58\u5171\u4eab\u3002\u6267\u884c goroutine \u53ea\u9700\u6781\u5c11\u7684\u6808\u5185\u5b58(\u5927\u6982\u662f4~5KB)\uff0c\u5f53\u7136\u4f1a\u6839\u636e\u76f8\u5e94\u7684\u6570\u636e\u4f38\u7f29\u3002\u4e5f\u6b63\u56e0\u4e3a\u5982\u6b64\uff0c\u53ef\u540c\u65f6\u8fd0\u884c\u6210\u5343\u4e0a\u4e07\u4e2a\u5e76\u53d1\u4efb\u52a1\u3002 goroutine \u6bd4 thread \u66f4\u6613\u7528\u3001\u66f4\u9ad8\u6548\u3001\u66f4\u8f7b\u4fbf\u3002 goroutine \u662f\u901a\u8fc7Go\u7684 runtime \u7ba1\u7406\u7684\u4e00\u4e2a\u7ebf\u7a0b\u7ba1\u7406\u5668\u3002 goroutine \u901a\u8fc7 go \u5173\u952e\u5b57\u5b9e\u73b0\u4e86\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\u3002 go hello(a, b, c) \u901a\u8fc7\u5173\u952e\u5b57go\u5c31\u542f\u52a8\u4e86\u4e00\u4e2a goroutine \u3002\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50 package main import ( \"fmt\" \"runtime\" ) func say(s string) { for i := 0; i < 5; i++ { runtime.Gosched() fmt.Println(s) } } func main() { go say(\"world\") //\u5f00\u4e00\u4e2a\u65b0\u7684Goroutines\u6267\u884c say(\"hello\") //\u5f53\u524dGoroutines\u6267\u884c } // \u4ee5\u4e0a\u7a0b\u5e8f\u6267\u884c\u540e\u5c06\u8f93\u51fa\uff1a // hello // world // hello // world // hello // world // hello // world // hello \u53ef\u4ee5\u770b\u5230go\u5173\u952e\u5b57\u5f88\u65b9\u4fbf\u7684\u5c31\u5b9e\u73b0\u4e86\u5e76\u53d1\u7f16\u7a0b\u3002 \u4e0a\u9762\u7684\u591a\u4e2a goroutine \u8fd0\u884c\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\u91cc\u9762\uff0c\u5171\u4eab\u5185\u5b58\u6570\u636e\uff0c\u4e0d\u8fc7\u8bbe\u8ba1\u4e0a\u8981\u9075\u5faa\uff1a\u4e0d\u8981\u901a\u8fc7\u5171\u4eab\u6765\u901a\u4fe1\uff0c\u800c\u8981\u901a\u8fc7\u901a\u4fe1\u6765\u5171\u4eab\u3002 runtime.Gosched() \u8868\u793a\u8ba9CPU\u628a\u65f6\u95f4\u7247\u8ba9\u7ed9\u522b\u4eba,\u4e0b\u6b21\u67d0\u4e2a\u65f6\u5019\u7ee7\u7eed\u6062\u590d\u6267\u884c\u8be5 goroutine \u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5728Go 1.5\u5c06\u6807\u8bc6\u5e76\u53d1\u7cfb\u7edf\u7ebf\u7a0b\u4e2a\u6570\u7684 runtime.GOMAXPROCS \u7684\u521d\u59cb\u503c\u75311\u6539\u4e3a\u4e86 \u8fd0\u884c\u73af\u5883\u7684CPU\u6838\u6570 \u3002 \u4f46\u5728Go 1.5\u4ee5\u524d\u8c03\u5ea6\u5668\u4ec5\u4f7f\u7528\u5355\u7ebf\u7a0b\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u5b9e\u73b0\u4e86\u5e76\u53d1\u3002\u60f3\u8981\u53d1\u6325\u591a\u6838\u5904\u7406\u5668\u7684\u5e76\u884c\uff0c\u9700\u8981\u7a0b\u5e8f\u4e2d\u663e\u5f0f\u8c03\u7528 runtime.GOMAXPROCS(n) \u544a\u8bc9\u8c03\u5ea6\u5668\u540c\u65f6\u4f7f\u7528\u591a\u4e2a\u7ebf\u7a0b\u3002 GOMAXPROCS \u8bbe\u7f6e\u4e86\u540c\u65f6\u8fd0\u884c\u903b\u8f91\u4ee3\u7801\u7684\u7cfb\u7edf\u7ebf\u7a0b\u7684\u6700\u5927\u6570\u91cf\uff0c\u5e76\u8fd4\u56de\u4e4b\u524d\u7684\u8bbe\u7f6e\u3002\u5982\u679c n < 1 \uff0c\u4e0d\u4f1a\u6539\u53d8\u5f53\u524d\u8bbe\u7f6e\u3002 channels goroutine \u8fd0\u884c\u5728\u76f8\u540c\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u56e0\u6b64\u8bbf\u95ee\u5171\u4eab\u5185\u5b58\u5fc5\u987b\u505a\u597d\u540c\u6b65\u3002\u90a3\u4e48 goroutine \u4e4b\u95f4\u5982\u4f55\u8fdb\u884c\u6570\u636e\u7684\u901a\u4fe1\u5462\uff0cGo\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u901a\u4fe1\u673a\u5236 channel \u3002 channel \u53ef\u4ee5\u4e0e Unix shell \u4e2d\u7684\u53cc\u5411\u7ba1\u9053\u505a\u7c7b\u6bd4\uff1a\u53ef\u4ee5\u901a\u8fc7\u5b83\u53d1\u9001\u6216\u8005\u63a5\u6536\u503c\u3002\u8fd9\u4e9b\u503c\u53ea\u80fd\u662f\u7279\u5b9a\u7684\u7c7b\u578b\uff1a channel\u7c7b\u578b \u3002\u5b9a\u4e49\u4e00\u4e2a channel \u65f6\uff0c\u4e5f\u9700\u8981\u5b9a\u4e49\u53d1\u9001\u5230 channel \u7684\u503c\u7684\u7c7b\u578b\u3002\u6ce8\u610f\uff0c\u5fc5\u987b\u4f7f\u7528 make \u521b\u5efa channel \uff1a ci := make(chan int) cs := make(chan string) cf := make(chan interface{}) channel \u901a\u8fc7\u64cd\u4f5c\u7b26 <- \u6765\u63a5\u6536\u548c\u53d1\u9001\u6570\u636e ch <- v // \u53d1\u9001v\u5230channel ch. v := <-ch // \u4ecech\u4e2d\u63a5\u6536\u6570\u636e\uff0c\u5e76\u8d4b\u503c\u7ed9v \u628a\u8fd9\u4e9b\u5e94\u7528\u5230\u4f8b\u5b50\u4e2d\u6765\uff1a package main import \"fmt\" func sum(a []int, c chan int) { total := 0 for _, v := range a { total += v } c <- total // send total to c } func main() { a := []int{7, 2, 8, -9, 4, 0} c := make(chan int) go sum(a[:len(a)/2], c) go sum(a[len(a)/2:], c) x, y := <-c, <-c // receive from c fmt.Println(x, y, x + y) } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c channel \u63a5\u6536\u548c\u53d1\u9001\u6570\u636e\u90fd\u662f\u963b\u585e\u7684\uff0c\u9664\u975e\u53e6\u4e00\u7aef\u5df2\u7ecf\u51c6\u5907\u597d\uff0c\u8fd9\u6837\u5c31\u4f7f\u5f97 Goroutines \u540c\u6b65\u53d8\u7684\u66f4\u52a0\u7684\u7b80\u5355\uff0c\u800c\u4e0d\u9700\u8981\u663e\u5f0f\u7684 lock \u3002\u6240\u8c13\u963b\u585e\uff0c\u4e5f\u5c31\u662f\u5982\u679c\u8bfb\u53d6\uff08 value := <-ch \uff09\u5b83\u5c06\u4f1a\u88ab\u963b\u585e\uff0c\u76f4\u5230\u6709\u6570\u636e\u63a5\u6536\u3002\u5176\u6b21\uff0c\u4efb\u4f55\u53d1\u9001\uff08 ch<-5 \uff09\u5c06\u4f1a\u88ab\u963b\u585e\uff0c\u76f4\u5230\u6570\u636e\u88ab\u8bfb\u51fa\u3002\u65e0\u7f13\u51b2 channel \u662f\u5728\u591a\u4e2a goroutine \u4e4b\u95f4\u540c\u6b65\u5f88\u68d2\u7684\u5de5\u5177\u3002 Buffered Channels \u4e0a\u9762\u4ecb\u7ecd\u4e86\u9ed8\u8ba4\u7684\u975e\u7f13\u5b58\u7c7b\u578b\u7684channel\uff0c\u4e0d\u8fc7Go\u4e5f\u5141\u8bb8\u6307\u5b9achannel\u7684\u7f13\u51b2\u5927\u5c0f\uff0c\u5f88\u7b80\u5355\uff0c\u5c31\u662fchannel\u53ef\u4ee5\u5b58\u50a8\u591a\u5c11\u5143\u7d20\u3002 ch:= make(chan bool , 4)\uff0c\u521b\u5efa\u4e86\u53ef\u4ee5\u5b58\u50a84\u4e2a\u5143\u7d20\u7684bool \u578bchannel\u3002\u5728\u8fd9\u4e2achannel \u4e2d\uff0c\u524d4\u4e2a\u5143\u7d20\u53ef\u4ee5\u65e0\u963b\u585e\u7684\u5199\u5165\u3002\u5f53\u5199\u5165\u7b2c5\u4e2a\u5143\u7d20\u65f6\uff0c\u4ee3\u7801\u5c06\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u5176\u4ed6goroutine\u4ecechannel \u4e2d\u8bfb\u53d6\u4e00\u4e9b\u5143\u7d20\uff0c\u817e\u51fa\u7a7a\u95f4\u3002 ch := make(chan type, value) \u5f53 value = 0 \u65f6\uff0cchannel \u662f\u65e0\u7f13\u51b2\u963b\u585e\u8bfb\u5199\u7684\uff0c\u5f53 value > 0 \u65f6\uff0cchannel \u6709\u7f13\u51b2\u3001\u662f\u975e\u963b\u585e\u7684\uff0c\u76f4\u5230\u5199\u6ee1 value \u4e2a\u5143\u7d20\u624d\u963b\u585e\u5199\u5165\u3002 \u770b\u4e00\u4e0b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u53ef\u4ee5\u5728\u81ea\u5df1\u672c\u673a\u6d4b\u8bd5\u4e00\u4e0b\uff0c\u4fee\u6539\u76f8\u5e94\u7684value\u503c package main import \"fmt\" func main() { c := make(chan int, 2)//\u4fee\u65392\u4e3a1\u5c31\u62a5\u9519\uff0c\u4fee\u65392\u4e3a3\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c c <- 1 c <- 2 fmt.Println(<-c) fmt.Println(<-c) } //\u4fee\u6539\u4e3a1\u62a5\u5982\u4e0b\u7684\u9519\u8bef: //fatal error: all goroutines are asleep - deadlock! Range\u548cClose \u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u9700\u8981\u8bfb\u53d6\u4e24\u6b21c\uff0c\u8fd9\u6837\u4e0d\u662f\u5f88\u65b9\u4fbf\uff0cGo\u8003\u8651\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u901a\u8fc7range\uff0c\u50cf\u64cd\u4f5cslice\u6216\u8005map\u4e00\u6837\u64cd\u4f5c\u7f13\u5b58\u7c7b\u578b\u7684channel\uff0c\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50 package main import ( \"fmt\" ) func fibonacci(n int, c chan int) { x, y := 1, 1 for i := 0; i < n; i++ { c <- x x, y = y, x + y } close(c) } func main() { c := make(chan int, 10) go fibonacci(cap(c), c) for i := range c { fmt.Println(i) } } for i := range c \u80fd\u591f\u4e0d\u65ad\u7684\u8bfb\u53d6 channel \u91cc\u9762\u7684\u6570\u636e\uff0c\u76f4\u5230\u8be5 channel \u88ab\u663e\u5f0f\u7684\u5173\u95ed\u3002\u4e0a\u9762\u4ee3\u7801\u770b\u5230\u53ef\u4ee5\u663e\u5f0f\u7684\u5173\u95ed channel \uff0c\u751f\u4ea7\u8005\u901a\u8fc7\u5185\u7f6e\u51fd\u6570 close \u5173\u95ed channel \u3002\u5173\u95ed channel \u4e4b\u540e\u5c31\u65e0\u6cd5\u518d\u53d1\u9001\u4efb\u4f55\u6570\u636e\u4e86\uff0c\u5728\u6d88\u8d39\u65b9\u53ef\u4ee5\u901a\u8fc7\u8bed\u6cd5 v, ok := <-ch \u6d4b\u8bd5 channel \u662f\u5426\u88ab\u5173\u95ed\u3002\u5982\u679cok\u8fd4\u56defalse\uff0c\u90a3\u4e48\u8bf4\u660e channel \u5df2\u7ecf\u6ca1\u6709\u4efb\u4f55\u6570\u636e\u5e76\u4e14\u5df2\u7ecf\u88ab\u5173\u95ed\u3002 \u8bb0\u4f4f\u5e94\u8be5\u5728\u751f\u4ea7\u8005\u7684\u5730\u65b9\u5173\u95ed channel \uff0c\u800c\u4e0d\u662f\u6d88\u8d39\u7684\u5730\u65b9\u53bb\u5173\u95ed\u5b83\uff0c\u8fd9\u6837\u5bb9\u6613\u5f15\u8d77 panic \u53e6\u5916\u8bb0\u4f4f\u4e00\u70b9\u7684\u5c31\u662f channel \u4e0d\u50cf\u6587\u4ef6\u4e4b\u7c7b\u7684\uff0c\u4e0d\u9700\u8981\u7ecf\u5e38\u53bb\u5173\u95ed\uff0c\u53ea\u6709\u786e\u5b9e\u6ca1\u6709\u4efb\u4f55\u53d1\u9001\u6570\u636e\u4e86\uff0c\u6216\u8005\u60f3\u663e\u5f0f\u7684\u7ed3\u675f range \u5faa\u73af\u4e4b\u7c7b\u7684 Select \u4e0a\u9762\u4ecb\u7ecd\u7684\u90fd\u662f\u53ea\u6709\u4e00\u4e2a channel \u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u5982\u679c\u5b58\u5728\u591a\u4e2a channel \u7684\u65f6\u5019\uff0c\u8be5\u5982\u4f55\u64cd\u4f5c\u5462\uff0cGo\u91cc\u9762\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5173\u952e\u5b57 select \uff0c\u901a\u8fc7 select \u53ef\u4ee5\u76d1\u542c channel \u4e0a\u7684\u6570\u636e\u6d41\u52a8\u3002 select \u9ed8\u8ba4\u662f\u963b\u585e\u7684\uff0c\u53ea\u6709\u5f53\u76d1\u542c\u7684 channel \u4e2d\u6709\u53d1\u9001\u6216\u63a5\u6536\u53ef\u4ee5\u8fdb\u884c\u65f6\u624d\u4f1a\u8fd0\u884c\uff0c\u5f53\u591a\u4e2a channel \u90fd\u51c6\u5907\u597d\u7684\u65f6\u5019\uff0c select \u662f\u968f\u673a\u7684\u9009\u62e9\u4e00\u4e2a\u6267\u884c\u7684\u3002 package main import \"fmt\" func fibonacci(c, quit chan int) { x, y := 1, 1 for { select { case c <- x: x, y = y, x + y case <-quit: fmt.Println(\"quit\") return } } } func main() { c := make(chan int) quit := make(chan int) go func() { for i := 0; i < 10; i++ { fmt.Println(<-c) } quit <- 0 }() fibonacci(c, quit) } \u5728 select \u91cc\u9762\u8fd8\u6709 default \u8bed\u6cd5\uff0c select \u5176\u5b9e\u5c31\u662f\u7c7b\u4f3c switch \u7684\u529f\u80fd\uff0c default \u5c31\u662f\u5f53\u76d1\u542c\u7684 channel \u90fd\u6ca1\u6709\u51c6\u5907\u597d\u7684\u65f6\u5019\uff0c\u9ed8\u8ba4\u6267\u884c\u7684\uff08 select \u4e0d\u518d\u963b\u585e\u7b49\u5f85 channel \uff09\u3002 select { case i := <-c: // use i default: // \u5f53c\u963b\u585e\u7684\u65f6\u5019\u6267\u884c\u8fd9\u91cc } \u8d85\u65f6 \u6709\u65f6\u5019\u4f1a\u51fa\u73b0 goroutine \u963b\u585e\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u5982\u4f55\u907f\u514d\u6574\u4e2a\u7a0b\u5e8f\u8fdb\u5165\u963b\u585e\u7684\u60c5\u51b5\u5462\uff1f\u53ef\u4ee5\u5229\u7528 select \u6765\u8bbe\u7f6e\u8d85\u65f6\uff0c\u901a\u8fc7\u5982\u4e0b\u7684\u65b9\u5f0f\u5b9e\u73b0\uff1a func main() { c := make(chan int) o := make(chan bool) go func() { for { select { case v := <- c: println(v) case <- time.After(5 * time.Second): println(\"timeout\") o <- true break } } }() <- o } runtime goroutine runtime \u5305\u4e2d\u6709\u51e0\u4e2a\u5904\u7406 goroutine \u7684\u51fd\u6570\uff1a Goexit : \u9000\u51fa\u5f53\u524d\u6267\u884c\u7684goroutine\uff0c\u4f46\u662fdefer\u51fd\u6570\u8fd8\u4f1a\u7ee7\u7eed\u8c03\u7528 Gosched : \u8ba9\u51fa\u5f53\u524dgoroutine\u7684\u6267\u884c\u6743\u9650\uff0c\u8c03\u5ea6\u5668\u5b89\u6392\u5176\u4ed6\u7b49\u5f85\u7684\u4efb\u52a1\u8fd0\u884c\uff0c\u5e76\u5728\u4e0b\u6b21\u67d0\u4e2a\u65f6\u5019\u4ece\u8be5\u4f4d\u7f6e\u6062\u590d\u6267\u884c\u3002 NumCPU : \u8fd4\u56de CPU \u6838\u6570\u91cf NumGoroutine : \u8fd4\u56de\u6b63\u5728\u6267\u884c\u548c\u6392\u961f\u7684\u4efb\u52a1\u603b\u6570 GOMAXPROCS : \u7528\u6765\u8bbe\u7f6e\u53ef\u4ee5\u5e76\u884c\u8ba1\u7b97\u7684CPU\u6838\u6570\u7684\u6700\u5927\u503c\uff0c\u5e76\u8fd4\u56de\u4e4b\u524d\u7684\u503c\u3002 \u9519\u8bef\u5904\u7406 Go\u8bed\u8a00\u4e3b\u8981\u7684\u8bbe\u8ba1\u51c6\u5219\u662f\uff1a\u7b80\u6d01\u3001\u660e\u767d\uff0c\u7b80\u6d01\u662f\u6307\u8bed\u6cd5\u548cC\u7c7b\u4f3c\uff0c\u76f8\u5f53\u7684\u7b80\u5355\uff0c\u660e\u767d\u662f\u6307\u4efb\u4f55\u8bed\u53e5\u90fd\u662f\u5f88\u660e\u663e\u7684\uff0c\u4e0d\u542b\u6709\u4efb\u4f55\u9690\u542b\u7684\u4e1c\u897f\uff0c\u5728\u9519\u8bef\u5904\u7406\u65b9\u6848\u7684\u8bbe\u8ba1\u4e2d\u4e5f\u8d2f\u5f7b\u4e86\u8fd9\u4e00\u601d\u60f3\u3002 \u5728C\u8bed\u8a00\u91cc\u9762\u662f\u901a\u8fc7\u8fd4\u56de -1 \u6216\u8005 NULL \u4e4b\u7c7b\u7684\u4fe1\u606f\u6765\u8868\u793a\u9519\u8bef\uff0c\u4f46\u662f\u5bf9\u4e8e\u4f7f\u7528\u8005\u6765\u8bf4\uff0c\u4e0d\u67e5\u770b\u76f8\u5e94\u7684API\u8bf4\u660e\u6587\u6863\uff0c\u6839\u672c\u641e\u4e0d\u6e05\u695a\u8fd9\u4e2a\u8fd4\u56de\u503c\u7a76\u7adf\u4ee3\u8868\u4ec0\u4e48\u610f\u601d\uff0c\u6bd4\u5982:\u8fd4\u56de0\u662f\u6210\u529f\uff0c\u8fd8\u662f\u5931\u8d25,\u800c Go \u5b9a\u4e49\u4e86\u4e00\u4e2a\u53eb\u505a error \u7684\u7c7b\u578b\uff0c\u6765\u663e\u5f0f\u8868\u8fbe\u9519\u8bef\u3002\u5728\u4f7f\u7528\u65f6\uff0c\u901a\u8fc7\u628a\u8fd4\u56de\u7684 error \u53d8\u91cf\u4e0e nil \u7684\u6bd4\u8f83\uff0c\u6765\u5224\u5b9a\u64cd\u4f5c\u662f\u5426\u6210\u529f\u3002\u4f8b\u5982 os.Open \u51fd\u6570\u5728\u6253\u5f00\u6587\u4ef6\u5931\u8d25\u65f6\u5c06\u8fd4\u56de\u4e00\u4e2a\u4e0d\u4e3a nil \u7684 error \u53d8\u91cf func Open(name string) (file *File, err error) \u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u901a\u8fc7\u8c03\u7528 os.Open \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u5982\u679c\u51fa\u73b0\u9519\u8bef\uff0c\u90a3\u4e48\u5c31\u4f1a\u8c03\u7528 log.Fatal \u6765\u8f93\u51fa\u9519\u8bef\u4fe1\u606f\uff1a f, err := os.Open(\"filename.ext\") if err != nil { log.Fatal(err) } \u7c7b\u4f3c\u4e8e os.Open \u51fd\u6570\uff0c\u6807\u51c6\u5305\u4e2d\u6240\u6709\u53ef\u80fd\u51fa\u9519\u7684API\u90fd\u4f1a\u8fd4\u56de\u4e00\u4e2a error \u53d8\u91cf\uff0c\u4ee5\u65b9\u4fbf\u9519\u8bef\u5904\u7406\uff0c\u8fd9\u4e2a\u5c0f\u8282\u5c06\u8be6\u7ec6\u5730\u4ecb\u7ecd error \u7c7b\u578b\u7684\u8bbe\u8ba1\uff0c\u548c\u8ba8\u8bba\u5f00\u53d1Web\u5e94\u7528\u4e2d\u5982\u4f55\u66f4\u597d\u5730\u5904\u7406 error \u3002 Error\u7c7b\u578b error\u7c7b\u578b\u662f\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\uff0c\u8fd9\u662f\u5b83\u7684\u5b9a\u4e49\uff1a type error interface { Error() string } error\u662f\u4e00\u4e2a\u5185\u7f6e\u7684\u63a5\u53e3\u7c7b\u578b\uff0c\u53ef\u4ee5\u5728 /builtin/ \u5305\u4e0b\u9762\u627e\u5230\u76f8\u5e94\u7684\u5b9a\u4e49\u3002\u800c\u5728\u5f88\u591a\u5185\u90e8\u5305\u91cc\u9762\u7528\u5230\u7684 error \u662f errors \u5305\u4e0b\u9762\u7684\u5b9e\u73b0\u7684\u79c1\u6709\u7ed3\u6784 errorString // errorString is a trivial implementation of error. type errorString struct { s string } func (e *errorString) Error() string { return e.s } \u53ef\u4ee5\u901a\u8fc7 errors.New \u628a\u4e00\u4e2a\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a errorString \uff0c\u4ee5\u5f97\u5230\u4e00\u4e2a\u6ee1\u8db3\u63a5\u53e3 error \u7684\u5bf9\u8c61\uff0c\u5176\u5185\u90e8\u5b9e\u73b0\u5982\u4e0b\uff1a // New returns an error that formats as the given text. func New(text string) error { return &errorString{text} } \u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528 errors.New : func Sqrt(f float64) (float64, error) { if f < 0 { return 0, errors.New(\"math: square root of negative number\") } // implementation } \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5728\u8c03\u7528Sqrt\u7684\u65f6\u5019\u4f20\u9012\u7684\u4e00\u4e2a\u8d1f\u6570\uff0c\u7136\u540e\u5c31\u5f97\u5230\u4e86 non-nil \u7684 error \u5bf9\u8c61\uff0c\u5c06\u6b64\u5bf9\u8c61\u4e0e nil \u6bd4\u8f83\uff0c\u7ed3\u679c\u4e3a true \uff0c\u6240\u4ee5 fmt.Println (fmt\u5305\u5728\u5904\u7406error\u65f6\u4f1a\u8c03\u7528Error\u65b9\u6cd5)\u88ab\u8c03\u7528\uff0c\u4ee5\u8f93\u51fa\u9519\u8bef\uff0c\u8bf7\u770b\u4e0b\u9762\u8c03\u7528\u7684\u793a\u4f8b\u4ee3\u7801\uff1a f, err := Sqrt(-1) if err != nil { fmt.Println(err) } \u81ea\u5b9a\u4e49Error error \u662f\u4e00\u4e2a interface \uff0c\u6240\u4ee5\u5728\u5b9e\u73b0\u81ea\u5df1\u7684\u5305\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u5b9a\u4e49\u5b9e\u73b0\u6b64\u63a5\u53e3\u7684\u7ed3\u6784\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u81ea\u5df1\u7684\u9519\u8bef\u5b9a\u4e49\uff0c\u8bf7\u770b\u6765\u81eaJson\u5305\u7684\u793a\u4f8b\uff1a type SyntaxError struct { msg string // \u9519\u8bef\u63cf\u8ff0 Offset int64 // \u9519\u8bef\u53d1\u751f\u7684\u4f4d\u7f6e } func (e *SyntaxError) Error() string { return e.msg } Offset \u5b57\u6bb5\u5728\u8c03\u7528 Error \u7684\u65f6\u5019\u4e0d\u4f1a\u88ab\u6253\u5370\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u7c7b\u578b\u65ad\u8a00\u83b7\u53d6\u9519\u8bef\u7c7b\u578b\uff0c\u7136\u540e\u53ef\u4ee5\u6253\u5370\u76f8\u5e94\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50: if err := dec.Decode(&val); err != nil { if serr, ok := err.(*json.SyntaxError); ok { line, col := findLine(f, serr.Offset) return fmt.Errorf(\"%s:%d:%d: %v\", f.Name(), line, col, err) } return err } \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u51fd\u6570\u8fd4\u56de\u81ea\u5b9a\u4e49\u9519\u8bef\u65f6\uff0c\u8fd4\u56de\u503c\u63a8\u8350\u8bbe\u7f6e\u4e3a error \u7c7b\u578b\uff0c\u800c\u975e\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\uff0c\u7279\u522b\u9700\u8981\u6ce8\u610f\u7684\u662f\u4e0d\u5e94\u9884\u58f0\u660e\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\u7684\u53d8\u91cf\u3002\u4f8b\u5982\uff1a func Decode() *SyntaxError { // \u9519\u8bef\uff0c\u5c06\u53ef\u80fd\u5bfc\u81f4\u4e0a\u5c42\u8c03\u7528\u8005err!=nil\u7684\u5224\u65ad\u6c38\u8fdc\u4e3atrue\u3002 var err *SyntaxError // \u9884\u58f0\u660e\u9519\u8bef\u53d8\u91cf if \u51fa\u9519\u6761\u4ef6 { err = &SyntaxError{} } return err // \u9519\u8bef\uff0cerr\u6c38\u8fdc\u7b49\u4e8e\u975enil\uff0c\u5bfc\u81f4\u4e0a\u5c42\u8c03\u7528\u8005err!=nil\u7684\u5224\u65ad\u59cb\u7ec8\u4e3atrue } \u539f\u56e0\u89c1 http://golang.org/doc/faq#nil_error (\u9700\u79d1\u5b66\u4e0a\u7f51) \u4e0a\u9762\u4f8b\u5b50\u7b80\u5355\u7684\u6f14\u793a\u4e86\u5982\u4f55\u81ea\u5b9a\u4e49Error\u7c7b\u578b\u3002\u4f46\u662f\u5982\u679c\u8fd8\u9700\u8981\u66f4\u590d\u6742\u7684\u9519\u8bef\u5904\u7406\u5462\uff1f\u6b64\u65f6\uff0c\u6765\u53c2\u8003\u4e00\u4e0bnet\u5305\u91c7\u7528\u7684\u65b9\u6cd5\uff1a package net type Error interface { error Timeout() bool // Is the error a timeout? Temporary() bool // Is the error temporary? } \u5728\u8c03\u7528\u7684\u5730\u65b9\uff0c\u901a\u8fc7\u7c7b\u578b\u65ad\u8a00 err \u662f\u4e0d\u662f net.Error ,\u6765\u7ec6\u5316\u9519\u8bef\u7684\u5904\u7406\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5982\u679c\u4e00\u4e2a\u7f51\u7edc\u53d1\u751f\u4e34\u65f6\u6027\u9519\u8bef\uff0c\u90a3\u4e48\u5c06\u4f1asleep 1\u79d2\u4e4b\u540e\u91cd\u8bd5\uff1a if nerr, ok := err.(net.Error); ok && nerr.Temporary() { time.Sleep(1e9) continue } if err != nil { log.Fatal(err) } \u9519\u8bef\u5904\u7406 Go\u5728\u9519\u8bef\u5904\u7406\u4e0a\u91c7\u7528\u4e86\u4e0eC\u7c7b\u4f3c\u7684\u68c0\u67e5\u8fd4\u56de\u503c\u7684\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u5176\u4ed6\u591a\u6570\u4e3b\u6d41\u8bed\u8a00\u91c7\u7528\u7684\u5f02\u5e38\u65b9\u5f0f\uff0c\u8fd9\u9020\u6210\u4e86\u4ee3\u7801\u7f16\u5199\u4e0a\u7684\u4e00\u4e2a\u5f88\u5927\u7684\u7f3a\u70b9:\u9519\u8bef\u5904\u7406\u4ee3\u7801\u7684\u5197\u4f59\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u662f\u901a\u8fc7\u590d\u7528\u68c0\u6d4b\u51fd\u6570\u6765\u51cf\u5c11\u7c7b\u4f3c\u7684\u4ee3\u7801\u3002 \u8bf7\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4ee3\u7801\uff1a func init() { http.HandleFunc(\"/view\", viewRecord) } func viewRecord(w http.ResponseWriter, r *http.Request) { c := appengine.NewContext(r) key := datastore.NewKey(c, \"Record\", r.FormValue(\"id\"), 0, nil) record := new(Record) if err := datastore.Get(c, key, record); err != nil { http.Error(w, err.Error(), 500) return } if err := viewTemplate.Execute(w, record); err != nil { http.Error(w, err.Error(), 500) } } \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u83b7\u53d6\u6570\u636e\u548c\u6a21\u677f\u5c55\u793a\u8c03\u7528\u65f6\u90fd\u6709\u68c0\u6d4b\u9519\u8bef\uff0c\u5f53\u6709\u9519\u8bef\u53d1\u751f\u65f6\uff0c\u8c03\u7528\u4e86\u7edf\u4e00\u7684\u5904\u7406\u51fd\u6570 http.Error \uff0c\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef500\u9519\u8bef\u7801\uff0c\u5e76\u663e\u793a\u76f8\u5e94\u7684\u9519\u8bef\u6570\u636e\u3002\u4f46\u662f\u5f53\u8d8a\u6765\u8d8a\u591a\u7684 HandleFunc \u52a0\u5165\u4e4b\u540e\uff0c\u8fd9\u6837\u7684\u9519\u8bef\u5904\u7406\u903b\u8f91\u4ee3\u7801\u5c31\u4f1a\u8d8a\u6765\u8d8a\u591a\uff0c\u5176\u5b9e\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u8def\u7531\u5668\u6765\u7f29\u51cf\u4ee3\u7801 type appHandler func(http.ResponseWriter, *http.Request) error func (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) { if err := fn(w, r); err != nil { http.Error(w, err.Error(), 500) } } \u4e0a\u9762\u5b9a\u4e49\u4e86\u81ea\u5b9a\u4e49\u7684\u8def\u7531\u5668\uff0c\u7136\u540e\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u6765\u6ce8\u518c\u51fd\u6570\uff1a func init() { http.Handle(\"/view\", appHandler(viewRecord)) } \u5f53\u8bf7\u6c42 /view \u7684\u65f6\u5019\u903b\u8f91\u5904\u7406\u53ef\u4ee5\u53d8\u6210\u5982\u4e0b\u4ee3\u7801\uff0c\u548c\u7b2c\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u76f8\u6bd4\u8f83\u5df2\u7ecf\u7b80\u5355\u4e86\u5f88\u591a\u3002 func viewRecord(w http.ResponseWriter, r *http.Request) error { c := appengine.NewContext(r) key := datastore.NewKey(c, \"Record\", r.FormValue(\"id\"), 0, nil) record := new(Record) if err := datastore.Get(c, key, record); err != nil { return err } return viewTemplate.Execute(w, record) } \u4e0a\u9762\u7684\u4f8b\u5b50\u9519\u8bef\u5904\u7406\u7684\u65f6\u5019\u6240\u6709\u7684\u9519\u8bef\u8fd4\u56de\u7ed9\u7528\u6237\u7684\u90fd\u662f500\u9519\u8bef\u7801\uff0c\u7136\u540e\u6253\u5370\u51fa\u6765\u76f8\u5e94\u7684\u9519\u8bef\u4ee3\u7801\uff0c\u5176\u5b9e\u53ef\u4ee5\u628a\u8fd9\u4e2a\u9519\u8bef\u4fe1\u606f\u5b9a\u4e49\u7684\u66f4\u52a0\u53cb\u597d\uff0c\u8c03\u8bd5\u7684\u65f6\u5019\u4e5f\u65b9\u4fbf\u5b9a\u4f4d\u95ee\u9898\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u8fd4\u56de\u7684\u9519\u8bef\u7c7b\u578b\uff1a type appError struct { Error error Message string Code int } \u8fd9\u6837\u81ea\u5b9a\u4e49\u8def\u7531\u5668\u53ef\u4ee5\u6539\u6210\u5982\u4e0b\u65b9\u5f0f\uff1a type appHandler func(http.ResponseWriter, *http.Request) *appError func (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) { if e := fn(w, r); e != nil { // e is *appError, not os.Error. c := appengine.NewContext(r) c.Errorf(\"%v\", e.Error) http.Error(w, e.Message, e.Code) } } \u8fd9\u6837\u4fee\u6539\u5b8c\u81ea\u5b9a\u4e49\u9519\u8bef\u4e4b\u540e\uff0c\u903b\u8f91\u5904\u7406\u53ef\u4ee5\u6539\u6210\u5982\u4e0b\u65b9\u5f0f\uff1a func viewRecord(w http.ResponseWriter, r *http.Request) *appError { c := appengine.NewContext(r) key := datastore.NewKey(c, \"Record\", r.FormValue(\"id\"), 0, nil) record := new(Record) if err := datastore.Get(c, key, record); err != nil { return &appError{err, \"Record not found\", 404} } if err := viewTemplate.Execute(w, record); err != nil { return &appError{err, \"Can't display record\", 500} } return nil } \u5982\u4e0a\u6240\u793a\uff0c\u5728\u8bbf\u95eeview\u7684\u65f6\u5019\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u60c5\u51b5\u83b7\u53d6\u4e0d\u540c\u7684\u9519\u8bef\u7801\u548c\u9519\u8bef\u4fe1\u606f\uff0c\u867d\u7136\u8fd9\u4e2a\u548c\u7b2c\u4e00\u4e2a\u7248\u672c\u7684\u4ee3\u7801\u91cf\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u8fd9\u4e2a\u663e\u793a\u7684\u9519\u8bef\u66f4\u52a0\u660e\u663e\uff0c\u63d0\u793a\u7684\u9519\u8bef\u4fe1\u606f\u66f4\u52a0\u53cb\u597d\uff0c\u6269\u5c55\u6027\u4e5f\u6bd4\u7b2c\u4e00\u4e2a\u66f4\u597d\u3002 \u603b\u7ed3 \u5728\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\uff0c\u5bb9\u9519\u662f\u76f8\u5f53\u91cd\u8981\u7684\u4e00\u90e8\u5206\u5de5\u4f5c\uff0c\u5728Go\u4e2d\u5b83\u662f\u901a\u8fc7\u9519\u8bef\u5904\u7406\u6765\u5b9e\u73b0\u7684\uff0cerror\u867d\u7136\u53ea\u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u4f46\u662f\u5176\u53d8\u5316\u5374\u53ef\u4ee5\u6709\u5f88\u591a\uff0c\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u6765\u5b9e\u73b0\u4e0d\u540c\u7684\u5904\u7406\u3002","title":"\u5173\u952e\u5b57"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_1","text":"Go\u8bed\u8a00\u8bbe\u8ba1\u7684\u5173\u952e\u5b57\uff0c\u4e86\u89e3\u8fd9\u4e9b\u5173\u952e\u5b57\u6709\u52a9\u4e8e\u547d\u540d\u53d8\u91cf\u7684\u51b2\u7a81\u907f\u514d","title":"\u5173\u952e\u5b57"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#go","text":"break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var","title":"go\u7684\u4e8c\u5341\u4e94\u4e2a\u5173\u952e\u5b57"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_2","text":"var \u548c const \u662f Go\u8bed\u8a00\u57fa\u7840\u91cc\u9762\u7684\u53d8\u91cf\u548c\u5e38\u91cf\u7533\u660e package \u548c import \u7528\u4e8e\u5206\u5305\u548c\u5bfc\u5165 func \u7528\u4e8e\u5b9a\u4e49\u51fd\u6570\u548c\u65b9\u6cd5 return \u7528\u4e8e\u4ece\u51fd\u6570\u8fd4\u56de defer \u7528\u4e8e\u7c7b\u4f3c\u6790\u6784\u51fd\u6570 go \u7528\u4e8e\u5e76\u53d1 select \u7528\u4e8e\u9009\u62e9\u4e0d\u540c\u7c7b\u578b\u7684\u901a\u8baf interface \u7528\u4e8e\u5b9a\u4e49\u63a5\u53e3 struct \u7528\u4e8e\u5b9a\u4e49\u62bd\u8c61\u6570\u636e\u7c7b\u578b break \u3001 case \u3001 continue \u3001 for \u3001 fallthrough \u3001 else \u3001 if \u3001 switch \u3001 goto \u3001 default \u7528\u4e8e\u6d41\u7a0b\u63a7\u5236 chan \u7528\u4e8echannel\u901a\u8baf type \u7528\u4e8e\u58f0\u660e\u81ea\u5b9a\u4e49\u7c7b\u578b map \u7528\u4e8e\u58f0\u660emap\u7c7b\u578b\u6570\u636e range \u7528\u4e8e\u8bfb\u53d6slice\u3001map\u3001channel\u6570\u636e","title":"\u7b80\u4ecb"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_3","text":"","title":"\u6570\u636e\u7c7b\u578b\u7684\u5b9a\u4e49"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_4","text":"Go\u8bed\u8a00\u91cc\u9762\u5b9a\u4e49\u53d8\u91cf\u6709\u591a\u79cd\u65b9\u5f0f\u3002 \u4f7f\u7528 var \u5173\u952e\u5b57\u662fGo\u6700\u57fa\u672c\u7684\u5b9a\u4e49\u53d8\u91cf\u65b9\u5f0f\uff0c\u4e0eC\u8bed\u8a00\u4e0d\u540c\u7684\u662fGo\u628a\u53d8\u91cf\u7c7b\u578b\u653e\u5728\u53d8\u91cf\u540d\u540e\u9762\uff1a //\u5b9a\u4e49\u4e00\u4e2a\u540d\u79f0\u4e3a\u201cvariableName\u201d\uff0c\u7c7b\u578b\u4e3a\"type\"\u7684\u53d8\u91cf var variableName type \u5b9a\u4e49\u591a\u4e2a\u53d8\u91cf //\u5b9a\u4e49\u4e09\u4e2a\u7c7b\u578b\u90fd\u662f\u201ctype\u201d\u7684\u53d8\u91cf var vname1, vname2, vname3 type \u5b9a\u4e49\u53d8\u91cf\u5e76\u521d\u59cb\u5316\u503c //\u521d\u59cb\u5316\u201cvariableName\u201d\u7684\u53d8\u91cf\u4e3a\u201cvalue\u201d\u503c\uff0c\u7c7b\u578b\u662f\u201ctype\u201d var variableName type = value \u540c\u65f6\u521d\u59cb\u5316\u591a\u4e2a\u53d8\u91cf /* \u5b9a\u4e49\u4e09\u4e2a\u7c7b\u578b\u90fd\u662f\"type\"\u7684\u53d8\u91cf,\u5e76\u4e14\u5206\u522b\u521d\u59cb\u5316\u4e3a\u76f8\u5e94\u7684\u503c vname1\u4e3av1\uff0cvname2\u4e3av2\uff0cvname3\u4e3av3 */ var vname1, vname2, vname3 type= v1, v2, v3 \u662f\u4e0d\u662f\u89c9\u5f97\u4e0a\u9762\u8fd9\u6837\u7684\u5b9a\u4e49\u6709\u70b9\u7e41\u7410\uff1f\u6709\u4e00\u79cd\u5199\u6cd5\u53ef\u4ee5\u8ba9\u5b83\u53d8\u5f97\u7b80\u5355\u4e00\u70b9\u3002\u53ef\u4ee5\u76f4\u63a5\u5ffd\u7565\u7c7b\u578b\u58f0\u660e\uff0c\u90a3\u4e48\u4e0a\u9762\u7684\u4ee3\u7801\u53d8\u6210\u8fd9\u6837\u4e86\uff1a /* \u5b9a\u4e49\u4e09\u4e2a\u53d8\u91cf\uff0c\u5b83\u4eec\u5206\u522b\u521d\u59cb\u5316\u4e3a\u76f8\u5e94\u7684\u503c vname1\u4e3av1\uff0cvname2\u4e3av2\uff0cvname3\u4e3av3 \u7136\u540eGo\u4f1a\u6839\u636e\u5176\u76f8\u5e94\u503c\u7684\u7c7b\u578b\u6765\u521d\u59cb\u5316\u5b83\u4eec */ var vname1, vname2, vname3 = v1, v2, v3 \u89c9\u5f97\u4e0a\u9762\u7684\u8fd8\u662f\u6709\u4e9b\u7e41\u7410\uff0c\u7ee7\u7eed\u7b80\u5316\uff1a /* \u5b9a\u4e49\u4e09\u4e2a\u53d8\u91cf\uff0c\u5b83\u4eec\u5206\u522b\u521d\u59cb\u5316\u4e3a\u76f8\u5e94\u7684\u503c vname1\u4e3av1\uff0cvname2\u4e3av2\uff0cvname3\u4e3av3 \u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u521d\u59cb\u5316\u7684\u503c\u81ea\u52a8\u63a8\u5bfc\u51fa\u76f8\u5e94\u7684\u7c7b\u578b */ vname1, vname2, vname3 := v1, v2, v3 \u73b0\u5728\u662f\u4e0d\u662f\u770b\u4e0a\u53bb\u975e\u5e38\u7b80\u6d01\u4e86\uff1f := \u8fd9\u4e2a\u7b26\u53f7\u76f4\u63a5\u53d6\u4ee3\u4e86 var \u548c type ,\u8fd9\u79cd\u5f62\u5f0f\u53eb\u505a\u7b80\u77ed\u58f0\u660e\u3002\u4e0d\u8fc7\u5b83\u6709\u4e00\u4e2a\u9650\u5236\uff0c\u90a3\u5c31\u662f\u5b83\u53ea\u80fd\u7528\u5728\u51fd\u6570\u5185\u90e8\uff1b\u5728\u51fd\u6570\u5916\u90e8\u4f7f\u7528\u5219\u4f1a\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7\uff0c\u6240\u4ee5\u4e00\u822c\u7528 var \u65b9\u5f0f\u6765\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u3002 _ \uff08\u4e0b\u5212\u7ebf\uff09\u662f\u4e2a\u7279\u6b8a\u7684\u53d8\u91cf\u540d\uff0c\u4efb\u4f55\u8d4b\u4e88\u5b83\u7684\u503c\u90fd\u4f1a\u88ab\u4e22\u5f03\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5c06\u503c 35 \u8d4b\u4e88 b \uff0c\u5e76\u540c\u65f6\u4e22\u5f03 34 \uff1a _, b := 34, 35 Go\u5bf9\u4e8e\u5df2\u58f0\u660e\u4f46\u672a\u4f7f\u7528\u7684\u53d8\u91cf\u4f1a\u5728\u7f16\u8bd1\u9636\u6bb5\u62a5\u9519\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u5c31\u4f1a\u4ea7\u751f\u4e00\u4e2a\u9519\u8bef\uff1a\u58f0\u660e\u4e86 i \u4f46\u672a\u4f7f\u7528\u3002 package main func main() { var i int }","title":"\u5b9a\u4e49\u53d8\u91cf"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_5","text":"\u6240\u8c13\u5e38\u91cf\uff0c\u4e5f\u5c31\u662f\u5728\u7a0b\u5e8f\u7f16\u8bd1\u9636\u6bb5\u5c31\u786e\u5b9a\u4e0b\u6765\u7684\u503c\uff0c\u800c\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u65e0\u6cd5\u6539\u53d8\u8be5\u503c\u3002\u5728Go\u7a0b\u5e8f\u4e2d\uff0c\u5e38\u91cf\u53ef\u5b9a\u4e49\u4e3a\u6570\u503c\u3001\u5e03\u5c14\u503c\u6216\u5b57\u7b26\u4e32\u7b49\u7c7b\u578b\u3002 \u5b83\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a const constantName = value //\u5982\u679c\u9700\u8981\uff0c\u4e5f\u53ef\u4ee5\u660e\u786e\u6307\u5b9a\u5e38\u91cf\u7684\u7c7b\u578b\uff1a const Pi float32 = 3.1415926 \u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u91cf\u58f0\u660e\u7684\u4f8b\u5b50\uff1a const Pi = 3.1415926 const i = 10000 const MaxThread = 10 const prefix = \"astaxie_\" Go \u5e38\u91cf\u548c\u4e00\u822c\u7a0b\u5e8f\u8bed\u8a00\u4e0d\u540c\u7684\u662f\uff0c\u53ef\u4ee5\u6307\u5b9a\u76f8\u5f53\u591a\u7684\u5c0f\u6570\u4f4d\u6570(\u4f8b\u5982200\u4f4d)\uff0c\u82e5\u6307\u5b9a\u7ed9 float32 \u81ea\u52a8\u7f29\u77ed\u4e3a 32bit \uff0c\u6307\u5b9a\u7ed9 float64 \u81ea\u52a8\u7f29\u77ed\u4e3a 64bit \uff0c\u8be6\u60c5\u53c2\u8003 http://golang.org/ref/spec#Constants (\u9700\u79d1\u5b66\u4e0a\u7f51)","title":"\u5e38\u91cf"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_6","text":"","title":"\u5185\u7f6e\u57fa\u7840\u7c7b\u578b"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#boolean","text":"\u5728Go\u4e2d\uff0c\u5e03\u5c14\u503c\u7684\u7c7b\u578b\u4e3a bool \uff0c\u503c\u662f true \u6216 false \uff0c\u9ed8\u8ba4\u4e3a false \u3002 //\u793a\u4f8b\u4ee3\u7801 var isActive bool // \u5168\u5c40\u53d8\u91cf\u58f0\u660e var enabled, disabled = true, false // \u5ffd\u7565\u7c7b\u578b\u7684\u58f0\u660e func test() { var available bool // \u4e00\u822c\u58f0\u660e valid := false // \u7b80\u77ed\u58f0\u660e available = true // \u8d4b\u503c\u64cd\u4f5c }","title":"Boolean"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_7","text":"\u6574\u6570\u7c7b\u578b\u6709\u65e0\u7b26\u53f7\u548c\u5e26\u7b26\u53f7\u4e24\u79cd\u3002Go\u540c\u65f6\u652f\u6301 int \u548c uint \uff0c\u8fd9\u4e24\u79cd\u7c7b\u578b\u7684\u957f\u5ea6\u76f8\u540c\uff0c\u4f46\u5177\u4f53\u957f\u5ea6\u53d6\u51b3\u4e8e\u4e0d\u540c\u7f16\u8bd1\u5668\u7684\u5b9e\u73b0\u3002Go\u91cc\u9762\u4e5f\u6709\u76f4\u63a5\u5b9a\u4e49\u597d\u4f4d\u6570\u7684\u7c7b\u578b\uff1a rune , int8 , int16 , int32 , int64 \u548c byte , uint8 , uint16 , uint32 , uint64 \u3002\u5176\u4e2d rune \u662f int32 \u7684\u522b\u79f0\uff0c byte \u662f uint8 \u7684\u522b\u79f0\u3002 \u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u8fd9\u4e9b\u7c7b\u578b\u7684\u53d8\u91cf\u4e4b\u95f4\u4e0d\u5141\u8bb8\u4e92\u76f8\u8d4b\u503c\u6216\u64cd\u4f5c\uff0c\u4e0d\u7136\u4f1a\u5728\u7f16\u8bd1\u65f6\u5f15\u8d77\u7f16\u8bd1\u5668\u62a5\u9519\u3002 \u5982\u4e0b\u7684\u4ee3\u7801\u4f1a\u4ea7\u751f\u9519\u8bef\uff1ainvalid operation: a + b (mismatched types int8 and int32) var a int8 var b int32 c:=a + b \u53e6\u5916\uff0c\u5c3d\u7ba1int\u7684\u957f\u5ea6\u662f32 bit, \u4f46int \u4e0e int32\u5e76\u4e0d\u53ef\u4ee5\u4e92\u7528\u3002 \u6d6e\u70b9\u6570\u7684\u7c7b\u578b\u6709 float32 \u548c float64 \u4e24\u79cd\uff08\u6ca1\u6709 float \u7c7b\u578b\uff09\uff0c\u9ed8\u8ba4\u662f float64 \u3002 Go\u8fd8\u652f\u6301\u590d\u6570\u3002\u5b83\u7684\u9ed8\u8ba4\u7c7b\u578b\u662f complex128 \uff0864\u4f4d\u5b9e\u6570+64\u4f4d\u865a\u6570\uff09\u3002\u5982\u679c\u9700\u8981\u5c0f\u4e00\u4e9b\u7684\uff0c\u4e5f\u6709 complex64 (32\u4f4d\u5b9e\u6570+32\u4f4d\u865a\u6570)\u3002\u590d\u6570\u7684\u5f62\u5f0f\u4e3a RE + IMi \uff0c\u5176\u4e2d RE \u662f\u5b9e\u6570\u90e8\u5206\uff0c IM \u662f\u865a\u6570\u90e8\u5206\uff0c\u800c\u6700\u540e\u7684 i \u662f\u865a\u6570\u5355\u4f4d\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528\u590d\u6570\u7684\u4f8b\u5b50\uff1a var c complex64 = 5+5i //output: (5+5i) fmt.Printf(\"Value is: %v\", c)","title":"\u6570\u503c\u7c7b\u578b"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_8","text":"Go\u4e2d\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u91c7\u7528 UTF-8 \u5b57\u7b26\u96c6\u7f16\u7801\u3002\u5b57\u7b26\u4e32\u662f\u7528\u4e00\u5bf9\u53cc\u5f15\u53f7\uff08 \"\" \uff09\u6216\u53cd\u5f15\u53f7\uff08 \uff09\u62ec\u8d77\u6765\u5b9a\u4e49\uff0c\u5b83\u7684\u7c7b\u578b\u662f string \u3002 //\u793a\u4f8b\u4ee3\u7801 var frenchHello string // \u58f0\u660e\u53d8\u91cf\u4e3a\u5b57\u7b26\u4e32\u7684\u4e00\u822c\u65b9\u6cd5 var emptyString string = \"\" // \u58f0\u660e\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u53d8\u91cf\uff0c\u521d\u59cb\u5316\u4e3a\u7a7a\u5b57\u7b26\u4e32 func test() { no, yes, maybe := \"no\", \"yes\", \"maybe\" // \u7b80\u77ed\u58f0\u660e\uff0c\u540c\u65f6\u58f0\u660e\u591a\u4e2a\u53d8\u91cf japaneseHello := \"Konichiwa\" // \u540c\u4e0a frenchHello = \"Bonjour\" // \u5e38\u89c4\u8d4b\u503c } \u5728Go\u4e2d\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u7f16\u8bd1\u65f6\u4f1a\u62a5\u9519\uff1acannot assign to s[0] var s string = \"hello\" s[0] = 'c' \u4f46\u5982\u679c\u771f\u7684\u60f3\u8981\u4fee\u6539\u600e\u4e48\u529e\u5462\uff1f\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u5b9e\u73b0\uff1a s := \"hello\" c := []byte(s) // \u5c06\u5b57\u7b26\u4e32 s \u8f6c\u6362\u4e3a []byte \u7c7b\u578b c[0] = 'c' s2 := string(c) // \u518d\u8f6c\u6362\u56de string \u7c7b\u578b fmt.Printf(\"%s\\n\", s2) Go\u4e2d\u53ef\u4ee5\u4f7f\u7528 + \u64cd\u4f5c\u7b26\u6765\u8fde\u63a5\u4e24\u4e2a\u5b57\u7b26\u4e32\uff1a s := \"hello,\" m := \" world\" a := s + m fmt.Printf(\"%s\\n\", a) \u4fee\u6539\u5b57\u7b26\u4e32\u4e5f\u53ef\u5199\u4e3a\uff1a s := \"hello\" s = \"c\" + s[1:] // \u5b57\u7b26\u4e32\u867d\u4e0d\u80fd\u66f4\u6539\uff0c\u4f46\u53ef\u8fdb\u884c\u5207\u7247\u64cd\u4f5c fmt.Printf(\"%s\\n\", s) \u5982\u679c\u8981\u58f0\u660e\u4e00\u4e2a\u591a\u884c\u7684\u5b57\u7b26\u4e32\u600e\u4e48\u529e\uff1f\u53ef\u4ee5\u901a\u8fc7```\u6765\u58f0\u660e\uff1a m := `hello world` ` ` \u62ec\u8d77\u7684\u5b57\u7b26\u4e32\u4e3a Raw`\u5b57\u7b26\u4e32\uff0c\u5373\u5b57\u7b26\u4e32\u5728\u4ee3\u7801\u4e2d\u7684\u5f62\u5f0f\u5c31\u662f\u6253\u5370\u65f6\u7684\u5f62\u5f0f\uff0c\u5b83\u6ca1\u6709\u5b57\u7b26\u8f6c\u4e49\uff0c\u6362\u884c\u4e5f\u5c06\u539f\u6837\u8f93\u51fa\u3002\u4f8b\u5982\u672c\u4f8b\u4e2d\u4f1a\u8f93\u51fa\uff1a hello world","title":"\u5b57\u7b26\u4e32"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_9","text":"Go\u5185\u7f6e\u6709\u4e00\u4e2a error \u7c7b\u578b\uff0c\u4e13\u95e8\u7528\u6765\u5904\u7406\u9519\u8bef\u4fe1\u606f\uff0cGo\u7684 package \u91cc\u9762\u8fd8\u4e13\u95e8\u6709\u4e00\u4e2a\u5305 errors \u6765\u5904\u7406\u9519\u8bef\uff1a err := errors.New(\"emit macho dwarf: elf header corrupted\") if err != nil { fmt.Print(err) }","title":"\u9519\u8bef\u7c7b\u578b"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_10","text":"\u5728Go\u8bed\u8a00\u4e2d\uff0c\u540c\u65f6\u58f0\u660e\u591a\u4e2a\u5e38\u91cf\u3001\u53d8\u91cf\uff0c\u6216\u8005\u5bfc\u5165\u591a\u4e2a\u5305\u65f6\uff0c\u53ef\u91c7\u7528\u5206\u7ec4\u7684\u65b9\u5f0f\u8fdb\u884c\u58f0\u660e\u3002 \u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff1a import \"fmt\" import \"os\" const i = 100 const pi = 3.1415 const prefix = \"Go_\" var i int var pi float32 var prefix string \u53ef\u4ee5\u5206\u7ec4\u5199\u6210\u5982\u4e0b\u5f62\u5f0f\uff1a import( \"fmt\" \"os\" ) const( i = 100 pi = 3.1415 prefix = \"Go_\" ) var( i int pi float32 prefix string )","title":"\u5206\u7ec4\u58f0\u660e"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#iota","text":"Go\u91cc\u9762\u6709\u4e00\u4e2a\u5173\u952e\u5b57 iota \uff0c\u8fd9\u4e2a\u5173\u952e\u5b57\u7528\u6765\u58f0\u660e enum \u7684\u65f6\u5019\u91c7\u7528\uff0c\u5b83\u9ed8\u8ba4\u5f00\u59cb\u503c\u662f0\uff0cconst\u4e2d\u6bcf\u589e\u52a0\u4e00\u884c\u52a01\uff1a package main import ( \"fmt\" ) const ( x = iota // x == 0 y = iota // y == 1 z = iota // z == 2 w // \u5e38\u91cf\u58f0\u660e\u7701\u7565\u503c\u65f6\uff0c\u9ed8\u8ba4\u548c\u4e4b\u524d\u4e00\u4e2a\u503c\u7684\u5b57\u9762\u76f8\u540c\u3002\u8fd9\u91cc\u9690\u5f0f\u5730\u8bf4w = iota\uff0c\u56e0\u6b64w == 3\u3002\u5176\u5b9e\u4e0a\u9762y\u548cz\u53ef\u540c\u6837\u4e0d\u7528\"= iota\" ) const v = iota // \u6bcf\u9047\u5230\u4e00\u4e2aconst\u5173\u952e\u5b57\uff0ciota\u5c31\u4f1a\u91cd\u7f6e\uff0c\u6b64\u65f6v == 0 const ( h, i, j = iota, iota, iota //h=0,i=0,j=0 iota\u5728\u540c\u4e00\u884c\u503c\u76f8\u540c ) const ( a = iota //a=0 b = \"B\" c = iota //c=2 d, e, f = iota, iota, iota //d=3,e=3,f=3 g = iota //g = 4 ) func main() { fmt.Println(a, b, c, d, e, f, g, h, i, j, x, y, z, w, v) } \u9664\u975e\u88ab\u663e\u5f0f\u8bbe\u7f6e\u4e3a\u5176\u5b83\u503c\u6216 iota \uff0c\u6bcf\u4e2a const \u5206\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5e38\u91cf\u88ab\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u5b83\u76840\u503c\uff0c\u7b2c\u4e8c\u53ca\u540e\u7eed\u7684\u5e38\u91cf\u88ab\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u5b83\u524d\u9762\u90a3\u4e2a\u5e38\u91cf\u7684\u503c\uff0c\u5982\u679c\u524d\u9762\u90a3\u4e2a\u5e38\u91cf\u7684\u503c\u662f iota \uff0c\u5219\u5b83\u4e5f\u88ab\u8bbe\u7f6e\u4e3a iota \u3002","title":"iota\u679a\u4e3e"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#go_1","text":"Go\u4e4b\u6240\u4ee5\u4f1a\u90a3\u4e48\u7b80\u6d01\uff0c\u662f\u56e0\u4e3a\u5b83\u6709\u4e00\u4e9b\u9ed8\u8ba4\u7684\u884c\u4e3a\uff1a \u5927\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u53d8\u91cf\u662f\u53ef\u5bfc\u51fa\u7684\uff0c\u4e5f\u5c31\u662f\u5176\u5b83\u5305\u53ef\u4ee5\u8bfb\u53d6\u7684\uff0c\u662f\u516c\u6709\u53d8\u91cf\uff1b\u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u5c31\u662f\u4e0d\u53ef\u5bfc\u51fa\u7684\uff0c\u662f\u79c1\u6709\u53d8\u91cf\u3002 \u5927\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u51fd\u6570\u4e5f\u662f\u4e00\u6837\uff0c\u76f8\u5f53\u4e8e class \u4e2d\u7684\u5e26 public \u5173\u952e\u8bcd\u7684\u516c\u6709\u51fd\u6570\uff1b\u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u5c31\u662f\u6709 private \u5173\u952e\u8bcd\u7684\u79c1\u6709\u51fd\u6570\u3002","title":"Go\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u4e00\u4e9b\u89c4\u5219"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#arrayslicemap","text":"","title":"array\u3001slice\u3001map"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#array","text":"array \u5c31\u662f\u6570\u7ec4\uff0c\u5b83\u7684\u5b9a\u4e49\u65b9\u5f0f\u5982\u4e0b\uff1a var arr [n]type \u5728 [n]type \u4e2d\uff0c n \u8868\u793a\u6570\u7ec4\u7684\u957f\u5ea6\uff0c type \u8868\u793a\u5b58\u50a8\u5143\u7d20\u7684\u7c7b\u578b\u3002\u5bf9\u6570\u7ec4\u7684\u64cd\u4f5c\u548c\u5176\u5b83\u8bed\u8a00\u7c7b\u4f3c\uff0c\u90fd\u662f\u901a\u8fc7 [] \u6765\u8fdb\u884c\u8bfb\u53d6\u6216\u8d4b\u503c\uff1a var arr [10]int // \u58f0\u660e\u4e86\u4e00\u4e2aint\u7c7b\u578b\u7684\u6570\u7ec4 arr[0] = 42 // \u6570\u7ec4\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u7684 arr[1] = 13 // \u8d4b\u503c\u64cd\u4f5c fmt.Printf(\"The first element is %d\\n\", arr[0]) // \u83b7\u53d6\u6570\u636e\uff0c\u8fd4\u56de42 fmt.Printf(\"The last element is %d\\n\", arr[9]) //\u8fd4\u56de\u672a\u8d4b\u503c\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u9ed8\u8ba4\u8fd4\u56de0 \u7531\u4e8e\u957f\u5ea6\u4e5f\u662f\u6570\u7ec4\u7c7b\u578b\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64 [3]int \u4e0e [4]int \u662f\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u6570\u7ec4\u4e5f\u5c31\u4e0d\u80fd\u6539\u53d8\u957f\u5ea6\u3002\u6570\u7ec4\u4e4b\u95f4\u7684\u8d4b\u503c\u662f\u503c\u7684\u8d4b\u503c\uff0c\u5373\u5f53\u628a\u4e00\u4e2a\u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f20\u5165\u7684\u5176\u5b9e\u662f\u8be5\u6570\u7ec4\u7684\u526f\u672c\uff0c\u800c\u4e0d\u662f\u5b83\u7684\u6307\u9488\u3002\u5982\u679c\u8981\u4f7f\u7528\u6307\u9488\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u7528\u5230\u540e\u9762\u4ecb\u7ecd\u7684 slice \u7c7b\u578b\u4e86\u3002 \u6570\u7ec4\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u79cd := \u6765\u58f0\u660e a := [3]int{1, 2, 3} // \u58f0\u660e\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a3\u7684int\u6570\u7ec4 b := [10]int{1, 2, 3} // \u58f0\u660e\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a10\u7684int\u6570\u7ec4\uff0c\u5176\u4e2d\u524d\u4e09\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a1\u30012\u30013\uff0c\u5176\u5b83\u9ed8\u8ba4\u4e3a0 c := [...]int{4, 5, 6} // \u53ef\u4ee5\u7701\u7565\u957f\u5ea6\u800c\u91c7\u7528`...`\u7684\u65b9\u5f0f\uff0cGo\u4f1a\u81ea\u52a8\u6839\u636e\u5143\u7d20\u4e2a\u6570\u6765\u8ba1\u7b97\u957f\u5ea6 Go\u652f\u6301\u5d4c\u5957\u6570\u7ec4\uff0c\u5373\u591a\u7ef4\u6570\u7ec4\u3002\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u5c31\u58f0\u660e\u4e86\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff1a // \u58f0\u660e\u4e86\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u4ee5\u4e24\u4e2a\u6570\u7ec4\u4f5c\u4e3a\u5143\u7d20\uff0c\u5176\u4e2d\u6bcf\u4e2a\u6570\u7ec4\u4e2d\u53c8\u67094\u4e2aint\u7c7b\u578b\u7684\u5143\u7d20 doubleArray := [2][4]int{[4]int{1, 2, 3, 4}, [4]int{5, 6, 7, 8}} // \u4e0a\u9762\u7684\u58f0\u660e\u53ef\u4ee5\u7b80\u5316\uff0c\u76f4\u63a5\u5ffd\u7565\u5185\u90e8\u7684\u7c7b\u578b easyArray := [2][4]int{{1, 2, 3, 4}, {5, 6, 7, 8}}","title":"array"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#slice","text":"\u5728\u5f88\u591a\u5e94\u7528\u573a\u666f\u4e2d\uff0c\u6570\u7ec4\u5e76\u4e0d\u80fd\u6ee1\u8db3\u9700\u6c42\u3002\u5728\u521d\u59cb\u5b9a\u4e49\u6570\u7ec4\u65f6\uff0c\u5e76\u4e0d\u77e5\u9053\u9700\u8981\u591a\u5927\u7684\u6570\u7ec4\uff0c\u56e0\u6b64\u5c31\u9700\u8981\u201c\u52a8\u6001\u6570\u7ec4\u201d\u3002\u5728Go\u91cc\u9762\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u53eb slice slice \u5e76\u4e0d\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u52a8\u6001\u6570\u7ec4\uff0c\u800c\u662f\u4e00\u4e2a\u5f15\u7528\u7c7b\u578b\u3002 slice \u603b\u662f\u6307\u5411\u4e00\u4e2a\u5e95\u5c42 array \uff0c slice \u7684\u58f0\u660e\u4e5f\u53ef\u4ee5\u50cf array \u4e00\u6837\uff0c\u53ea\u662f\u4e0d\u9700\u8981\u957f\u5ea6\u3002 // \u548c\u58f0\u660earray\u4e00\u6837\uff0c\u53ea\u662f\u5c11\u4e86\u957f\u5ea6 var fslice []int \u63a5\u4e0b\u6765\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a slice \uff0c\u5e76\u521d\u59cb\u5316\u6570\u636e\uff0c\u5982\u4e0b\u6240\u793a\uff1a slice := []byte {'a', 'b', 'c', 'd'} slice \u53ef\u4ee5\u4ece\u4e00\u4e2a\u6570\u7ec4\u6216\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684 slice \u4e2d\u518d\u6b21\u58f0\u660e\u3002 slice \u901a\u8fc7 array[i:j] \u6765\u83b7\u53d6\uff0c\u5176\u4e2d i \u662f\u6570\u7ec4\u7684\u5f00\u59cb\u4f4d\u7f6e\uff0c j \u662f\u7ed3\u675f\u4f4d\u7f6e\uff0c\u4f46\u4e0d\u5305\u542b array[j] \uff0c\u5b83\u7684\u957f\u5ea6\u662f j-i \u3002 // \u58f0\u660e\u4e00\u4e2a\u542b\u670910\u4e2a\u5143\u7d20\u5143\u7d20\u7c7b\u578b\u4e3abyte\u7684\u6570\u7ec4 var ar = [10]byte {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'} // \u58f0\u660e\u4e24\u4e2a\u542b\u6709byte\u7684slice var a, b []byte // a\u6307\u5411\u6570\u7ec4\u7684\u7b2c3\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u5e76\u5230\u7b2c\u4e94\u4e2a\u5143\u7d20\u7ed3\u675f\uff0c a = ar[2:5] //\u73b0\u5728a\u542b\u6709\u7684\u5143\u7d20: ar[2]\u3001ar[3]\u548car[4] // b\u662f\u6570\u7ec4ar\u7684\u53e6\u4e00\u4e2aslice b = ar[3:5] // b\u7684\u5143\u7d20\u662f\uff1aar[3]\u548car[4] \u6ce8\u610f slice \u548c\u6570\u7ec4\u5728\u58f0\u660e\u65f6\u7684\u533a\u522b\uff1a\u58f0\u660e\u6570\u7ec4\u65f6\uff0c\u65b9\u62ec\u53f7\u5185\u5199\u660e\u4e86\u6570\u7ec4\u7684\u957f\u5ea6\u6216\u4f7f\u7528 ... \u81ea\u52a8\u8ba1\u7b97\u957f\u5ea6\uff0c\u800c\u58f0\u660e slice \u65f6\uff0c\u65b9\u62ec\u53f7\u5185\u6ca1\u6709\u4efb\u4f55\u5b57\u7b26\u3002","title":"slice"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#slice_1","text":"slice \u7684\u9ed8\u8ba4\u5f00\u59cb\u4f4d\u7f6e\u662f0\uff0c ar[:n] \u7b49\u4ef7\u4e8e ar[0:n] slice \u7684\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u9ed8\u8ba4\u662f\u6570\u7ec4\u7684\u957f\u5ea6\uff0c ar[n:] \u7b49\u4ef7\u4e8e ar[n:len(ar)] \u5982\u679c\u4ece\u4e00\u4e2a\u6570\u7ec4\u91cc\u9762\u76f4\u63a5\u83b7\u53d6 slice \uff0c\u53ef\u4ee5\u8fd9\u6837 ar[:] \uff0c\u56e0\u4e3a\u9ed8\u8ba4\u7b2c\u4e00\u4e2a\u5e8f\u5217\u662f0\uff0c\u7b2c\u4e8c\u4e2a\u662f\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5373\u7b49\u4ef7\u4e8e ar[0:len(ar)] \u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86\u66f4\u591a\u5173\u4e8e slice \u7684\u64cd\u4f5c\uff1a // \u58f0\u660e\u4e00\u4e2a\u6570\u7ec4 var array = [10]byte{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'} // \u58f0\u660e\u4e24\u4e2aslice var aSlice, bSlice []byte // \u6f14\u793a\u4e00\u4e9b\u7b80\u4fbf\u64cd\u4f5c aSlice = array[:3] // \u7b49\u4ef7\u4e8eaSlice = array[0:3] aSlice\u5305\u542b\u5143\u7d20: a,b,c aSlice = array[5:] // \u7b49\u4ef7\u4e8eaSlice = array[5:10] aSlice\u5305\u542b\u5143\u7d20: f,g,h,i,j aSlice = array[:] // \u7b49\u4ef7\u4e8eaSlice = array[0:10] \u8fd9\u6837aSlice\u5305\u542b\u4e86\u5168\u90e8\u7684\u5143\u7d20 // \u4eceslice\u4e2d\u83b7\u53d6slice aSlice = array[3:7] // aSlice\u5305\u542b\u5143\u7d20: d,e,f,g\uff0clen=4\uff0ccap=7 bSlice = aSlice[1:3] // bSlice \u5305\u542baSlice[1], aSlice[2] \u4e5f\u5c31\u662f\u542b\u6709: e,f bSlice = aSlice[:3] // bSlice \u5305\u542b aSlice[0], aSlice[1], aSlice[2] \u4e5f\u5c31\u662f\u542b\u6709: d,e,f bSlice = aSlice[0:5] // \u5bf9slice\u7684slice\u53ef\u4ee5\u5728cap\u8303\u56f4\u5185\u6269\u5c55\uff0c\u6b64\u65f6bSlice\u5305\u542b\uff1ad,e,f,g,h bSlice = aSlice[:] // bSlice\u5305\u542b\u6240\u6709aSlice\u7684\u5143\u7d20: d,e,f,g slice \u662f\u5f15\u7528\u7c7b\u578b\uff0c\u6240\u4ee5\u5f53\u5f15\u7528\u6539\u53d8\u5176\u4e2d\u5143\u7d20\u7684\u503c\u65f6\uff0c\u5176\u5b83\u7684\u6240\u6709\u5f15\u7528\u90fd\u4f1a\u6539\u53d8\u8be5\u503c\uff0c\u4f8b\u5982\u4e0a\u9762\u7684 aSlice \u548c bSlice \uff0c\u5982\u679c\u4fee\u6539\u4e86 aSlice \u4e2d\u5143\u7d20\u7684\u503c\uff0c\u90a3\u4e48 bSlice \u76f8\u5bf9\u5e94\u7684\u503c\u4e5f\u4f1a\u6539\u53d8\u3002 \u4ece\u6982\u5ff5\u4e0a\u9762\u6765\u8bf4 slice \u50cf\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5305\u542b\u4e86\u4e09\u4e2a\u5143\u7d20\uff1a \u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u6570\u7ec4\u4e2d slice \u6307\u5b9a\u7684\u5f00\u59cb\u4f4d\u7f6e \u957f\u5ea6\uff0c\u5373 slice \u7684\u957f\u5ea6 \u6700\u5927\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f slice \u5f00\u59cb\u4f4d\u7f6e\u5230\u6570\u7ec4\u7684\u6700\u540e\u4f4d\u7f6e\u7684\u957f\u5ea6 Array_a := [10]byte{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'} Slice_a := Array_a[2:5]","title":"slice\u6709\u4e00\u4e9b\u7b80\u4fbf\u7684\u64cd\u4f5c"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#slice_2","text":"len \u83b7\u53d6 slice \u7684\u957f\u5ea6 cap \u83b7\u53d6 slice \u7684\u6700\u5927\u5bb9\u91cf append \u5411 slice \u91cc\u9762\u8ffd\u52a0\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u548c slice \u4e00\u6837\u7c7b\u578b\u7684 slice copy \u51fd\u6570 copy \u4ece\u6e90 slice \u7684 src \u4e2d\u590d\u5236\u5143\u7d20\u5230\u76ee\u6807 dst \uff0c\u5e76\u4e14\u8fd4\u56de\u590d\u5236\u7684\u5143\u7d20\u7684\u4e2a\u6570 \u6ce8\uff1a append \u51fd\u6570\u4f1a\u6539\u53d8 slice \u6240\u5f15\u7528\u7684\u6570\u7ec4\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u5f71\u54cd\u5230\u5f15\u7528\u540c\u4e00\u6570\u7ec4\u7684\u5176\u5b83 slice \u3002 \u4f46\u5f53 slice \u4e2d\u6ca1\u6709\u5269\u4f59\u7a7a\u95f4\uff08\u5373 (cap-len) == 0 \uff09\u65f6\uff0c\u6b64\u65f6\u5c06\u52a8\u6001\u5206\u914d\u65b0\u7684\u6570\u7ec4\u7a7a\u95f4\u3002\u8fd4\u56de\u7684 slice \u6570\u7ec4\u6307\u9488\u5c06\u6307\u5411\u8fd9\u4e2a\u7a7a\u95f4\uff0c\u800c\u539f\u6570\u7ec4\u7684\u5185\u5bb9\u5c06\u4fdd\u6301\u4e0d\u53d8\uff1b\u5176\u5b83\u5f15\u7528\u6b64\u6570\u7ec4\u7684 slice \u5219\u4e0d\u53d7\u5f71\u54cd\u3002 \u4eceGo1.2\u5f00\u59cb slice \u652f\u6301\u4e86\u4e09\u4e2a\u53c2\u6570\u7684 slice \uff0c\u4e4b\u524d\u4e00\u76f4\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\u5728 slice \u6216\u8005 array \u57fa\u7840\u4e0a\u6765\u83b7\u53d6\u4e00\u4e2a slice var array [10]int slice := array[2:4] \u8fd9\u4e2a\u4f8b\u5b50\u91cc\u9762slice\u7684\u5bb9\u91cf\u662f8\uff0c\u65b0\u7248\u672c\u91cc\u9762\u53ef\u4ee5\u6307\u5b9a\u8fd9\u4e2a\u5bb9\u91cf slice = array[2:4:7] \u4e0a\u9762\u8fd9\u4e2a\u7684\u5bb9\u91cf\u5c31\u662f 7-2 \uff0c\u53735\u3002\u8fd9\u6837\u8fd9\u4e2a\u4ea7\u751f\u7684\u65b0\u7684 slice \u5c31\u6ca1\u529e\u6cd5\u8bbf\u95ee\u6700\u540e\u7684\u4e09\u4e2a\u5143\u7d20\u3002 \u5982\u679c slice \u662f\u8fd9\u6837\u7684\u5f62\u5f0f array[:i:j] \uff0c\u5373\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u7a7a\uff0c\u9ed8\u8ba4\u503c\u5c31\u662f0\u3002","title":"slice\u6709\u51e0\u4e2a\u6709\u7528\u7684\u5185\u7f6e\u51fd\u6570"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#map","text":"map`\u4e5f\u5c31\u662fPython\u4e2d\u5b57\u5178\u7684\u6982\u5ff5\uff0c\u5b83\u7684\u683c\u5f0f\u4e3a`map[keyType]valueType \u770b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c map \u7684\u8bfb\u53d6\u548c\u8bbe\u7f6e\u4e5f\u7c7b\u4f3c slice \u4e00\u6837\uff0c\u901a\u8fc7 key \u6765\u64cd\u4f5c\uff0c\u53ea\u662f slice \u7684 index \u53ea\u80fd\u662f\uff40int\uff40\u7c7b\u578b\uff0c\u800c map \u591a\u4e86\u5f88\u591a\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f int \uff0c\u53ef\u4ee5\u662f string \u53ca\u6240\u6709\u5b8c\u5168\u5b9a\u4e49\u4e86 == \u4e0e != \u64cd\u4f5c\u7684\u7c7b\u578b\u3002 // \u58f0\u660e\u4e00\u4e2akey\u662f\u5b57\u7b26\u4e32\uff0c\u503c\u4e3aint\u7684\u5b57\u5178,\u8fd9\u79cd\u65b9\u5f0f\u7684\u58f0\u660e\u9700\u8981\u5728\u4f7f\u7528\u4e4b\u524d\u4f7f\u7528make\u521d\u59cb\u5316 var numbers map[string]int // \u53e6\u4e00\u79cdmap\u7684\u58f0\u660e\u65b9\u5f0f numbers = make(map[string]int) numbers[\"one\"] = 1 //\u8d4b\u503c numbers[\"ten\"] = 10 //\u8d4b\u503c numbers[\"three\"] = 3 fmt.Println(\"\u7b2c\u4e09\u4e2a\u6570\u5b57\u662f: \", numbers[\"three\"]) // \u8bfb\u53d6\u6570\u636e // \u6253\u5370\u51fa\u6765\u5982:\u7b2c\u4e09\u4e2a\u6570\u5b57\u662f: 3 \u8fd9\u4e2a map \u5c31\u50cf\u5e73\u5e38\u770b\u5230\u7684\u8868\u683c\u4e00\u6837\uff0c\u5de6\u8fb9\u5217\u662f key \uff0c\u53f3\u8fb9\u5217\u662f\u503c \u4f7f\u7528 map \u8fc7\u7a0b\u4e2d\u9700\u8981\u6ce8\u610f\u7684\u51e0\u70b9\uff1a map \u662f\u65e0\u5e8f\u7684\uff0c\u6bcf\u6b21\u6253\u5370\u51fa\u6765\u7684 map \u90fd\u4f1a\u4e0d\u4e00\u6837\uff0c\u5b83\u4e0d\u80fd\u901a\u8fc7 index \u83b7\u53d6\uff0c\u800c\u5fc5\u987b\u901a\u8fc7 key \u83b7\u53d6 map \u7684\u957f\u5ea6\u662f\u4e0d\u56fa\u5b9a\u7684\uff0c\u4e5f\u5c31\u662f\u548c slice \u4e00\u6837\uff0c\u4e5f\u662f\u4e00\u79cd\u5f15\u7528\u7c7b\u578b \u5185\u7f6e\u7684 len \u51fd\u6570\u540c\u6837\u9002\u7528\u4e8e map \uff0c\u8fd4\u56de map \u62e5\u6709\u7684 key \u7684\u6570\u91cf map \u7684\u503c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4fee\u6539\uff0c\u901a\u8fc7 numbers[\"one\"]=11 \u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u628akey\u4e3a one \u7684\u5b57\u5178\u503c\u6539\u4e3a 11 map \u548c\u5176\u4ed6\u57fa\u672c\u578b\u522b\u4e0d\u540c\uff0c\u5b83\u4e0d\u662fthread-safe\uff0c\u5728\u591a\u4e2ago-routine\u5b58\u53d6\u65f6\uff0c\u5fc5\u987b\u4f7f\u7528mutex lock\u673a\u5236 map \u7684\u521d\u59cb\u5316\u53ef\u4ee5\u901a\u8fc7 key:val \u7684\u65b9\u5f0f\u521d\u59cb\u5316\u503c\uff0c\u540c\u65f6 map \u5185\u7f6e\u6709\u5224\u65ad\u662f\u5426\u5b58\u5728 key \u7684\u65b9\u5f0f \u901a\u8fc7 delete \u5220\u9664 map \u7684\u5143\u7d20\uff1a // \u521d\u59cb\u5316\u4e00\u4e2a\u5b57\u5178 rating := map[string]float32{\"C\":5, \"Go\":4.5, \"Python\":4.5, \"C++\":2 } // map\u6709\u4e24\u4e2a\u8fd4\u56de\u503c\uff0c\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\uff0c\u5982\u679c\u4e0d\u5b58\u5728key\uff0c\u90a3\u4e48ok\u4e3afalse\uff0c\u5982\u679c\u5b58\u5728ok\u4e3atrue csharpRating, ok := rating[\"C#\"] if ok { fmt.Println(\"C# is in the map and its rating is \", csharpRating) } else { fmt.Println(\"We have no rating associated with C# in the map\") } delete(rating, \"C\") // \u5220\u9664key\u4e3aC\u7684\u5143\u7d20 \u4e0a\u9762\u8bf4\u8fc7\u4e86\uff0c map \u4e5f\u662f\u4e00\u79cd\u5f15\u7528\u7c7b\u578b\uff0c\u5982\u679c\u4e24\u4e2a map \u540c\u65f6\u6307\u5411\u4e00\u4e2a\u5e95\u5c42\uff0c\u90a3\u4e48\u4e00\u4e2a\u6539\u53d8\uff0c\u53e6\u4e00\u4e2a\u4e5f\u76f8\u5e94\u7684\u6539\u53d8\uff1a m := make(map[string]string) m[\"Hello\"] = \"Bonjour\" m1 := m m1[\"Hello\"] = \"Salut\" // \u73b0\u5728m[\"hello\"]\u7684\u503c\u5df2\u7ecf\u662fSalut\u4e86","title":"map"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#makenew","text":"make \u7528\u4e8e\u5185\u5efa\u7c7b\u578b\uff08 map \u3001 slice \u548c channel \uff09\u7684\u5185\u5b58\u5206\u914d\u3002 new \u7528\u4e8e\u5404\u79cd\u7c7b\u578b\u7684\u5185\u5b58\u5206\u914d\u3002 \u5185\u5efa\u51fd\u6570 new \u672c\u8d28\u4e0a\u8bf4\u8ddf\u5176\u5b83\u8bed\u8a00\u4e2d\u7684\u540c\u540d\u51fd\u6570\u529f\u80fd\u4e00\u6837\uff1a new(T) \u5206\u914d\u4e86\u96f6\u503c\u586b\u5145\u7684 T \u7c7b\u578b\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u4e14\u8fd4\u56de\u5176\u5730\u5740\uff0c\u5373\u4e00\u4e2a *T \u7c7b\u578b\u7684\u503c\u3002\u7528Go\u7684\u672f\u8bed\u8bf4\uff0c\u5b83\u8fd4\u56de\u4e86\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u65b0\u5206\u914d\u7684\u7c7b\u578b T \u7684\u96f6\u503c\u3002\u6709\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff1a new \u8fd4\u56de\u6307\u9488\u3002 \u5185\u5efa\u51fd\u6570 make(T, args) \u4e0e new(T) \u6709\u7740\u4e0d\u540c\u7684\u529f\u80fd\uff0cmake\u53ea\u80fd\u521b\u5efa slice \u3001 map \u548c channel \uff0c\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a\u6709\u521d\u59cb\u503c(\u975e\u96f6)\u7684 T \u7c7b\u578b\uff0c\u800c\u4e0d\u662f *T \u3002\u672c\u8d28\u6765\u8bb2\uff0c\u5bfc\u81f4\u8fd9\u4e09\u4e2a\u7c7b\u578b\u6709\u6240\u4e0d\u540c\u7684\u539f\u56e0\u662f\u6307\u5411\u6570\u636e\u7ed3\u6784\u7684\u5f15\u7528\u5728\u4f7f\u7528\u524d\u5fc5\u987b\u88ab\u521d\u59cb\u5316\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a slice \uff0c\u662f\u4e00\u4e2a\u5305\u542b\u6307\u5411\u6570\u636e\uff08\u5185\u90e8 array \uff09\u7684\u6307\u9488\u3001\u957f\u5ea6\u548c\u5bb9\u91cf\u7684\u4e09\u9879\u63cf\u8ff0\u7b26\uff1b\u5728\u8fd9\u4e9b\u9879\u76ee\u88ab\u521d\u59cb\u5316\u4e4b\u524d\uff0c slice \u4e3a nil \u3002\u5bf9\u4e8e slice \u3001 map \u548c channel \u6765\u8bf4\uff0c make \u521d\u59cb\u5316\u4e86\u5185\u90e8\u7684\u6570\u636e\u7ed3\u6784\uff0c\u586b\u5145\u9002\u5f53\u7684\u503c\u3002 make \u8fd4\u56de\u521d\u59cb\u5316\u540e\u7684\uff08\u975e\u96f6\uff09\u503c\u3002","title":"make\u3001new\u64cd\u4f5c"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_11","text":"\u5173\u4e8e\u201c\u96f6\u503c\u201d\uff0c\u6240\u6307\u5e76\u975e\u662f\u7a7a\u503c\uff0c\u800c\u662f\u4e00\u79cd\u201c\u53d8\u91cf\u672a\u586b\u5145\u524d\u201d\u7684\u9ed8\u8ba4\u503c\uff0c\u901a\u5e38\u4e3a0\u3002 \u6b64\u5904\u7f57\u5217 \u90e8\u5206\u7c7b\u578b \u7684 \u201c\u96f6\u503c\u201d int 0 int8 0 int32 0 int64 0 uint 0x0 rune 0 //rune\u7684\u5b9e\u9645\u7c7b\u578b\u662f int32 byte 0x0 // byte\u7684\u5b9e\u9645\u7c7b\u578b\u662f uint8 float32 0 //\u957f\u5ea6\u4e3a 4 byte float64 0 //\u957f\u5ea6\u4e3a 8 byte bool false string \"\"","title":"\u96f6\u503c"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_12","text":"Go\u4e2d\u6d41\u7a0b\u63a7\u5236\u5206\u4e09\u5927\u7c7b\uff1a\u6761\u4ef6\u5224\u65ad\uff0c\u5faa\u73af\u63a7\u5236\u548c\u65e0\u6761\u4ef6\u8df3\u8f6c\u3002","title":"\u6d41\u7a0b\u63a7\u5236"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#if","text":"if \u4e5f\u8bb8\u662f\u5404\u79cd\u7f16\u7a0b\u8bed\u8a00\u4e2d\u6700\u5e38\u89c1\u7684\u4e86\uff0c\u5b83\u7684\u8bed\u6cd5\u6982\u62ec\u8d77\u6765\u5c31\u662f\uff1a\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u505a\u67d0\u4e8b\uff0c\u5426\u5219\u505a\u53e6\u4e00\u4ef6\u4e8b\u3002 Go\u91cc\u9762 if \u6761\u4ef6\u5224\u65ad\u8bed\u53e5\u4e2d\u4e0d\u9700\u8981\u62ec\u53f7\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a if x > 10 { fmt.Println(\"x is greater than 10\") } else { fmt.Println(\"x is less than 10\") } Go\u7684 if \u8fd8\u6709\u4e00\u4e2a\u5f3a\u5927\u7684\u5730\u65b9\u5c31\u662f\u6761\u4ef6\u5224\u65ad\u8bed\u53e5\u91cc\u9762\u5141\u8bb8\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\uff0c\u8fd9\u4e2a\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u53ea\u80fd\u5728\u8be5\u6761\u4ef6\u903b\u8f91\u5757\u5185\uff0c\u5176\u4ed6\u5730\u65b9\u5c31\u4e0d\u8d77\u4f5c\u7528\u4e86\uff0c\u5982\u4e0b\u6240\u793a // \u8ba1\u7b97\u83b7\u53d6\u503cx,\u7136\u540e\u6839\u636ex\u8fd4\u56de\u7684\u5927\u5c0f\uff0c\u5224\u65ad\u662f\u5426\u5927\u4e8e10\u3002 if x := computedValue(); x > 10 { fmt.Println(\"x is greater than 10\") } else { fmt.Println(\"x is less than 10\") } //\u8fd9\u4e2a\u5730\u65b9\u5982\u679c\u8fd9\u6837\u8c03\u7528\u5c31\u7f16\u8bd1\u51fa\u9519\u4e86\uff0c\u56e0\u4e3ax\u662f\u6761\u4ef6\u91cc\u9762\u7684\u53d8\u91cf fmt.Println(x) \u591a\u4e2a\u6761\u4ef6\u7684\u65f6\u5019\u5982\u4e0b\u6240\u793a\uff1a if integer == 3 { fmt.Println(\"The integer is equal to 3\") } else if integer < 3 { fmt.Println(\"The integer is less than 3\") } else { fmt.Println(\"The integer is greater than 3\") }","title":"if"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#goto","text":"Go\u6709 goto \u8bed\u53e5\u2014\u2014\u8bf7\u660e\u667a\u5730\u4f7f\u7528\u5b83\u3002\u7528 goto \u8df3\u8f6c\u5230\u5fc5\u987b\u5728\u5f53\u524d\u51fd\u6570\u5185\u5b9a\u4e49\u7684\u6807\u7b7e\u3002\u4f8b\u5982\u5047\u8bbe\u8fd9\u6837\u4e00\u4e2a\u5faa\u73af\uff1a func myFunc() { i := 0 Here: //\u8fd9\u884c\u7684\u7b2c\u4e00\u4e2a\u8bcd\uff0c\u4ee5\u5192\u53f7\u7ed3\u675f\u4f5c\u4e3a\u6807\u7b7e println(i) i++ goto Here //\u8df3\u8f6c\u5230Here\u53bb } \u6807\u7b7e\u540d\u662f\u5927\u5c0f\u5199\u654f\u611f\u7684\u3002","title":"goto"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#for","text":"Go\u91cc\u9762\u6700\u5f3a\u5927\u7684\u4e00\u4e2a\u63a7\u5236\u903b\u8f91\u5c31\u662f for \uff0c\u5b83\u65e2\u53ef\u4ee5\u7528\u6765\u5faa\u73af\u8bfb\u53d6\u6570\u636e\uff0c\u53c8\u53ef\u4ee5\u5f53\u4f5c while \u6765\u63a7\u5236\u903b\u8f91\uff0c\u8fd8\u80fd\u8fed\u4ee3\u64cd\u4f5c\u3002\u5b83\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a for expression1; expression2; expression3 { //... } expression1 \u3001 expression2 \u548c expression3 \u90fd\u662f\u8868\u8fbe\u5f0f\uff0c\u5176\u4e2d expression1 \u548c expression3 \u662f\u53d8\u91cf\u58f0\u660e\u6216\u8005\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u503c\u4e4b\u7c7b\u7684\uff0c expression2 \u662f\u7528\u6765\u6761\u4ef6\u5224\u65ad\uff0c expression1 \u5728\u5faa\u73af\u5f00\u59cb\u4e4b\u524d\u8c03\u7528\uff0c expression3 \u5728\u6bcf\u8f6e\u5faa\u73af\u7ed3\u675f\u4e4b\u65f6\u8c03\u7528\u3002 \u4e00\u4e2a\u4f8b\u5b50\u6bd4\u4e0a\u9762\u8bb2\u90a3\u4e48\u591a\u66f4\u6709\u7528\uff0c\u770b\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\u5427\uff1a package main import \"fmt\" func main(){ sum := 0; for index:=0; index < 10 ; index++ { sum += index } fmt.Println(\"sum is equal to \", sum) } // \u8f93\u51fa\uff1asum is equal to 45 \u6709\u4e9b\u65f6\u5019\u9700\u8981\u8fdb\u884c\u591a\u4e2a\u8d4b\u503c\u64cd\u4f5c\uff0c\u7531\u4e8eGo\u91cc\u9762\u6ca1\u6709 , \u64cd\u4f5c\u7b26\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u5e73\u884c\u8d4b\u503c i, j = i+1, j-1 \u6709\u4e9b\u65f6\u5019\u5982\u679c\u5ffd\u7565 expression1 \u548c expression3 \uff1a sum := 1 for ; sum < 1000; { sum += sum } \u5176\u4e2d ; \u4e5f\u53ef\u4ee5\u7701\u7565\uff0c\u90a3\u4e48\u5c31\u53d8\u6210\u5982\u4e0b\u7684\u4ee3\u7801\u4e86\uff0c\u8fd9\u5c31\u662f while \u7684\u529f\u80fd\u3002 sum := 1 for sum < 1000 { sum += sum } \u5728\u5faa\u73af\u91cc\u9762\u6709\u4e24\u4e2a\u5173\u952e\u64cd\u4f5c break \u548c continue , break \u64cd\u4f5c\u662f\u8df3\u51fa\u5f53\u524d\u5faa\u73af\uff0c continue \u662f\u8df3\u8fc7\u672c\u6b21\u5faa\u73af\u3002\u5f53\u5d4c\u5957\u8fc7\u6df1\u7684\u65f6\u5019\uff0c break \u53ef\u4ee5\u914d\u5408\u6807\u7b7e\u4f7f\u7528\uff0c\u5373\u8df3\u8f6c\u81f3\u6807\u7b7e\u6240\u6307\u5b9a\u7684\u4f4d\u7f6e\uff0c\u8be6\u7ec6\u53c2\u8003\u5982\u4e0b\u4f8b\u5b50\uff1a for index := 10; index>0; index-- { if index == 5{ break // \u6216\u8005continue } fmt.Println(index) } // break\u6253\u5370\u51fa\u676510\u30019\u30018\u30017\u30016 // continue\u6253\u5370\u51fa\u676510\u30019\u30018\u30017\u30016\u30014\u30013\u30012\u30011 break \u548c continue \u8fd8\u53ef\u4ee5\u8ddf\u7740\u6807\u53f7\uff0c\u7528\u6765\u8df3\u5230\u591a\u91cd\u5faa\u73af\u4e2d\u7684\u5916\u5c42\u5faa\u73af for \u914d\u5408 range \u53ef\u4ee5\u7528\u4e8e\u8bfb\u53d6 slice \u548c map \u7684\u6570\u636e\uff1a for k,v:=range map { fmt.Println(\"map's key:\",k) fmt.Println(\"map's val:\",v) } \u7531\u4e8e Go \u652f\u6301 \u201c\u591a\u503c\u8fd4\u56de\u201d, \u800c\u5bf9\u4e8e\u201c\u58f0\u660e\u800c\u672a\u88ab\u8c03\u7528\u201d\u7684\u53d8\u91cf, \u7f16\u8bd1\u5668\u4f1a\u62a5\u9519, \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u53ef\u4ee5\u4f7f\u7528 _ \u6765\u4e22\u5f03\u4e0d\u9700\u8981\u7684\u8fd4\u56de\u503c \u4f8b\u5982 for _, v := range map{ fmt.Println(\"map's val:\", v) }","title":"for"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#switch","text":"\u6709\u4e9b\u65f6\u5019\u9700\u8981\u5199\u5f88\u591a\u7684 if-else \u6765\u5b9e\u73b0\u4e00\u4e9b\u903b\u8f91\u5904\u7406\uff0c\u8fd9\u4e2a\u65f6\u5019\u4ee3\u7801\u770b\u4e0a\u53bb\u5c31\u5f88\u4e11\u5f88\u5197\u957f\uff0c\u800c\u4e14\u4e5f\u4e0d\u6613\u4e8e\u4ee5\u540e\u7684\u7ef4\u62a4\uff0c\u8fd9\u4e2a\u65f6\u5019 switch \u5c31\u80fd\u5f88\u597d\u7684\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u5b83\u7684\u8bed\u6cd5\u5982\u4e0b switch sExpr { case expr1: some instructions case expr2: some other instructions case expr3: some other instructions default: other code } sExpr \u548c expr1 \u3001 expr2 \u3001 expr3 \u7684\u7c7b\u578b\u5fc5\u987b\u4e00\u81f4\u3002Go\u7684 switch \u975e\u5e38\u7075\u6d3b\uff0c\u8868\u8fbe\u5f0f\u4e0d\u5fc5\u662f\u5e38\u91cf\u6216\u6574\u6570\uff0c\u6267\u884c\u7684\u8fc7\u7a0b\u4ece\u4e0a\u81f3\u4e0b\uff0c\u76f4\u5230\u627e\u5230\u5339\u914d\u9879\uff1b\u800c\u5982\u679c switch \u6ca1\u6709\u8868\u8fbe\u5f0f\uff0c\u5b83\u4f1a\u5339\u914d true \u3002 i := 10 switch i { case 1: fmt.Println(\"i is equal to 1\") case 2, 3, 4: fmt.Println(\"i is equal to 2, 3 or 4\") case 10: fmt.Println(\"i is equal to 10\") default: fmt.Println(\"All I know is that i is an integer\") } \u5728\u7b2c5\u884c\u4e2d\uff0c\u628a\u5f88\u591a\u503c\u805a\u5408\u5728\u4e86\u4e00\u4e2a case \u91cc\u9762\uff0c\u540c\u65f6\uff0cGo\u91cc\u9762 switch \u9ed8\u8ba4\u76f8\u5f53\u4e8e\u6bcf\u4e2a case \u6700\u540e\u5e26\u6709 break \uff0c\u5339\u914d\u6210\u529f\u540e\u4e0d\u4f1a\u81ea\u52a8\u5411\u4e0b\u6267\u884c\u5176\u4ed6case\uff0c\u800c\u662f\u8df3\u51fa\u6574\u4e2a switch , \u4f46\u662f\u53ef\u4ee5\u4f7f\u7528 fallthrough \u5f3a\u5236\u6267\u884c\u540e\u9762\u7684case\u4ee3\u7801\u3002 integer := 6 switch integer { case 4: fmt.Println(\"The integer was <= 4\") fallthrough case 5: fmt.Println(\"The integer was <= 5\") fallthrough case 6: fmt.Println(\"The integer was <= 6\") fallthrough case 7: fmt.Println(\"The integer was <= 7\") fallthrough case 8: fmt.Println(\"The integer was <= 8\") fallthrough default: fmt.Println(\"default case\") } \u4e0a\u9762\u7684\u7a0b\u5e8f\u5c06\u8f93\u51fa The integer was <= 6 The integer was <= 7 The integer was <= 8 default case","title":"switch"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_13","text":"","title":"\u51fd\u6570"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_14","text":"\u51fd\u6570\u662fGo\u91cc\u9762\u7684\u6838\u5fc3\u8bbe\u8ba1\uff0c\u5b83\u901a\u8fc7\u5173\u952e\u5b57 func \u6765\u58f0\u660e\uff0c\u5b83\u7684\u683c\u5f0f\u5982\u4e0b\uff1a func funcName(input1 type1, input2 type2) (output1 type1, output2 type2) { //\u8fd9\u91cc\u662f\u5904\u7406\u903b\u8f91\u4ee3\u7801 //\u8fd4\u56de\u591a\u4e2a\u503c return value1, value2 } \u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa \u5173\u952e\u5b57 func \u7528\u6765\u58f0\u660e\u4e00\u4e2a\u51fd\u6570 funcName \u51fd\u6570\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u53c2\u6570\uff0c\u6bcf\u4e2a\u53c2\u6570\u540e\u9762\u5e26\u6709\u7c7b\u578b\uff0c\u901a\u8fc7 , \u5206\u9694 \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u503c \u4e0a\u9762\u8fd4\u56de\u503c\u58f0\u660e\u4e86\u4e24\u4e2a\u53d8\u91cf output1 \u548c output2 \uff0c\u5982\u679c\u4e0d\u60f3\u58f0\u660e\u4e5f\u53ef\u4ee5\uff0c\u76f4\u63a5\u5c31\u4e24\u4e2a\u7c7b\u578b \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8fd4\u56de\u503c\u4e14\u4e0d\u58f0\u660e\u8fd4\u56de\u503c\u53d8\u91cf\uff0c\u90a3\u4e48\u53ef\u4ee5\u7701\u7565 \u5305\u62ec\u8fd4\u56de\u503c\u7684\u62ec\u53f7 \u5982\u679c\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u7701\u7565\u6700\u540e\u7684\u8fd4\u56de\u4fe1\u606f \u5982\u679c\u6709\u8fd4\u56de\u503c\uff0c \u90a3\u4e48\u5fc5\u987b\u5728\u51fd\u6570\u7684\u5916\u5c42\u6dfb\u52a0return\u8bed\u53e5 \u4e0b\u9762\u6765\u770b\u4e00\u4e2a\u5b9e\u9645\u5e94\u7528\u51fd\u6570\u7684\u4f8b\u5b50\uff08\u7528\u6765\u8ba1\u7b97Max\u503c\uff09 package main import \"fmt\" // \u8fd4\u56dea\u3001b\u4e2d\u6700\u5927\u503c. func max(a, b int) int { if a > b { return a } return b } func main() { x := 3 y := 4 z := 5 max_xy := max(x, y) //\u8c03\u7528\u51fd\u6570max(x, y) max_xz := max(x, z) //\u8c03\u7528\u51fd\u6570max(x, z) fmt.Printf(\"max(%d, %d) = %d\\n\", x, y, max_xy) fmt.Printf(\"max(%d, %d) = %d\\n\", x, z, max_xz) fmt.Printf(\"max(%d, %d) = %d\\n\", y, z, max(y,z)) // \u4e5f\u53ef\u5728\u8fd9\u76f4\u63a5\u8c03\u7528\u5b83 } \u4e0a\u9762\u8fd9\u4e2a\u91cc\u9762\u53ef\u4ee5\u770b\u5230 max \u51fd\u6570\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u5b83\u4eec\u7684\u7c7b\u578b\u90fd\u662f int \uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b\u53ef\u4ee5\u7701\u7565\uff08\u5373 a,b int,\u800c\u975e a int, b int)\uff0c\u9ed8\u8ba4\u4e3a\u79bb\u5b83\u6700\u8fd1\u7684\u7c7b\u578b\uff0c\u540c\u7406\u591a\u4e8e2\u4e2a\u540c\u7c7b\u578b\u7684\u53d8\u91cf\u6216\u8005\u8fd4\u56de\u503c\u3002\u540c\u65f6\u6ce8\u610f\u5230\u5b83\u7684\u8fd4\u56de\u503c\u5c31\u662f\u4e00\u4e2a\u7c7b\u578b\uff0c\u8fd9\u4e2a\u5c31\u662f\u7701\u7565\u5199\u6cd5\u3002","title":"\u51fd\u6570\u7684\u5b9a\u4e49"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_15","text":"Go\u8bed\u8a00\u6bd4C\u66f4\u5148\u8fdb\u7684\u7279\u6027\uff0c\u5176\u4e2d\u4e00\u70b9\u5c31\u662f\u51fd\u6570\u80fd\u591f\u8fd4\u56de\u591a\u4e2a\u503c\u3002 \u76f4\u63a5\u770b\u4f8b\u5b50 package main import \"fmt\" //\u8fd4\u56de A+B \u548c A*B func SumAndProduct(A, B int) (int, int) { return A+B, A*B } func main() { x := 3 y := 4 xPLUSy, xTIMESy := SumAndProduct(x, y) fmt.Printf(\"%d + %d = %d\\n\", x, y, xPLUSy) fmt.Printf(\"%d * %d = %d\\n\", x, y, xTIMESy) } \u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\u5230\u76f4\u63a5\u8fd4\u56de\u4e86\u4e24\u4e2a\u53c2\u6570\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u547d\u540d\u8fd4\u56de\u53c2\u6570\u7684\u53d8\u91cf\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u9762\u53ea\u662f\u7528\u4e86\u4e24\u4e2a\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u6539\u6210\u5982\u4e0b\u8fd9\u6837\u7684\u5b9a\u4e49\uff0c\u7136\u540e\u8fd4\u56de\u7684\u65f6\u5019\u4e0d\u7528\u5e26\u4e0a\u53d8\u91cf\u540d\uff0c\u56e0\u4e3a\u76f4\u63a5\u5728\u51fd\u6570\u91cc\u9762\u521d\u59cb\u5316\u4e86\u3002\u4f46\u5982\u679c\u51fd\u6570\u662f\u5bfc\u51fa\u7684(\u9996\u5b57\u6bcd\u5927\u5199)\uff0c\u5b98\u65b9\u5efa\u8bae\uff1a\u6700\u597d\u547d\u540d\u8fd4\u56de\u503c\uff0c\u56e0\u4e3a\u4e0d\u547d\u540d\u8fd4\u56de\u503c\uff0c\u867d\u7136\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\u4e86\uff0c\u4f46\u662f\u4f1a\u9020\u6210\u751f\u6210\u7684\u6587\u6863\u53ef\u8bfb\u6027\u5dee\u3002 func SumAndProduct(A, B int) (add int, Multiplied int) { add = A+B Multiplied = A*B return }","title":"\u591a\u4e2a\u8fd4\u56de\u503c"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_16","text":"Go\u51fd\u6570\u652f\u6301\u53d8\u53c2\u3002\u63a5\u53d7\u53d8\u53c2\u7684\u51fd\u6570\u662f\u6709\u7740\u4e0d\u5b9a\u6570\u91cf\u7684\u53c2\u6570\u7684\u3002\u4e3a\u4e86\u505a\u5230\u8fd9\u70b9\uff0c\u9996\u5148\u9700\u8981\u5b9a\u4e49\u51fd\u6570\u4f7f\u5176\u63a5\u53d7\u53d8\u53c2\uff1a func myfunc(arg ...int) {} arg ...int \u544a\u8bc9Go\u8fd9\u4e2a\u51fd\u6570\u63a5\u53d7\u4e0d\u5b9a\u6570\u91cf\u7684\u53c2\u6570\u3002\u6ce8\u610f\uff0c\u8fd9\u4e9b\u53c2\u6570\u7684\u7c7b\u578b\u5168\u90e8\u662f int \u3002\u5728\u51fd\u6570\u4f53\u4e2d\uff0c\u53d8\u91cf arg \u662f\u4e00\u4e2a int \u7684 slice \uff1a for _, n := range arg { fmt.Printf(\"And the number is: %d\\n\", n) }","title":"\u53d8\u53c2"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_17","text":"\u4f20\u4e00\u4e2a\u53c2\u6570\u503c\u5230\u88ab\u8c03\u7528\u51fd\u6570\u91cc\u9762\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u4f20\u4e86\u8fd9\u4e2a\u503c\u7684\u4e00\u4efdcopy\uff0c\u5f53\u5728\u88ab\u8c03\u7528\u51fd\u6570\u4e2d\u4fee\u6539\u53c2\u6570\u503c\u7684\u65f6\u5019\uff0c\u8c03\u7528\u51fd\u6570\u4e2d\u76f8\u5e94\u5b9e\u53c2\u4e0d\u4f1a\u53d1\u751f\u4efb\u4f55\u53d8\u5316\uff0c\u56e0\u4e3a\u6570\u503c\u53d8\u5316\u53ea\u4f5c\u7528\u5728copy\u4e0a\u3002 \u4e3a\u4e86\u9a8c\u8bc1\u4e0a\u9762\u7684\u8bf4\u6cd5\uff0c\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50 package main import \"fmt\" //\u7b80\u5355\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u5b9e\u73b0\u4e86\u53c2\u6570+1\u7684\u64cd\u4f5c func add1(a int) int { a = a+1 // \u6539\u53d8\u4e86a\u7684\u503c return a //\u8fd4\u56de\u4e00\u4e2a\u65b0\u503c } func main() { x := 3 fmt.Println(\"x = \", x) // \u5e94\u8be5\u8f93\u51fa \"x = 3\" x1 := add1(x) //\u8c03\u7528add1(x) fmt.Println(\"x+1 = \", x1) // \u5e94\u8be5\u8f93\u51fa\"x+1 = 4\" fmt.Println(\"x = \", x) // \u5e94\u8be5\u8f93\u51fa\"x = 3\" } \u867d\u7136\u8c03\u7528\u4e86 add1 \u51fd\u6570\uff0c\u5e76\u4e14\u5728 add1 \u4e2d\u6267\u884c a = a+1 \u64cd\u4f5c\uff0c\u4f46\u662f\u4e0a\u9762\u4f8b\u5b50\u4e2d x \u53d8\u91cf\u7684\u503c\u6ca1\u6709\u53d1\u751f\u53d8\u5316 \u7406\u7531\u5f88\u7b80\u5355\uff1a\u56e0\u4e3a\u5f53\u8c03\u7528 add1 \u7684\u65f6\u5019\uff0c add1 \u63a5\u6536\u7684\u53c2\u6570\u5176\u5b9e\u662f x \u7684copy\uff0c\u800c\u4e0d\u662f x \u672c\u8eab\u3002 \u5982\u679c\u771f\u7684\u9700\u8981\u4f20\u8fd9\u4e2a x \u672c\u8eab,\u8be5\u600e\u4e48\u529e\u5462\uff1f \u8fd9\u5c31\u7275\u626f\u5230\u4e86\u6240\u8c13\u7684\u6307\u9488\u3002\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u662f\u5b58\u653e\u4e8e\u4e00\u5b9a\u5730\u5740\u4e0a\u7684\uff0c\u4fee\u6539\u53d8\u91cf\u5b9e\u9645\u662f\u4fee\u6539\u53d8\u91cf\u5730\u5740\u5904\u7684\u5185\u5b58\u3002\u53ea\u6709 add1 \u51fd\u6570\u77e5\u9053 x \u53d8\u91cf\u6240\u5728\u7684\u5730\u5740\uff0c\u624d\u80fd\u4fee\u6539 x \u53d8\u91cf\u7684\u503c\u3002\u6240\u4ee5\u9700\u8981\u5c06 x \u6240\u5728\u5730\u5740 &x \u4f20\u5165\u51fd\u6570\uff0c\u5e76\u5c06\u51fd\u6570\u7684\u53c2\u6570\u7684\u7c7b\u578b\u7531 int \u6539\u4e3a *int \uff0c\u5373\u6539\u4e3a\u6307\u9488\u7c7b\u578b\uff0c\u624d\u80fd\u5728\u51fd\u6570\u4e2d\u4fee\u6539 x \u53d8\u91cf\u7684\u503c\u3002\u6b64\u65f6\u53c2\u6570\u4ecd\u7136\u662f\u6309copy\u4f20\u9012\u7684\uff0c\u53ea\u662fcopy\u7684\u662f\u4e00\u4e2a\u6307\u9488\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50 package main import \"fmt\" //\u7b80\u5355\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u5b9e\u73b0\u4e86\u53c2\u6570+1\u7684\u64cd\u4f5c func add1(a *int) int { // \u8bf7\u6ce8\u610f\uff0c *a = *a+1 // \u4fee\u6539\u4e86a\u7684\u503c return *a // \u8fd4\u56de\u65b0\u503c } func main() { x := 3 fmt.Println(\"x = \", x) // \u5e94\u8be5\u8f93\u51fa \"x = 3\" x1 := add1(&x) // \u8c03\u7528 add1(&x) \u4f20x\u7684\u5730\u5740 fmt.Println(\"x+1 = \", x1) // \u5e94\u8be5\u8f93\u51fa \"x+1 = 4\" fmt.Println(\"x = \", x) // \u5e94\u8be5\u8f93\u51fa \"x = 4\" } \u8fd9\u6837\uff0c\u5c31\u8fbe\u5230\u4e86\u4fee\u6539 x \u7684\u76ee\u7684\u3002\u90a3\u4e48\u5230\u5e95\u4f20\u6307\u9488\u6709\u4ec0\u4e48\u597d\u5904\u5462\uff1f \u4f20\u6307\u9488\u4f7f\u5f97\u591a\u4e2a\u51fd\u6570\u80fd\u64cd\u4f5c\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 \u4f20\u6307\u9488\u6bd4\u8f83\u8f7b\u91cf\u7ea7 (8bytes),\u53ea\u662f\u4f20\u5185\u5b58\u5730\u5740\uff0c\u53ef\u4ee5\u7528\u6307\u9488\u4f20\u9012\u4f53\u79ef\u5927\u7684\u7ed3\u6784\u4f53\u3002\u5982\u679c\u7528\u53c2\u6570\u503c\u4f20\u9012\u7684\u8bdd, \u5728\u6bcf\u6b21copy\u4e0a\u9762\u5c31\u4f1a\u82b1\u8d39\u76f8\u5bf9\u8f83\u591a\u7684\u7cfb\u7edf\u5f00\u9500\uff08\u5185\u5b58\u548c\u65f6\u95f4\uff09\u3002\u6240\u4ee5\u5f53\u8981\u4f20\u9012\u5927\u7684\u7ed3\u6784\u4f53\u7684\u65f6\u5019\uff0c\u7528\u6307\u9488\u662f\u4e00\u4e2a\u660e\u667a\u7684\u9009\u62e9\u3002 Go\u8bed\u8a00\u4e2d channel \uff0c slice \uff0c map \u8fd9\u4e09\u79cd\u7c7b\u578b\u7684\u5b9e\u73b0\u673a\u5236\u7c7b\u4f3c\u6307\u9488\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\uff0c\u800c\u4e0d\u7528\u53d6\u5730\u5740\u540e\u4f20\u9012\u6307\u9488\u3002\uff08\u6ce8\uff1a\u82e5\u51fd\u6570\u9700\u6539\u53d8 slice \u7684\u957f\u5ea6\uff0c\u5219\u4ecd\u9700\u8981\u53d6\u5730\u5740\u4f20\u9012\u6307\u9488\uff09","title":"\u4f20\u503c\u4e0e\u4f20\u6307\u9488"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#defer","text":"Go\u8bed\u8a00\u4e2d\u6709\u79cd\u4e0d\u9519\u7684\u8bbe\u8ba1\uff0c\u5373\u5ef6\u8fdf\uff08defer\uff09\u8bed\u53e5\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u6dfb\u52a0\u591a\u4e2adefer\u8bed\u53e5\u3002\u5f53\u51fd\u6570\u6267\u884c\u5230\u6700\u540e\u65f6\uff0c\u8fd9\u4e9bdefer\u8bed\u53e5\u4f1a\u6309\u7167\u9006\u5e8f\u6267\u884c\uff0c\u6700\u540e\u8be5\u51fd\u6570\u8fd4\u56de\u3002\u7279\u522b\u662f\u5f53\u8fdb\u884c\u4e00\u4e9b\u6253\u5f00\u8d44\u6e90\u7684\u64cd\u4f5c\u65f6\uff0c\u9047\u5230\u9519\u8bef\u9700\u8981\u63d0\u524d\u8fd4\u56de\uff0c\u5728\u8fd4\u56de\u524d\u9700\u8981\u5173\u95ed\u76f8\u5e94\u7684\u8d44\u6e90\uff0c\u4e0d\u7136\u5f88\u5bb9\u6613\u9020\u6210\u8d44\u6e90\u6cc4\u9732\u7b49\u95ee\u9898\u3002\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff0c\u4e00\u822c\u5199\u6253\u5f00\u4e00\u4e2a\u8d44\u6e90\u662f\u8fd9\u6837\u64cd\u4f5c\u7684\uff1a func ReadWrite() bool { file.Open(\"file\") // \u505a\u4e00\u4e9b\u5de5\u4f5c if failureX { file.Close() return false } if failureY { file.Close() return false } file.Close() return true } \u4e0a\u9762\u6709\u5f88\u591a\u91cd\u590d\u7684\u4ee3\u7801\uff0cGo\u7684 defer \u6709\u6548\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u4f7f\u7528\u5b83\u540e\uff0c\u4e0d\u4f46\u4ee3\u7801\u91cf\u51cf\u5c11\u4e86\u5f88\u591a\uff0c\u800c\u4e14\u7a0b\u5e8f\u53d8\u5f97\u66f4\u4f18\u96c5\u3002\u5728 defer \u540e\u6307\u5b9a\u7684\u51fd\u6570\u4f1a\u5728\u51fd\u6570\u9000\u51fa\u524d\u8c03\u7528\u3002 func ReadWrite() bool { file.Open(\"file\") defer file.Close() if failureX { return false } if failureY { return false } return true } \u5982\u679c\u6709\u5f88\u591a\u8c03\u7528 defer \uff0c\u90a3\u4e48 defer \u662f\u91c7\u7528\u540e\u8fdb\u5148\u51fa\u6a21\u5f0f\uff0c\u6240\u4ee5\u5982\u4e0b\u4ee3\u7801\u4f1a\u8f93\u51fa 4 3 2 1 0 for i := 0; i < 5; i++ { defer fmt.Printf(\"%d \", i) } \u901a\u5e38\u6765\u8bf4\uff0cdefer\u4f1a\u7528\u5728\u91ca\u653e\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u5173\u95ed\u6587\u4ef6\u7b49\u9700\u8981\u5728\u51fd\u6570\u7ed3\u675f\u65f6\u5904\u7406\u7684\u64cd\u4f5c\u3002","title":"defer"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_18","text":"\u5728Go\u4e2d\u51fd\u6570\u4e5f\u662f\u4e00\u79cd\u53d8\u91cf\uff0c\u53ef\u4ee5\u901a\u8fc7 type \u6765\u5b9a\u4e49\u5b83\uff0c\u5b83\u7684\u7c7b\u578b\u5c31\u662f\u6240\u6709\u62e5\u6709\u76f8\u540c\u7684\u53c2\u6570\uff0c\u76f8\u540c\u7684\u8fd4\u56de\u503c\u7684\u4e00\u79cd\u7c7b\u578b type typeName func(input1 inputType1 , input2 inputType2 [, ...]) (result1 resultType1 [, ...]) \u51fd\u6570\u4f5c\u4e3a\u7c7b\u578b\u5230\u5e95\u6709\u4ec0\u4e48\u597d\u5904\u5462\uff1f\u90a3\u5c31\u662f\u53ef\u4ee5\u628a\u8fd9\u4e2a\u7c7b\u578b\u7684\u51fd\u6570\u5f53\u505a\u503c\u6765\u4f20\u9012\uff0c\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50 package main import \"fmt\" type testInt func(int) bool // \u58f0\u660e\u4e86\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b func isOdd(integer int) bool { if integer%2 == 0 { return false } return true } func isEven(integer int) bool { if integer%2 == 0 { return true } return false } // \u58f0\u660e\u7684\u51fd\u6570\u7c7b\u578b\u5728\u8fd9\u4e2a\u5730\u65b9\u5f53\u505a\u4e86\u4e00\u4e2a\u53c2\u6570 func filter(slice []int, f testInt) []int { var result []int for _, value := range slice { if f(value) { result = append(result, value) } } return result } func main(){ slice := []int {1, 2, 3, 4, 5, 7} fmt.Println(\"slice = \", slice) odd := filter(slice, isOdd) // \u51fd\u6570\u5f53\u505a\u503c\u6765\u4f20\u9012\u4e86 fmt.Println(\"Odd elements of slice are: \", odd) even := filter(slice, isEven) // \u51fd\u6570\u5f53\u505a\u503c\u6765\u4f20\u9012\u4e86 fmt.Println(\"Even elements of slice are: \", even) } \u51fd\u6570\u5f53\u505a\u503c\u548c\u7c7b\u578b\u5728\u5199\u4e00\u4e9b\u901a\u7528\u63a5\u53e3\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528\uff0c\u901a\u8fc7\u4e0a\u9762\u4f8b\u5b50\u770b\u5230 testInt \u8fd9\u4e2a\u7c7b\u578b\u662f\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b\uff0c\u7136\u540e\u4e24\u4e2a filter \u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u4e0e testInt \u7c7b\u578b\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u5b9e\u73b0\u5f88\u591a\u79cd\u7684\u903b\u8f91\uff0c\u8fd9\u6837\u4f7f\u5f97\u7a0b\u5e8f\u53d8\u5f97\u975e\u5e38\u7684\u7075\u6d3b\u3002","title":"\u51fd\u6570\u4f5c\u4e3a\u503c\u3001\u7c7b\u578b"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#panicrecover","text":"Go\u6ca1\u6709\u50cfJava\u90a3\u6837\u7684\u5f02\u5e38\u673a\u5236\uff0c\u5b83\u4e0d\u80fd\u629b\u51fa\u5f02\u5e38\uff0c\u800c\u662f\u4f7f\u7528\u4e86 panic \u548c recover \u673a\u5236\u3002\u4e00\u5b9a\u8981\u8bb0\u4f4f\uff0c\u5e94\u5f53\u628a\u5b83\u4f5c\u4e3a\u6700\u540e\u7684\u624b\u6bb5\u6765\u4f7f\u7528\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ee3\u7801\u4e2d\u5e94\u5f53\u6ca1\u6709\uff0c\u6216\u8005\u5f88\u5c11\u6709 panic \u7684\u4e1c\u897f\u3002\u8fd9\u662f\u4e2a\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u8bf7\u660e\u667a\u5730\u4f7f\u7528\u5b83\u3002 Panic \u662f\u4e00\u4e2a\u5185\u5efa\u51fd\u6570\uff0c\u53ef\u4ee5\u4e2d\u65ad\u539f\u6709\u7684\u63a7\u5236\u6d41\u7a0b\uff0c\u8fdb\u5165\u4e00\u4e2a panic \u72b6\u6001\u4e2d\u3002\u5f53\u51fd\u6570 F \u8c03\u7528 panic \uff0c\u51fd\u6570F\u7684\u6267\u884c\u88ab\u4e2d\u65ad\uff0c\u4f46\u662f F \u4e2d\u7684\u5ef6\u8fdf\u51fd\u6570\u4f1a\u6b63\u5e38\u6267\u884c\uff0c\u7136\u540eF\u8fd4\u56de\u5230\u8c03\u7528\u5b83\u7684\u5730\u65b9\u3002\u5728\u8c03\u7528\u7684\u5730\u65b9\uff0c F \u7684\u884c\u4e3a\u5c31\u50cf\u8c03\u7528\u4e86 panic \u3002\u8fd9\u4e00\u8fc7\u7a0b\u7ee7\u7eed\u5411\u4e0a\uff0c\u76f4\u5230\u53d1\u751f panic \u7684 goroutine \u4e2d\u6240\u6709\u8c03\u7528\u7684\u51fd\u6570\u8fd4\u56de\uff0c\u6b64\u65f6\u7a0b\u5e8f\u9000\u51fa\u3002 panic \u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 panic \u4ea7\u751f\u3002\u4e5f\u53ef\u4ee5\u7531\u8fd0\u884c\u65f6\u9519\u8bef\u4ea7\u751f\uff0c\u4f8b\u5982\u8bbf\u95ee\u8d8a\u754c\u7684\u6570\u7ec4\u3002 Recover \u662f\u4e00\u4e2a\u5185\u5efa\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u8ba9\u8fdb\u5165 panic \u72b6\u6001\u7684 goroutine \u6062\u590d\u8fc7\u6765\u3002 recover \u4ec5\u5728\u5ef6\u8fdf\u51fd\u6570\u4e2d\u6709\u6548\u3002\u5728\u6b63\u5e38\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u8c03\u7528 recover \u4f1a\u8fd4\u56de nil \uff0c\u5e76\u4e14\u6ca1\u6709\u5176\u5b83\u4efb\u4f55\u6548\u679c\u3002\u5982\u679c\u5f53\u524d\u7684 goroutine \u9677\u5165 panic \u72b6\u6001\uff0c\u8c03\u7528 recover \u53ef\u4ee5\u6355\u83b7\u5230 panic \u7684\u8f93\u5165\u503c\uff0c\u5e76\u4e14\u6062\u590d\u6b63\u5e38\u7684\u6267\u884c\u3002 \u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\u6f14\u793a\u4e86\u5982\u4f55\u5728\u8fc7\u7a0b\u4e2d\u4f7f\u7528 panic var user = os.Getenv(\"USER\") func init() { if user == \"\" { panic(\"no value for $USER\") } } \u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\u68c0\u67e5\u4f5c\u4e3a\u5176\u53c2\u6570\u7684\u51fd\u6570\u5728\u6267\u884c\u65f6\u662f\u5426\u4f1a\u4ea7\u751f panic \uff1a func throwsPanic(f func()) (b bool) { defer func() { if x := recover(); x != nil { b = true } }() f() //\u6267\u884c\u51fd\u6570f\uff0c\u5982\u679cf\u4e2d\u51fa\u73b0\u4e86panic\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u6062\u590d\u56de\u6765 return } \u6ce8\u610f\uff1a defer \u5fc5\u987b\u5728 panic \u8bed\u53e5\u4e4b\u524d\u3002 recover \u5fc5\u987b\u914d\u5408 defer \u4f7f\u7528\u3002","title":"Panic\u548cRecover"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#maininit","text":"Go\u91cc\u9762\u6709\u4e24\u4e2a\u4fdd\u7559\u7684\u51fd\u6570\uff1a init \u51fd\u6570\uff08\u80fd\u591f\u5e94\u7528\u4e8e\u6240\u6709\u7684 package \uff09\u548c main \u51fd\u6570\uff08\u53ea\u80fd\u5e94\u7528\u4e8e package main \uff09\u3002\u8fd9\u4e24\u4e2a\u51fd\u6570\u5728\u5b9a\u4e49\u65f6\u4e0d\u80fd\u6709\u4efb\u4f55\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u3002\u867d\u7136\u4e00\u4e2a package \u91cc\u9762\u53ef\u4ee5\u5199\u4efb\u610f\u591a\u4e2a init \u51fd\u6570\uff0c\u4f46\u8fd9\u65e0\u8bba\u662f\u5bf9\u4e8e\u53ef\u8bfb\u6027\u8fd8\u662f\u4ee5\u540e\u7684\u53ef\u7ef4\u62a4\u6027\u6765\u8bf4\uff0c\u5f3a\u70c8\u5efa\u8bae\u7528\u6237\u5728\u4e00\u4e2a package \u4e2d\u6bcf\u4e2a\u6587\u4ef6\u53ea\u5199\u4e00\u4e2a init \u51fd\u6570\u3002 Go\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u8c03\u7528 init() \u548c main() \uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u5728\u4efb\u4f55\u5730\u65b9\u8c03\u7528\u8fd9\u4e24\u4e2a\u51fd\u6570\u3002\u6bcf\u4e2a package \u4e2d\u7684 init \u51fd\u6570\u90fd\u662f\u53ef\u9009\u7684\uff0c\u4f46 package main \u5c31\u5fc5\u987b\u5305\u542b\u4e00\u4e2a main \u51fd\u6570\u3002 \u7a0b\u5e8f\u7684\u521d\u59cb\u5316\u548c\u6267\u884c\u90fd\u8d77\u59cb\u4e8e main \u5305\u3002\u5982\u679c main \u5305\u8fd8\u5bfc\u5165\u4e86\u5176\u5b83\u7684\u5305\uff0c\u90a3\u4e48\u5c31\u4f1a\u5728\u7f16\u8bd1\u65f6\u5c06\u5b83\u4eec\u4f9d\u6b21\u5bfc\u5165\u3002\u6709\u65f6\u4e00\u4e2a\u5305\u4f1a\u88ab\u591a\u4e2a\u5305\u540c\u65f6\u5bfc\u5165\uff0c\u90a3\u4e48\u5b83\u53ea\u4f1a\u88ab\u5bfc\u5165\u4e00\u6b21\uff08\u4f8b\u5982\u5f88\u591a\u5305\u53ef\u80fd\u90fd\u4f1a\u7528\u5230 fmt \u5305\uff0c\u4f46\u5b83\u53ea\u4f1a\u88ab\u5bfc\u5165\u4e00\u6b21\uff0c\u56e0\u4e3a\u6ca1\u6709\u5fc5\u8981\u5bfc\u5165\u591a\u6b21\uff09\u3002\u5f53\u4e00\u4e2a\u5305\u88ab\u5bfc\u5165\u65f6\uff0c\u5982\u679c\u8be5\u5305\u8fd8\u5bfc\u5165\u4e86\u5176\u5b83\u7684\u5305\uff0c\u90a3\u4e48\u4f1a\u5148\u5c06\u5176\u5b83\u5305\u5bfc\u5165\u8fdb\u6765\uff0c\u7136\u540e\u518d\u5bf9\u8fd9\u4e9b\u5305\u4e2d\u7684\u5305\u7ea7\u5e38\u91cf\u548c\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u63a5\u7740\u6267\u884c init \u51fd\u6570\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u7b49\u6240\u6709\u88ab\u5bfc\u5165\u7684\u5305\u90fd\u52a0\u8f7d\u5b8c\u6bd5\u4e86\uff0c\u5c31\u4f1a\u5f00\u59cb\u5bf9 main \u5305\u4e2d\u7684\u5305\u7ea7\u5e38\u91cf\u548c\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u7136\u540e\u6267\u884c main \u5305\u4e2d\u7684 init \u51fd\u6570\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09\uff0c\u6700\u540e\u6267\u884c main \u51fd\u6570\u3002","title":"main\u51fd\u6570\u548cinit\u51fd\u6570"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#import","text":"\u5728\u5199Go\u4ee3\u7801\u7684\u65f6\u5019\u7ecf\u5e38\u7528\u5230import\u8fd9\u4e2a\u547d\u4ee4\u7528\u6765\u5bfc\u5165\u5305\u6587\u4ef6\uff0c\u7ecf\u5e38\u770b\u5230\u7684\u65b9\u5f0f\u53c2\u8003\u5982\u4e0b\uff1a import( \"fmt\" ) \u7136\u540e\u4ee3\u7801\u91cc\u9762\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u65b9\u5f0f\u8c03\u7528 fmt.Println(\"hello world\") \u4e0a\u9762\u8fd9\u4e2afmt\u662fGo\u8bed\u8a00\u7684\u6807\u51c6\u5e93\uff0c\u5176\u5b9e\u662f\u53bb GOROOT \u73af\u5883\u53d8\u91cf\u6307\u5b9a\u76ee\u5f55\u4e0b\u53bb\u52a0\u8f7d\u8be5\u6a21\u5757\uff0c\u5f53\u7136Go\u7684import\u8fd8\u652f\u6301\u5982\u4e0b\u4e24\u79cd\u65b9\u5f0f\u6765\u52a0\u8f7d\u81ea\u5df1\u5199\u7684\u6a21\u5757\uff1a","title":"import"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#1","text":"import \"./model\" //\u5f53\u524d\u6587\u4ef6\u540c\u4e00\u76ee\u5f55\u7684model\u76ee\u5f55\uff0c\u4f46\u662f\u4e0d\u5efa\u8bae\u8fd9\u79cd\u65b9\u5f0f\u6765import","title":"1\u3001\u76f8\u5bf9\u8def\u5f84"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#2","text":"import \"shorturl/model\" //\u52a0\u8f7dgopath/src/shorturl/model\u6a21\u5757 \u4e0a\u9762\u5c55\u793a\u4e86\u4e00\u4e9bimport\u5e38\u7528\u7684\u51e0\u79cd\u65b9\u5f0f\uff0c\u4f46\u662f\u8fd8\u6709\u4e00\u4e9b","title":"2\u3001\u7edd\u5bf9\u8def\u5f84"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#import_1","text":"","title":"\u7279\u6b8a\u7684import"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#1_1","text":"\u6709\u65f6\u5019\u4f1a\u770b\u5230\u5982\u4e0b\u7684\u65b9\u5f0f\u5bfc\u5165\u5305 import( . \"fmt\" ) \u8fd9\u4e2a\u70b9\u64cd\u4f5c\u7684\u542b\u4e49\u5c31\u662f\u8fd9\u4e2a\u5305\u5bfc\u5165\u4e4b\u540e\u5728\u8c03\u7528\u8fd9\u4e2a\u5305\u7684\u51fd\u6570\u65f6\uff0c\u53ef\u4ee5\u7701\u7565\u524d\u7f00\u7684\u5305\u540d\uff0c\u4e5f\u5c31\u662f\u524d\u9762\u8c03\u7528\u7684fmt.Println(\"hello world\")\u53ef\u4ee5\u7701\u7565\u7684\u5199\u6210 Println(\"hello world\")","title":"1\u3001\u70b9\u64cd\u4f5c"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#2_1","text":"\u522b\u540d\u64cd\u4f5c\u987e\u540d\u601d\u4e49\u53ef\u4ee5\u628a\u5305\u547d\u540d\u6210\u53e6\u4e00\u4e2a\u7528\u8d77\u6765\u5bb9\u6613\u8bb0\u5fc6\u7684\u540d\u5b57 import( f \"fmt\" ) \u522b\u540d\u64cd\u4f5c\u7684\u8bdd\u8c03\u7528\u5305\u51fd\u6570\u65f6\u524d\u7f00\u53d8\u6210\u4e86\u524d\u7f00\uff0c\u5373 f.Println(\"hello world\")","title":"2\u3001\u522b\u540d\u64cd\u4f5c"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#3_","text":"\u8fd9\u4e2a\u64cd\u4f5c\u7ecf\u5e38\u662f\u8ba9\u5f88\u591a\u4eba\u8d39\u89e3\u7684\u4e00\u4e2a\u64cd\u4f5c\u7b26\uff0c\u8bf7\u770b\u4e0b\u9762\u8fd9\u4e2a import import ( \"database/sql\" _ \"github.com/ziutek/mymysql/godrv\" ) _ \u64cd\u4f5c\u5176\u5b9e\u662f\u5f15\u5165\u8be5\u5305\uff0c\u800c\u4e0d\u76f4\u63a5\u4f7f\u7528\u5305\u91cc\u9762\u7684\u51fd\u6570\uff0c\u800c\u662f\u8c03\u7528\u4e86\u8be5\u5305\u91cc\u9762\u7684 init\u51fd\u6570 \u3002","title":"3\u3001_\u64cd\u4f5c"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#struct","text":"","title":"struct\u7c7b\u578b"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#struct_1","text":"Go\u8bed\u8a00\u4e2d\uff0c\u4e5f\u548cC\u6216\u8005\u5176\u4ed6\u8bed\u8a00\u4e00\u6837\uff0c\u53ef\u4ee5\u58f0\u660e\u65b0\u7684\u7c7b\u578b\uff0c\u4f5c\u4e3a\u5176\u5b83\u7c7b\u578b\u7684\u5c5e\u6027\u6216\u5b57\u6bb5\u7684\u5bb9\u5668\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7c7b\u578b person \u4ee3\u8868\u4e00\u4e2a\u4eba\u7684\u5b9e\u4f53\u3002\u8fd9\u4e2a\u5b9e\u4f53\u62e5\u6709\u5c5e\u6027\uff1a\u59d3\u540d\u548c\u5e74\u9f84\u3002\u8fd9\u6837\u7684\u7c7b\u578b\u79f0\u4e4b struct \u3002\u5982\u4e0b\u4ee3\u7801\u6240\u793a: type person struct { name string age int } \u58f0\u660e\u4e00\u4e2a struct \u5982\u6b64\u7b80\u5355\uff0c\u4e0a\u9762\u7684\u7c7b\u578b\u5305\u542b\u6709\u4e24\u4e2a\u5b57\u6bb5 \u4e00\u4e2a string \u7c7b\u578b\u7684\u5b57\u6bb5name\uff0c\u7528\u6765\u4fdd\u5b58\u7528\u6237\u540d\u79f0\u8fd9\u4e2a\u5c5e\u6027 \u4e00\u4e2a int \u7c7b\u578b\u7684\u5b57\u6bb5age\uff0c\u7528\u6765\u4fdd\u5b58\u7528\u6237\u5e74\u9f84\u8fd9\u4e2a\u5c5e\u6027 \u4f7f\u7528 struct \u770b\u4e0b\u9762\u7684\u4ee3\u7801 type person struct { name string age int } var P person // P\u73b0\u5728\u5c31\u662fperson\u7c7b\u578b\u7684\u53d8\u91cf\u4e86 P.name = \"Astaxie\" // \u8d4b\u503c\"Astaxie\"\u7ed9P\u7684name\u5c5e\u6027. P.age = 25 // \u8d4b\u503c\"25\"\u7ed9\u53d8\u91cfP\u7684age\u5c5e\u6027 fmt.Printf(\"The person's name is %s\", P.name) // \u8bbf\u95eeP\u7684name\u5c5e\u6027. \u9664\u4e86\u4e0a\u9762\u8fd9\u79cdP\u7684\u58f0\u660e\u4f7f\u7528\u4e4b\u5916\uff0c\u8fd8\u6709\u53e6\u5916\u51e0\u79cd\u58f0\u660e\u4f7f\u7528\u65b9\u5f0f\uff1a \u6309\u7167\u987a\u5e8f\u63d0\u4f9b\u521d\u59cb\u5316\u503c P := person{\"Tom\", 25} \u901a\u8fc7 field:value \u7684\u65b9\u5f0f\u521d\u59cb\u5316\uff0c\u8fd9\u6837\u53ef\u4ee5\u4efb\u610f\u987a\u5e8f P := person{age:24, name:\"Tom\"} \u5f53\u7136\u4e5f\u53ef\u4ee5\u901a\u8fc7 new \u51fd\u6570\u5206\u914d\u4e00\u4e2a\u6307\u9488\uff0c\u6b64\u5904P\u7684\u7c7b\u578b\u4e3a *person P := new(person) \u770b\u4e00\u4e2a\u5b8c\u6574\u7684\u4f7f\u7528 struct \u7684\u4f8b\u5b50 package main import \"fmt\" // \u58f0\u660e\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b type person struct { name string age int } // \u6bd4\u8f83\u4e24\u4e2a\u4eba\u7684\u5e74\u9f84\uff0c\u8fd4\u56de\u5e74\u9f84\u5927\u7684\u90a3\u4e2a\u4eba\uff0c\u5e76\u4e14\u8fd4\u56de\u5e74\u9f84\u5dee // struct\u4e5f\u662f\u4f20\u503c\u7684 func Older(p1, p2 person) (person, int) { if p1.age>p2.age { // \u6bd4\u8f83p1\u548cp2\u8fd9\u4e24\u4e2a\u4eba\u7684\u5e74\u9f84 return p1, p1.age-p2.age } return p2, p2.age-p1.age } func main() { var tom person // \u8d4b\u503c\u521d\u59cb\u5316 tom.name, tom.age = \"Tom\", 18 // \u4e24\u4e2a\u5b57\u6bb5\u90fd\u5199\u6e05\u695a\u7684\u521d\u59cb\u5316 bob := person{age:25, name:\"Bob\"} // \u6309\u7167struct\u5b9a\u4e49\u987a\u5e8f\u521d\u59cb\u5316\u503c paul := person{\"Paul\", 43} tb_Older, tb_diff := Older(tom, bob) tp_Older, tp_diff := Older(tom, paul) bp_Older, bp_diff := Older(bob, paul) fmt.Printf(\"Of %s and %s, %s is older by %d years\\n\", tom.name, bob.name, tb_Older.name, tb_diff) fmt.Printf(\"Of %s and %s, %s is older by %d years\\n\", tom.name, paul.name, tp_Older.name, tp_diff) fmt.Printf(\"Of %s and %s, %s is older by %d years\\n\", bob.name, paul.name, bp_Older.name, bp_diff) }","title":"struct\u7c7b\u578b\u7684\u58f0\u660e"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#struct_2","text":"\u5b9a\u4e49\u7684\u65f6\u5019\u662f\u5b57\u6bb5\u540d\u4e0e\u5176\u7c7b\u578b\u4e00\u4e00\u5bf9\u5e94\uff0c\u5b9e\u9645\u4e0aGo\u652f\u6301\u53ea\u63d0\u4f9b\u7c7b\u578b\uff0c\u800c\u4e0d\u5199\u5b57\u6bb5\u540d\u7684\u65b9\u5f0f\uff0c\u4e5f\u5c31\u662f\u533f\u540d\u5b57\u6bb5\uff0c\u4e5f\u79f0\u4e3a\u5d4c\u5165\u5b57\u6bb5\u3002 \u5f53\u533f\u540d\u5b57\u6bb5\u662f\u4e00\u4e2a struct \u7684\u65f6\u5019\uff0c\u90a3\u4e48\u8fd9\u4e2a struct \u6240\u62e5\u6709\u7684\u5168\u90e8\u5b57\u6bb5\u90fd\u88ab\u9690\u5f0f\u5730\u5f15\u5165\u4e86\u5f53\u524d\u5b9a\u4e49\u7684\u8fd9\u4e2a struct \u3002 \u770b\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8ba9\u4e0a\u9762\u8bf4\u7684\u8fd9\u4e9b\u66f4\u5177\u4f53\u5316 package main import \"fmt\" type Human struct { name string age int weight int } type Student struct { Human // \u533f\u540d\u5b57\u6bb5\uff0c\u90a3\u4e48\u9ed8\u8ba4Student\u5c31\u5305\u542b\u4e86Human\u7684\u6240\u6709\u5b57\u6bb5 speciality string } func main() { // \u521d\u59cb\u5316\u4e00\u4e2a\u5b66\u751f mark := Student{Human{\"Mark\", 25, 120}, \"Computer Science\"} // \u8bbf\u95ee\u76f8\u5e94\u7684\u5b57\u6bb5 fmt.Println(\"His name is \", mark.name) fmt.Println(\"His age is \", mark.age) fmt.Println(\"His weight is \", mark.weight) fmt.Println(\"His speciality is \", mark.speciality) // \u4fee\u6539\u5bf9\u5e94\u7684\u5907\u6ce8\u4fe1\u606f mark.speciality = \"AI\" fmt.Println(\"Mark changed his speciality\") fmt.Println(\"His speciality is \", mark.speciality) // \u4fee\u6539\u4ed6\u7684\u5e74\u9f84\u4fe1\u606f fmt.Println(\"Mark become old\") mark.age = 46 fmt.Println(\"His age is\", mark.age) // \u4fee\u6539\u4ed6\u7684\u4f53\u91cd\u4fe1\u606f fmt.Println(\"Mark is not an athlet anymore\") mark.weight += 60 fmt.Println(\"His weight is\", mark.weight) } \u770b\u5230Student\u8bbf\u95ee\u5c5e\u6027age\u548cname\u7684\u65f6\u5019\uff0c\u5c31\u50cf\u8bbf\u95ee\u81ea\u5df1\u6240\u6709\u7528\u7684\u5b57\u6bb5\u4e00\u6837\uff0c\u533f\u540d\u5b57\u6bb5\u5c31\u662f\u8fd9\u6837\uff0c\u80fd\u591f\u5b9e\u73b0\u5b57\u6bb5\u7684\u7ee7\u627f\u3002student\u8fd8\u80fd\u8bbf\u95eeHuman\u8fd9\u4e2a\u5b57\u6bb5\u4f5c\u4e3a\u5b57\u6bb5\u540d\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u4ee3\u7801\u3002 mark.Human = Human{\"Marcus\", 55, 220} mark.Human.age -= 1 \u901a\u8fc7\u533f\u540d\u8bbf\u95ee\u548c\u4fee\u6539\u5b57\u6bb5\u76f8\u5f53\u7684\u6709\u7528\uff0c\u4f46\u662f\u4e0d\u4ec5\u4ec5\u662f struct \u5b57\u6bb5\uff0c\u6240\u6709\u7684\u5185\u7f6e\u7c7b\u578b\u548c\u81ea\u5b9a\u4e49\u7c7b\u578b\u90fd\u662f\u53ef\u4ee5\u4f5c\u4e3a\u533f\u540d\u5b57\u6bb5\u7684\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50 package main import \"fmt\" type Skills []string type Human struct { name string age int weight int } type Student struct { Human // \u533f\u540d\u5b57\u6bb5\uff0cstruct Skills // \u533f\u540d\u5b57\u6bb5\uff0c\u81ea\u5b9a\u4e49\u7684\u7c7b\u578bstring slice int // \u5185\u7f6e\u7c7b\u578b\u4f5c\u4e3a\u533f\u540d\u5b57\u6bb5 speciality string } func main() { // \u521d\u59cb\u5316\u5b66\u751fJane jane := Student{Human:Human{\"Jane\", 35, 100}, speciality:\"Biology\"} // \u73b0\u5728\u8bbf\u95ee\u76f8\u5e94\u7684\u5b57\u6bb5 fmt.Println(\"Her name is \", jane.name) fmt.Println(\"Her age is \", jane.age) fmt.Println(\"Her weight is \", jane.weight) fmt.Println(\"Her speciality is \", jane.speciality) // \u4fee\u6539\u4ed6\u7684skill\u6280\u80fd\u5b57\u6bb5 jane.Skills = []string{\"anatomy\"} fmt.Println(\"Her skills are \", jane.Skills) fmt.Println(\"She acquired two new ones \") jane.Skills = append(jane.Skills, \"physics\", \"golang\") fmt.Println(\"Her skills now are \", jane.Skills) // \u4fee\u6539\u533f\u540d\u5185\u7f6e\u7c7b\u578b\u5b57\u6bb5 jane.int = 3 fmt.Println(\"Her preferred number is\", jane.int) } \u4ece\u4e0a\u9762\u4f8b\u5b50\u770b\u51fa\u6765 struct \u4e0d\u4ec5\u4ec5\u80fd\u591f\u5c06 struct \u4f5c\u4e3a\u533f\u540d\u5b57\u6bb5\uff0c\u81ea\u5b9a\u4e49\u7c7b\u578b\u3001\u5185\u7f6e\u7c7b\u578b\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u533f\u540d\u5b57\u6bb5\uff0c\u800c\u4e14\u53ef\u4ee5\u5728\u76f8\u5e94\u7684\u5b57\u6bb5\u4e0a\u9762\u8fdb\u884c\u51fd\u6570\u64cd\u4f5c\uff08\u5982\u4f8b\u5b50\u4e2d\u7684append\uff09\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u679chuman\u91cc\u9762\u6709\u4e00\u4e2a\u5b57\u6bb5\u53eb\u505aphone\uff0c\u800cstudent\u4e5f\u6709\u4e00\u4e2a\u5b57\u6bb5\u53eb\u505aphone\uff0c\u90a3\u4e48\u8be5\u600e\u4e48\u529e\u5462\uff1f Go\u91cc\u9762\u5f88\u7b80\u5355\u7684\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u6700\u5916\u5c42\u7684\u4f18\u5148\u8bbf\u95ee\uff0c\u4e5f\u5c31\u662f\u5f53\u901a\u8fc7 student.phone \u8bbf\u95ee\u7684\u65f6\u5019\uff0c\u662f\u8bbf\u95eestudent\u91cc\u9762\u7684\u5b57\u6bb5\uff0c\u800c\u4e0d\u662fhuman\u91cc\u9762\u7684\u5b57\u6bb5\u3002 \u8fd9\u6837\u5c31\u5141\u8bb8\u53bb\u91cd\u8f7d\u901a\u8fc7\u533f\u540d\u5b57\u6bb5\u7ee7\u627f\u7684\u4e00\u4e9b\u5b57\u6bb5\uff0c\u5f53\u7136\u5982\u679c\u60f3\u8bbf\u95ee\u91cd\u8f7d\u540e\u5bf9\u5e94\u533f\u540d\u7c7b\u578b\u91cc\u9762\u7684\u5b57\u6bb5\uff0c\u53ef\u4ee5\u901a\u8fc7\u533f\u540d\u5b57\u6bb5\u540d\u6765\u8bbf\u95ee\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50 package main import \"fmt\" type Human struct { name string age int phone string // Human\u7c7b\u578b\u62e5\u6709\u7684\u5b57\u6bb5 } type Employee struct { Human // \u533f\u540d\u5b57\u6bb5Human speciality string phone string // \u96c7\u5458\u7684phone\u5b57\u6bb5 } func main() { Bob := Employee{Human{\"Bob\", 34, \"777-444-XXXX\"}, \"Designer\", \"333-222\"} fmt.Println(\"Bob's work phone is:\", Bob.phone) // \u5982\u679c\u8981\u8bbf\u95eeHuman\u7684phone\u5b57\u6bb5 fmt.Println(\"Bob's personal phone is:\", Bob.Human.phone) }","title":"struct\u7684\u533f\u540d\u5b57\u6bb5"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#method","text":"\u51fd\u6570\u7684\u53e6\u4e00\u79cd\u5f62\u6001\uff0c\u5e26\u6709\u63a5\u6536\u8005\u7684\u51fd\u6570\uff0c\u79f0\u4e3a method","title":"method"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#method_1","text":"\u73b0\u5728\u5047\u8bbe\u6709\u8fd9\u4e48\u4e00\u4e2a\u573a\u666f\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2astruct\u53eb\u505a\u957f\u65b9\u5f62\uff0c\u73b0\u5728\u60f3\u8981\u8ba1\u7b97\u4ed6\u7684\u9762\u79ef\uff0c\u90a3\u4e48\u6309\u7167\u4e00\u822c\u7684\u601d\u8def\u5e94\u8be5\u4f1a\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0 package main import \"fmt\" type Rectangle struct { width, height float64 } func area(r Rectangle) float64 { return r.width*r.height } func main() { r1 := Rectangle{12, 2} r2 := Rectangle{9, 4} fmt.Println(\"Area of r1 is: \", area(r1)) fmt.Println(\"Area of r2 is: \", area(r2)) } \u8fd9\u6bb5\u4ee3\u7801\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6765\u957f\u65b9\u5f62\u7684\u9762\u79ef\uff0c\u4f46\u662farea()\u4e0d\u662f\u4f5c\u4e3aRectangle\u7684\u65b9\u6cd5\u5b9e\u73b0\u7684\uff08\u7c7b\u4f3c\u9762\u5411\u5bf9\u8c61\u91cc\u9762\u7684\u65b9\u6cd5\uff09\uff0c\u800c\u662f\u5c06Rectangle\u7684\u5bf9\u8c61\uff08\u5982r1,r2\uff09\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u51fd\u6570\u8ba1\u7b97\u9762\u79ef\u7684\u3002 \u8fd9\u6837\u5b9e\u73b0\u5f53\u7136\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u662f\u5f53\u9700\u8981\u589e\u52a0\u5706\u5f62\u3001\u6b63\u65b9\u5f62\u3001\u4e94\u8fb9\u5f62\u751a\u81f3\u5176\u5b83\u591a\u8fb9\u5f62\u7684\u65f6\u5019\uff0c\u60f3\u8ba1\u7b97\u4ed6\u4eec\u7684\u9762\u79ef\u7684\u65f6\u5019\u600e\u4e48\u529e\uff1f\u90a3\u5c31\u53ea\u80fd\u589e\u52a0\u65b0\u7684\u51fd\u6570\uff0c\u4f46\u662f\u51fd\u6570\u540d\u5c31\u5fc5\u987b\u8981\u8ddf\u7740\u6362\u4e86\uff0c\u53d8\u6210 area_rectangle, area_circle, area_triangle... \u692d\u5706\u4ee3\u8868\u51fd\u6570, \u800c\u8fd9\u4e9b\u51fd\u6570\u5e76\u4e0d\u4ece\u5c5e\u4e8estruct(\u6216\u8005\u4ee5\u9762\u5411\u5bf9\u8c61\u7684\u672f\u8bed\u6765\u8bf4\uff0c\u5e76\u4e0d\u5c5e\u4e8eclass)\uff0c\u4ed6\u4eec\u662f\u5355\u72ec\u5b58\u5728\u4e8estruct\u5916\u56f4\uff0c\u800c\u975e\u5728\u6982\u5ff5\u4e0a\u5c5e\u4e8e\u67d0\u4e2astruct\u7684\u3002 \u5f88\u663e\u7136\uff0c\u8fd9\u6837\u7684\u5b9e\u73b0\u5e76\u4e0d\u4f18\u96c5\uff0c\u5e76\u4e14\u4ece\u6982\u5ff5\u4e0a\u6765\u8bf4\"\u9762\u79ef\"\u662f\"\u5f62\u72b6\"\u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u5b83\u662f\u5c5e\u4e8e\u8fd9\u4e2a\u7279\u5b9a\u7684\u5f62\u72b6\u7684\uff0c\u5c31\u50cf\u957f\u65b9\u5f62\u7684\u957f\u548c\u5bbd\u4e00\u6837\u3002 \u57fa\u4e8e\u4e0a\u9762\u7684\u539f\u56e0\u6240\u4ee5\u5c31\u6709\u4e86 method \u7684\u6982\u5ff5\uff0c method \u662f\u9644\u5c5e\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684\u7c7b\u578b\u4e0a\u7684\uff0c\u4ed6\u7684\u8bed\u6cd5\u548c\u51fd\u6570\u7684\u58f0\u660e\u8bed\u6cd5\u51e0\u4e4e\u4e00\u6837\uff0c\u53ea\u662f\u5728 func \u540e\u9762\u589e\u52a0\u4e86\u4e00\u4e2areceiver(\u4e5f\u5c31\u662fmethod\u6240\u4f9d\u4ece\u7684\u4e3b\u4f53)\u3002 \u7528\u4e0a\u9762\u63d0\u5230\u7684\u5f62\u72b6\u7684\u4f8b\u5b50\u6765\u8bf4\uff0cmethod area() \u662f\u4f9d\u8d56\u4e8e\u67d0\u4e2a\u5f62\u72b6(\u6bd4\u5982\u8bf4Rectangle)\u6765\u53d1\u751f\u4f5c\u7528\u7684\u3002Rectangle.area()\u7684\u53d1\u51fa\u8005\u662fRectangle\uff0c area()\u662f\u5c5e\u4e8eRectangle\u7684\u65b9\u6cd5\uff0c\u800c\u975e\u4e00\u4e2a\u5916\u56f4\u51fd\u6570\u3002 \u66f4\u5177\u4f53\u5730\u8bf4\uff0cRectangle\u5b58\u5728\u5b57\u6bb5 height \u548c width, \u540c\u65f6\u5b58\u5728\u65b9\u6cd5area(), \u8fd9\u4e9b\u5b57\u6bb5\u548c\u65b9\u6cd5\u90fd\u5c5e\u4e8eRectangle\u3002 \u7528Rob Pike\u7684\u8bdd\u6765\u8bf4\u5c31\u662f\uff1a \"A method is a function with an implicit first argument, called a receiver.\" method\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a func (r ReceiverType) funcName(parameters) (results) \u4e0b\u9762\u7528\u6700\u5f00\u59cb\u7684\u4f8b\u5b50\u7528method\u6765\u5b9e\u73b0\uff1a package main import ( \"fmt\" \"math\" ) type Rectangle struct { width, height float64 } type Circle struct { radius float64 } func (r Rectangle) area() float64 { return r.width*r.height } func (c Circle) area() float64 { return c.radius * c.radius * math.Pi } func main() { r1 := Rectangle{12, 2} r2 := Rectangle{9, 4} c1 := Circle{10} c2 := Circle{25} fmt.Println(\"Area of r1 is: \", r1.area()) fmt.Println(\"Area of r2 is: \", r2.area()) fmt.Println(\"Area of c1 is: \", c1.area()) fmt.Println(\"Area of c2 is: \", c2.area()) } \u5728\u4f7f\u7528method\u7684\u65f6\u5019\u91cd\u8981\u6ce8\u610f\u51e0\u70b9 \u867d\u7136method\u7684\u540d\u5b57\u4e00\u6a21\u4e00\u6837\uff0c\u4f46\u662f\u5982\u679c\u63a5\u6536\u8005\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48method\u5c31\u4e0d\u4e00\u6837 method\u91cc\u9762\u53ef\u4ee5\u8bbf\u95ee\u63a5\u6536\u8005\u7684\u5b57\u6bb5 \u8c03\u7528method\u901a\u8fc7 . \u8bbf\u95ee\uff0c\u5c31\u50cfstruct\u91cc\u9762\u8bbf\u95ee\u5b57\u6bb5\u4e00\u6837 \u5728\u4e0a\u4f8b\uff0cmethod area() \u5206\u522b\u5c5e\u4e8eRectangle\u548cCircle\uff0c \u4e8e\u662f\u4ed6\u4eec\u7684 Receiver \u5c31\u53d8\u6210\u4e86Rectangle \u548c Circle, \u6216\u8005\u8bf4\uff0c\u8fd9\u4e2aarea()\u65b9\u6cd5 \u662f\u7531 Rectangle/Circle \u53d1\u51fa\u7684\u3002 \u503c\u5f97\u8bf4\u660e\u7684\u4e00\u70b9\u662f\uff0c\u56fe\u793a\u4e2dmethod\u7528\u865a\u7ebf\u6807\u51fa\uff0c\u610f\u601d\u662f\u6b64\u5904\u65b9\u6cd5\u7684Receiver\u662f\u4ee5\u503c\u4f20\u9012\uff0c\u800c\u975e\u5f15\u7528\u4f20\u9012\uff0c\u662f\u7684\uff0cReceiver\u8fd8\u53ef\u4ee5\u662f\u6307\u9488, \u4e24\u8005\u7684\u5dee\u522b\u5728\u4e8e, \u6307\u9488\u4f5c\u4e3aReceiver\u4f1a\u5bf9\u5b9e\u4f8b\u5bf9\u8c61\u7684\u5185\u5bb9\u53d1\u751f\u64cd\u4f5c,\u800c\u666e\u901a\u7c7b\u578b\u4f5c\u4e3aReceiver\u4ec5\u4ec5\u662f\u4ee5\u526f\u672c\u4f5c\u4e3a\u64cd\u4f5c\u5bf9\u8c61,\u5e76\u4e0d\u5bf9\u539f\u5b9e\u4f8b\u5bf9\u8c61\u53d1\u751f\u64cd\u4f5c\u3002\u540e\u6587\u5bf9\u6b64\u4f1a\u6709\u8be6\u7ec6\u8bba\u8ff0\u3002 \u90a3\u662f\u4e0d\u662fmethod\u53ea\u80fd\u4f5c\u7528\u5728struct\u4e0a\u9762\u5462\uff1f\u5f53\u7136\u4e0d\u662f\uff0c\u4ed6\u53ef\u4ee5\u5b9a\u4e49\u5728\u4efb\u4f55\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\u3001\u5185\u7f6e\u7c7b\u578b\u3001struct\u7b49\u5404\u79cd\u7c7b\u578b\u4e0a\u9762\u3002\u4ec0\u4e48\u53eb\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e0d\u5c31\u662fstruct\uff0c\u5176\u5b9e\u4e0d\u662f\u8fd9\u6837\u7684\uff0cstruct\u53ea\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u91cc\u9762\u4e00\u79cd\u6bd4\u8f83\u7279\u6b8a\u7684\u7c7b\u578b\u800c\u5df2\uff0c\u8fd8\u6709\u5176\u4ed6\u81ea\u5b9a\u4e49\u7c7b\u578b\u7533\u660e\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u8fd9\u6837\u7684\u7533\u660e\u6765\u5b9e\u73b0\u3002 type typeName typeLiteral \u8bf7\u770b\u4e0b\u9762\u8fd9\u4e2a\u7533\u660e\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u4ee3\u7801 type ages int type money float32 type months map[string]int m := months { \"January\":31, \"February\":28, ... \"December\":31, } \u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u4ee3\u7801\u91cc\u9762\u5b9a\u4e49\u6709\u610f\u4e49\u7684\u7c7b\u578b\u4e86\uff0c\u5b9e\u9645\u4e0a\u53ea\u662f\u4e00\u4e2a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u522b\u540d,\u6709\u70b9\u7c7b\u4f3c\u4e8ec\u4e2d\u7684typedef\uff0c\u4f8b\u5982\u4e0a\u9762ages\u66ff\u4ee3\u4e86int\uff0c\u56de\u5230 method \u53ef\u4ee5\u5728\u4efb\u4f55\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e2d\u5b9a\u4e49\u4efb\u610f\u591a\u7684 method \uff0c\u63a5\u4e0b\u6765\u8ba9\u770b\u4e00\u4e2a\u590d\u6742\u4e00\u70b9\u7684\u4f8b\u5b50 package main import \"fmt\" const( WHITE = iota BLACK BLUE RED YELLOW ) type Color byte type Box struct { width, height, depth float64 color Color } type BoxList []Box //a slice of boxes func (b Box) Volume() float64 { return b.width * b.height * b.depth } func (b *Box) SetColor(c Color) { b.color = c } func (bl BoxList) BiggestColor() Color { v := 0.00 k := Color(WHITE) for _, b := range bl { if bv := b.Volume(); bv > v { v = bv k = b.color } } return k } func (bl BoxList) PaintItBlack() { for i := range bl { bl[i].SetColor(BLACK) } } func (c Color) String() string { strings := []string {\"WHITE\", \"BLACK\", \"BLUE\", \"RED\", \"YELLOW\"} return strings[c] } func main() { boxes := BoxList { Box{4, 4, 4, RED}, Box{10, 10, 1, YELLOW}, Box{1, 1, 20, BLACK}, Box{10, 10, 1, BLUE}, Box{10, 30, 1, WHITE}, Box{20, 20, 20, YELLOW}, } fmt.Printf(\"We have %d boxes in our set\\n\", len(boxes)) fmt.Println(\"The volume of the first one is\", boxes[0].Volume(), \"cm\u00b3\") fmt.Println(\"The color of the last one is\",boxes[len(boxes)-1].color.String()) fmt.Println(\"The biggest one is\", boxes.BiggestColor().String()) fmt.Println(\"Let's paint them all black\") boxes.PaintItBlack() fmt.Println(\"The color of the second one is\", boxes[1].color.String()) fmt.Println(\"Obviously, now, the biggest one is\", boxes.BiggestColor().String()) } \u4e0a\u9762\u7684\u4ee3\u7801\u901a\u8fc7const\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5e38\u91cf\uff0c\u7136\u540e\u5b9a\u4e49\u4e86\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7c7b\u578b Color\u4f5c\u4e3abyte\u7684\u522b\u540d \u5b9a\u4e49\u4e86\u4e00\u4e2astruct:Box\uff0c\u542b\u6709\u4e09\u4e2a\u957f\u5bbd\u9ad8\u5b57\u6bb5\u548c\u4e00\u4e2a\u989c\u8272\u5c5e\u6027 \u5b9a\u4e49\u4e86\u4e00\u4e2aslice:BoxList\uff0c\u542b\u6709Box \u7136\u540e\u4ee5\u4e0a\u9762\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e3a\u63a5\u6536\u8005\u5b9a\u4e49\u4e86\u4e00\u4e9bmethod Volume()\u5b9a\u4e49\u4e86\u63a5\u6536\u8005\u4e3aBox\uff0c\u8fd4\u56deBox\u7684\u5bb9\u91cf SetColor(c Color)\uff0c\u628aBox\u7684\u989c\u8272\u6539\u4e3ac BiggestColor()\u5b9a\u5728\u5728BoxList\u4e0a\u9762\uff0c\u8fd4\u56delist\u91cc\u9762\u5bb9\u91cf\u6700\u5927\u7684\u989c\u8272 PaintItBlack()\u628aBoxList\u91cc\u9762\u6240\u6709Box\u7684\u989c\u8272\u5168\u90e8\u53d8\u6210\u9ed1\u8272 String()\u5b9a\u4e49\u5728Color\u4e0a\u9762\uff0c\u8fd4\u56deColor\u7684\u5177\u4f53\u989c\u8272(\u5b57\u7b26\u4e32\u683c\u5f0f) \u4e0a\u9762\u7684\u4ee3\u7801\u901a\u8fc7\u6587\u5b57\u63cf\u8ff0\u51fa\u6765\u4e4b\u540e\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1f\u4e00\u822c\u89e3\u51b3\u95ee\u9898\u90fd\u662f\u901a\u8fc7\u95ee\u9898\u7684\u63cf\u8ff0\uff0c\u53bb\u5199\u76f8\u5e94\u7684\u4ee3\u7801\u5b9e\u73b0\u3002","title":"method"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#receiver","text":"\u73b0\u5728\u8ba9\u56de\u8fc7\u5934\u6765\u770b\u770bSetColor\u8fd9\u4e2amethod\uff0c\u5b83\u7684receiver\u662f\u4e00\u4e2a\u6307\u5411Box\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u4f7f\u7528*Box\u3002 \u5b9a\u4e49SetColor\u7684\u771f\u6b63\u76ee\u7684\u662f\u60f3\u6539\u53d8\u8fd9\u4e2aBox\u7684\u989c\u8272\uff0c\u5982\u679c\u4e0d\u4f20Box\u7684\u6307\u9488\uff0c\u90a3\u4e48SetColor\u63a5\u53d7\u7684\u5176\u5b9e\u662fBox\u7684\u4e00\u4e2acopy\uff0c\u4e5f\u5c31\u662f\u8bf4method\u5185\u5bf9\u4e8e\u989c\u8272\u503c\u7684\u4fee\u6539\uff0c\u5176\u5b9e\u53ea\u4f5c\u7528\u4e8eBox\u7684copy\uff0c\u800c\u4e0d\u662f\u771f\u6b63\u7684Box\u3002\u6240\u4ee5\u9700\u8981\u4f20\u5165\u6307\u9488\u3002 \u8fd9\u91cc\u53ef\u4ee5\u628areceiver\u5f53\u4f5cmethod\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u6765\u770b\uff0c\u7136\u540e\u7ed3\u5408\u524d\u9762\u51fd\u6570\u8bb2\u89e3\u7684\u4f20\u503c\u548c\u4f20\u5f15\u7528\u5c31\u4e0d\u96be\u7406\u89e3 \u8fd9\u91cc\u4e5f\u8bb8\u4f1a\u95eeSetColor\u51fd\u6570\u91cc\u9762\u5e94\u8be5\u8fd9\u6837\u5b9a\u4e49 *b.Color=c ,\u800c\u4e0d\u662f b.Color=c ,\u9700\u8981\u8bfb\u53d6\u5230\u6307\u9488\u76f8\u5e94\u7684\u503c\u3002 \u5176\u5b9eGo\u91cc\u9762\u8fd9\u4e24\u79cd\u65b9\u5f0f\u90fd\u662f\u6b63\u786e\u7684\uff0c\u5f53\u7528\u6307\u9488\u53bb\u8bbf\u95ee\u76f8\u5e94\u7684\u5b57\u6bb5\u65f6(\u867d\u7136\u6307\u9488\u6ca1\u6709\u4efb\u4f55\u7684\u5b57\u6bb5)\uff0cGo\u77e5\u9053\u8981\u901a\u8fc7\u6307\u9488\u53bb\u83b7\u53d6\u8fd9\u4e2a\u503c\u3002PaintItBlack\u91cc\u9762\u8c03\u7528SetColor\u7684\u65f6\u5019\u662f\u4e0d\u662f\u5e94\u8be5\u5199\u6210 (&bl[i]).SetColor(BLACK) \uff0c\u56e0\u4e3aSetColor\u7684receiver\u662f*Box\uff0c\u800c\u4e0d\u662fBox\u3002\u8fd9\u4e24\u79cd\u65b9\u5f0f\u90fd\u53ef\u4ee5\uff0c\u56e0\u4e3aGo\u77e5\u9053receiver\u662f\u6307\u9488\uff0c\u4ed6\u81ea\u52a8\u8f6c\u4e86\u3002 \u4e5f\u5c31\u662f\u8bf4\uff1a \u5982\u679c\u4e00\u4e2amethod\u7684receiver\u662f*T,\u53ef\u4ee5\u5728\u4e00\u4e2aT\u7c7b\u578b\u7684\u5b9e\u4f8b\u53d8\u91cfV\u4e0a\u9762\u8c03\u7528\u8fd9\u4e2amethod\uff0c\u800c\u4e0d\u9700\u8981&V\u53bb\u8c03\u7528\u8fd9\u4e2amethod \u7c7b\u4f3c\u7684 \u5982\u679c\u4e00\u4e2amethod\u7684receiver\u662fT\uff0c\u53ef\u4ee5\u5728\u4e00\u4e2a T\u7c7b\u578b\u7684\u53d8\u91cfP\u4e0a\u9762\u8c03\u7528\u8fd9\u4e2amethod\uff0c\u800c\u4e0d\u9700\u8981 P\u53bb\u8c03\u7528\u8fd9\u4e2amethod \u6240\u4ee5\u4e0d\u7528\u62c5\u5fc3\u662f\u8c03\u7528\u7684\u6307\u9488\u7684method\u8fd8\u662f\u4e0d\u662f\u6307\u9488\u7684method\uff0cGo\u77e5\u9053\u8981\u505a\u7684\u4e00\u5207\uff0c\u8fd9\u5bf9\u4e8e\u6709\u591a\u5e74C/C++\u7f16\u7a0b\u7ecf\u9a8c\u7684\u540c\u5b66\u6765\u8bf4\uff0c\u771f\u662f\u89e3\u51b3\u4e86\u4e00\u4e2a\u5f88\u5927\u7684\u75db\u82e6\u3002","title":"\u6307\u9488\u4f5c\u4e3areceiver"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#method_2","text":"\u901a\u8fc7\u5b57\u6bb5\u7684\u7ee7\u627f\u7684\u5b66\u4e60\uff0c\u53d1\u73b0Go\u7684\u4e00\u4e2a\u795e\u5947\u4e4b\u5904\uff0cmethod\u4e5f\u662f\u53ef\u4ee5\u7ee7\u627f\u7684\u3002\u5982\u679c\u533f\u540d\u5b57\u6bb5\u5b9e\u73b0\u4e86\u4e00\u4e2amethod\uff0c\u90a3\u4e48\u5305\u542b\u8fd9\u4e2a\u533f\u540d\u5b57\u6bb5\u7684struct\u4e5f\u80fd\u8c03\u7528\u8be5method\u3002\u6765\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50 package main import \"fmt\" type Human struct { name string age int phone string } type Student struct { Human //\u533f\u540d\u5b57\u6bb5 school string } type Employee struct { Human //\u533f\u540d\u5b57\u6bb5 company string } //\u5728human\u4e0a\u9762\u5b9a\u4e49\u4e86\u4e00\u4e2amethod func (h *Human) SayHi() { fmt.Printf(\"Hi, I am %s you can call me on %s\\n\", h.name, h.phone) } func main() { mark := Student{Human{\"Mark\", 25, \"222-222-YYYY\"}, \"MIT\"} sam := Employee{Human{\"Sam\", 45, \"111-888-XXXX\"}, \"Golang Inc\"} mark.SayHi() sam.SayHi() }","title":"method\u7ee7\u627f"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#method_3","text":"\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679cEmployee\u60f3\u8981\u5b9e\u73b0\u81ea\u5df1\u7684SayHi,\u600e\u4e48\u529e\uff1f\u7b80\u5355\uff0c\u548c\u533f\u540d\u5b57\u6bb5\u51b2\u7a81\u4e00\u6837\u7684\u9053\u7406\uff0c\u53ef\u4ee5\u5728Employee\u4e0a\u9762\u5b9a\u4e49\u4e00\u4e2amethod\uff0c\u91cd\u5199\u4e86\u533f\u540d\u5b57\u6bb5\u7684\u65b9\u6cd5\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50 package main import \"fmt\" type Human struct { name string age int phone string } type Student struct { Human //\u533f\u540d\u5b57\u6bb5 school string } type Employee struct { Human //\u533f\u540d\u5b57\u6bb5 company string } //Human\u5b9a\u4e49method func (h *Human) SayHi() { fmt.Printf(\"Hi, I am %s you can call me on %s\\n\", h.name, h.phone) } //Employee\u7684method\u91cd\u5199Human\u7684method func (e *Employee) SayHi() { fmt.Printf(\"Hi, I am %s, I work at %s. Call me on %s\\n\", e.name, e.company, e.phone) //Yes you can split into 2 lines here. } func main() { mark := Student{Human{\"Mark\", 25, \"222-222-YYYY\"}, \"MIT\"} sam := Employee{Human{\"Sam\", 45, \"111-888-XXXX\"}, \"Golang Inc\"} mark.SayHi() sam.SayHi() } \u901a\u8fc7\u8fd9\u4e9b\u5185\u5bb9\uff0c\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u57fa\u672c\u7684\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u4e86\uff0c\u4f46\u662fGo\u91cc\u9762\u7684\u9762\u5411\u5bf9\u8c61\u662f\u5982\u6b64\u7684\u7b80\u5355\uff0c\u6ca1\u6709\u4efb\u4f55\u7684\u79c1\u6709\u3001\u516c\u6709\u5173\u952e\u5b57\uff0c\u901a\u8fc7\u5927\u5c0f\u5199\u6765\u5b9e\u73b0(\u5927\u5199\u5f00\u5934\u7684\u4e3a\u516c\u6709\uff0c\u5c0f\u5199\u5f00\u5934\u7684\u4e3a\u79c1\u6709)\uff0c\u65b9\u6cd5\u4e5f\u540c\u6837\u9002\u7528\u8fd9\u4e2a\u539f\u5219\u3002","title":"method\u91cd\u5199"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#interface","text":"Go\u8bed\u8a00\u91cc\u9762\u8bbe\u8ba1\u6700\u7cbe\u5999\u7684\u5e94\u8be5\u7b97 interface \uff0c\u5b83\u8ba9\u9762\u5411\u5bf9\u8c61\uff0c\u5185\u5bb9\u7ec4\u7ec7\u5b9e\u73b0\u975e\u5e38\u7684\u65b9\u4fbf","title":"interface"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#interface_1","text":"\u7b80\u5355\u7684\u8bf4\uff0c interface \u662f\u4e00\u7ec4 method \u7b7e\u540d\u7684\u7ec4\u5408\uff0c\u901a\u8fc7 interface \u6765\u5b9a\u4e49\u5bf9\u8c61\u7684\u4e00\u7ec4\u884c\u4e3a\u3002 \u524d\u9762\u4f8b\u5b50\u4e2d Student \u548c Employee \u90fd\u80fd SayHi \uff0c\u867d\u7136\u4ed6\u4eec\u7684\u5185\u90e8\u5b9e\u73b0\u4e0d\u4e00\u6837\uff0c\u4f46\u662f\u90a3\u4e0d\u91cd\u8981\uff0c\u91cd\u8981\u7684\u662f\u4ed6\u4eec\u90fd\u80fd say hi \u7ee7\u7eed\u505a\u66f4\u591a\u7684\u6269\u5c55\uff0c Student \u548c Employee \u5b9e\u73b0\u53e6\u4e00\u4e2a\u65b9\u6cd5 Sing \uff0c\u7136\u540e Student \u5b9e\u73b0\u65b9\u6cd5 BorrowMoney \u800c Employee \u5b9e\u73b0 SpendSalary \u3002 \u8fd9\u6837 Student \u5b9e\u73b0\u4e86\u4e09\u4e2a\u65b9\u6cd5\uff1a SayHi \u3001 Sing \u3001 BorrowMoney \uff1b\u800c Employee \u5b9e\u73b0\u4e86 SayHi \u3001 Sing \u3001 SpendSalary \u3002 \u4e0a\u9762\u8fd9\u4e9b\u65b9\u6cd5\u7684\u7ec4\u5408\u79f0\u4e3a interface (\u88ab\u5bf9\u8c61 Student \u548c Employee \u5b9e\u73b0)\u3002\u4f8b\u5982 Student \u548c Employee \u90fd\u5b9e\u73b0\u4e86 interface \uff1a SayHi \u548c Sing \uff0c\u4e5f\u5c31\u662f\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u662f\u8be5 interface \u7c7b\u578b\u3002\u800c Employee \u6ca1\u6709\u5b9e\u73b0\u8fd9\u4e2a interface\uff1aSayHi\u3001Sing \u548c BorrowMoney \uff0c\u56e0\u4e3a Employee \u6ca1\u6709\u5b9e\u73b0 BorrowMoney \u8fd9\u4e2a\u65b9\u6cd5\u3002","title":"\u4ec0\u4e48\u662finterface"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#interface_2","text":"interface \u7c7b\u578b\u5b9a\u4e49\u4e86\u4e00\u7ec4\u65b9\u6cd5\uff0c\u5982\u679c\u67d0\u4e2a\u5bf9\u8c61\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u5219\u6b64\u5bf9\u8c61\u5c31\u5b9e\u73b0\u4e86\u6b64\u63a5\u53e3\u3002\u8be6\u7ec6\u7684\u8bed\u6cd5\u53c2\u8003\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50 type Human struct { name string age int phone string } type Student struct { Human //\u533f\u540d\u5b57\u6bb5Human school string loan float32 } type Employee struct { Human //\u533f\u540d\u5b57\u6bb5Human company string money float32 } //Human\u5bf9\u8c61\u5b9e\u73b0Sayhi\u65b9\u6cd5 func (h *Human) SayHi() { fmt.Printf(\"Hi, I am %s you can call me on %s\\n\", h.name, h.phone) } // Human\u5bf9\u8c61\u5b9e\u73b0Sing\u65b9\u6cd5 func (h *Human) Sing(lyrics string) { fmt.Println(\"La la, la la la, la la la la la...\", lyrics) } //Human\u5bf9\u8c61\u5b9e\u73b0Guzzle\u65b9\u6cd5 func (h *Human) Guzzle(beerStein string) { fmt.Println(\"Guzzle Guzzle Guzzle...\", beerStein) } // Employee\u91cd\u8f7dHuman\u7684Sayhi\u65b9\u6cd5 func (e *Employee) SayHi() { fmt.Printf(\"Hi, I am %s, I work at %s. Call me on %s\\n\", e.name, e.company, e.phone) //\u6b64\u53e5\u53ef\u4ee5\u5206\u6210\u591a\u884c } //Student\u5b9e\u73b0BorrowMoney\u65b9\u6cd5 func (s *Student) BorrowMoney(amount float32) { s.loan += amount // (again and again and...) } //Employee\u5b9e\u73b0SpendSalary\u65b9\u6cd5 func (e *Employee) SpendSalary(amount float32) { e.money -= amount // More vodka please!!! Get me through the day! } // \u5b9a\u4e49interface type Men interface { SayHi() Sing(lyrics string) Guzzle(beerStein string) } type YoungChap interface { SayHi() Sing(song string) BorrowMoney(amount float32) } type ElderlyGent interface { SayHi() Sing(song string) SpendSalary(amount float32) } \u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u77e5\u9053\uff0cinterface\u53ef\u4ee5\u88ab\u4efb\u610f\u7684\u5bf9\u8c61\u5b9e\u73b0\u3002\u770b\u5230\u4e0a\u9762\u7684Men interface\u88abHuman\u3001Student\u548cEmployee\u5b9e\u73b0\u3002\u540c\u7406\uff0c\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u591a\u4e2ainterface\uff0c\u4f8b\u5982\u4e0a\u9762\u7684Student\u5b9e\u73b0\u4e86Men\u548cYoungChap\u4e24\u4e2ainterface\u3002 \u6700\u540e\uff0c\u4efb\u610f\u7684\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u7a7ainterface(\u8fd9\u6837\u5b9a\u4e49\uff1ainterface{})\uff0c\u4e5f\u5c31\u662f\u5305\u542b0\u4e2amethod\u7684interface\u3002","title":"interface\u7c7b\u578b"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#interface_3","text":"\u90a3\u4e48interface\u91cc\u9762\u5230\u5e95\u80fd\u5b58\u4ec0\u4e48\u503c\u5462\uff1f\u5982\u679c\u5b9a\u4e49\u4e86\u4e00\u4e2ainterface\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u8fd9\u4e2a\u53d8\u91cf\u91cc\u9762\u53ef\u4ee5\u5b58\u5b9e\u73b0\u8fd9\u4e2ainterface\u7684\u4efb\u610f\u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u4f8b\u5982\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2aMen interface\u7c7b\u578b\u7684\u53d8\u91cfm\uff0c\u90a3\u4e48m\u91cc\u9762\u53ef\u4ee5\u5b58Human\u3001Student\u6216\u8005Employee\u503c\u3002 \u56e0\u4e3am\u80fd\u591f\u6301\u6709\u8fd9\u4e09\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u6240\u4ee5\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5305\u542bMen\u7c7b\u578b\u5143\u7d20\u7684slice\uff0c\u8fd9\u4e2aslice\u53ef\u4ee5\u88ab\u8d4b\u4e88\u5b9e\u73b0\u4e86Men\u63a5\u53e3\u7684\u4efb\u610f\u7ed3\u6784\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u548c\u4f20\u7edf\u610f\u4e49\u4e0a\u9762\u7684slice\u6709\u6240\u4e0d\u540c\u3002 \u6765\u770b\u4e00\u4e0b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: package main import \"fmt\" type Human struct { name string age int phone string } type Student struct { Human //\u533f\u540d\u5b57\u6bb5 school string loan float32 } type Employee struct { Human //\u533f\u540d\u5b57\u6bb5 company string money float32 } //Human\u5b9e\u73b0SayHi\u65b9\u6cd5 func (h Human) SayHi() { fmt.Printf(\"Hi, I am %s you can call me on %s\\n\", h.name, h.phone) } //Human\u5b9e\u73b0Sing\u65b9\u6cd5 func (h Human) Sing(lyrics string) { fmt.Println(\"La la la la...\", lyrics) } //Employee\u91cd\u8f7dHuman\u7684SayHi\u65b9\u6cd5 func (e Employee) SayHi() { fmt.Printf(\"Hi, I am %s, I work at %s. Call me on %s\\n\", e.name, e.company, e.phone) } // Interface Men\u88abHuman,Student\u548cEmployee\u5b9e\u73b0 // \u56e0\u4e3a\u8fd9\u4e09\u4e2a\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u8fd9\u4e24\u4e2a\u65b9\u6cd5 type Men interface { SayHi() Sing(lyrics string) } func main() { mike := Student{Human{\"Mike\", 25, \"222-222-XXX\"}, \"MIT\", 0.00} paul := Student{Human{\"Paul\", 26, \"111-222-XXX\"}, \"Harvard\", 100} sam := Employee{Human{\"Sam\", 36, \"444-222-XXX\"}, \"Golang Inc.\", 1000} tom := Employee{Human{\"Tom\", 37, \"222-444-XXX\"}, \"Things Ltd.\", 5000} //\u5b9a\u4e49Men\u7c7b\u578b\u7684\u53d8\u91cfi var i Men //i\u80fd\u5b58\u50a8Student i = mike fmt.Println(\"This is Mike, a Student:\") i.SayHi() i.Sing(\"November rain\") //i\u4e5f\u80fd\u5b58\u50a8Employee i = tom fmt.Println(\"This is tom, an Employee:\") i.SayHi() i.Sing(\"Born to be wild\") //\u5b9a\u4e49\u4e86slice Men fmt.Println(\"Let's use a slice of Men and see what happens\") x := make([]Men, 3) //\u8fd9\u4e09\u4e2a\u90fd\u662f\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20\uff0c\u4f46\u662f\u4ed6\u4eec\u5b9e\u73b0\u4e86interface\u540c\u4e00\u4e2a\u63a5\u53e3 x[0], x[1], x[2] = paul, sam, mike for _, value := range x{ value.SayHi() } } \u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u53d1\u73b0 interface \u5c31\u662f\u4e00\u7ec4\u62bd\u8c61\u65b9\u6cd5\u7684\u96c6\u5408\uff0c\u5b83\u5fc5\u987b\u7531\u5176\u4ed6\u975einterface\u7c7b\u578b\u5b9e\u73b0\uff0c\u800c\u4e0d\u80fd\u81ea\u6211\u5b9e\u73b0\uff0c Go\u901a\u8fc7interface\u5b9e\u73b0\u4e86 duck-typing :\u5373\"\u5f53\u770b\u5230\u4e00\u53ea\u9e1f\u8d70\u8d77\u6765\u50cf\u9e2d\u5b50\u3001\u6e38\u6cf3\u8d77\u6765\u50cf\u9e2d\u5b50\u3001\u53eb\u8d77\u6765\u4e5f\u50cf\u9e2d\u5b50\uff0c\u90a3\u4e48\u8fd9\u53ea\u9e1f\u5c31\u53ef\u4ee5\u88ab\u79f0\u4e3a\u9e2d\u5b50\"\u3002","title":"interface\u503c"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#interface_4","text":"\u7a7ainterface(interface{})\u4e0d\u5305\u542b\u4efb\u4f55\u7684method\uff0c\u6b63\u56e0\u4e3a\u5982\u6b64\uff0c\u6240\u6709\u7684\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u7a7ainterface\u3002\u7a7ainterface\u5bf9\u4e8e\u63cf\u8ff0\u8d77\u4e0d\u5230\u4efb\u4f55\u7684\u4f5c\u7528(\u56e0\u4e3a\u5b83\u4e0d\u5305\u542b\u4efb\u4f55\u7684method\uff09\uff0c\u4f46\u662f\u7a7ainterface\u9700\u8981\u5b58\u50a8\u4efb\u610f\u7c7b\u578b\u7684\u6570\u503c\u7684\u65f6\u5019\u76f8\u5f53\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u7c7b\u578b\u7684\u6570\u503c\u3002\u5b83\u6709\u70b9\u7c7b\u4f3c\u4e8eC\u8bed\u8a00\u7684void*\u7c7b\u578b\u3002 // \u5b9a\u4e49a\u4e3a\u7a7a\u63a5\u53e3 var a interface{} var i int = 5 s := \"Hello world\" // a\u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u7c7b\u578b\u7684\u6570\u503c a = i a = s \u4e00\u4e2a\u51fd\u6570\u628ainterface{}\u4f5c\u4e3a\u53c2\u6570\uff0c\u90a3\u4e48\u4ed6\u53ef\u4ee5\u63a5\u53d7\u4efb\u610f\u7c7b\u578b\u7684\u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de interface{} ,\u90a3\u4e48\u4e5f\u5c31\u53ef\u4ee5\u8fd4\u56de\u4efb\u610f\u7c7b\u578b\u7684\u503c\u3002\u662f\u4e0d\u662f\u5f88\u6709\u7528\u554a\uff01","title":"\u7a7ainterface"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#interface_5","text":"interface\u7684\u53d8\u91cf\u53ef\u4ee5\u6301\u6709\u4efb\u610f\u5b9e\u73b0\u8be5interface\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u8fd9\u7ed9\u7f16\u5199\u51fd\u6570(\u5305\u62ecmethod)\u63d0\u4f9b\u4e86\u4e00\u4e9b\u989d\u5916\u7684\u601d\u8003\uff0c\u662f\u4e0d\u662f\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49interface\u53c2\u6570\uff0c\u8ba9\u51fd\u6570\u63a5\u53d7\u5404\u79cd\u7c7b\u578b\u7684\u53c2\u6570\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1afmt.Println\u662f\u5e38\u7528\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u662f\u5426\u6ce8\u610f\u5230\u5b83\u53ef\u4ee5\u63a5\u53d7\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e\u3002\u6253\u5f00fmt\u7684\u6e90\u7801\u6587\u4ef6\uff0c\u4f1a\u770b\u5230\u8fd9\u6837\u4e00\u4e2a\u5b9a\u4e49: type Stringer interface { String() string } \u4e5f\u5c31\u662f\u8bf4\uff0c\u4efb\u4f55\u5b9e\u73b0\u4e86String\u65b9\u6cd5\u7684\u7c7b\u578b\u90fd\u80fd\u4f5c\u4e3a\u53c2\u6570\u88ab fmt.Println \u8c03\u7528,\u6765\u8bd5\u4e00\u8bd5 package main import ( \"fmt\" \"strconv\" ) type Human struct { name string age int phone string } // \u901a\u8fc7\u8fd9\u4e2a\u65b9\u6cd5 Human \u5b9e\u73b0\u4e86 fmt.Stringer func (h Human) String() string { return \"\u2770\"+h.name+\" - \"+strconv.Itoa(h.age)+\" years - \u2706 \" +h.phone+\"\u2771\" } func main() { Bob := Human{\"Bob\", 39, \"000-7777-XXX\"} fmt.Println(\"This Human is : \", Bob) } \u73b0\u5728\u518d\u56de\u987e\u4e00\u4e0b\u524d\u9762\u7684Box\u793a\u4f8b\uff0c\u53d1\u73b0Color\u7ed3\u6784\u4e5f\u5b9a\u4e49\u4e86\u4e00\u4e2a method\uff1aString \u3002\u5176\u5b9e\u8fd9\u4e5f\u662f\u5b9e\u73b0\u4e86 fmt.Stringer \u8fd9\u4e2a interface \uff0c\u5373\u5982\u679c\u9700\u8981\u67d0\u4e2a\u7c7b\u578b\u80fd\u88abfmt\u5305\u4ee5\u7279\u6b8a\u7684\u683c\u5f0f\u8f93\u51fa\uff0c\u5c31\u5fc5\u987b\u5b9e\u73b0 Stringer \u8fd9\u4e2a\u63a5\u53e3\u3002\u5982\u679c\u6ca1\u6709\u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\uff0cfmt\u5c06\u4ee5\u9ed8\u8ba4\u7684\u65b9\u5f0f\u8f93\u51fa\u3002 //\u5b9e\u73b0\u540c\u6837\u7684\u529f\u80fd fmt.Println(\"The biggest one is\", boxes.BiggestsColor().String()) fmt.Println(\"The biggest one is\", boxes.BiggestsColor()) \u6ce8\uff1a\u5b9e\u73b0\u4e86 error \u63a5\u53e3\u7684\u5bf9\u8c61\uff08\u5373\u5b9e\u73b0\u4e86Error() string\u7684\u5bf9\u8c61\uff09\uff0c\u4f7f\u7528fmt\u8f93\u51fa\u65f6\uff0c\u4f1a\u8c03\u7528Error()\u65b9\u6cd5\uff0c\u56e0\u6b64\u4e0d\u5fc5\u518d\u5b9a\u4e49String()\u65b9\u6cd5\u4e86\u3002","title":"interface\u51fd\u6570\u53c2\u6570"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#interface_6","text":"interface\u7684\u53d8\u91cf\u91cc\u9762\u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u7c7b\u578b\u7684\u6570\u503c(\u8be5\u7c7b\u578b\u5b9e\u73b0\u4e86interface)\u3002\u90a3\u4e48\u600e\u4e48\u53cd\u5411\u77e5\u9053\u8fd9\u4e2a\u53d8\u91cf\u91cc\u9762\u5b9e\u9645\u4fdd\u5b58\u4e86\u7684\u662f\u54ea\u4e2a\u7c7b\u578b\u7684\u5bf9\u8c61\u5462\uff1f\u76ee\u524d\u5e38\u7528\u7684\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a Comma-ok\u65ad\u8a00 Go\u8bed\u8a00\u91cc\u9762\u6709\u4e00\u4e2a\u8bed\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\u662f\u5426\u662f\u8be5\u7c7b\u578b\u7684\u53d8\u91cf\uff1a value, ok = element.(T)\uff0c\u8fd9\u91ccvalue\u5c31\u662f\u53d8\u91cf\u7684\u503c\uff0cok\u662f\u4e00\u4e2abool\u7c7b\u578b\uff0celement\u662finterface\u53d8\u91cf\uff0cT\u662f\u65ad\u8a00\u7684\u7c7b\u578b\u3002 \u5982\u679celement\u91cc\u9762\u786e\u5b9e\u5b58\u50a8\u4e86T\u7c7b\u578b\u7684\u6570\u503c\uff0c\u90a3\u4e48ok\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002 \u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u66f4\u52a0\u6df1\u5165\u7684\u7406\u89e3\u3002 package main import ( \"fmt\" \"strconv\" ) type Element interface{} type List [] Element type Person struct { name string age int } //\u5b9a\u4e49\u4e86String\u65b9\u6cd5\uff0c\u5b9e\u73b0\u4e86fmt.Stringer func (p Person) String() string { return \"(name: \" + p.name + \" - age: \"+strconv.Itoa(p.age)+ \" years)\" } func main() { list := make(List, 3) list[0] = 1 // an int list[1] = \"Hello\" // a string list[2] = Person{\"Dennis\", 70} for index, element := range list { if value, ok := element.(int); ok { fmt.Printf(\"list[%d] is an int and its value is %d\\n\", index, value) } else if value, ok := element.(string); ok { fmt.Printf(\"list[%d] is a string and its value is %s\\n\", index, value) } else if value, ok := element.(Person); ok { fmt.Printf(\"list[%d] is a Person and its value is %s\\n\", index, value) } else { fmt.Printf(\"list[%d] is of a different type\\n\", index) } } } \u662f\u5426\u6ce8\u610f\u5230\u4e86\u591a\u4e2aif\u91cc\u9762\uff0cif\u91cc\u9762\u5141\u8bb8\u521d\u59cb\u5316\u53d8\u91cf\u3002\u65ad\u8a00\u7684\u7c7b\u578b\u8d8a\u591a\uff0c\u90a3\u4e48if else\u4e5f\u5c31\u8d8a\u591a\uff0c\u6240\u4ee5\u624d\u5f15\u51fa\u4e86\u4e0b\u9762\u8981\u4ecb\u7ecd\u7684switch\u3002 switch\u6d4b\u8bd5 \u91cd\u5199\u4e0a\u9762\u7684\u8fd9\u4e2a\u5b9e\u73b0 package main import ( \"fmt\" \"strconv\" ) type Element interface{} type List [] Element type Person struct { name string age int } //\u6253\u5370 func (p Person) String() string { return \"(name: \" + p.name + \" - age: \"+strconv.Itoa(p.age)+ \" years)\" } func main() { list := make(List, 3) list[0] = 1 //an int list[1] = \"Hello\" //a string list[2] = Person{\"Dennis\", 70} for index, element := range list{ switch value := element.(type) { case int: fmt.Printf(\"list[%d] is an int and its value is %d\\n\", index, value) case string: fmt.Printf(\"list[%d] is a string and its value is %s\\n\", index, value) case Person: fmt.Printf(\"list[%d] is a Person and its value is %s\\n\", index, value) default: fmt.Println(\"list[%d] is of a different type\", index) } } } \u8fd9\u91cc\u6709\u4e00\u70b9\u9700\u8981\u5f3a\u8c03\u7684\u662f\uff1a element.(type) \u8bed\u6cd5\u4e0d\u80fd\u5728switch\u5916\u7684\u4efb\u4f55\u903b\u8f91\u91cc\u9762\u4f7f\u7528\uff0c\u5982\u679c\u8981\u5728switch\u5916\u9762\u5224\u65ad\u4e00\u4e2a\u7c7b\u578b\u5c31\u4f7f\u7528 comma-ok \u3002","title":"interface\u53d8\u91cf\u5b58\u50a8\u7684\u7c7b\u578b"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#interface_7","text":"Go\u91cc\u9762\u771f\u6b63\u5438\u5f15\u4eba\u7684\u662f\u5b83\u5185\u7f6e\u7684\u903b\u8f91\u8bed\u6cd5\uff0c\u5c31\u50cf\u5728\u5b66\u4e60Struct\u65f6\u5b66\u4e60\u7684\u533f\u540d\u5b57\u6bb5\uff0c\u90a3\u4e48\u76f8\u540c\u7684\u903b\u8f91\u5f15\u5165\u5230interface\u91cc\u9762\uff0c\u66f4\u52a0\u5b8c\u7f8e\u4e86\u3002\u5982\u679c\u4e00\u4e2ainterface1\u4f5c\u4e3ainterface2\u7684\u4e00\u4e2a\u5d4c\u5165\u5b57\u6bb5\uff0c\u90a3\u4e48interface2\u9690\u5f0f\u7684\u5305\u542b\u4e86interface1\u91cc\u9762\u7684method\u3002 \u53ef\u4ee5\u770b\u5230\u6e90\u7801\u5305 container/heap \u91cc\u9762\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u5b9a\u4e49 type Interface interface { sort.Interface //\u5d4c\u5165\u5b57\u6bb5sort.Interface Push(x interface{}) //a Push method to push elements into the heap Pop() interface{} //a Pop elements that pops elements from the heap } \u770b\u5230 sort.Interface \u5176\u5b9e\u5c31\u662f\u5d4c\u5165\u5b57\u6bb5\uff0c\u628a sort.Interface \u7684\u6240\u6709 method \u7ed9\u9690\u5f0f\u7684\u5305\u542b\u8fdb\u6765\u4e86\u3002\u4e5f\u5c31\u662f\u4e0b\u9762\u4e09\u4e2a\u65b9\u6cd5\uff1a type Interface interface { // Len is the number of elements in the collection. Len() int // Less returns whether the element with index i should sort // before the element with index j. Less(i, j int) bool // Swap swaps the elements with indexes i and j. Swap(i, j int) } \u53e6\u4e00\u4e2a\u4f8b\u5b50\u5c31\u662fio\u5305\u4e0b\u9762\u7684 io.ReadWriter \uff0c\u5b83\u5305\u542b\u4e86io\u5305\u4e0b\u9762\u7684 Reader \u548c Writer \u4e24\u4e2a interface \uff1a // io.ReadWriter type ReadWriter interface { Reader Writer }","title":"\u5d4c\u5165interface"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_19","text":"Go\u8bed\u8a00\u5b9e\u73b0\u4e86\u53cd\u5c04\uff0c\u6240\u8c13\u53cd\u5c04\u5c31\u662f\u80fd\u68c0\u67e5\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u7684\u72b6\u6001\u3002\u4e00\u822c\u7528\u5230\u7684\u5305\u662f reflect \u5305\u3002\u5982\u4f55\u8fd0\u7528 reflect \u5305\uff0c\u5b98\u65b9\u7684\u8fd9\u7bc7\u6587\u7ae0\u8be6\u7ec6\u7684\u8bb2\u89e3\u4e86 reflect \u5305\u7684\u5b9e\u73b0\u539f\u7406\uff0c laws of reflection \u94fe\u63a5\u5730\u5740\u4e3a http://golang.org/doc/articles/laws_of_reflection.html \u4f7f\u7528reflect\u4e00\u822c\u5206\u6210\u4e09\u6b65\uff0c\u4e0b\u9762\u7b80\u8981\u7684\u8bb2\u89e3\u4e00\u4e0b\uff1a\u8981\u53bb\u53cd\u5c04\u662f\u4e00\u4e2a\u7c7b\u578b\u7684\u503c(\u8fd9\u4e9b\u503c\u90fd\u5b9e\u73b0\u4e86 \u7a7ainterface )\uff0c\u9996\u5148\u9700\u8981\u628a\u5b83\u8f6c\u5316\u6210 reflect \u5bf9\u8c61( reflect.Type \u6216\u8005 reflect.Value \uff0c\u6839\u636e\u4e0d\u540c\u7684\u60c5\u51b5\u8c03\u7528\u4e0d\u540c\u7684\u51fd\u6570)\u3002\u8fd9\u4e24\u79cd\u83b7\u53d6\u65b9\u5f0f\u5982\u4e0b\uff1a t := reflect.TypeOf(i) //\u5f97\u5230\u7c7b\u578b\u7684\u5143\u6570\u636e,\u901a\u8fc7t\u80fd\u83b7\u53d6\u7c7b\u578b\u5b9a\u4e49\u91cc\u9762\u7684\u6240\u6709\u5143\u7d20 v := reflect.ValueOf(i) //\u5f97\u5230\u5b9e\u9645\u7684\u503c\uff0c\u901a\u8fc7v\u83b7\u53d6\u5b58\u50a8\u5728\u91cc\u9762\u7684\u503c\uff0c\u8fd8\u53ef\u4ee5\u53bb\u6539\u53d8\u503c \u8f6c\u5316\u4e3areflect\u5bf9\u8c61\u4e4b\u540e\u5c31\u53ef\u4ee5\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\u4e86\uff0c\u4e5f\u5c31\u662f\u5c06reflect\u5bf9\u8c61\u8f6c\u5316\u6210\u76f8\u5e94\u7684\u503c\uff0c\u4f8b\u5982 tag := t.Elem().Field(0).Tag //\u83b7\u53d6\u5b9a\u4e49\u5728struct\u91cc\u9762\u7684\u6807\u7b7e name := v.Elem().Field(0).String() //\u83b7\u53d6\u5b58\u50a8\u5728\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u91cc\u9762\u7684\u503c \u83b7\u53d6\u53cd\u5c04\u503c\u80fd\u8fd4\u56de\u76f8\u5e94\u7684\u7c7b\u578b\u548c\u6570\u503c var x float64 = 3.4 v := reflect.ValueOf(x) fmt.Println(\"type:\", v.Type()) fmt.Println(\"kind is float64:\", v.Kind() == reflect.Float64) fmt.Println(\"value:\", v.Float()) \u6700\u540e\uff0c\u53cd\u5c04\u7684\u8bdd\uff0c\u90a3\u4e48\u53cd\u5c04\u7684\u5b57\u6bb5\u5fc5\u987b\u662f\u53ef\u4fee\u6539\u7684\uff0c\u524d\u9762\u5b66\u4e60\u8fc7\u4f20\u503c\u548c\u4f20\u5f15\u7528\uff0c\u8fd9\u4e2a\u91cc\u9762\u4e5f\u662f\u4e00\u6837\u7684\u9053\u7406\u3002\u53cd\u5c04\u7684\u5b57\u6bb5\u5fc5\u987b\u662f\u53ef\u8bfb\u5199\u7684\u610f\u601d\u662f\uff0c\u5982\u679c\u4e0b\u9762\u8fd9\u6837\u5199\uff0c\u90a3\u4e48\u4f1a\u53d1\u751f\u9519\u8bef var x float64 = 3.4 v := reflect.ValueOf(x) v.SetFloat(7.1) \u5982\u679c\u8981\u4fee\u6539\u76f8\u5e94\u7684\u503c\uff0c\u5fc5\u987b\u8fd9\u6837\u5199 var x float64 = 3.4 p := reflect.ValueOf(&x) v := p.Elem() v.SetFloat(7.1)","title":"\u53cd\u5c04"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_20","text":"Go\u4ece\u8bed\u8a00\u5c42\u9762\u652f\u6301\u4e86\u5e76\u884c\u3002","title":"\u5e76\u53d1"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#goroutine","text":"goroutine \u662f Go \u5e76\u884c\u8bbe\u8ba1\u7684\u6838\u5fc3\u3002 goroutine \u8bf4\u5230\u5e95\u5176\u5b9e\u5c31\u662f\u534f\u7a0b\uff0c\u4f46\u662f\u5b83\u6bd4\u7ebf\u7a0b\u66f4\u5c0f\uff0c\u5341\u51e0\u4e2a goroutine \u53ef\u80fd\u4f53\u73b0\u5728\u5e95\u5c42\u5c31\u662f\u4e94\u516d\u4e2a\u7ebf\u7a0b\uff0cGo\u8bed\u8a00\u5185\u90e8\u5b9e\u73b0\u4e86\u8fd9\u4e9b goroutine \u4e4b\u95f4\u7684\u5185\u5b58\u5171\u4eab\u3002\u6267\u884c goroutine \u53ea\u9700\u6781\u5c11\u7684\u6808\u5185\u5b58(\u5927\u6982\u662f4~5KB)\uff0c\u5f53\u7136\u4f1a\u6839\u636e\u76f8\u5e94\u7684\u6570\u636e\u4f38\u7f29\u3002\u4e5f\u6b63\u56e0\u4e3a\u5982\u6b64\uff0c\u53ef\u540c\u65f6\u8fd0\u884c\u6210\u5343\u4e0a\u4e07\u4e2a\u5e76\u53d1\u4efb\u52a1\u3002 goroutine \u6bd4 thread \u66f4\u6613\u7528\u3001\u66f4\u9ad8\u6548\u3001\u66f4\u8f7b\u4fbf\u3002 goroutine \u662f\u901a\u8fc7Go\u7684 runtime \u7ba1\u7406\u7684\u4e00\u4e2a\u7ebf\u7a0b\u7ba1\u7406\u5668\u3002 goroutine \u901a\u8fc7 go \u5173\u952e\u5b57\u5b9e\u73b0\u4e86\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\u3002 go hello(a, b, c) \u901a\u8fc7\u5173\u952e\u5b57go\u5c31\u542f\u52a8\u4e86\u4e00\u4e2a goroutine \u3002\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50 package main import ( \"fmt\" \"runtime\" ) func say(s string) { for i := 0; i < 5; i++ { runtime.Gosched() fmt.Println(s) } } func main() { go say(\"world\") //\u5f00\u4e00\u4e2a\u65b0\u7684Goroutines\u6267\u884c say(\"hello\") //\u5f53\u524dGoroutines\u6267\u884c } // \u4ee5\u4e0a\u7a0b\u5e8f\u6267\u884c\u540e\u5c06\u8f93\u51fa\uff1a // hello // world // hello // world // hello // world // hello // world // hello \u53ef\u4ee5\u770b\u5230go\u5173\u952e\u5b57\u5f88\u65b9\u4fbf\u7684\u5c31\u5b9e\u73b0\u4e86\u5e76\u53d1\u7f16\u7a0b\u3002 \u4e0a\u9762\u7684\u591a\u4e2a goroutine \u8fd0\u884c\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\u91cc\u9762\uff0c\u5171\u4eab\u5185\u5b58\u6570\u636e\uff0c\u4e0d\u8fc7\u8bbe\u8ba1\u4e0a\u8981\u9075\u5faa\uff1a\u4e0d\u8981\u901a\u8fc7\u5171\u4eab\u6765\u901a\u4fe1\uff0c\u800c\u8981\u901a\u8fc7\u901a\u4fe1\u6765\u5171\u4eab\u3002 runtime.Gosched() \u8868\u793a\u8ba9CPU\u628a\u65f6\u95f4\u7247\u8ba9\u7ed9\u522b\u4eba,\u4e0b\u6b21\u67d0\u4e2a\u65f6\u5019\u7ee7\u7eed\u6062\u590d\u6267\u884c\u8be5 goroutine \u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5728Go 1.5\u5c06\u6807\u8bc6\u5e76\u53d1\u7cfb\u7edf\u7ebf\u7a0b\u4e2a\u6570\u7684 runtime.GOMAXPROCS \u7684\u521d\u59cb\u503c\u75311\u6539\u4e3a\u4e86 \u8fd0\u884c\u73af\u5883\u7684CPU\u6838\u6570 \u3002 \u4f46\u5728Go 1.5\u4ee5\u524d\u8c03\u5ea6\u5668\u4ec5\u4f7f\u7528\u5355\u7ebf\u7a0b\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u5b9e\u73b0\u4e86\u5e76\u53d1\u3002\u60f3\u8981\u53d1\u6325\u591a\u6838\u5904\u7406\u5668\u7684\u5e76\u884c\uff0c\u9700\u8981\u7a0b\u5e8f\u4e2d\u663e\u5f0f\u8c03\u7528 runtime.GOMAXPROCS(n) \u544a\u8bc9\u8c03\u5ea6\u5668\u540c\u65f6\u4f7f\u7528\u591a\u4e2a\u7ebf\u7a0b\u3002 GOMAXPROCS \u8bbe\u7f6e\u4e86\u540c\u65f6\u8fd0\u884c\u903b\u8f91\u4ee3\u7801\u7684\u7cfb\u7edf\u7ebf\u7a0b\u7684\u6700\u5927\u6570\u91cf\uff0c\u5e76\u8fd4\u56de\u4e4b\u524d\u7684\u8bbe\u7f6e\u3002\u5982\u679c n < 1 \uff0c\u4e0d\u4f1a\u6539\u53d8\u5f53\u524d\u8bbe\u7f6e\u3002","title":"goroutine"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#channels","text":"goroutine \u8fd0\u884c\u5728\u76f8\u540c\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u56e0\u6b64\u8bbf\u95ee\u5171\u4eab\u5185\u5b58\u5fc5\u987b\u505a\u597d\u540c\u6b65\u3002\u90a3\u4e48 goroutine \u4e4b\u95f4\u5982\u4f55\u8fdb\u884c\u6570\u636e\u7684\u901a\u4fe1\u5462\uff0cGo\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u901a\u4fe1\u673a\u5236 channel \u3002 channel \u53ef\u4ee5\u4e0e Unix shell \u4e2d\u7684\u53cc\u5411\u7ba1\u9053\u505a\u7c7b\u6bd4\uff1a\u53ef\u4ee5\u901a\u8fc7\u5b83\u53d1\u9001\u6216\u8005\u63a5\u6536\u503c\u3002\u8fd9\u4e9b\u503c\u53ea\u80fd\u662f\u7279\u5b9a\u7684\u7c7b\u578b\uff1a channel\u7c7b\u578b \u3002\u5b9a\u4e49\u4e00\u4e2a channel \u65f6\uff0c\u4e5f\u9700\u8981\u5b9a\u4e49\u53d1\u9001\u5230 channel \u7684\u503c\u7684\u7c7b\u578b\u3002\u6ce8\u610f\uff0c\u5fc5\u987b\u4f7f\u7528 make \u521b\u5efa channel \uff1a ci := make(chan int) cs := make(chan string) cf := make(chan interface{}) channel \u901a\u8fc7\u64cd\u4f5c\u7b26 <- \u6765\u63a5\u6536\u548c\u53d1\u9001\u6570\u636e ch <- v // \u53d1\u9001v\u5230channel ch. v := <-ch // \u4ecech\u4e2d\u63a5\u6536\u6570\u636e\uff0c\u5e76\u8d4b\u503c\u7ed9v \u628a\u8fd9\u4e9b\u5e94\u7528\u5230\u4f8b\u5b50\u4e2d\u6765\uff1a package main import \"fmt\" func sum(a []int, c chan int) { total := 0 for _, v := range a { total += v } c <- total // send total to c } func main() { a := []int{7, 2, 8, -9, 4, 0} c := make(chan int) go sum(a[:len(a)/2], c) go sum(a[len(a)/2:], c) x, y := <-c, <-c // receive from c fmt.Println(x, y, x + y) } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c channel \u63a5\u6536\u548c\u53d1\u9001\u6570\u636e\u90fd\u662f\u963b\u585e\u7684\uff0c\u9664\u975e\u53e6\u4e00\u7aef\u5df2\u7ecf\u51c6\u5907\u597d\uff0c\u8fd9\u6837\u5c31\u4f7f\u5f97 Goroutines \u540c\u6b65\u53d8\u7684\u66f4\u52a0\u7684\u7b80\u5355\uff0c\u800c\u4e0d\u9700\u8981\u663e\u5f0f\u7684 lock \u3002\u6240\u8c13\u963b\u585e\uff0c\u4e5f\u5c31\u662f\u5982\u679c\u8bfb\u53d6\uff08 value := <-ch \uff09\u5b83\u5c06\u4f1a\u88ab\u963b\u585e\uff0c\u76f4\u5230\u6709\u6570\u636e\u63a5\u6536\u3002\u5176\u6b21\uff0c\u4efb\u4f55\u53d1\u9001\uff08 ch<-5 \uff09\u5c06\u4f1a\u88ab\u963b\u585e\uff0c\u76f4\u5230\u6570\u636e\u88ab\u8bfb\u51fa\u3002\u65e0\u7f13\u51b2 channel \u662f\u5728\u591a\u4e2a goroutine \u4e4b\u95f4\u540c\u6b65\u5f88\u68d2\u7684\u5de5\u5177\u3002","title":"channels"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#buffered-channels","text":"\u4e0a\u9762\u4ecb\u7ecd\u4e86\u9ed8\u8ba4\u7684\u975e\u7f13\u5b58\u7c7b\u578b\u7684channel\uff0c\u4e0d\u8fc7Go\u4e5f\u5141\u8bb8\u6307\u5b9achannel\u7684\u7f13\u51b2\u5927\u5c0f\uff0c\u5f88\u7b80\u5355\uff0c\u5c31\u662fchannel\u53ef\u4ee5\u5b58\u50a8\u591a\u5c11\u5143\u7d20\u3002 ch:= make(chan bool , 4)\uff0c\u521b\u5efa\u4e86\u53ef\u4ee5\u5b58\u50a84\u4e2a\u5143\u7d20\u7684bool \u578bchannel\u3002\u5728\u8fd9\u4e2achannel \u4e2d\uff0c\u524d4\u4e2a\u5143\u7d20\u53ef\u4ee5\u65e0\u963b\u585e\u7684\u5199\u5165\u3002\u5f53\u5199\u5165\u7b2c5\u4e2a\u5143\u7d20\u65f6\uff0c\u4ee3\u7801\u5c06\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u5176\u4ed6goroutine\u4ecechannel \u4e2d\u8bfb\u53d6\u4e00\u4e9b\u5143\u7d20\uff0c\u817e\u51fa\u7a7a\u95f4\u3002 ch := make(chan type, value) \u5f53 value = 0 \u65f6\uff0cchannel \u662f\u65e0\u7f13\u51b2\u963b\u585e\u8bfb\u5199\u7684\uff0c\u5f53 value > 0 \u65f6\uff0cchannel \u6709\u7f13\u51b2\u3001\u662f\u975e\u963b\u585e\u7684\uff0c\u76f4\u5230\u5199\u6ee1 value \u4e2a\u5143\u7d20\u624d\u963b\u585e\u5199\u5165\u3002 \u770b\u4e00\u4e0b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u53ef\u4ee5\u5728\u81ea\u5df1\u672c\u673a\u6d4b\u8bd5\u4e00\u4e0b\uff0c\u4fee\u6539\u76f8\u5e94\u7684value\u503c package main import \"fmt\" func main() { c := make(chan int, 2)//\u4fee\u65392\u4e3a1\u5c31\u62a5\u9519\uff0c\u4fee\u65392\u4e3a3\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c c <- 1 c <- 2 fmt.Println(<-c) fmt.Println(<-c) } //\u4fee\u6539\u4e3a1\u62a5\u5982\u4e0b\u7684\u9519\u8bef: //fatal error: all goroutines are asleep - deadlock!","title":"Buffered Channels"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#rangeclose","text":"\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u9700\u8981\u8bfb\u53d6\u4e24\u6b21c\uff0c\u8fd9\u6837\u4e0d\u662f\u5f88\u65b9\u4fbf\uff0cGo\u8003\u8651\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u901a\u8fc7range\uff0c\u50cf\u64cd\u4f5cslice\u6216\u8005map\u4e00\u6837\u64cd\u4f5c\u7f13\u5b58\u7c7b\u578b\u7684channel\uff0c\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50 package main import ( \"fmt\" ) func fibonacci(n int, c chan int) { x, y := 1, 1 for i := 0; i < n; i++ { c <- x x, y = y, x + y } close(c) } func main() { c := make(chan int, 10) go fibonacci(cap(c), c) for i := range c { fmt.Println(i) } } for i := range c \u80fd\u591f\u4e0d\u65ad\u7684\u8bfb\u53d6 channel \u91cc\u9762\u7684\u6570\u636e\uff0c\u76f4\u5230\u8be5 channel \u88ab\u663e\u5f0f\u7684\u5173\u95ed\u3002\u4e0a\u9762\u4ee3\u7801\u770b\u5230\u53ef\u4ee5\u663e\u5f0f\u7684\u5173\u95ed channel \uff0c\u751f\u4ea7\u8005\u901a\u8fc7\u5185\u7f6e\u51fd\u6570 close \u5173\u95ed channel \u3002\u5173\u95ed channel \u4e4b\u540e\u5c31\u65e0\u6cd5\u518d\u53d1\u9001\u4efb\u4f55\u6570\u636e\u4e86\uff0c\u5728\u6d88\u8d39\u65b9\u53ef\u4ee5\u901a\u8fc7\u8bed\u6cd5 v, ok := <-ch \u6d4b\u8bd5 channel \u662f\u5426\u88ab\u5173\u95ed\u3002\u5982\u679cok\u8fd4\u56defalse\uff0c\u90a3\u4e48\u8bf4\u660e channel \u5df2\u7ecf\u6ca1\u6709\u4efb\u4f55\u6570\u636e\u5e76\u4e14\u5df2\u7ecf\u88ab\u5173\u95ed\u3002 \u8bb0\u4f4f\u5e94\u8be5\u5728\u751f\u4ea7\u8005\u7684\u5730\u65b9\u5173\u95ed channel \uff0c\u800c\u4e0d\u662f\u6d88\u8d39\u7684\u5730\u65b9\u53bb\u5173\u95ed\u5b83\uff0c\u8fd9\u6837\u5bb9\u6613\u5f15\u8d77 panic \u53e6\u5916\u8bb0\u4f4f\u4e00\u70b9\u7684\u5c31\u662f channel \u4e0d\u50cf\u6587\u4ef6\u4e4b\u7c7b\u7684\uff0c\u4e0d\u9700\u8981\u7ecf\u5e38\u53bb\u5173\u95ed\uff0c\u53ea\u6709\u786e\u5b9e\u6ca1\u6709\u4efb\u4f55\u53d1\u9001\u6570\u636e\u4e86\uff0c\u6216\u8005\u60f3\u663e\u5f0f\u7684\u7ed3\u675f range \u5faa\u73af\u4e4b\u7c7b\u7684","title":"Range\u548cClose"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#select","text":"\u4e0a\u9762\u4ecb\u7ecd\u7684\u90fd\u662f\u53ea\u6709\u4e00\u4e2a channel \u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u5982\u679c\u5b58\u5728\u591a\u4e2a channel \u7684\u65f6\u5019\uff0c\u8be5\u5982\u4f55\u64cd\u4f5c\u5462\uff0cGo\u91cc\u9762\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5173\u952e\u5b57 select \uff0c\u901a\u8fc7 select \u53ef\u4ee5\u76d1\u542c channel \u4e0a\u7684\u6570\u636e\u6d41\u52a8\u3002 select \u9ed8\u8ba4\u662f\u963b\u585e\u7684\uff0c\u53ea\u6709\u5f53\u76d1\u542c\u7684 channel \u4e2d\u6709\u53d1\u9001\u6216\u63a5\u6536\u53ef\u4ee5\u8fdb\u884c\u65f6\u624d\u4f1a\u8fd0\u884c\uff0c\u5f53\u591a\u4e2a channel \u90fd\u51c6\u5907\u597d\u7684\u65f6\u5019\uff0c select \u662f\u968f\u673a\u7684\u9009\u62e9\u4e00\u4e2a\u6267\u884c\u7684\u3002 package main import \"fmt\" func fibonacci(c, quit chan int) { x, y := 1, 1 for { select { case c <- x: x, y = y, x + y case <-quit: fmt.Println(\"quit\") return } } } func main() { c := make(chan int) quit := make(chan int) go func() { for i := 0; i < 10; i++ { fmt.Println(<-c) } quit <- 0 }() fibonacci(c, quit) } \u5728 select \u91cc\u9762\u8fd8\u6709 default \u8bed\u6cd5\uff0c select \u5176\u5b9e\u5c31\u662f\u7c7b\u4f3c switch \u7684\u529f\u80fd\uff0c default \u5c31\u662f\u5f53\u76d1\u542c\u7684 channel \u90fd\u6ca1\u6709\u51c6\u5907\u597d\u7684\u65f6\u5019\uff0c\u9ed8\u8ba4\u6267\u884c\u7684\uff08 select \u4e0d\u518d\u963b\u585e\u7b49\u5f85 channel \uff09\u3002 select { case i := <-c: // use i default: // \u5f53c\u963b\u585e\u7684\u65f6\u5019\u6267\u884c\u8fd9\u91cc }","title":"Select"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_21","text":"\u6709\u65f6\u5019\u4f1a\u51fa\u73b0 goroutine \u963b\u585e\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u5982\u4f55\u907f\u514d\u6574\u4e2a\u7a0b\u5e8f\u8fdb\u5165\u963b\u585e\u7684\u60c5\u51b5\u5462\uff1f\u53ef\u4ee5\u5229\u7528 select \u6765\u8bbe\u7f6e\u8d85\u65f6\uff0c\u901a\u8fc7\u5982\u4e0b\u7684\u65b9\u5f0f\u5b9e\u73b0\uff1a func main() { c := make(chan int) o := make(chan bool) go func() { for { select { case v := <- c: println(v) case <- time.After(5 * time.Second): println(\"timeout\") o <- true break } } }() <- o }","title":"\u8d85\u65f6"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#runtime-goroutine","text":"runtime \u5305\u4e2d\u6709\u51e0\u4e2a\u5904\u7406 goroutine \u7684\u51fd\u6570\uff1a Goexit : \u9000\u51fa\u5f53\u524d\u6267\u884c\u7684goroutine\uff0c\u4f46\u662fdefer\u51fd\u6570\u8fd8\u4f1a\u7ee7\u7eed\u8c03\u7528 Gosched : \u8ba9\u51fa\u5f53\u524dgoroutine\u7684\u6267\u884c\u6743\u9650\uff0c\u8c03\u5ea6\u5668\u5b89\u6392\u5176\u4ed6\u7b49\u5f85\u7684\u4efb\u52a1\u8fd0\u884c\uff0c\u5e76\u5728\u4e0b\u6b21\u67d0\u4e2a\u65f6\u5019\u4ece\u8be5\u4f4d\u7f6e\u6062\u590d\u6267\u884c\u3002 NumCPU : \u8fd4\u56de CPU \u6838\u6570\u91cf NumGoroutine : \u8fd4\u56de\u6b63\u5728\u6267\u884c\u548c\u6392\u961f\u7684\u4efb\u52a1\u603b\u6570 GOMAXPROCS : \u7528\u6765\u8bbe\u7f6e\u53ef\u4ee5\u5e76\u884c\u8ba1\u7b97\u7684CPU\u6838\u6570\u7684\u6700\u5927\u503c\uff0c\u5e76\u8fd4\u56de\u4e4b\u524d\u7684\u503c\u3002","title":"runtime goroutine"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_22","text":"Go\u8bed\u8a00\u4e3b\u8981\u7684\u8bbe\u8ba1\u51c6\u5219\u662f\uff1a\u7b80\u6d01\u3001\u660e\u767d\uff0c\u7b80\u6d01\u662f\u6307\u8bed\u6cd5\u548cC\u7c7b\u4f3c\uff0c\u76f8\u5f53\u7684\u7b80\u5355\uff0c\u660e\u767d\u662f\u6307\u4efb\u4f55\u8bed\u53e5\u90fd\u662f\u5f88\u660e\u663e\u7684\uff0c\u4e0d\u542b\u6709\u4efb\u4f55\u9690\u542b\u7684\u4e1c\u897f\uff0c\u5728\u9519\u8bef\u5904\u7406\u65b9\u6848\u7684\u8bbe\u8ba1\u4e2d\u4e5f\u8d2f\u5f7b\u4e86\u8fd9\u4e00\u601d\u60f3\u3002 \u5728C\u8bed\u8a00\u91cc\u9762\u662f\u901a\u8fc7\u8fd4\u56de -1 \u6216\u8005 NULL \u4e4b\u7c7b\u7684\u4fe1\u606f\u6765\u8868\u793a\u9519\u8bef\uff0c\u4f46\u662f\u5bf9\u4e8e\u4f7f\u7528\u8005\u6765\u8bf4\uff0c\u4e0d\u67e5\u770b\u76f8\u5e94\u7684API\u8bf4\u660e\u6587\u6863\uff0c\u6839\u672c\u641e\u4e0d\u6e05\u695a\u8fd9\u4e2a\u8fd4\u56de\u503c\u7a76\u7adf\u4ee3\u8868\u4ec0\u4e48\u610f\u601d\uff0c\u6bd4\u5982:\u8fd4\u56de0\u662f\u6210\u529f\uff0c\u8fd8\u662f\u5931\u8d25,\u800c Go \u5b9a\u4e49\u4e86\u4e00\u4e2a\u53eb\u505a error \u7684\u7c7b\u578b\uff0c\u6765\u663e\u5f0f\u8868\u8fbe\u9519\u8bef\u3002\u5728\u4f7f\u7528\u65f6\uff0c\u901a\u8fc7\u628a\u8fd4\u56de\u7684 error \u53d8\u91cf\u4e0e nil \u7684\u6bd4\u8f83\uff0c\u6765\u5224\u5b9a\u64cd\u4f5c\u662f\u5426\u6210\u529f\u3002\u4f8b\u5982 os.Open \u51fd\u6570\u5728\u6253\u5f00\u6587\u4ef6\u5931\u8d25\u65f6\u5c06\u8fd4\u56de\u4e00\u4e2a\u4e0d\u4e3a nil \u7684 error \u53d8\u91cf func Open(name string) (file *File, err error) \u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u901a\u8fc7\u8c03\u7528 os.Open \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u5982\u679c\u51fa\u73b0\u9519\u8bef\uff0c\u90a3\u4e48\u5c31\u4f1a\u8c03\u7528 log.Fatal \u6765\u8f93\u51fa\u9519\u8bef\u4fe1\u606f\uff1a f, err := os.Open(\"filename.ext\") if err != nil { log.Fatal(err) } \u7c7b\u4f3c\u4e8e os.Open \u51fd\u6570\uff0c\u6807\u51c6\u5305\u4e2d\u6240\u6709\u53ef\u80fd\u51fa\u9519\u7684API\u90fd\u4f1a\u8fd4\u56de\u4e00\u4e2a error \u53d8\u91cf\uff0c\u4ee5\u65b9\u4fbf\u9519\u8bef\u5904\u7406\uff0c\u8fd9\u4e2a\u5c0f\u8282\u5c06\u8be6\u7ec6\u5730\u4ecb\u7ecd error \u7c7b\u578b\u7684\u8bbe\u8ba1\uff0c\u548c\u8ba8\u8bba\u5f00\u53d1Web\u5e94\u7528\u4e2d\u5982\u4f55\u66f4\u597d\u5730\u5904\u7406 error \u3002","title":"\u9519\u8bef\u5904\u7406"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#error","text":"error\u7c7b\u578b\u662f\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\uff0c\u8fd9\u662f\u5b83\u7684\u5b9a\u4e49\uff1a type error interface { Error() string } error\u662f\u4e00\u4e2a\u5185\u7f6e\u7684\u63a5\u53e3\u7c7b\u578b\uff0c\u53ef\u4ee5\u5728 /builtin/ \u5305\u4e0b\u9762\u627e\u5230\u76f8\u5e94\u7684\u5b9a\u4e49\u3002\u800c\u5728\u5f88\u591a\u5185\u90e8\u5305\u91cc\u9762\u7528\u5230\u7684 error \u662f errors \u5305\u4e0b\u9762\u7684\u5b9e\u73b0\u7684\u79c1\u6709\u7ed3\u6784 errorString // errorString is a trivial implementation of error. type errorString struct { s string } func (e *errorString) Error() string { return e.s } \u53ef\u4ee5\u901a\u8fc7 errors.New \u628a\u4e00\u4e2a\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a errorString \uff0c\u4ee5\u5f97\u5230\u4e00\u4e2a\u6ee1\u8db3\u63a5\u53e3 error \u7684\u5bf9\u8c61\uff0c\u5176\u5185\u90e8\u5b9e\u73b0\u5982\u4e0b\uff1a // New returns an error that formats as the given text. func New(text string) error { return &errorString{text} } \u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528 errors.New : func Sqrt(f float64) (float64, error) { if f < 0 { return 0, errors.New(\"math: square root of negative number\") } // implementation } \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5728\u8c03\u7528Sqrt\u7684\u65f6\u5019\u4f20\u9012\u7684\u4e00\u4e2a\u8d1f\u6570\uff0c\u7136\u540e\u5c31\u5f97\u5230\u4e86 non-nil \u7684 error \u5bf9\u8c61\uff0c\u5c06\u6b64\u5bf9\u8c61\u4e0e nil \u6bd4\u8f83\uff0c\u7ed3\u679c\u4e3a true \uff0c\u6240\u4ee5 fmt.Println (fmt\u5305\u5728\u5904\u7406error\u65f6\u4f1a\u8c03\u7528Error\u65b9\u6cd5)\u88ab\u8c03\u7528\uff0c\u4ee5\u8f93\u51fa\u9519\u8bef\uff0c\u8bf7\u770b\u4e0b\u9762\u8c03\u7528\u7684\u793a\u4f8b\u4ee3\u7801\uff1a f, err := Sqrt(-1) if err != nil { fmt.Println(err) }","title":"Error\u7c7b\u578b"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#error_1","text":"error \u662f\u4e00\u4e2a interface \uff0c\u6240\u4ee5\u5728\u5b9e\u73b0\u81ea\u5df1\u7684\u5305\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u5b9a\u4e49\u5b9e\u73b0\u6b64\u63a5\u53e3\u7684\u7ed3\u6784\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u81ea\u5df1\u7684\u9519\u8bef\u5b9a\u4e49\uff0c\u8bf7\u770b\u6765\u81eaJson\u5305\u7684\u793a\u4f8b\uff1a type SyntaxError struct { msg string // \u9519\u8bef\u63cf\u8ff0 Offset int64 // \u9519\u8bef\u53d1\u751f\u7684\u4f4d\u7f6e } func (e *SyntaxError) Error() string { return e.msg } Offset \u5b57\u6bb5\u5728\u8c03\u7528 Error \u7684\u65f6\u5019\u4e0d\u4f1a\u88ab\u6253\u5370\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u7c7b\u578b\u65ad\u8a00\u83b7\u53d6\u9519\u8bef\u7c7b\u578b\uff0c\u7136\u540e\u53ef\u4ee5\u6253\u5370\u76f8\u5e94\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50: if err := dec.Decode(&val); err != nil { if serr, ok := err.(*json.SyntaxError); ok { line, col := findLine(f, serr.Offset) return fmt.Errorf(\"%s:%d:%d: %v\", f.Name(), line, col, err) } return err } \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u51fd\u6570\u8fd4\u56de\u81ea\u5b9a\u4e49\u9519\u8bef\u65f6\uff0c\u8fd4\u56de\u503c\u63a8\u8350\u8bbe\u7f6e\u4e3a error \u7c7b\u578b\uff0c\u800c\u975e\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\uff0c\u7279\u522b\u9700\u8981\u6ce8\u610f\u7684\u662f\u4e0d\u5e94\u9884\u58f0\u660e\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\u7684\u53d8\u91cf\u3002\u4f8b\u5982\uff1a func Decode() *SyntaxError { // \u9519\u8bef\uff0c\u5c06\u53ef\u80fd\u5bfc\u81f4\u4e0a\u5c42\u8c03\u7528\u8005err!=nil\u7684\u5224\u65ad\u6c38\u8fdc\u4e3atrue\u3002 var err *SyntaxError // \u9884\u58f0\u660e\u9519\u8bef\u53d8\u91cf if \u51fa\u9519\u6761\u4ef6 { err = &SyntaxError{} } return err // \u9519\u8bef\uff0cerr\u6c38\u8fdc\u7b49\u4e8e\u975enil\uff0c\u5bfc\u81f4\u4e0a\u5c42\u8c03\u7528\u8005err!=nil\u7684\u5224\u65ad\u59cb\u7ec8\u4e3atrue } \u539f\u56e0\u89c1 http://golang.org/doc/faq#nil_error (\u9700\u79d1\u5b66\u4e0a\u7f51) \u4e0a\u9762\u4f8b\u5b50\u7b80\u5355\u7684\u6f14\u793a\u4e86\u5982\u4f55\u81ea\u5b9a\u4e49Error\u7c7b\u578b\u3002\u4f46\u662f\u5982\u679c\u8fd8\u9700\u8981\u66f4\u590d\u6742\u7684\u9519\u8bef\u5904\u7406\u5462\uff1f\u6b64\u65f6\uff0c\u6765\u53c2\u8003\u4e00\u4e0bnet\u5305\u91c7\u7528\u7684\u65b9\u6cd5\uff1a package net type Error interface { error Timeout() bool // Is the error a timeout? Temporary() bool // Is the error temporary? } \u5728\u8c03\u7528\u7684\u5730\u65b9\uff0c\u901a\u8fc7\u7c7b\u578b\u65ad\u8a00 err \u662f\u4e0d\u662f net.Error ,\u6765\u7ec6\u5316\u9519\u8bef\u7684\u5904\u7406\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5982\u679c\u4e00\u4e2a\u7f51\u7edc\u53d1\u751f\u4e34\u65f6\u6027\u9519\u8bef\uff0c\u90a3\u4e48\u5c06\u4f1asleep 1\u79d2\u4e4b\u540e\u91cd\u8bd5\uff1a if nerr, ok := err.(net.Error); ok && nerr.Temporary() { time.Sleep(1e9) continue } if err != nil { log.Fatal(err) }","title":"\u81ea\u5b9a\u4e49Error"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_23","text":"Go\u5728\u9519\u8bef\u5904\u7406\u4e0a\u91c7\u7528\u4e86\u4e0eC\u7c7b\u4f3c\u7684\u68c0\u67e5\u8fd4\u56de\u503c\u7684\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u5176\u4ed6\u591a\u6570\u4e3b\u6d41\u8bed\u8a00\u91c7\u7528\u7684\u5f02\u5e38\u65b9\u5f0f\uff0c\u8fd9\u9020\u6210\u4e86\u4ee3\u7801\u7f16\u5199\u4e0a\u7684\u4e00\u4e2a\u5f88\u5927\u7684\u7f3a\u70b9:\u9519\u8bef\u5904\u7406\u4ee3\u7801\u7684\u5197\u4f59\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u662f\u901a\u8fc7\u590d\u7528\u68c0\u6d4b\u51fd\u6570\u6765\u51cf\u5c11\u7c7b\u4f3c\u7684\u4ee3\u7801\u3002 \u8bf7\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4ee3\u7801\uff1a func init() { http.HandleFunc(\"/view\", viewRecord) } func viewRecord(w http.ResponseWriter, r *http.Request) { c := appengine.NewContext(r) key := datastore.NewKey(c, \"Record\", r.FormValue(\"id\"), 0, nil) record := new(Record) if err := datastore.Get(c, key, record); err != nil { http.Error(w, err.Error(), 500) return } if err := viewTemplate.Execute(w, record); err != nil { http.Error(w, err.Error(), 500) } } \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u83b7\u53d6\u6570\u636e\u548c\u6a21\u677f\u5c55\u793a\u8c03\u7528\u65f6\u90fd\u6709\u68c0\u6d4b\u9519\u8bef\uff0c\u5f53\u6709\u9519\u8bef\u53d1\u751f\u65f6\uff0c\u8c03\u7528\u4e86\u7edf\u4e00\u7684\u5904\u7406\u51fd\u6570 http.Error \uff0c\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef500\u9519\u8bef\u7801\uff0c\u5e76\u663e\u793a\u76f8\u5e94\u7684\u9519\u8bef\u6570\u636e\u3002\u4f46\u662f\u5f53\u8d8a\u6765\u8d8a\u591a\u7684 HandleFunc \u52a0\u5165\u4e4b\u540e\uff0c\u8fd9\u6837\u7684\u9519\u8bef\u5904\u7406\u903b\u8f91\u4ee3\u7801\u5c31\u4f1a\u8d8a\u6765\u8d8a\u591a\uff0c\u5176\u5b9e\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u8def\u7531\u5668\u6765\u7f29\u51cf\u4ee3\u7801 type appHandler func(http.ResponseWriter, *http.Request) error func (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) { if err := fn(w, r); err != nil { http.Error(w, err.Error(), 500) } } \u4e0a\u9762\u5b9a\u4e49\u4e86\u81ea\u5b9a\u4e49\u7684\u8def\u7531\u5668\uff0c\u7136\u540e\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u6765\u6ce8\u518c\u51fd\u6570\uff1a func init() { http.Handle(\"/view\", appHandler(viewRecord)) } \u5f53\u8bf7\u6c42 /view \u7684\u65f6\u5019\u903b\u8f91\u5904\u7406\u53ef\u4ee5\u53d8\u6210\u5982\u4e0b\u4ee3\u7801\uff0c\u548c\u7b2c\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u76f8\u6bd4\u8f83\u5df2\u7ecf\u7b80\u5355\u4e86\u5f88\u591a\u3002 func viewRecord(w http.ResponseWriter, r *http.Request) error { c := appengine.NewContext(r) key := datastore.NewKey(c, \"Record\", r.FormValue(\"id\"), 0, nil) record := new(Record) if err := datastore.Get(c, key, record); err != nil { return err } return viewTemplate.Execute(w, record) } \u4e0a\u9762\u7684\u4f8b\u5b50\u9519\u8bef\u5904\u7406\u7684\u65f6\u5019\u6240\u6709\u7684\u9519\u8bef\u8fd4\u56de\u7ed9\u7528\u6237\u7684\u90fd\u662f500\u9519\u8bef\u7801\uff0c\u7136\u540e\u6253\u5370\u51fa\u6765\u76f8\u5e94\u7684\u9519\u8bef\u4ee3\u7801\uff0c\u5176\u5b9e\u53ef\u4ee5\u628a\u8fd9\u4e2a\u9519\u8bef\u4fe1\u606f\u5b9a\u4e49\u7684\u66f4\u52a0\u53cb\u597d\uff0c\u8c03\u8bd5\u7684\u65f6\u5019\u4e5f\u65b9\u4fbf\u5b9a\u4f4d\u95ee\u9898\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u8fd4\u56de\u7684\u9519\u8bef\u7c7b\u578b\uff1a type appError struct { Error error Message string Code int } \u8fd9\u6837\u81ea\u5b9a\u4e49\u8def\u7531\u5668\u53ef\u4ee5\u6539\u6210\u5982\u4e0b\u65b9\u5f0f\uff1a type appHandler func(http.ResponseWriter, *http.Request) *appError func (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) { if e := fn(w, r); e != nil { // e is *appError, not os.Error. c := appengine.NewContext(r) c.Errorf(\"%v\", e.Error) http.Error(w, e.Message, e.Code) } } \u8fd9\u6837\u4fee\u6539\u5b8c\u81ea\u5b9a\u4e49\u9519\u8bef\u4e4b\u540e\uff0c\u903b\u8f91\u5904\u7406\u53ef\u4ee5\u6539\u6210\u5982\u4e0b\u65b9\u5f0f\uff1a func viewRecord(w http.ResponseWriter, r *http.Request) *appError { c := appengine.NewContext(r) key := datastore.NewKey(c, \"Record\", r.FormValue(\"id\"), 0, nil) record := new(Record) if err := datastore.Get(c, key, record); err != nil { return &appError{err, \"Record not found\", 404} } if err := viewTemplate.Execute(w, record); err != nil { return &appError{err, \"Can't display record\", 500} } return nil } \u5982\u4e0a\u6240\u793a\uff0c\u5728\u8bbf\u95eeview\u7684\u65f6\u5019\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u60c5\u51b5\u83b7\u53d6\u4e0d\u540c\u7684\u9519\u8bef\u7801\u548c\u9519\u8bef\u4fe1\u606f\uff0c\u867d\u7136\u8fd9\u4e2a\u548c\u7b2c\u4e00\u4e2a\u7248\u672c\u7684\u4ee3\u7801\u91cf\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u8fd9\u4e2a\u663e\u793a\u7684\u9519\u8bef\u66f4\u52a0\u660e\u663e\uff0c\u63d0\u793a\u7684\u9519\u8bef\u4fe1\u606f\u66f4\u52a0\u53cb\u597d\uff0c\u6269\u5c55\u6027\u4e5f\u6bd4\u7b2c\u4e00\u4e2a\u66f4\u597d\u3002","title":"\u9519\u8bef\u5904\u7406"},{"location":"golang/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9D%E5%85%B8/#_24","text":"\u5728\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\uff0c\u5bb9\u9519\u662f\u76f8\u5f53\u91cd\u8981\u7684\u4e00\u90e8\u5206\u5de5\u4f5c\uff0c\u5728Go\u4e2d\u5b83\u662f\u901a\u8fc7\u9519\u8bef\u5904\u7406\u6765\u5b9e\u73b0\u7684\uff0cerror\u867d\u7136\u53ea\u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u4f46\u662f\u5176\u53d8\u5316\u5374\u53ef\u4ee5\u6709\u5f88\u591a\uff0c\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u6765\u5b9e\u73b0\u4e0d\u540c\u7684\u5904\u7406\u3002","title":"\u603b\u7ed3"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/","text":"Go \u4e2d\u7684\u65f6\u95f4\u64cd\u4f5c Golang\u4e2d\u4e0e\u65f6\u95f4\u6709\u5173\u7684\u64cd\u4f5c\uff0c\u4e3b\u8981\u6d89\u53ca\u5230 time \u5305\uff0c\u6838\u5fc3\u6570\u636e\u7ed3\u6784\u662f time.Time \uff0c\u5982\u4e0b\uff1a type Time struct { wall uint64 ext int64 loc *Location } 1\u3001\u83b7\u53d6\u65f6\u95f4\u76f8\u5173\u51fd\u6570 1.1 \u83b7\u53d6\u5f53\u524d\u65f6\u95f4 // \u8fd4\u56de\u5f53\u524d\u65f6\u95f4\uff0c\u6ce8\u610f\u6b64\u65f6\u8fd4\u56de\u7684\u662f time.Time \u7c7b\u578b now := time.Now() fmt.Println(now) // \u5f53\u524d\u65f6\u95f4\u6233 fmt.Println(now.Unix()) // \u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233 fmt.Println(now.UnixNano()) // \u65f6\u95f4\u6233\u5c0f\u6570\u90e8\u5206 \u5355\u4f4d\uff1a\u7eb3\u79d2 fmt.Println(now.Nanosecond()) \u8f93\u51fa\uff1a 2021-01-10 14:56:15.930562 +0800 CST m=+0.000124449 1610261775 1610261775930562000 930562000 1.2 \u8fd4\u56de\u5f53\u524d\u5e74\u6708\u65e5\u65f6\u5206\u79d2\u3001\u661f\u671f\u51e0\u3001\u4e00\u5e74\u4e2d\u7684\u7b2c\u51e0\u5929\u7b49\u64cd\u4f5c now := time.Now() // \u8fd4\u56de\u65e5\u671f year, month, day := now.Date() fmt.Printf(\"year:%d, month:%d, day:%d\\n\", year, month, day) // \u5e74 fmt.Println(now.Year()) // \u6708 fmt.Println(now.Month()) // \u65e5 fmt.Println(now.Day()) // \u65f6\u5206\u79d2 hour, minute, second := now.Clock() fmt.Printf(\"hour:%d, minute:%d, second:%d\\n\", hour, minute, second) // \u65f6 fmt.Println(now.Hour()) // \u5206 fmt.Println(now.Minute()) // \u79d2 fmt.Println(now.Second()) // \u8fd4\u56de\u661f\u671f fmt.Println(now.Weekday()) //\u8fd4\u56de\u4e00\u5e74\u4e2d\u5bf9\u5e94\u7684\u7b2c\u51e0\u5929 fmt.Println(now.YearDay()) //\u8fd4\u56de\u65f6\u533a fmt.Println(now.Location()) // \u8fd4\u56de\u4e00\u5e74\u4e2d\u7b2c\u51e0\u5929 fmt.Println(now.YearDay()) 1.3 \u683c\u5f0f\u5316\u65f6\u95f4 Go \u8bed\u8a00\u63d0\u4f9b\u4e86\u65f6\u95f4\u7c7b\u578b\u683c\u5f0f\u5316\u51fd\u6570 Format() \uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f Go \u8bed\u8a00\u683c\u5f0f\u5316\u65f6\u95f4\u6a21\u677f\u4e0d\u662f\u5e38\u89c1\u7684 Y-m-d H:i:s \uff0c\u800c\u662f 2006-01-02 15:04:05\uff0c\u4e5f\u5f88\u597d\u8bb0\u5fc6(2006 1 2 3 4 5)\u3002 now := time.Now() fmt.Println(now.Format(\"2006-01-02 15:04:05\")) fmt.Println(now.Format(\"2006-01-02\")) fmt.Println(now.Format(\"15:04:05\")) fmt.Println(now.Format(\"2006/01/02 15:04\")) fmt.Println(now.Format(\"15:04 2006/01/02\")) 2\u3001\u65f6\u95f4\u6233\u4e0e\u65e5\u671f\u5b57\u7b26\u4e32\u76f8\u4e92\u8f6c\u5316 \u65f6\u95f4\u6233\u8f6c\u6210\u65e5\u671f\u683c\u5f0f\uff0c\u9700\u8981\u5148\u8f6c\u6210\u5c06\u65f6\u95f4\u6233\u8f6c\u6210 time.Time \u7c7b\u578b\u518d\u683c\u5f0f\u5316\u6210\u65e5\u671f\u683c\u5f0f\u3002 2.1 \u6839\u636e\u79d2\u6570\u3001\u7eb3\u79d2\u6570\u8fd4\u56de time.Time \u7c7b\u578b now := time.Now() layout := \"2006-01-02 15:04:05\" t := time.Unix(now.Unix(),0) // \u53c2\u6570\u5206\u522b\u662f\uff1a\u79d2\u6570,\u7eb3\u79d2\u6570 fmt.Println(t.Format(layout)) 2.2 \u6839\u636e\u6307\u5b9a\u65f6\u95f4\u8fd4\u56de time.Time \u7c7b\u578b\uff0c\u4f7f\u7528\u51fd\u6570 time.Date() now := time.Now() layout := \"2006-01-02 15:04:05\" //\u6839\u636e\u6307\u5b9a\u65f6\u95f4\u8fd4\u56de time.Time \u7c7b\u578b //\u5206\u522b\u6307\u5b9a\u5e74\uff0c\u6708\uff0c\u65e5\uff0c\u65f6\uff0c\u5206\uff0c\u79d2\uff0c\u7eb3\u79d2\uff0c\u65f6\u533a t := time.Date(2011, time.Month(3), 12, 15, 30, 20, 0, now.Location()) fmt.Println(t.Format(layout)) 2.3 \u65e5\u671f\u5b57\u7b26\u4e32\u89e3\u6790\u6210 time.Time \u7c7b\u578b t, _ := time.ParseInLocation(\"2006-01-02 15:04:05\", time.Now().Format(\"2006-01-02 15:04:05\"), time.Local) fmt.Println(t) // \u8f93\u51fa 2021-01-10 17:28:50 +0800 CST // time.Local \u6307\u5b9a\u672c\u5730\u65f6\u95f4 \u89e3\u6790\u7684\u65f6\u5019\u9700\u8981\u7279\u522b\u6ce8\u610f\u65f6\u533a\u7684\u95ee\u9898\uff1a fmt.Println(time.Now()) fmt.Println(time.Now().Location()) t, _ := time.Parse(\"2006-01-02 15:04:05\", \"2021-01-10 15:01:02\") fmt.Println(t) \u8f93\u51fa\uff1a 2021-01-10 17:22:10.951904 +0800 CST m=+0.000094166 Local 2021-01-10 15:01:02 +0000 UTC \u53ef\u4ee5\u770b\u5230\uff0c time.Now() \u4f7f\u7528\u7684 CST(\u4e2d\u56fd\u6807\u51c6\u65f6\u95f4)\uff0c\u800c time.Parse() \u9ed8\u8ba4\u7684\u662f UTC(\u96f6\u65f6\u533a)\uff0c\u5b83\u4eec\u76f8\u5dee 8 \u5c0f\u65f6\u3002\u6240\u4ee5\u89e3\u6790\u65f6\u5e38\u7528 time.ParseInLocation() \uff0c\u53ef\u4ee5\u6307\u5b9a\u65f6\u533a\u3002 3\u3001\u8ba1\u7b97\u3001\u6bd4\u8f83\u65e5\u671f \u8bb2\u5230\u65e5\u671f\u7684\u8ba1\u7b97\u5c31\u4e0d\u5f97\u4e0d\u63d0 time \u5305\u63d0\u4f9b\u7684\u4e00\u79cd\u65b0\u7684\u7c7b\u578b Duration \uff0c\u6e90\u7801\u662f\u8fd9\u6837\u5b9a\u4e49\u7684\uff1a type Duration int64 \u5e95\u5c42\u7c7b\u578b\u662f int64\uff0c\u8868\u793a\u4e00\u6bb5\u65f6\u95f4\u95f4\u9694\uff0c\u5355\u4f4d\u662f \u7eb3\u79d2\u3002 3.1 24\u5c0f\u65f6\u4e4b\u5185\u7684\u65f6\u95f4\u8ba1\u7b97 now := time.Now() fmt.Println(now) // 1\u5c0f\u65f61\u52061s\u4e4b\u540e t1, _ := time.ParseDuration(\"1h1m1s\") fmt.Println(t1) m1 := now.Add(t1) fmt.Println(m1) // 1\u5c0f\u65f61\u52061s\u4e4b\u524d t2, _ := time.ParseDuration(\"-1h1m1s\") m2 := now.Add(t2) fmt.Println(m2) // 3\u5c0f\u65f6\u4e4b\u524d t3, _ := time.ParseDuration(\"-1h\") m3 := now.Add(t3 * 3) fmt.Println(m3) // 10 \u5206\u949f\u4e4b\u540e t4, _ := time.ParseDuration(\"10m\") m4 := now.Add(t4) fmt.Println(m4) // Sub \u8ba1\u7b97\u4e24\u4e2a\u65f6\u95f4\u5dee sub1 := now.Sub(m3) fmt.Println(sub1.Hours()) // \u76f8\u5dee\u5c0f\u65f6\u6570 fmt.Println(sub1.Minutes()) // \u76f8\u5dee\u5206\u949f\u6570 \u989d\u5916\u518d\u4ecb\u7ecd\u4e24\u4e2a\u51fd\u6570 time.Since() \u3001 time.Until() \uff1a // \u8fd4\u56de\u5f53\u524d\u65f6\u95f4\u4e0e t \u7684\u65f6\u95f4\u5dee\uff0c\u8fd4\u56de\u503c\u662f Duration time.Since(t Time) Duration // \u8fd4\u56de t \u4e0e\u5f53\u524d\u65f6\u95f4\u7684\u65f6\u95f4\u5dee\uff0c\u8fd4\u56de\u503c\u662f Duration time.Until(t Time) Duration now := time.Now() fmt.Println(now) t1, _ := time.ParseDuration(\"-1h\") m1 := now.Add(t1) fmt.Println(m1) fmt.Println(time.Since(m1)) fmt.Println(time.Until(m1)) \u8f93\u51fa\uff1a 2021-01-10 20:41:48.668232 +0800 CST m=+0.000095594 2021-01-10 19:41:48.668232 +0800 CST m=-3599.999904406 1h0m0.000199007s -1h0m0.000203035s 3.2 24\u5c0f\u65f6\u4e4b\u5916\u7684\u65f6\u95f4\u8ba1\u7b97 \u6d89\u53ca\u5230\u4e00\u5929\u4ee5\u5916\u7684\u65f6\u95f4\u8ba1\u7b97\uff0c\u5c31\u9700\u8981\u7528\u5230 time.AddDate() \uff0c\u51fd\u6570\u539f\u578b\uff1a func (t Time) AddDate(years int, months int, days int) Time \u6bd4\u5982\u60f3\u77e5\u9053 \u4e00\u5e74\u4e00\u4e2a\u6708\u96f6\u4e00\u5929 \u4e4b\u540e\u7684\u65f6\u95f4\uff0c\u5c31\u53ef\u4ee5\u8fd9\u6837\uff1a now := time.Now() fmt.Println(now) m1 := now.AddDate(1,1,1) fmt.Println(m1) \u518d\u6bd4\u5982\uff0c\u60f3\u83b7\u5f97 2 \u5929\u4e4b\u524d\u65f6\u95f4\uff1a now := time.Now() fmt.Println(now) m1 := now.AddDate(0,0,-2) fmt.Println(m1) 3.3 \u65e5\u671f\u6bd4\u8f83 \u65e5\u671f\u7684\u6bd4\u8f83\u603b\u5171\u6709\u4e09\u79cd\uff1a\u4e4b\u524d\u3001\u4e4b\u540e\u548c\u76f8\u7b49\u3002 // \u5982\u679c t \u4ee3\u8868\u7684\u65f6\u95f4\u70b9\u5728 u \u4e4b\u524d\uff0c\u8fd4\u56de\u771f\uff1b\u5426\u5219\u8fd4\u56de\u5047\u3002 func (t Time) Before(u Time) bool // \u5982\u679c t \u4ee3\u8868\u7684\u65f6\u95f4\u70b9\u5728 u \u4e4b\u540e\uff0c\u8fd4\u56de\u771f\uff1b\u5426\u5219\u8fd4\u56de\u5047\u3002 func (t Time) After(u Time) bool // \u6bd4\u8f83\u65f6\u95f4\u662f\u5426\u76f8\u7b49\uff0c\u76f8\u7b49\u8fd4\u56de\u771f\uff1b\u5426\u5219\u8fd4\u56de\u5047\u3002 func (t Time) Equal(u Time) bool now := time.Now() fmt.Println(now) // 1\u5c0f\u65f6\u4e4b\u540e t1, _ := time.ParseDuration(\"1h\") m1 := now.Add(t1) fmt.Println(m1) fmt.Println(m1.After(now)) fmt.Println(now.Before(m1)) fmt.Println(now.Equal(m1)) \u8f93\u51fa\uff1a 2021-01-10 21:00:44.409785 +0800 CST m=+0.000186800 2021-01-10 22:00:44.409785 +0800 CST m=+3600.000186800 true true false 4\u3001\u5e38\u89c1\u4f8b\u5b50 \u4e0b\u9762\u5217\u4e3e\u4e00\u4e9b\u5e38\u89c1\u7684\u4f8b\u5b50\u548c\u51fd\u6570\u5c01\u88c5\u3002 4.1 \u65e5\u671f\u683c\u5f0f \u8f6c \u65f6\u95f4\u6233 func TimeStr2Time(fmtStr,valueStr, locStr string) int64 { loc := time.Local if locStr != \"\" { loc, _ = time.LoadLocation(locStr) // \u8bbe\u7f6e\u65f6\u533a } if fmtStr == \"\" { fmtStr = \"2006-01-02 15:04:05\" } t, _ := time.ParseInLocation(fmtStr, valueStr, loc) return t.Unix() } 4.2 \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u65e5\u671f\u683c\u5f0f func GetCurrentFormatStr(fmtStr string) string { if fmtStr == \"\" { fmtStr = \"2006-01-02 15:04:05\" } return time.Now().Format(fmtStr) } 4.3 \u65f6\u95f4\u6233 to \u65e5\u671f\u683c\u5f0f func Sec2TimeStr(sec int64, fmtStr string) string { if fmtStr == \"\" { fmtStr = \"2006-01-02 15:04:05\" } return time.Unix(sec, 0).Format(fmtStr) } Go-regexp\u6b63\u5219 package main import ( \"fmt\" \"regexp\" ) const text = \"My email is ccmouse@gmail.com\" func main() { compile := regexp.MustCompile(`[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+`) match := compile.FindString(text) fmt.Println(match) } Go\u5b58\u50a8\u57fa\u7840 \u2014 \u6587\u4ef6 IO \u64cd\u4f5c \u4e24\u5927 IO \u5206\u7c7b \u8ba1\u7b97\u7684\u4f53\u7cfb\u67b6\u6784\uff0cCPU\uff0c\u5185\u5b58\uff0c\u7f51\u7edc\uff0cIO\u3002\u90a3\u4e48 IO \u662f\u4ec0\u4e48\u5462\uff1f\u4e00\u822c\u7406\u89e3\u6210 Input\u3001Output \u7684\u7f29\u5199\uff0c\u901a\u4fd7\u8bdd\u5c31\u662f\u8f93\u5165\u8f93\u51fa\u7684\u610f\u601d\u3002 IO \u5206\u4e3a\u7f51\u7edc\u548c\u5b58\u50a8 IO \u4e24\u79cd\u7c7b\u578b\uff08 \u5176\u5b9e\u7f51\u7edc IO \u548c\u78c1\u76d8 IO \u5728 Go \u91cc\u9762\u6709\u7740\u6839\u672c\u6027\u533a\u522b \uff09\u3002\u7f51\u7edc IO \u5bf9\u5e94\u7684\u662f\u7f51\u7edc\u6570\u636e\u4f20\u8f93\u8fc7\u7a0b\uff0c\u7f51\u7edc\u662f\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u57fa\u77f3\uff0c\u901a\u8fc7\u7f51\u7edc\u628a\u79bb\u6563\u7684\u7269\u7406\u8282\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u6709\u673a\u7684\u7cfb\u7edf\u3002 \u5b58\u50a8 IO \u5bf9\u5e94\u7684\u5c31\u662f\u6570\u636e\u5b58\u50a8\u5230\u7269\u7406\u4ecb\u8d28\u7684\u8fc7\u7a0b\uff0c\u901a\u5e38\u7269\u7406\u4ecb\u8d28\u5bf9\u5e94\u7684\u662f\u78c1\u76d8\uff0c\u78c1\u76d8\u4e0a\u4e00\u822c\u4f1a\u5206\u4e2a\u533a\uff0c\u7136\u540e\u5728\u4e0a\u9762\u683c\u5f0f\u5316\u4e2a\u6587\u4ef6\u7cfb\u7edf\u51fa\u6765\uff0c\u6240\u4ee5\u666e\u901a\u7a0b\u5e8f\u5458\u6700\u5e38\u770b\u89c1\u7684\u662f\u6587\u4ef6 IO \u7684\u5f62\u5f0f\u3002 \u5728 Golang \u91cc\u53ef\u4ee5\u5f52\u7c7b\u51fa\u4e24\u79cd\u8bfb\u5199\u6587\u4ef6\u7684\u65b9\u5f0f\uff1a \u6807\u51c6\u5e93\u5c01\u88c5\uff1a\u64cd\u4f5c\u5bf9\u8c61 File ; \u7cfb\u7edf\u8c03\u7528 \uff1a\u64cd\u4f5c\u5bf9\u8c61 fd ; \u8bfb\u5199\u6570\u636e\u8981\u7d20 \u6587\u4ef6\u7684\u8bfb\u5199\u6700\u6838\u5fc3\u7684\u8981\u7d20\u662f\u4ec0\u4e48\uff1f \u901a\u4fd7\u6765\u8bb2\uff1a\u8bfb\u6587\u4ef6\uff0c\u5c31\u662f\u628a\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\u7684 \u7279\u5b9a\u4f4d\u7f6e \u7684\u6570\u636e\u8bfb\u5230 \u5185\u5b58\u7684 buffer \u3002\u5199\u6587\u4ef6\uff0c\u5c31\u662f\u628a \u5185\u5b58 buffer \u7684\u6570\u636e\u5199\u5230\u78c1\u76d8\u7684\u6587\u4ef6\u7684 \u7279\u5b9a\u4f4d\u7f6e \u3002 \u8fd9\u91cc\u6ce8\u610f\u5230\u4e24\u4e2a\u5173\u952e\u8bcd\uff1a \u7279\u5b9a\u4f4d\u7f6e\uff1b \u5185\u5b58 buffer\uff1b \u7279\u5b9a\u4f4d\u7f6e\u600e\u4e48\u7406\u89e3\uff1f\u600e\u4e48\u6307\u5b9a\u6240\u8c13\u7684 \u7279\u5b9a\u4f4d\u7f6e \uff1f \u5f88\u7b80\u5355\uff0c\u7528 [ offset, length ] \u8fd9\u4e24\u4e2a\u53c2\u6570\u5c31\u80fd\u6807\u8bc6\u4e00\u6bb5\u4f4d\u7f6e\u3002 \u4e5f\u5c31\u662f IO \u504f\u79fb\u548c\u957f\u5ea6\uff0cOffset \u548c Length\u3002 \u5185\u5b58 buffer \u600e\u4e48\u7406\u89e3\uff1f \u5f52\u6839\u7ed3\u5e95\uff0c\u6587\u4ef6\u7684\u6570\u636e\u548c\u8c01\u76f4\u63a5\u6253\u4ea4\u9053\uff1f \u5185\u5b58 \uff0c\u5199\u7684\u65f6\u5019\u662f\u4ece\u5185\u5b58\u5199\u5230\u78c1\u76d8\u6587\u4ef6\u7684\uff0c\u8bfb\u7684\u65f6\u5019\u662f\u4ece\u78c1\u76d8\u6587\u4ef6\u8bfb\u5230\u5185\u5b58\u7684\u3002 \u672c\u8d28\u4e0a\uff0c\u4e0b\u9762\u7684 IO \u51fd\u6570\u90fd\u79bb\u4e0d\u5f00 Offset\uff0cLength\uff0cbuffer \u8fd9\u4e09\u4e2a\u8981\u7d20\u3002 \u6807\u51c6\u5e93\u5c01\u88c5 Go \u5bf9\u6587\u4ef6\u8fdb\u884c\u8bfb\u5199\u975e\u5e38\u7b80\u5355\uff0c\u56e0\u4e3a Go \u5df2\u7ecf\u5c01\u88c5\u4e86\u4e00\u4e2a\u975e\u5e38\u4fbf\u6377\u7684\u4f7f\u7528\u63a5\u53e3\uff0c\u4f4d\u4e8e\u6807\u51c6\u5e93 os \u4e2d\u3002Go \u6807\u51c6\u5e93\u5bf9\u6587\u4ef6 IO \u7684\u5c01\u88c5\u4e5f\u5c31\u662f Go \u63a8\u8350\u5bf9\u6587\u4ef6\u8fdb\u884c IO \u65f6\u4f7f\u7528\u7684\u64cd\u4f5c\u65b9\u5f0f\u3002 \u6253\u5f00\u6587\u4ef6\uff08Open\uff09 func OpenFile(name string, flag int, perm FileMode) (*File, error) Open \u6587\u4ef6\u4e4b\u540e\uff0c\u83b7\u53d6\u5230\u4e00\u4e2a\u53e5\u67c4\uff0c\u4e5f\u5c31\u662f File \u7ed3\u6784\uff0c\u4e4b\u540e\u5bf9\u6587\u4ef6\u7684\u8bfb\u5199\u90fd\u662f\u57fa\u4e8e File \u7ed3\u6784\u4e4b\u4e0a\u8fdb\u884c\u7684\u3002 type File struct { *file // os specific } \u6587\u4ef6\u8bfb\u5199\u53ea\u9700\u8981\u9488\u5bf9\u8fd9\u4e2a\u53e5\u67c4\u7ed3\u6784\u4f53\u505a\u64cd\u4f5c\u5373\u53ef\u3002 \u53e6\u5916\u6709\u4e00\u70b9\u9690\u85cf\u8d77\u6765\u7684\u77e5\u8bc6\u70b9\u5fc5\u987b\u8981\u63d0\u4e00\u4e0b\uff1a \u504f\u79fb \u3002\u4e5f\u5c31\u662f\u6700\u5f00\u59cb\u5f3a\u8c03\u7684\u8bfb\u5199 3 \u8981\u7d20\u4e4b\u4e00\u7684 Offset \u3002\u6253\u5f00\uff08 Open \uff09\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u6587\u4ef6\u5f53\u524d\u504f\u79fb\u91cf\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a 0\uff0c\u4e5f\u5c31\u662f\u8bf4 IO \u7684\u8d77\u59cb\u4f4d\u7f6e\u5c31\u662f\u6587\u4ef6\u7684\u6700\u5f00\u5934\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u8fd9\u4e2a\u65f6\u5019\uff0c\u5199 4K \u7684\u6570\u636e\u5230\u6587\u4ef6\uff0c\u90a3\u4e48\u5c31\u662f\u5199 [0, 4K] \u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6570\u636e\uff0c\u5982\u679c\u4e4b\u524d\u8fd9\u4e0a\u9762\u5df2\u7ecf\u6709\u6570\u636e\u4e86\uff0c\u90a3\u4e48\u5c31\u4f1a\u662f\u8986\u76d6\u5199\u3002 \u9664\u975e Open \u6587\u4ef6\u7684\u65f6\u5019\u6307\u5b9a O_APPEND \u9009\u9879\uff0c\u504f\u79fb\u91cf\u4f1a\u8bbe\u7f6e\u4e3a\u6587\u4ef6\u672b\u5c3e\uff0c\u90a3\u4e48 IO \u90fd\u662f\u4ece\u6587\u4ef6\u672b\u5c3e\u5f00\u59cb\u3002 \u6587\u4ef6\u5199\u64cd\u4f5c\uff08Write\uff09 \u6587\u4ef6 File \u53e5\u67c4\u5bf9\u8c61\u6709\u4e24\u4e2a\u5199\u65b9\u6cd5\uff1a \u7b2c\u4e00\u79cd\uff1a\u5199\u4e00\u4e2a buffer \u5230\u6587\u4ef6 \uff0c\u4f7f\u7528\u6587\u4ef6\u5f53\u524d\u504f\u79fb func (f *File) Write(b []byte) (n int, err error) \u6ce8\u610f\uff1a\u8be5\u5199\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u6587\u4ef6\u504f\u79fb\u91cf\u7684\u589e\u52a0\u3002 \u7b2c\u4e8c\u79cd\uff1a\u4ece\u6307\u5b9a\u6587\u4ef6\u504f\u79fb\uff0c\u5199\u5165 buffer \u5230\u6587\u4ef6 func (f *File) WriteAt(b []byte, off int64) (n int, err error) \u6ce8\u610f\uff1a\u8be5\u5199\u64cd\u4f5c\u4e0d\u4f1a\u66f4\u65b0\u6587\u4ef6\u504f\u79fb\u91cf \u6587\u4ef6\u8bfb\u64cd\u4f5c\uff08Read\uff09 \u548c\u5199\u5bf9\u5e94\uff0c\u6587\u4ef6 File \u53e5\u67c4\u5bf9\u8c61\u6709\u4e24\u4e2a\u8bfb\u65b9\u6cd5\uff1a \u7b2c\u4e00\u79cd\uff1a\u4ece\u6587\u4ef6\u5f53\u524d\u504f\u79fb\u8bfb\u4e00\u4e2a buffer \u7684\u6570\u636e\u4e0a\u6765 func (f *File) Read(b []byte) (n int, err error) \u6ce8\u610f\uff1a\u8be5\u8bfb\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u6587\u4ef6\u504f\u79fb\u91cf\u7684\u589e\u52a0\u3002 \u7b2c\u4e8c\u79cd\uff1a\u4ece\u6307\u5b9a\u6587\u4ef6\u504f\u79fb\uff0c\u8bfb\u4e00\u4e2a buffer \u5927\u5c0f\u7684\u6570\u636e\u4e0a\u6765 func (f *File) ReadAt(b []byte, off int64) (n int, err error) \u6ce8\u610f\uff1a\u8be5\u8bfb\u64cd\u4f5c\u4e0d\u4f1a\u66f4\u65b0\u6587\u4ef6\u504f\u79fb\u91cf \u6307\u5b9a\u504f\u79fb\u91cf\uff08Seek\uff09 func (f *File) Seek(offset int64, whence int) (ret int64, err error) \u8fd9\u4e2a\u53e5\u67c4\u65b9\u6cd5\u5141\u8bb8\u7528\u6237\u6307\u5b9a\u6587\u4ef6\u7684\u504f\u79fb\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6587\u4ef6\u521a\u5f00\u59cb\u662f 0 \u5b57\u8282\uff0c\u5199 1M \u7684\u6570\u636e\u4e0b\u53bb\uff0c\u5927\u5c0f\u53d8\u6210 1M\uff0cOffset \u5f80\u540e\u632a 1M \uff0c\u9ed8\u8ba4\u5c31\u662f\u5f80\u540e\u632a\u3002 \u73b0\u5728 Seek \u65b9\u6cd5\u5141\u8bb8\u628a\u5199\u7684\u504f\u79fb\u5b9a\u4f4d\u5230\u4efb\u610f\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u5c31\u53ef\u4ee5\u4ece\u4efb\u610f\u5730\u65b9\u8986\u76d6\u5199\u5165\u6570\u636e\u3002 \u6240\u4ee5\u5728 Go \u91cc\u9762\uff0c\u6587\u4ef6 IO \u975e\u5e38\u7b80\u5355\uff0c\u5148 Open \u4e00\u4e2a\u6587\u4ef6\uff0c\u62ff\u5230 File \u53e5\u67c4\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u53e5\u67c4 Write \uff0cRead\uff0cSeek \u5c31\u80fd\u8fdb\u884c IO \u4e86\u3002 \u5e95\u5c42\u7684\u539f\u7406 Go \u7684\u6807\u51c6\u5e93 os \u63d0\u4f9b\u4e86\u6781\u5176\u65b9\u4fbf\u7684\u5c01\u88c5\uff0c\u6df1\u5165\u6700\u539f\u59cb\u7684\u672c\u8d28\u53ef\u4ee5\u53d1\u73b0\u6700\u6838\u5fc3\u7684\u4e1c\u897f\uff1a \u7cfb\u7edf\u8c03\u7528 \u3002 Go \u6807\u51c6\u5e93\u7684\u6587\u4ef6\u5b58\u50a8 IO \u5c31\u662f\u57fa\u4e8e\u7cfb\u7edf\u8c03\u7528\u4e4b\u4e0a\u7684\u3002\u53ef\u4ee5\u7a0d\u5fae\u8ddf\u4e00\u4e0b os.OpenFile \u7684\u8c03\u7528\uff1a os \u5e93\u7684 OpenFile \u51fd\u6570\uff1a func OpenFile(name string, flag int, perm FileMode) (*File, error) { f, err := openFileNolog(name, flag, perm) if err != nil { return nil, err } f.appendMode = flag&O_APPEND != 0 return f, nil } \u7a0d\u5fae\u770b\u4e0b openFileNolog \u51fd\u6570\uff1a func openFileNolog(name string, flag int, perm FileMode) (*File, error) { var r int for { var e error r, e = syscall.Open(name, flag|syscall.O_CLOEXEC, syscallMode(perm)) if e == nil { break } if runtime.GOOS == \"darwin\" && e == syscall.EINTR { continue } return nil, &PathError{\"open\", name, e} } return newFile(uintptr(r), name, kindOpenFile), nil } \u53ef\u4ee5\u770b\u5230 syscall.Open \uff0c\u8fd9\u4e2a\u51fd\u6570\u83b7\u53d6\u5230\u4e00\u4e2a\u6574\u6570\uff0c\u4e5f\u5c31\u662f\u5728 c \u8bed\u8a00\u91cc\u6700\u5e38\u89c1\u7684 fd \u53e5\u67c4\uff0c\u800c File \u7ed3\u6784\u4f53\u5219\u4ec5\u4ec5\u662f\u57fa\u4e8e\u8fd9\u4e2a\u7684\u4e00\u5c42\u5c01\u88c5\u800c\u5df2\u3002 \u601d\u8003\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u6709\u6807\u51c6\u5e93\u5c01\u88c5\u8fd9\u4e00\u5c42\u5b58\u5728\uff1f \u5212\u91cd\u70b9\uff1a\u4e3a\u4e86\u5c4f\u853d\u64cd\u4f5c\u7cfb\u7edf\u7684\u533a\u522b \uff0c\u4f7f\u7528\u8fd9\u4e2a\u6807\u51c6\u5e93\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u8de8\u5e73\u53f0\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u662f\u7279\u6b8a\u64cd\u4f5c\u7cfb\u7edf\u624d\u6709\u7684\u7279\u6027\uff0c\u90a3\u4e48\u5728 os \u5e93\u91cc\u5c31\u627e\u4e0d\u5230\u5bf9\u5e94\u5c01\u88c5\u7684 IO \u64cd\u4f5c\u3002 \u90a3\u4e48\u600e\u4e48\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\uff1f \u76f4\u63a5\u4f7f\u7528 syscall \u5e93\uff0c\u4e5f\u5c31\u662f\u7cfb\u7edf\u8c03\u7528\u3002\u4ece\u540d\u5b57\u4e5f\u80fd\u770b\u51fa\u6765\uff0c\u7cfb\u7edf\u8c03\u7528\u662f\u548c\u64cd\u4f5c\u7cfb\u7edf\u5f3a\u76f8\u5173\u7684\uff0c\u56e0\u4e3a\u662f\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u8c03\u7528\u63a5\u53e3\uff0c\u6240\u4ee5\u7cfb\u7edf\u8c03\u7528\u4f1a\u56e0\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u540c\u800c\u5bfc\u81f4\u4e0d\u540c\u7684\u7279\u6027\uff0c\u4e0d\u540c\u7684\u63a5\u53e3\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u76f4\u63a5\u4f7f\u7528 syscall \u5e93\u6765\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\uff0c\u90a3\u4e48\u9700\u8981\u81ea\u5df1\u6765\u627f\u53d7\u7cfb\u7edf\u5e26\u6765\u7684\u517c\u5bb9\u6027\u95ee\u9898\u3002 \u7cfb\u7edf\u8c03\u7528 \u7cfb\u7edf\u8c03\u7528\u5728 syscall \u91cc\u6709\u4e00\u5c42\u6700\u57fa\u7840\u7684\u5c01\u88c5\uff1a \u6587\u4ef6 Open func Open(path string, mode int, perm uint32) (fd int, err error) \u6587\u4ef6 Read func Read(fd int, p []byte) (n int, err error) func Pread(fd int, p []byte, offset int64) (n int, err error) \u6587\u4ef6\u8bfb\u6709\u4e24\u4e2a\u63a5\u53e3\uff0c\u4e00\u4e2a Read \u662f\u4ece \u5f53\u524d\u9ed8\u8ba4\u504f\u79fb \u8bfb\u4e00\u4e2a buffer \u6570\u636e\uff0c Pread \u63a5\u53e3\u5219\u662f\u4ece\u6307\u5b9a\u4f4d\u7f6e\u8bfb\u6570\u636e\u7684\u63a5\u53e3\u3002 \u601d\u8003\u4e00\u4e2a\u95ee\u9898\uff1a Pread \u4ece\u6548\u679c\u4e0a\u6765\u8bb2\u7b49\u4e8e Seek \u548c Read \u7ec4\u5408\u8d77\u6765\u4f7f\u7528\uff0c\u90a3\u4e48\u662f\u5426\u53ef\u4ee5\u8ba4\u4e3a Pread \u5c31\u53ef\u4ee5\u88ab Seek + Read \u66ff\u4ee3\u5462\uff1f \u4e0d\u884c\uff01\u6839\u672c\u539f\u56e0\u5728\u4e8e Seek + Read \u662f\u5728\u7528\u6237\u5c42\u5c31\u662f\u4e24\u6b65\u64cd\u4f5c\uff0c\u800c Pread \u867d\u7136\u662f Seek + Read \u7684\u6548\u679c\uff0c\u4f46\u662f\u64cd\u4f5c\u7cfb\u7edf\u7ed9\u5230\u7528\u6237\u7684\u8bed\u4e49\u662f\uff1a Pread \u662f\u4e00\u4e2a\u539f\u5b50\u64cd\u4f5c\u3002\u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u533a\u522b\uff0c Pread \u4e0d\u4f1a\u6539\u53d8\u5f53\u524d\u6587\u4ef6\u7684\u504f\u79fb\u91cf\uff08\u666e\u901a\u7684 Read \u8c03\u7528\u4f1a\u66f4\u65b0\u504f\u79fb\u91cf\uff09\u3002 \u6240\u4ee5\uff0c\u603b\u7ed3\u4e0b\uff0c **Pread** \u548c\u987a\u5e8f\u8c03\u7528 **Seek** \u540e\u8c03\u7528 **Read** \u6709\u4e24\u70b9\u91cd\u8981\u533a\u522b\uff1a Pread \u5bf9\u7528\u6237\u63d0\u4f9b\u7684\u8bed\u4e49\u662f\u539f\u5b50\u64cd\u4f5c\uff0c\u5728\u8c03\u7528 Pread \u65f6\uff0c\u65e0\u6cd5\u4e2d\u65ad Seek \u548c Read \u64cd\u4f5c\uff1b Pread \u8c03\u7528\u4e0d\u4f1a\u66f4\u65b0\u5f53\u524d\u6587\u4ef6\u504f\u79fb\u91cf\uff1b \u6587\u4ef6 Write func Write(fd int, p []byte) (n int, err error) func Pwrite(fd int, p []byte, offset int64) (n int, err error) \u6587\u4ef6\u5199\u5bf9\u5e94\u4e5f\u662f\u6709\u4e24\u79cd\u63a5\u53e3\uff0c Wrtie \u548c Pwrite \u5206\u522b\u662f\u5bf9\u5e94 Read \u548c Pread \u3002\u540c\u6837\u7684\uff0c Pwrite \u4f5c\u7528\u4e0a\u4e5f\u662f\u76f8\u5f53\u4e8e\u5148\u8c03\u7528 Seek \u518d\u8c03\u7528 Write \uff0c\u4f46\u662f\u540c\u6837\u7684\u4e5f\u6709 \u4e24\u70b9\u4e0d\u540c \uff1a Pwrite \u5b8c\u6210 Seek \u548c Write \u5bf9\u5916\u662f\u539f\u5b50\u64cd\u4f5c\u7684\u8bed\u4e49\uff1b Pwrite \u8c03\u7528\u4e0d\u4f1a\u66f4\u65b0\u5f53\u524d\u6587\u4ef6\u504f\u79fb\u91cf\uff1b \u6587\u4ef6 Seek func Seek(fd int, offset int64, whence int) (off int64, err error) \u8fd9\u4e2a\u51fd\u6570\u8c03\u7528\u5141\u8bb8\u7528\u6237\u6307\u5b9a\u504f\u79fb\uff08\u8fd9\u4e2a\u4f1a\u5f71\u54cd\u5230 Read \u548c Write \u8bfb\u5199\u7684\u4f4d\u7f6e\uff09\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6bcf\u4e2a\u6253\u5f00\u6587\u4ef6\u90fd\u6709\u4e00\u4e2a\u76f8\u5173\u8054\u7684\u201c\u5f53\u524d\u6587\u4ef6\u504f\u79fb\u91cf\u201d\uff08 current file offset \uff09\u3002\u8bfb\uff08 Read \uff09\u3001\u5199\uff08 Write \uff09\u64cd\u4f5c\u90fd\u662f\u4ece \u5f53\u524d\u6587\u4ef6\u504f\u79fb\u91cf\u5904 \u5f00\u59cb\uff0c\u5e76\u4e14 Read \u548c Write \u4f1a\u5bfc\u81f4\u504f\u79fb\u91cf\u589e\u52a0\uff0c\u589e\u52a0\u91cf\u5c31\u662f\u6240\u8bfb\u5199\u7684\u5b57\u8282\u6570\u3002 \u5c0f\u7ed3\u4e00\u4e0b \uff1aGo\u6838\u5fc3\u7684 Open\uff0cRead\uff0cWrite\uff0cSeek \u51e0\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u660e\u663e\u4e0d\u540c\u4e0e\u6807\u51c6 IO \u5e93\u7684\u533a\u522b\uff1a \u7cfb\u7edf\u8c03\u7528\u64cd\u4f5c\u5bf9\u8c61\u662f\u4e00\u4e2a\u6574\u6570\u53e5\u67c4 \u3002 Open \u6587\u4ef6\u5f97\u5230\u4e00\u4e2a\u6574\u6570 fd\uff0c\u4e4b\u540e\u7684\u6240\u6709 IO \u90fd\u662f\u9488\u5bf9\u8fd9\u4e2a fd \u6765\u64cd\u4f5c\u7684\u3002\u8fd9\u4e2a\u660e\u663e\u548c\u6807\u51c6\u5e93\u4e0d\u540c\uff0cos \u6807\u51c6\u5e93 OpenFile \u5f97\u5230\u7684\u662f\u4e00\u4e2a File \u7ed3\u6784\u4f53\uff0c\u6240\u6709\u7684 IO \u4e5f\u662f\u9488\u5bf9\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u3002 \u5c42\u6b21\u67b6\u6784 \u90a3\u4e48\u7a76\u7adf\u5c01\u88c5\u7684\u5c42\u6b21\u4e00\u822c\u662f\u4ec0\u4e48\u6837\u7684\u5462\uff0c Unix \u7f16\u7a0b\u91cc\u9762\u5f00\u7bc7\u5c31\u6709\u4e00\u5f20\u5982\u4e0b\u56fe\uff1a \u8fd9\u5f20\u56fe\u5c31\u975e\u5e38\u5f62\u8c61\u7684\u8bb2\u660e\u767d\u4e86\u6574\u4e2a Unix \u4f53\u7cfb\u7ed3\u6784\u3002 \u5185\u6838\u662f\u6700\u6838\u5fc3\u7684\u5b9e\u73b0\uff0c\u5305\u62ec\u4e86\u548c IO \u8bbe\u5907\uff0c\u786c\u4ef6\u4ea4\u4e92\u7b49\u529f\u80fd\u3002\u4e0e\u5185\u6838\u7d27\u5bc6\u7684\u4e00\u5c42\u662f\u5185\u6838\u63d0\u4f9b\u7ed9\u5916\u90e8\u8c03\u7528\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u7cfb\u7edf\u8c03\u7528\u63d0\u4f9b\u4e86\u7528\u6237\u6001\u5230\u5185\u6838\u6001\u8c03\u7528\u7684\u4e00\u4e2a\u901a\u9053\uff1b \u5bf9\u4e8e\u7cfb\u7edf\u8c03\u7528\uff0c\u5404\u4e2a\u8bed\u8a00\u7684\u6807\u51c6\u5e93\u4f1a\u6709\u4e00\u4e9b\u5c01\u88c5\uff0c\u6bd4\u5982 C \u8bed\u8a00\u7684 libc \u5e93\uff0cGo \u8bed\u8a00\u7684 os \uff0csyscall \u5e93\u90fd\u662f\u7c7b\u4f3c\u7684\u5730\u4f4d\uff0c\u8fd9\u4e2a\u5c31\u662f\u6240\u8c13\u7684\u516c\u5171\u5e93 \u3002\u8fd9\u5c42\u5c01\u88c5\u7684\u4f5c\u7528\u6700\u4e3b\u8981\u662f\u7b80\u5316\u666e\u901a\u7a0b\u5e8f\u5458\u4f7f\u7528\u6548\u7387\uff0c\u5e76\u4e14\u5c4f\u853d\u7cfb\u7edf\u7ec6\u8282\uff0c\u4e3a\u8de8\u5e73\u53f0\u63d0\u4f9b\u57fa\u7840\uff08\u540c\u6837\u7684\uff0c\u4e3a\u4e86\u8de8\u5e73\u53f0\u7684\u7279\u6027\uff0c\u53ef\u80fd\u4f1a\u9609\u5272\u5f88\u591a\u4e0d\u517c\u5bb9\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u624d\u4f1a\u6709\u76f4\u63a5\u8c03\u7528\u7cfb\u7edf\u6389\u8c03\u7528\u7684\u9700\u6c42\uff09\uff1b \u5f53\u7136\uff0c\u53f3\u4e0a\u89d2\u8fd8\u770b\u5230\u4e00\u4e2a\u7f3a\u53e3\uff0c\u5e94\u7528\u7a0b\u5e8f\u9664\u4e86\u53ef\u4ee5\u4f7f\u7528\u516c\u5171\u51fd\u6570\u5e93\uff0c \u5176\u5b9e\u662f\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u7cfb\u7edf\u8c03\u7528\u7684\uff0c\u4f46\u662f\u7531\u6b64\u5e26\u6765\u7684\u590d\u6742\u6027\u53c8\u5e94\u7528\u81ea\u5df1\u627f\u62c5 \u3002\u8fd9\u79cd\u9700\u6c42\u4e5f\u662f\u5f88\u5e38\u89c1\u7684\uff0c\u6807\u51c6\u5e93\u5c01\u88c5\u4e86\u901a\u7528\u7684\u4e1c\u897f\uff0c\u540c\u6837\u5272\u820d\u4e86\u5f88\u591a\u7cfb\u7edf\u8c03\u7528\u7684\u529f\u80fd\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ea\u80fd\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u6765\u83b7\u53d6\uff1b \u603b\u7ed3 IO \u5927\u7c7b\u5206\u4e3a\u7f51\u7edc IO \u548c\u78c1\u76d8 IO\uff0cIO \u5bf9\u6587\u4ef6\u6765\u8bf4\u5c31\u662f\u8bfb\u5199\u64cd\u4f5c\uff0c\u5199\u7684\u65f6\u5019 \u6570\u636e\u4ece\u5185\u5b58\u5230\u78c1\u76d8 \uff0c\u8bfb\u7684\u65f6\u5019 \u6570\u636e\u4ece\u78c1\u76d8\u5230\u5185\u5b58 \uff1b Go \u6587\u4ef6 IO \u6700\u5e38\u7528\u7684\u662f os \u5e93\uff0c\u4f7f\u7528 Go \u5c01\u88c5\u7684\u6807\u51c6\u5e93\uff0c os.OpenFile \u6253\u5f00\uff0c File.Write \uff0c File.Read \u8fdb\u884c\u8bfb\u5199\uff0c\u64cd\u4f5c\u5bf9\u8c61\u90fd\u662f File \u7ed3\u6784\u4f53\uff1b Go \u6807\u51c6\u5e93\u5bf9 IO \u7684\u5c01\u88c5\u662f\u4e3a\u4e86\u5c4f\u853d\u590d\u6742\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u63d0\u4f9b\u8de8\u5e73\u53f0\u7684\u4f7f\u7528\u59ff\u52bf\u3002\u7136\u540e\u5355\u72ec\u63d0\u4f9b syscall \u5e93\uff0c\u8ba9\u7a0b\u5e8f\u5458\u81ea\u6211\u51b3\u7b56\u4f7f\u7528\u8981\u4f7f\u7528\u66f4\u4e30\u5bcc\u7684\u7cfb\u7edf\u8c03\u7528\u529f\u80fd\uff0c\u5f53\u7136\u540e\u679c\u81ea\u8d1f\uff1b Go \u6807\u51c6\u5e93 IO \u64cd\u4f5c\u5bf9\u8c61\u662f File \uff0c\u7cfb\u7edf\u8c03\u7528 IO \u64cd\u4f5c\u5bf9\u8c61\u662f fd\uff08\u975e\u8d1f\u6574\u6570\uff09\u3002 Open \u6587\u4ef6\u9ed8\u8ba4\u5f53\u524d\u504f\u79fb\u91cf\u662f 0 \uff08\u6587\u4ef6\u6700\u5f00\u59cb\uff09\uff0c\u52a0\u4e0a O_APPEND \u53c2\u6570\u4e4b\u540e\u504f\u79fb\u91cf\u4f1a\u662f\u6587\u4ef6\u672b\u5c3e\u3002\u901a\u8fc7 Seek \u8c03\u7528\u53ef\u4ee5\u4efb\u610f\u6307\u5b9a\u6587\u4ef6\u504f\u79fb\uff0c\u4ece\u800c\u5f71\u54cd\u6587\u4ef6 IO \u7684\u4f4d\u7f6e\uff1b Read \uff0c Write \u51fd\u6570\u53ea\u6709 buffer \uff08buffer \u6709\u957f\u5ea6\uff09\uff0c\u504f\u79fb\u5219\u4f7f\u7528\u5f53\u524d\u6587\u4ef6\u504f\u79fb\u91cf\uff1b Pread \uff0c Pwrite \u7684\u7cfb\u7edf\u8c03\u7528\u6548\u679c\u7b49\u540c\u4e8e Seek \u504f\u79fb\u91cf\u7136\u540e Read \uff0c Write \uff0c\u4f46\u662f\u53c8\u5927\u6709\u4e0d\u540c\u3002\u5bf9\u5916\u8bed\u4e49\u662f\u539f\u5b50\u64cd\u4f5c\uff0c\u5e76\u4e14\u4e0d\u66f4\u65b0\u5f53\u524d\u6587\u4ef6\u504f\u79fb\u91cf\uff1b Go-\u6587\u4ef6\u8bfb\u5199\u64cd\u4f5c \u8bfb\u5199\u6587\u4ef6 package main import ( \"bufio\" \"fmt\" \"io\" \"os\" ) /*\u5728\u5df2\u5b58\u5728\u6587\u4ef6\u6e05\u7a7a\u539f\u6709\u5185\u5bb9\u8fdb\u884c\u8ffd\u52a0*/ func main() { filePath := \"D:\\\\fcofficework\\\\DNS\\\\1.txt\" file, err := os.OpenFile(filePath, os.O_RDWR|os.O_APPEND, 0666) if err != nil { fmt.Printf(\"open file err = %v\\n\", err) return } /*\u5173\u95ed\u6587\u4ef6\u6d41*/ defer file.Close() /*\u8bfb\u53d6*/ reader := bufio.NewReader(file) for { str, err := reader.ReadString('\\n') if err == io.EOF { break } fmt.Print(str) } /*\u5199\u5165\u6587\u4ef6*/ str := \"hello FCC\u60a8\u597d\uff01\uff01\uff01\\r\\n\" writer := bufio.NewWriter(file) for i := 0; i < 5; i++ { writer.WriteString(str) } /*\u56e0\u4e3awriter\u662f\u5e26\u7f13\u5b58\u7684\uff0c\u9700\u8981\u901a\u8fc7flush\u5230\u78c1\u76d8*/ writer.Flush() } \u6587\u4ef6\u5185\u5bb9\u62f7\u8d1d\u81f3\u65b0\u6587\u4ef6 package main import ( \"fmt\" \"io/ioutil\" ) /*\u5c06\u6587\u4ef61\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u6587\u4ef62*/ func main() { file1Path := \"D:\\\\fcofficework\\\\DNS\\\\1.txt\" file2Path := \"D:\\\\fcofficework\\\\DNS\\\\2.txt\" data, err := ioutil.ReadFile(file1Path) if err != nil { fmt.Printf(\"read file err=%v\", err) return } err = ioutil.WriteFile(file2Path, data, 0666) if err != nil { fmt.Printf(\"write file err=%v\\n\", err) } } \u5224\u65ad\u6587\u4ef6\u6216\u8005\u76ee\u5f55\u662f\u5426\u5b58\u5728 package main import ( \"fmt\" \"os\" ) /*\u5224\u65ad\u6587\u4ef6\u4ee5\u53ca\u76ee\u5f55\u662f\u5426\u5b58\u5728*/ func PathExists(path string) (bool, error) { _, err := os.Stat(path) if err == nil { fmt.Println(\"\u5f53\u524d\u6587\u4ef6\u5b58\u5728\uff01\") return true, nil } if os.IsNotExist(err) { fmt.Println(\"\u5f53\u524d\u6587\u4ef6\u4e0d\u5b58\u5728\uff01\") return false, nil } return false, nil } func main() { path := \"D:\\\\fcofficework\\\\2.txt\" PathExists(path) } \u6587\u4ef6\u7684\u62f7\u8d1d package main import ( \"bufio\" \"fmt\" \"io\" \"os\" ) /*\u6587\u4ef6\u7684\u62f7\u8d1d*/ func CopyFile(dstFileName string, srcFileName string) (written int64, err error) { srcFile, err := os.Open(srcFileName) if err != nil { fmt.Printf(\"open file err=%v\\n\", err) } reader := bufio.NewReader(srcFile) dstFile, err := os.OpenFile(dstFileName, os.O_WRONLY|os.O_CREATE, 0666) if err != nil { fmt.Printf(\"open file err=%v\\n\", err) return } writer := bufio.NewWriter(dstFile) defer dstFile.Close() return io.Copy(writer, reader) } func main() { srcFile := \"D:\\\\Photos\\\\Datapicture\\\\mmexport1530688562488.jpg\" dstFile := \"D:\\\\Photos\\\\1.jpg\" _, err := CopyFile(dstFile, srcFile) if err == nil { fmt.Println(\"\u62f7\u8d1d\u5b8c\u6210\uff01\") } else { fmt.Println(\"\u62f7\u8d1d\u5931\u8d25\uff0cerr=\", err) } } \u8bfb\u53d6\u6587\u4ef6\u5e76\u7edf\u8ba1\u6587\u4ef6\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570 package main import ( \"bufio\" \"fmt\" \"io\" \"os\" ) /*\u7edf\u8ba1\u6587\u4ef6\u7684\u5b57\u7b26\u4e2a\u6570*/ type CharCount struct { /*\u82f1\u6587\u7684\u4e2a\u6570*/ ChCount int /*\u6570\u5b57\u7684\u4e2a\u6570*/ NumCount int /*\u7a7a\u683c\u7684\u4e2a\u6570*/ SpaceCount int /*\u5176\u4ed6\u5b57\u7b26\u7684\u4e2a\u6570*/ OtherCount int } func main() { fileName := \"D:\\\\fcofficework\\\\DNS\\\\1.txt\" file, err := os.Open(fileName) if err != nil { fmt.Printf(\"open file err=%v\\n\", err) return } defer file.Close() var count CharCount reader := bufio.NewReader(file) for { str, err := reader.ReadString('\\n') if err == io.EOF { break } for _, v := range str { switch { case v >= 'a' && v <= 'z': fallthrough case v >= 'A' && v <= 'Z': count.ChCount++ case v == ' ' || v == '\\t': count.SpaceCount++ case v >= '0' && v <= '9': count.NumCount++ default: count.OtherCount++ } } } fmt.Printf(\"\u5b57\u7b26\u7684\u4e2a\u6570\u4e3a\uff1a%v \u6570\u5b57\u7684\u4e2a\u6570\u4e3a\uff1a%v \u7a7a\u683c\u7684\u4e2a\u6570\u4e3a\uff1a%v \u5176\u4ed6\u5b57\u7b26\u7684\u4e2a\u6570\u4e3a\uff1a%v\", count.ChCount, count.NumCount, count.SpaceCount, count.OtherCount) } \u4e09\u79cd\u8bfb\u53d6\u6587\u4ef6\u7684\u65b9\u5f0f \u901a\u8fc7os\u8bfb\u53d6 package main import ( \"fmt\" \"os\" ) func main() { file, err := os.Open(\"d:\\\\Photos\\\\Screenshots\\\\\u6697\u7269\u8d28\\\\IMG_20180927_194619.jpg\") if err != nil { fmt.Println(\"open file err\", err) } fmt.Printf(\"file=%v\", file) err1 := file.Close() if err1 != nil { fmt.Println(\"close file err = \", err1) } } \u7f13\u51b2\u5f0f\u8bfb\u53d6\u6587\u4ef6 package main import ( \"bufio\" \"fmt\" \"io\" \"os\" ) /*\u7f13\u51b2\u5f0f\u8bfb\u53d6\u6587\u4ef6*/ func main() { file, err := os.Open(\"d:\\\\Photos\\\\Screenshots\\\\\u6697\u7269\u8d28\\\\IMG_20180927_194619.jpg\") if err != nil { fmt.Println(\"open file err\", err) } defer file.Close() reader := bufio.NewReader(file) for { str, err := reader.ReadString('\\n') if err == io.EOF { break } fmt.Print(str) } fmt.Println(\"\u6587\u4ef6\u8bfb\u53d6\u7ed3\u675f!\") } \u901a\u8fc7ioutil\u8bfb\u53d6 package main import ( \"fmt\" \"io/ioutil\" ) func main() { file := \"D:\\\\fcofficework\\\\DNS\\\\authorized_keys\" content, err := ioutil.ReadFile(file) if err != nil { fmt.Printf(\"read file err=%v\", err) } fmt.Printf(\"%v\", string(content)) } \u6587\u4ef6\u5199\u5165\u7684\u6848\u4f8b \u5728\u6587\u4ef6\u5199\u5165\u5185\u5bb9\uff0c\u6ca1\u6709\u5219\u91cd\u65b0\u521b\u5efa package main import ( \"bufio\" \"fmt\" \"os\" ) /*\u5728\u6587\u4ef6\u5199\u5165\u5185\u5bb9\uff0c\u6ca1\u6709\u6587\u4ef6\u5219\u91cd\u65b0\u521b\u5efa*/ func main() { filePath := \"D:\\\\fcofficework\\\\DNS\\\\1.txt\" file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE, 0666) if err != nil { fmt.Printf(\"open file err = %v\\n\", err) return } defer file.Close() str := \"hello world\\r\\n\" writer := bufio.NewWriter(file) for i := 0; i < 5; i++ { writer.WriteString(str) } /*\u56e0\u4e3awriter\u662f\u5e26\u7f13\u5b58\u7684\uff0c\u9700\u8981\u901a\u8fc7flush\u5230\u78c1\u76d8*/ writer.Flush() } \u5728\u5df2\u5b58\u5728\u6587\u4ef6\u6e05\u7a7a\u539f\u6709\u5185\u5bb9\u91cd\u65b0\u5199\u5165 package main import ( \"bufio\" \"fmt\" \"os\" ) /*\u5728\u5df2\u5b58\u5728\u6587\u4ef6\u6e05\u7a7a\u539f\u6709\u5185\u5bb9\u91cd\u65b0\u5199\u5165*/ func main() { filePath := \"D:\\\\fcofficework\\\\DNS\\\\1.txt\" file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_TRUNC, 0666) if err != nil { fmt.Printf(\"open file err = %v\\n\", err) return } defer file.Close() str := \"hello FCC\\r\\n\" writer := bufio.NewWriter(file) for i := 0; i < 5; i++ { writer.WriteString(str) } /*\u56e0\u4e3awriter\u662f\u5e26\u7f13\u5b58\u7684\uff0c\u9700\u8981\u901a\u8fc7flush\u5230\u78c1\u76d8*/ writer.Flush() } \u5728\u5df2\u5b58\u5728\u6587\u4ef6\u6e05\u7a7a\u539f\u6709\u5185\u5bb9\u8fdb\u884c\u8ffd\u52a0 package main import ( \"bufio\" \"fmt\" \"os\" ) /*\u5728\u5df2\u5b58\u5728\u6587\u4ef6\u6e05\u7a7a\u539f\u6709\u5185\u5bb9\u8fdb\u884c\u8ffd\u52a0*/ func main() { filePath := \"D:\\\\fcofficework\\\\DNS\\\\1.txt\" file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_APPEND, 0666) if err != nil { fmt.Printf(\"open file err = %v\\n\", err) return } defer file.Close() str := \"hello FCC\u60a8\u597d\uff01\uff01\uff01\\r\\n\" writer := bufio.NewWriter(file) for i := 0; i < 5; i++ { writer.WriteString(str) } /*\u56e0\u4e3awriter\u662f\u5e26\u7f13\u5b58\u7684\uff0c\u9700\u8981\u901a\u8fc7flush\u5230\u78c1\u76d8*/ writer.Flush() } \u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570 package main import ( \"fmt\" \"os\" ) /*\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570*/ func main() { fmt.Println(\"\u547d\u4ee4\u884c\u53c2\u6570\u6709\uff1a\", len(os.Args)) for i, v := range os.Args { fmt.Printf(\"args[%v]=%v\\n\", i, v) } } package main import ( \"flag\" \"fmt\" ) /*\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570*/ func main() { var user string var pwd string var host string var port int flag.StringVar(&user, \"u\", \"\", \"\u7528\u6237\u540d\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\") flag.StringVar(&pwd, \"pwd\", \"\", \"\u5bc6\u7801\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\") flag.StringVar(&host, \"h\", \"localhost\", \"\u4e3b\u673a\u540d\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\") flag.IntVar(&port, \"port\", 3306, \"\u7aef\u53e3\u53f7\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\") /*\u8f6c\u6362*/ flag.Parse() fmt.Printf(\"user=%v pwd=%v host=%v port=%v\", user, pwd, host, port) } Go-json\u5e8f\u5217\u5316 \u5e8f\u5217\u5316 package main import ( \"encoding/json\" \"fmt\" ) type Monster struct { Name string `json:\"name\"` Age int `json:\"age\"` Birthday string `json:\"birthday\"` Sal float64 `json:\"sal\"` Skill string `json:\"skill\"` } /*\u7ed3\u6784\u4f53\u5e8f\u5217\u5316*/ func NewMinsterStruct() { monster := Monster{ Name: \"\u5b59\u609f\u7a7a\", Age: 500, Birthday: \"2011-11-11\", Sal: 8000.0, Skill: \"\u5982\u610f\u4e03\u5341\u4e8c\u53d8\", } data, err := json.Marshal(&monster) if err != nil { fmt.Printf(\"\u5e8f\u5217\u5316\u9519\u8beferr\uff1a%v\\n\", err) } fmt.Printf(\"Map\u5e8f\u5217\u5316\u540e=%v\\n\", string(data)) } /*Map\u5e8f\u5217\u5316*/ func MapSerlizer() { var a map[string]interface{} a = make(map[string]interface{}) a[\"name\"] = \"\u725b\u9b54\u738b\" a[\"age\"] = 10 a[\"address\"] = \"\u706b\u4e91\u6d1e\" data, err := json.Marshal(a) if err != nil { fmt.Printf(\"\u5e8f\u5217\u5316\u9519\u8beferr\uff1a%v\\n\", err) } fmt.Printf(\"monster\u5e8f\u5217\u5316\u540e=%v\\n\", string(data)) } /*\u5207\u7247\u5e8f\u5217\u5316*/ func SliceSerlizer() { var slice []map[string]interface{} var m1 map[string]interface{} m1 = make(map[string]interface{}) m1[\"name\"] = \"TGH\" m1[\"age\"] = \"19\" m1[\"address\"] = \"\u5317\u4eac\" slice = append(slice, m1) var m2 map[string]interface{} m2 = make(map[string]interface{}) m2[\"name\"] = \"FCC\" m2[\"age\"] = \"18\" m2[\"address\"] = [2]string{\"\u534e\u5e9c\", \"\u5f71\u89c6\u5e1d\u56fd\"} slice = append(slice, m2) data, err := json.Marshal(slice) if err != nil { fmt.Printf(\"\u5e8f\u5217\u5316\u9519\u8beferr\uff1a%v\\n\", err) } fmt.Printf(\"\u5207\u7247\u5e8f\u5217\u5316\u540e=%v\\n\", string(data)) } /*\u57fa\u672c\u6570\u636e\u7c7b\u578b\u5e8f\u5217\u5316*/ func FloatSerlize() { var num1 float64 = 245.56 data, err := json.Marshal(num1) if err != nil { fmt.Printf(\"\u5e8f\u5217\u5316\u9519\u8beferr\uff1a%v\\n\", err) } fmt.Printf(\"\u57fa\u672c\u6570\u636e\u7c7b\u578b\u5e8f\u5217\u5316\u540e=%v\\n\", string(data)) } func main() { NewMinsterStruct() MapSerlizer() SliceSerlizer() FloatSerlize() } Map\u5e8f\u5217\u5316\u540e={\"name\":\"\u5b59\u609f\u7a7a\",\"age\":500,\"birthday\":\"2011-11-11\",\"sal\":8000,\"skill\":\"\u5982\u610f\u4e03\u5341\u4e8c\u53d8\"} monster\u5e8f\u5217\u5316\u540e={\"address\":\"\u706b\u4e91\u6d1e\",\"age\":10,\"name\":\"\u725b\u9b54\u738b\"} \u5207\u7247\u5e8f\u5217\u5316\u540e=[{\"address\":\"\u5317\u4eac\",\"age\":\"19\",\"name\":\"TGH\"},{\"address\":[\"\u534e\u5e9c\",\"\u5f71\u89c6\u5e1d\u56fd\"],\"age\":\"18\",\"name\":\"FCC\"}] \u57fa\u672c\u6570\u636e\u7c7b\u578b\u5e8f\u5217\u5316\u540e=245.56 \u53cd\u5e8f\u5217\u5316 package main import ( \"encoding/json\" \"fmt\" ) type Monster struct { Name string `json:\"name\"` Age int `json:\"age\"` Birthday string `json:\"birthday\"` Sal float64 `json:\"sal\"` Skill string `json:\"skill\"` } func unmarshalStruct() { str := \"{\\\"name\\\":\\\"\u5b59\u609f\u7a7a\\\",\\\"age\\\":500,\\\"birthday\\\":\\\"2011-11-11\\\",\\\"sal\\\":8000,\\\"skill\\\":\\\"\u5982\u610f\u4e03\u5341\u4e8c\u53d8\\\"}\" var monster Monster err := json.Unmarshal([]byte(str), &monster) if err != nil { fmt.Printf(\"\u53cd\u5e8f\u5217\u5316\u5931\u8d25err\uff1a%v\\n\", err) } fmt.Printf(\"\u53cd\u5e8f\u5217\u5316\u540emonster\uff1a%v\\n\", monster) } func unmarshallMap() { str := \"{\\\"address\\\":\\\"\u706b\u4e91\u6d1e\\\",\\\"age\\\":10,\\\"name\\\":\\\"\u725b\u9b54\u738b\\\"}\" var a map[string]interface{} err := json.Unmarshal([]byte(str), &a) if err != nil { fmt.Printf(\"\u53cd\u5e8f\u5217\u5316\u5931\u8d25err\uff1a%v\\n\", err) } fmt.Printf(\"\u53cd\u5e8f\u5217\u5316Map\u540e\uff1a%v\\n\", a) } func unmarshalSlice() { str := \"[{\\\"address\\\":\\\"\u5317\u4eac\\\",\\\"age\\\":\\\"19\\\",\\\"name\\\":\\\"TGH\\\"},\" + \"{\\\"address\\\":[\\\"\u534e\u5e9c\\\",\\\"\u5f71\u89c6\u5e1d\u56fd\\\"],\\\"age\\\":\\\"18\\\",\\\"name\\\":\\\"FCC\\\"}]\" var slice []map[string]interface{} err := json.Unmarshal([]byte(str), &slice) if err != nil { fmt.Printf(\"\u53cd\u5e8f\u5217\u5316\u5931\u8d25err\uff1a%v\\n\", err) } fmt.Printf(\"\u53cd\u5e8f\u5217\u5316Slice\u540e\uff1a%v\\n\", slice) } func main() { unmarshalStruct() unmarshallMap() unmarshalSlice() } \u8f93\u51fa\u7ed3\u679c\uff1a \u53cd\u5e8f\u5217\u5316\u540emonster\uff1a{\u5b59\u609f\u7a7a 500 2011-11-11 8000 \u5982\u610f\u4e03\u5341\u4e8c\u53d8} \u53cd\u5e8f\u5217\u5316Map\u540e\uff1amap[address:\u706b\u4e91\u6d1e age:10 name:\u725b\u9b54\u738b] \u53cd\u5e8f\u5217\u5316Slice\u540e\uff1a[map[address:\u5317\u4eac age:19 name:TGH] map[address:[\u534e\u5e9c \u5f71\u89c6\u5e1d\u56fd] age:18 name:FCC]] Go-HTTP\u5305\u7684\u4f7f\u7528 Web\u662f\u57fa\u4e8ehttp\u534f\u8bae\u7684\u4e00\u4e2a\u670d\u52a1\uff0cGo\u8bed\u8a00\u91cc\u9762\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b8c\u5584\u7684net/http\u5305\uff0c\u901a\u8fc7http\u5305\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u642d\u5efa\u8d77\u6765\u4e00\u4e2a\u53ef\u4ee5\u8fd0\u884c\u7684Web\u670d\u52a1\u3002\u540c\u65f6\u4f7f\u7528\u8fd9\u4e2a\u5305\u80fd\u5f88\u7b80\u5355\u5730\u5bf9Web\u7684\u8def\u7531\uff0c\u9759\u6001\u6587\u4ef6\uff0c\u6a21\u7248\uff0ccookie\u7b49\u6570\u636e\u8fdb\u884c\u8bbe\u7f6e\u548c\u64cd\u4f5c\u3002 http\u5305\u5efa\u7acbWeb\u670d\u52a1\u5668 package main import ( \"fmt\" \"net/http\" \"strings\" \"log\" ) func sayhelloName(w http.ResponseWriter, r *http.Request) { r.ParseForm() //\u89e3\u6790\u53c2\u6570\uff0c\u9ed8\u8ba4\u662f\u4e0d\u4f1a\u89e3\u6790\u7684 fmt.Println(r.Form) //\u8fd9\u4e9b\u4fe1\u606f\u662f\u8f93\u51fa\u5230\u670d\u52a1\u5668\u7aef\u7684\u6253\u5370\u4fe1\u606f fmt.Println(\"path\", r.URL.Path) fmt.Println(\"scheme\", r.URL.Scheme) fmt.Println(r.Form[\"url_long\"]) for k, v := range r.Form { fmt.Println(\"key:\", k) fmt.Println(\"val:\", strings.Join(v, \"\")) } fmt.Fprintf(w, \"Hello golang!\") //\u8fd9\u4e2a\u5199\u5165\u5230w\u7684\u662f\u8f93\u51fa\u5230\u5ba2\u6237\u7aef\u7684 } func main() { http.HandleFunc(\"/\", sayhelloName) //\u8bbe\u7f6e\u8bbf\u95ee\u7684\u8def\u7531 err := http.ListenAndServe(\":8080\", nil) //\u8bbe\u7f6e\u76d1\u542c\u7684\u7aef\u53e3 if err != nil { log.Fatal(\"ListenAndServe: \", err) } } \u4e0a\u9762\u8fd9\u4e2a\u4ee3\u7801\uff0cbuild\u4e4b\u540e\uff0c\u7136\u540e\u6267\u884cweb.exe,\u8fd9\u4e2a\u65f6\u5019\u5176\u5b9e\u5df2\u7ecf\u57288080\u7aef\u53e3\u76d1\u542chttp\u94fe\u63a5\u8bf7\u6c42\u4e86\u3002 \u5728\u6d4f\u89c8\u5668\u8f93\u5165 http://localhost:8080 \u53ef\u4ee5\u770b\u5230\u6d4f\u89c8\u5668\u9875\u9762\u8f93\u51fa\u4e86 Hello golang! \u6d4f\u89c8\u5668\u8f93\u5165\u5730\u5740\uff1a http://localhost:8080/?url_long=var1&url_long=var2 \u53ef\u4ee5\u770b\u770b\u6d4f\u89c8\u5668\u8f93\u51fa\u7684\u662f\u4ec0\u4e48 \u770b\u5230\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u8981\u7f16\u5199\u4e00\u4e2aWeb\u670d\u52a1\u5668\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u8c03\u7528http\u5305\u7684\u4e24\u4e2a\u51fd\u6570\u5c31\u53ef\u4ee5\u4e86\u3002 \u4f7f\u7528http\u5305\u8bf7\u6c42\u9875\u9762 package main import ( \"fmt\" \"net/http\" \"net/http/httputil\" ) func main() { request, err := http.NewRequest(http.MethodGet, \"http://www.imooc.com\", nil) if err != nil { panic(err) } request.Header.Add(\"User-Agent\", \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\") client := http.Client{ CheckRedirect: func(req *http.Request, via []*http.Request) error { fmt.Println(\"Redirect:\", req) return nil }, } resp, err := client.Do(request) //resp, err := http.DefaultClient.Do(request) //resp, err := http.Get(\"http://www.imooc.com\") if err != nil { panic(err) } defer resp.Body.Close() s, err := httputil.DumpResponse(resp, true) if err != nil { panic(err) } fmt.Println(string(s)) } \u7a0b\u5e8f\u8fd0\u884c\u6253\u5370\u51faHTML\u5185\u5bb9 net/http\u5305\u7684\u5751\u2014\u2014i/o timeout \u95ee\u9898 \u6765\u770b\u4e00\u6bb5\u65e5\u5e38\u4ee3\u7801\u3002 package main import ( \"bytes\" \"encoding/json\" \"fmt\" \"io/ioutil\" \"net\" \"net/http\" \"time\" ) var tr *http.Transport func init() { tr = &http.Transport{ MaxIdleConns: 100, Dial: func(netw, addr string) (net.Conn, error) { conn, err := net.DialTimeout(netw, addr, time.Second*2) //\u8bbe\u7f6e\u5efa\u7acb\u8fde\u63a5\u8d85\u65f6 if err != nil { return nil, err } err = conn.SetDeadline(time.Now().Add(time.Second * 3)) //\u8bbe\u7f6e\u53d1\u9001\u63a5\u53d7\u6570\u636e\u8d85\u65f6 if err != nil { return nil, err } return conn, nil }, } } func main() { for { _, err := Get(\"http://www.baidu.com/\") if err != nil { fmt.Println(err) break } } } func Get(url string) ([]byte, error) { m := make(map[string]interface{}) data, err := json.Marshal(m) if err != nil { return nil, err } body := bytes.NewReader(data) req, _ := http.NewRequest(\"Get\", url, body) req.Header.Add(\"content-type\", \"application/json\") client := &http.Client{ Transport: tr, } res, err := client.Do(req) if res != nil { defer res.Body.Close() } if err != nil { return nil, err } resBody, err := ioutil.ReadAll(res.Body) if err != nil { return nil, err } return resBody, nil } \u505a\u7684\u4e8b\u60c5\uff0c\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u662f\u5faa\u73af\u53bb\u8bf7\u6c42http://www.baidu.com/, \u7136\u540e\u7b49\u5f85\u54cd\u5e94\u3002 \u770b\u4e0a\u53bb\u8c8c\u4f3c\u6ca1\u5565\u95ee\u9898\u5427\u3002 \u4ee3\u7801\u8dd1\u8d77\u6765\uff0c\u4e5f\u786e\u5b9e\u80fd\u6b63\u5e38\u6536\u53d1\u6d88\u606f\u3002 \u4f46\u662f\u8fd9\u6bb5\u4ee3\u7801\u8dd1\u4e00\u6bb5\u65f6\u95f4\uff0c\u5c31\u4f1a\u51fa\u73b0i/o timeout\u7684\u62a5\u9519\u3002 \u8fd9\u5176\u5b9e\u662f\u6700\u8fd1\u6392\u67e5\u4e86\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u53d1\u73b0\u8fd9\u4e2a\u5751\u53ef\u80fd\u6bd4\u8f83\u5bb9\u6613\u8e29\u4e0a\uff0c\u8fd9\u8fb9\u5bf9\u4ee3\u7801\u505a\u4e86\u7b80\u5316\u3002 \u5b9e\u9645\u751f\u4ea7\u4e2d\u53d1\u751f\u7684\u73b0\u8c61\u662f\uff0cgolang\u670d\u52a1\u5728\u53d1\u8d77http\u8c03\u7528\u65f6\uff0c\u867d\u7136 http.Transport \u8bbe\u7f6e\u4e863s\u8d85\u65f6\uff0c\u4f1a\u5076\u53d1\u51fa\u73b0i/o timeout\u7684\u62a5\u9519\u3002 \u4f46\u662f\u67e5\u770b\u4e0b\u6e38\u670d\u52a1\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u4e0b\u6e38\u670d\u52a1\u5176\u5b9e100ms\u5c31\u5df2\u7ecf\u8fd4\u56de\u4e86\u3002 \u6392\u67e5 \u4e94\u5c42\u7f51\u7edc\u534f\u8bae\u5bf9\u5e94\u7684\u6d88\u606f\u4f53\u53d8\u5316\u5206\u6790 \u5c31\u5f88\u5947\u602a\u4e86\uff0c\u660e\u660e\u670d\u52a1\u7aef\u663e\u793a\u5904\u7406\u8017\u65f6\u624d100ms\uff0c\u4e14\u5ba2\u6237\u7aef\u8d85\u65f6\u8bbe\u7684\u662f3s, \u600e\u4e48\u5c31\u51fa\u73b0\u8d85\u65f6\u62a5\u9519i/o timeout\u5462\uff1f \u8fd9\u91cc\u63a8\u6d4b\u6709\u4e24\u4e2a\u53ef\u80fd\u3002 \u56e0\u4e3a\u670d\u52a1\u7aef\u6253\u5370\u7684\u65e5\u5fd7\u5176\u5b9e\u53ea\u662f\u670d\u52a1\u7aef\u5e94\u7528\u5c42\u6253\u5370\u7684\u65e5\u5fd7\u3002\u4f46\u5ba2\u6237\u7aef\u5e94\u7528\u5c42\u53d1\u51fa\u6570\u636e\u540e\uff0c\u4e2d\u95f4\u8fd8\u7ecf\u8fc7\u5ba2\u6237\u7aef\u7684\u4f20\u8f93\u5c42\uff0c\u7f51\u7edc\u5c42\uff0c\u6570\u636e\u94fe\u8def\u5c42\u548c\u7269\u7406\u5c42\uff0c\u518d\u7ecf\u8fc7\u670d\u52a1\u7aef\u7684\u7269\u7406\u5c42\uff0c\u6570\u636e\u94fe\u8def\u5c42\uff0c\u7f51\u7edc\u5c42\uff0c\u4f20\u8f93\u5c42\u5230\u670d\u52a1\u7aef\u7684\u5e94\u7528\u5c42\u3002\u670d\u52a1\u7aef\u5e94\u7528\u5c42\u5904\u8017\u65f6100ms\uff0c\u518d\u539f\u8def\u8fd4\u56de\u3002\u90a3\u5269\u4e0b\u76843s-100ms\u53ef\u80fd\u662f\u8017\u5728\u4e86\u6574\u4e2a\u6d41\u7a0b\u91cc\u7684\u5404\u4e2a\u5c42\u4e0a\u3002\u6bd4\u5982\u7f51\u7edc\u4e0d\u597d\u7684\u60c5\u51b5\u4e0b\uff0c\u4f20\u8f93\u5c42TCP\u4f7f\u52b2\u4e22\u5305\u91cd\u4f20\u4e4b\u7c7b\u7684\u539f\u56e0\u3002 \u7f51\u7edc\u6ca1\u95ee\u9898\uff0c\u5ba2\u6237\u7aef\u5230\u670d\u52a1\u7aef\u94fe\u8def\u6574\u4e2a\u6536\u53d1\u6d41\u7a0b\u5927\u6982\u8017\u65f6\u5c31\u662f100ms\u5de6\u53f3\u3002\u5ba2\u6237\u7aef\u5904\u7406\u903b\u8f91\u95ee\u9898\u5bfc\u81f4\u8d85\u65f6\u3002 \u4e00\u822c\u9047\u5230\u95ee\u9898\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u90fd\u4e0d\u4f1a\u662f\u5e95\u5c42\u7f51\u7edc\u7684\u95ee\u9898\uff0c\u5927\u80c6\u6000\u7591\u662f\u81ea\u5df1\u7684\u95ee\u9898\u5c31\u5bf9\u4e86\uff0c\u4e0d\u6b7b\u5fc3\u5c31\u6293\u4e2a\u5305\u770b\u4e0b\u3002 \u6293\u5305\u7ed3\u679c \u5206\u6790\u4e0b\uff0c\u4ece\u521a\u5f00\u59cb\u4e09\u6b21\u63e1\u624b\uff08\u753b\u4e86\u7ea2\u6846\u7684\u5730\u65b9\uff09\u3002 \u5230\u6700\u540e\u51fa\u73b0\u8d85\u65f6\u62a5\u9519i/o timeout\uff08\u753b\u4e86\u84dd\u6846\u7684\u5730\u65b9\uff09\u3002 \u4ecetime\u90a3\u4e00\u5217\u4ece7\u523010\uff0c\u786e\u5b9e\u95f4\u96943s\u3002\u800c\u4e14\u770b\u53f3\u4e0b\u89d2\u7684\u84dd\u6846\uff0c\u662f51169\u7aef\u53e3\u53d1\u523080\u7aef\u53e3\u7684\u4e00\u6b21Reset\u8fde\u63a5\u3002 80\u7aef\u53e3\u662f\u670d\u52a1\u7aef\u7684\u7aef\u53e3\u3002\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u5ba2\u6237\u7aef3s\u8d85\u65f6\u4e3b\u52a8\u65ad\u5f00\u94fe\u63a5\u7684\u3002 \u4f46\u662f\u518d\u4ed4\u7ec6\u770b\u4e0b\u7b2c\u4e00\u884c\u4e09\u6b21\u63e1\u624b\u5230\u6700\u540e\u5ba2\u6237\u7aef\u8d85\u65f6\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5\u7684\u4e2d\u95f4\uff0c\u5176\u5b9e\u6709\u975e\u5e38\u591a\u6b21HTTP\u8bf7\u6c42\u3002 \u56de\u53bb\u770b\u4ee3\u7801\u8bbe\u7f6e\u8d85\u65f6\u7684\u65b9\u5f0f\u3002 tr = &http.Transport{ MaxIdleConns: 100, Dial: func(netw, addr string) (net.Conn, error) { conn, err := net.DialTimeout(netw, addr, time.Second*2) //\u8bbe\u7f6e\u5efa\u7acb\u8fde\u63a5\u8d85\u65f6 if err != nil { return nil, err } err = conn.SetDeadline(time.Now().Add(time.Second * 3)) //\u8bbe\u7f6e\u53d1\u9001\u63a5\u53d7\u6570\u636e\u8d85\u65f6 if err != nil { return nil, err } return conn, nil }, } \u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u91cc\u76843s\u8d85\u65f6\uff0c\u5176\u5b9e\u662f\u5728\u5efa\u7acb\u8fde\u63a5\u4e4b\u540e\u5f00\u59cb\u7b97\u7684\uff0c\u800c\u4e0d\u662f\u5355\u6b21\u8c03\u7528\u5f00\u59cb\u7b97\u7684\u8d85\u65f6\u3002 \u770b\u6ce8\u91ca\u91cc\u5199\u7684\u662f SetDeadline sets the read and write deadlines associated with theconnection. \u8d85\u65f6\u539f\u56e0 \u5927\u5bb6\u77e5\u9053HTTP\u662f\u5e94\u7528\u5c42\u534f\u8bae\uff0c\u4f20\u8f93\u5c42\u7528\u7684\u662fTCP\u534f\u8bae\u3002 HTTP\u534f\u8bae\u4ece1.0\u4ee5\u524d\uff0c\u9ed8\u8ba4\u7528\u7684\u662f\u77ed\u8fde\u63a5\uff0c\u6bcf\u6b21\u53d1\u8d77\u8bf7\u6c42\u90fd\u4f1a\u5efa\u7acbTCP\u8fde\u63a5\u3002\u6536\u53d1\u6570\u636e\u3002\u7136\u540e\u65ad\u5f00\u8fde\u63a5\u3002 TCP\u8fde\u63a5\u6bcf\u6b21\u90fd\u662f\u4e09\u6b21\u63e1\u624b\u3002\u6bcf\u6b21\u65ad\u5f00\u90fd\u8981\u56db\u6b21\u6325\u624b\u3002 \u5176\u5b9e\u6ca1\u5fc5\u8981\u6bcf\u6b21\u90fd\u5efa\u7acb\u65b0\u8fde\u63a5\uff0c\u5efa\u7acb\u7684\u8fde\u63a5\u4e0d\u65ad\u5f00\u5c31\u597d\u4e86\uff0c\u6bcf\u6b21\u53d1\u9001\u6570\u636e\u90fd\u590d\u7528\u5c31\u597d\u4e86\u3002 \u4e8e\u662f\u4e4e\uff0cHTTP\u534f\u8bae\u4ece1.1\u4e4b\u540e\u5c31\u9ed8\u8ba4\u4f7f\u7528\u957f\u8fde\u63a5\u3002\u5177\u4f53\u76f8\u5173\u4fe1\u606f\u53ef\u4ee5\u770b\u4e4b\u524d\u7684 \u8fd9\u7bc7\u6587\u7ae0 \u3002 \u90a3\u4e48golang\u6807\u51c6\u5e93\u91cc\u4e5f\u517c\u5bb9\u8fd9\u79cd\u5b9e\u73b0\u3002 \u901a\u8fc7\u5efa\u7acb\u4e00\u4e2a\u8fde\u63a5\u6c60\uff0c\u9488\u5bf9\u6bcf\u4e2a\u57df\u540d\u5efa\u7acb\u4e00\u4e2aTCP\u957f\u8fde\u63a5\uff0c\u6bd4\u5982http://baidu.com\u548chttp://golang.com\u5c31\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u57df\u540d\u3002 \u7b2c\u4e00\u6b21\u8bbf\u95eehttp://baidu.com\u57df\u540d\u7684\u65f6\u5019\u4f1a\u5efa\u7acb\u4e00\u4e2a\u8fde\u63a5\uff0c\u7528\u5b8c\u4e4b\u540e\u653e\u5230\u7a7a\u95f2\u8fde\u63a5\u6c60\u91cc\uff0c\u4e0b\u6b21\u518d\u8981\u8bbf\u95eehttp://baidu.com\u7684\u65f6\u5019\u4f1a\u91cd\u65b0\u4ece\u8fde\u63a5\u6c60\u91cc\u628a\u8fd9\u4e2a\u8fde\u63a5\u635e\u51fa\u6765\u590d\u7528\u3002 \u590d\u7528\u957f\u8fde\u63a5 \u4e3a\u4ec0\u4e48\u8981\u5f3a\u8c03\u662f\u540c\u4e00\u4e2a\u57df\u540d\uff1a\u4e00\u4e2a\u57df\u540d\u4f1a\u5efa\u7acb\u4e00\u4e2a\u8fde\u63a5\uff0c\u4e00\u4e2a\u8fde\u63a5\u5bf9\u5e94\u4e00\u4e2a\u8bfbgoroutine\u548c\u4e00\u4e2a\u5199goroutine\u3002\u6b63\u56e0\u4e3a\u662f\u540c\u4e00\u4e2a\u57df\u540d\uff0c\u6240\u4ee5\u6700\u540e\u624d\u4f1a\u6cc4\u6f0f3\u4e2agoroutine\uff0c\u5982\u679c\u4e0d\u540c\u57df\u540d\u7684\u8bdd\uff0c\u90a3\u5c31\u4f1a\u6cc4\u6f0f1+2*N\u4e2a\u534f\u7a0b\uff0cN\u5c31\u662f\u57df\u540d\u6570\u3002 \u5047\u8bbe\u7b2c\u4e00\u6b21\u8bf7\u6c42\u8981100ms\uff0c\u6bcf\u6b21\u8bf7\u6c42\u5b8chttp://baidu.com\u540e\u90fd\u653e\u5165\u8fde\u63a5\u6c60\u4e2d\uff0c\u4e0b\u6b21\u7ee7\u7eed\u590d\u7528\uff0c\u91cd\u590d29\u6b21\uff0c\u8017\u65f62900ms\u3002 \u7b2c30\u6b21\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u8fde\u63a5\u4ece\u5efa\u7acb\u5f00\u59cb\u5230\u670d\u52a1\u8fd4\u56de\u524d\u5c31\u5df2\u7ecf\u7528\u4e863000ms\uff0c\u521a\u597d\u5230\u8bbe\u7f6e\u76843s\u8d85\u65f6\u9608\u503c\uff0c\u90a3\u4e48\u6b64\u65f6\u5ba2\u6237\u7aef\u5c31\u4f1a\u62a5\u8d85\u65f6i/o timeout\u3002 \u867d\u7136\u8fd9\u65f6\u5019\u670d\u52a1\u7aef\u5176\u5b9e\u624d\u82b1\u4e86100ms\uff0c\u4f46\u8010\u4e0d\u4f4f\u524d\u976229\u6b21\u52a0\u8d77\u6765\u7684\u8017\u65f6\u5df2\u7ecf\u5f88\u957f\u3002 \u4e5f\u5c31\u662f\u8bf4\u53ea\u8981\u901a\u8fc7 http.Transport \u8bbe\u7f6e\u4e86 err = conn.SetDeadline(time.Now().Add(time.Second * 3)) \uff0c\u5e76\u4e14\u7528\u4e86\u957f\u8fde\u63a5\uff0c\u54ea\u6015\u670d\u52a1\u7aef\u5904\u7406\u518d\u5feb\uff0c\u5ba2\u6237\u7aef\u8bbe\u7f6e\u7684\u8d85\u65f6\u518d\u957f\uff0c\u603b\u6709\u4e00\u523b\uff0c\u7a0b\u5e8f\u4f1a\u62a5\u8d85\u65f6\u9519\u8bef\u3002 \u6b63\u786e\u59ff\u52bf \u539f\u672c\u9884\u671f\u662f\u7ed9\u6bcf\u6b21\u8c03\u7528\u8bbe\u7f6e\u4e00\u4e2a\u8d85\u65f6\uff0c\u800c\u4e0d\u662f\u7ed9\u6574\u4e2a\u8fde\u63a5\u8bbe\u7f6e\u8d85\u65f6\u3002 \u53e6\u5916\uff0c\u4e0a\u9762\u51fa\u73b0\u95ee\u9898\u7684\u539f\u56e0\u662f\u7ed9\u957f\u8fde\u63a5\u8bbe\u7f6e\u4e86\u8d85\u65f6\uff0c\u4e14\u957f\u8fde\u63a5\u4f1a\u590d\u7528\u3002 \u57fa\u4e8e\u8fd9\u4e24\u70b9\uff0c\u6539\u4e00\u4e0b\u4ee3\u7801\u3002 package main import ( \"bytes\" \"encoding/json\" \"fmt\" \"io/ioutil\" \"net/http\" \"time\" ) var tr *http.Transport func init() { tr = &http.Transport{ MaxIdleConns: 100, // \u4e0b\u9762\u7684\u4ee3\u7801\u88ab\u5e72\u6389\u4e86 //Dial: func(netw, addr string) (net.Conn, error) { // conn, err := net.DialTimeout(netw, addr, time.Second*2) //\u8bbe\u7f6e\u5efa\u7acb\u8fde\u63a5\u8d85\u65f6 // if err != nil { // return nil, err // } // err = conn.SetDeadline(time.Now().Add(time.Second * 3)) //\u8bbe\u7f6e\u53d1\u9001\u63a5\u53d7\u6570\u636e\u8d85\u65f6 // if err != nil { // return nil, err // } // return conn, nil //}, } } func Get(url string) ([]byte, error) { m := make(map[string]interface{}) data, err := json.Marshal(m) if err != nil { return nil, err } body := bytes.NewReader(data) req, _ := http.NewRequest(\"Get\", url, body) req.Header.Add(\"content-type\", \"application/json\") client := &http.Client{ Transport: tr, Timeout: 3*time.Second, // \u8d85\u65f6\u52a0\u5728\u8fd9\u91cc\uff0c\u662f\u6bcf\u6b21\u8c03\u7528\u7684\u8d85\u65f6 } res, err := client.Do(req) if res != nil { defer res.Body.Close() } if err != nil { return nil, err } resBody, err := ioutil.ReadAll(res.Body) if err != nil { return nil, err } return resBody, nil } func main() { for { _, err := Get(\"http://www.baidu.com/\") if err != nil { fmt.Println(err) break } } } \u770b\u6ce8\u91ca\u4f1a\u53d1\u73b0\uff0c\u6539\u52a8\u7684\u70b9\u6709\u4e24\u4e2a http.Transport \u91cc\u7684\u5efa\u7acb\u8fde\u63a5\u65f6\u7684\u4e00\u4e9b\u8d85\u65f6\u8bbe\u7f6e\u5e72\u6389\u4e86\u3002 \u5728\u53d1\u8d77http\u8bf7\u6c42\u7684\u65f6\u5019\u4f1a\u573a\u666f http.Client \uff0c\u6b64\u65f6\u52a0\u5165\u8d85\u65f6\u8bbe\u7f6e\uff0c\u8fd9\u91cc\u7684\u8d85\u65f6\u5c31\u53ef\u4ee5\u7406\u89e3\u4e3a\u5355\u6b21\u8bf7\u6c42\u7684\u8d85\u65f6\u4e86\u3002\u540c\u6837\u53ef\u4ee5\u770b\u4e0b\u6ce8\u91ca Timeout specifies a time limit forrequestsmade by this Client. \u5230\u8fd9\u91cc\uff0c\u4ee3\u7801\u5c31\u6539\u597d\u4e86\uff0c\u5b9e\u9645\u751f\u4ea7\u4e2d\u95ee\u9898\u4e5f\u5c31\u89e3\u51b3\u4e86\u3002 \u5b9e\u4f8b\u4ee3\u7801\u91cc\uff0c\u5982\u679c\u62ff\u53bb\u8dd1\u7684\u8bdd\uff0c\u5176\u5b9e\u8fd8\u4f1a\u4e0b\u9762\u7684\u9519 Get http://www.baidu.com/: EOF \u8fd9\u4e2a\u662f\u56e0\u4e3a\u8c03\u7528\u5f97\u592a\u731b\u4e86\uff0chttp://www.baidu.com\u90a3\u8fb9\u4e3b\u52a8\u65ad\u5f00\u7684\u8fde\u63a5\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u9650\u6d41\u63aa\u65bd\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u4fdd\u62a4\u670d\u52a1\u5668\uff0c\u6bd5\u7adf\u6bcf\u4e2a\u4eba\u90fd\u50cf\u8fd9\u4e48\u641e\uff0c\u670d\u52a1\u5668\u662f\u4f1a\u70b8\u7684\u3002\u3002\u3002 \u89e3\u51b3\u65b9\u6848\u5f88\u7b80\u5355\uff0c\u6bcf\u6b21HTTP\u8c03\u7528\u4e2d\u95f4\u52a0\u4e2asleep\u95f4\u9694\u65f6\u95f4\u5c31\u597d\u3002 \u5230\u8fd9\u91cc\uff0c\u5176\u5b9e\u95ee\u9898\u5df2\u7ecf\u89e3\u51b3\u4e86\uff0c\u4e0b\u9762\u4f1a\u5728\u6e90\u7801\u5c42\u9762\u5206\u6790\u51fa\u73b0\u95ee\u9898\u7684\u539f\u56e0\u3002 \u6e90\u7801\u5206\u6790 \u7528\u7684go\u7248\u672c\u662f1.12.7\u3002 \u4ece\u53d1\u8d77\u4e00\u4e2a\u7f51\u7edc\u8bf7\u6c42\u5f00\u59cb\u8ddf\u3002 res, err := client.Do(req) func (c *Client) Do(req *Request) (*Response, error) { return c.do(req) } func (c *Client) do(req *Request) { // ... if resp, didTimeout, err = c.send(req, deadline); err != nil { // ... } // ... } func send(ireq *Request, rt RoundTripper, deadline time.Time) { // ... resp, err = rt.RoundTrip(req) // ... } // \u4ece\u8fd9\u91cc\u8fdb\u5165 RoundTrip \u903b\u8f91 /src/net/http/roundtrip.go: 16 func (t *Transport) RoundTrip(req *Request) (*Response, error) { return t.roundTrip(req) } func (t *Transport) roundTrip(req *Request) (*Response, error) { // \u5c1d\u8bd5\u53bb\u83b7\u53d6\u4e00\u4e2a\u7a7a\u95f2\u8fde\u63a5\uff0c\u7528\u4e8e\u53d1\u8d77 http \u8fde\u63a5 pconn, err := t.getConn(treq, cm) // ... } // \u91cd\u70b9\u5173\u6ce8\u8fd9\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u662f\u4e00\u4e2a\u957f\u8fde\u63a5 func (t *Transport) getConn(treq *transportRequest, cm connectMethod) (*persistConn, error) { // \u7701\u7565\u4e86\u5927\u91cf\u903b\u8f91\uff0c\u53ea\u5173\u6ce8\u4e0b\u9762\u4e24\u70b9 // \u6709\u7a7a\u95f2\u8fde\u63a5\u5c31\u8fd4\u56de pc := <-t.getIdleConnCh(cm) // \u6ca1\u6709\u521b\u5efa\u8fde\u63a5 pc, err := t.dialConn(ctx, cm) } \u8fd9\u91cc\u4e0a\u9762\u5f88\u591a\u4ee3\u7801\uff0c\u5176\u5b9e\u53ea\u662f\u4e3a\u4e86\u5c55\u793a\u8fd9\u90e8\u5206\u4ee3\u7801\u662f\u600e\u4e48\u8ddf\u8e2a\u4e0b\u6765\u7684\uff0c\u65b9\u4fbf\u5927\u5bb6\u53bb\u770b\u6e90\u7801\u7684\u65f6\u5019\u53bb\u8ddf\u4e00\u4e0b\u3002 \u6700\u540e\u4e00\u4e2a\u4e0a\u9762\u7684\u4ee3\u7801\u91cc\u6709\u4e2a getConn \u65b9\u6cd5\u3002\u5728\u53d1\u8d77\u7f51\u7edc\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u4f1a\u5148\u53d6\u4e00\u4e2a\u7f51\u7edc\u8fde\u63a5\uff0c\u53d6\u8fde\u63a5\u6709\u4e24\u4e2a\u6765\u6e90\u3002 \u5982\u679c\u6709\u7a7a\u95f2\u8fde\u63a5\uff0c\u5c31\u62ff\u7a7a\u95f2\u8fde\u63a5 // /src/net/http/tansport.go:810 func (t *Transport) getIdleConnCh(cm connectMethod) chan *persistConn { // \u8fd4\u56de\u653e\u7a7a\u95f2\u8fde\u63a5\u7684chan ch, ok := t.idleConnCh[key] // ... return ch } \u6ca1\u6709\u7a7a\u95f2\u8fde\u63a5\uff0c\u5c31\u521b\u5efa\u957f\u8fde\u63a5\u3002 // /src/net/http/tansport.go:1357 func (t *Transport) dialConn() { //... conn, err := t.dial(ctx, \"tcp\", cm.addr()) // ... go pconn.readLoop() go pconn.writeLoop() // ... } \u5f53\u7b2c\u4e00\u6b21\u53d1\u8d77\u4e00\u4e2ahttp\u8bf7\u6c42\u65f6\uff0c\u8fd9\u65f6\u5019\u80af\u5b9a\u6ca1\u6709\u7a7a\u95f2\u8fde\u63a5\uff0c\u4f1a\u5efa\u7acb\u4e00\u4e2a\u65b0\u8fde\u63a5\u3002\u540c\u65f6\u4f1a\u521b\u5efa\u4e00\u4e2a\u8bfbgoroutine\u548c\u4e00\u4e2a\u5199goroutine\u3002 \u8bfb\u5199\u534f\u7a0b \u6ce8\u610f\u4e0a\u9762\u4ee3\u7801\u91cc\u7684 t.dial(ctx, \"tcp\", cm.addr()) \uff0c\u5982\u679c\u50cf\u6587\u7ae0\u5f00\u5934\u90a3\u6837\u8bbe\u7f6e\u4e86 http.Transport \u7684 Dial: func(netw, addr string) (net.Conn, error) { conn, err := net.DialTimeout(netw, addr, time.Second*2) //\u8bbe\u7f6e\u5efa\u7acb\u8fde\u63a5\u8d85\u65f6 if err != nil { return nil, err } err = conn.SetDeadline(time.Now().Add(time.Second * 3)) //\u8bbe\u7f6e\u53d1\u9001\u63a5\u53d7\u6570\u636e\u8d85\u65f6 if err != nil { return nil, err } return conn, nil }, \u90a3\u4e48\u8fd9\u91cc\u5c31\u4f1a\u5728\u4e0b\u9762\u7684dial\u91cc\u88ab\u6267\u884c\u5230 func (t *Transport) dial(ctx context.Context, network, addr string) (net.Conn, error) { // ... c, err := t.Dial(network, addr) // ... } \u8fd9\u91cc\u9762\u8c03\u7528\u7684\u8bbe\u7f6e\u8d85\u65f6\uff0c\u4f1a\u6267\u884c\u5230 // /src/net/net.go func (c *conn) SetDeadline(t time.Time) error { //... c.fd.SetDeadline(t) //... } //... func setDeadlineImpl(fd *FD, t time.Time, mode int) error { // ... runtime_pollSetDeadline(fd.pd.runtimeCtx, d, mode) return nil } //go:linkname poll_runtime_pollSetDeadline internal/poll.runtime_pollSetDeadline func poll_runtime_pollSetDeadline(pd *pollDesc, d int64, mode int) { // ... // \u8bbe\u7f6e\u4e00\u4e2a\u5b9a\u65f6\u5668\u4e8b\u4ef6 rtf = netpollDeadline // \u5e76\u5c06\u4e8b\u4ef6\u6ce8\u518c\u5230\u5b9a\u65f6\u5668\u91cc modtimer(&pd.rt, pd.rd, 0, rtf, pd, pd.rseq) } \u4e0a\u9762\u7684\u6e90\u7801\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\uff0c\u5f53\u7b2c\u4e00\u6b21\u8c03\u7528\u8bf7\u6c42\u7684\uff0c\u4f1a\u5efa\u7acb\u4e2a\u8fde\u63a5\uff0c\u8fd9\u65f6\u5019\u8fd8\u4f1a\u6ce8\u518c\u4e00\u4e2a\u5b9a\u65f6\u5668\u4e8b\u4ef6\uff0c\u5047\u8bbe\u65f6\u95f4\u8bbe\u4e863s\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e8b\u4ef6\u4f1a\u57283s\u540e\u53d1\u751f\uff0c\u7136\u540e\u6267\u884c\u6ce8\u518c\u4e8b\u4ef6\u7684\u903b\u8f91\u3002\u800c\u8fd9\u4e2a\u6ce8\u518c\u4e8b\u4ef6\u5c31\u662f netpollDeadline \u3002\u6ce8\u610f\u8fd9\u4e2a netpollDeadline \uff0c\u5f85\u4f1a\u4f1a\u63d0\u5230\u3002 \u8bfb\u5199\u534f\u7a0b\u5b9a\u65f6\u5668\u4e8b\u4ef6 \u8bbe\u7f6e\u4e86\u8d85\u65f6\u4e8b\u4ef6\uff0c\u4e14\u8d85\u65f6\u4e8b\u4ef6\u662f3s\u540e\u4e4b\u540e\uff0c\u53d1\u751f\u3002\u518d\u6b21\u671f\u95f4\u6b63\u5e38\u6536\u53d1\u6570\u636e\u3002\u4e00\u5207\u5982\u5e38\u3002 \u76f4\u52303s\u8fc7\u540e\uff0c\u8fd9\u65f6\u5019\u770b\u8bfbgoroutine\uff0c\u4f1a\u7b49\u5f85\u7f51\u7edc\u6570\u636e\u8fd4\u56de\u3002 // /src/net/http/tansport.go:1642 func (pc *persistConn) readLoop() { //... for alive { _, err := pc.br.Peek(1) // \u963b\u585e\u8bfb\u53d6\u670d\u52a1\u7aef\u8fd4\u56de\u7684\u6570\u636e //... } \u7136\u540e\u5c31\u662f\u4e00\u76f4\u8ddf\u4ee3\u7801\u3002 src/bufio/bufio.go: 129 func (b *Reader) Peek(n int) ([]byte, error) { // ... b.fill() // ... } func (b *Reader) fill() { // ... n, err := b.rd.Read(b.buf[b.w:]) // ... } /src/net/http/transport.go: 1517 func (pc *persistConn) Read(p []byte) (n int, err error) { // ... n, err = pc.conn.Read(p) // ... } // /src/net/net.go: 173 func (c *conn) Read(b []byte) (int, error) { // ... n, err := c.fd.Read(b) // ... } func (fd *netFD) Read(p []byte) (n int, err error) { n, err = fd.pfd.Read(p) // ... } /src/internal/poll/fd_unix.go: func (fd *FD) Read(p []byte) (int, error) { //... if err = fd.pd.waitRead(fd.isFile); err == nil { continue } // ... } func (pd *pollDesc) waitRead(isFile bool) error { return pd.wait('r', isFile) } func (pd *pollDesc) wait(mode int, isFile bool) error { // ... res := runtime_pollWait(pd.runtimeCtx, mode) return convertErr(res, isFile) } \u76f4\u5230\u8ddf\u5230 runtime_pollWait \uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7b80\u5355\u8ba4\u4e3a\u662f\u7b49\u5f85\u670d\u52a1\u7aef\u6570\u636e\u8fd4\u56de\u3002 //go:linkname poll_runtime_pollWait internal/poll.runtime_pollWait func poll_runtime_pollWait(pd *pollDesc, mode int) int { // 1.\u5982\u679c\u7f51\u7edc\u6b63\u5e38\u8fd4\u56de\u6570\u636e\u5c31\u8df3\u51fa for !netpollblock(pd, int32(mode), false) { // 2.\u5982\u679c\u6709\u51fa\u9519\u60c5\u51b5\u4e5f\u8df3\u51fa err = netpollcheckerr(pd, int32(mode)) if err != 0 { return err } } return 0 } \u6574\u6761\u94fe\u8def\u8ddf\u4e0b\u6765\uff0c\u5c31\u662f\u4f1a\u4e00\u76f4\u7b49\u5f85\u6570\u636e\uff0c\u7b49\u5f85\u7684\u7ed3\u679c\u53ea\u6709\u4e24\u4e2a \u6709\u53ef\u4ee5\u8bfb\u7684\u6570\u636e \u51fa\u73b0\u62a5\u9519 \u8fd9\u91cc\u9762\u7684\u62a5\u9519\uff0c\u53c8\u6709\u90a3\u4e48\u4e24\u79cd \u8fde\u63a5\u5173\u95ed \u8d85\u65f6 func netpollcheckerr(pd *pollDesc, mode int32) int { if pd.closing { return 1 // errClosing } if (mode == 'r' && pd.rd < 0) || (mode == 'w' && pd.wd < 0) { return 2 // errTimeout } return 0 } \u5176\u4e2d\u63d0\u5230\u7684\u8d85\u65f6\uff0c\u5c31\u662f\u6307\u8fd9\u91cc\u9762\u8fd4\u56de\u7684 \u6570\u5b572 \uff0c\u4f1a\u901a\u8fc7\u4e0b\u9762\u7684\u51fd\u6570\uff0c\u8f6c\u5316\u4e3a ErrTimeout \uff0c \u800c ErrTimeout.Error() \u5176\u5b9e\u5c31\u662fi/o timeout\u3002 func convertErr(res int, isFile bool) error { switch res { case 0: return nil case 1: return errClosing(isFile) case 2: return ErrTimeout // ErrTimeout.Error() \u5c31\u662f \"i/o timeout\" } println(\"unreachable: \", res) panic(\"unreachable\") } \u90a3\u4e48\u95ee\u9898\u6765\u4e86\u3002\u4e0a\u9762\u8fd4\u56de\u7684\u8d85\u65f6\u9519\u8bef\uff0c\u4e5f\u5c31\u662f\u8fd4\u56de2\u7684\u65f6\u5019\u7684\u6761\u4ef6\u662f\u600e\u4e48\u6ee1\u8db3\u7684\uff1f if (mode == 'r' && pd.rd < 0) || (mode == 'w' && pd.wd < 0) { return 2 // errTimeout } \u8fd8\u8bb0\u5f97\u521a\u521a\u63d0\u5230\u7684netpollDeadline\u5417\uff1f \u8fd9\u91cc\u9762\u653e\u4e86\u5b9a\u65f6\u56683s\u5230\u70b9\u65f6\u6267\u884c\u7684\u903b\u8f91\u3002 func timerproc(tb *timersBucket) { // \u8ba1\u65f6\u5668\u5230\u8bbe\u5b9a\u65f6\u95f4\u70b9\u4e86\uff0c\u89e6\u53d1\u4e4b\u524d\u6ce8\u518c\u51fd\u6570 f(arg, seq) // \u4e4b\u524d\u6ce8\u518c\u7684\u662f netpollDeadline } func netpollDeadline(arg interface{}, seq uintptr) { netpolldeadlineimpl(arg.(*pollDesc), seq, true, true) } /src/runtime/netpoll.go: 428 func netpolldeadlineimpl(pd *pollDesc, seq uintptr, read, write bool) { //... if read { pd.rd = -1 rg = netpollunblock(pd, 'r', false) } //... } \u8fd9\u91cc\u4f1a\u8bbe\u7f6e pd.rd=-1 \uff0c\u662f\u6307 poller descriptor.read deadline \uff0c\u542b\u4e49\u7f51\u7edc\u8f6e\u8be2\u5668\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u8bfb\u8d85\u65f6\u65f6\u95f4\uff0c \u5728linux\u91cc\u4e07\u7269\u7686\u6587\u4ef6\uff0c\u8fd9\u91cc\u7684\u6587\u4ef6\u5176\u5b9e\u662f\u6307\u8fd9\u6b21\u7f51\u7edc\u901a\u8baf\u4e2d\u4f7f\u7528\u5230\u7684socket\u3002 \u8fd9\u65f6\u5019\u518d\u56de\u53bb\u770b\u53d1\u751f\u8d85\u65f6\u7684\u6761\u4ef6\u5c31\u662f if (mode == 'r' && pd.rd < 0) \u3002 \u81f3\u6b64\u3002\u4ee3\u7801\u91cc\u5c31\u6536\u5230\u4e86io timeout\u7684\u62a5\u9519\u3002 \u603b\u7ed3 \u4e0d\u8981\u5728 http.Transport \u4e2d\u8bbe\u7f6e\u8d85\u65f6\uff0c\u90a3\u662f\u8fde\u63a5\u7684\u8d85\u65f6\uff0c\u4e0d\u662f\u8bf7\u6c42\u7684\u8d85\u65f6\u3002\u5426\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u83ab\u540dio timeout\u62a5\u9519\u3002 \u8bf7\u6c42\u7684\u8d85\u65f6\u5728\u521b\u5efa client \u91cc\u8bbe\u7f6e\u3002 Go\u4e2dUnicode\u76f8\u5173\u5305 Go\u4e2dUnicode\u76f8\u5173\u5305 Go \u8bed\u8a00\u8ba9\u590d\u6742\u7684\u7f16\u7801\u95ee\u9898\u53d8\u5f97\u7b80\u5355\u5f88\u591a\uff0c\u6781\u5927\u7684\u51cf\u8f7b\u4e86\u7a0b\u5e8f\u5458\u7684\u5fc3\u667a\u8d1f\u62c5\u3002\u4e3a\u4e86\u65b9\u4fbf\u5bf9 unicode \u5b57\u7b26\u4e32\u8fdb\u884c\u5904\u7406\uff0cGo \u8bed\u8a00\u6807\u51c6\u5e93\u63d0\u4f9b\u4e09\u4e2a\u5305\uff1aunicode\u3001unicode/utf8 \u548c unicode/utf16\u3002 \u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u4e0b\u4e09\u4e2a\u5305\u7684\u529f\u80fd\uff1a unicode\uff1aunicode \u63d0\u4f9b\u6570\u636e\u548c\u51fd\u6570\u6765\u6d4b\u8bd5 Unicode \u4ee3\u7801\u70b9\uff08Code Point\uff0c\u7528 rune \u5b58\u50a8\uff09\u7684\u67d0\u4e9b\u5c5e\u6027\u3002 unicode/utf8\uff1a\u7528\u4e8e\u5904\u7406 UTF-8 \u7f16\u7801\u7684\u6587\u672c\uff0c\u63d0\u4f9b\u4e00\u4e9b\u5e38\u91cf\u548c\u51fd\u6570\uff0c\u5305\u62ec\u5728 rune\uff08\u7801\u70b9\uff09 \u548c UTF-8 \u5b57\u8282\u5e8f\u5217\u4e4b\u95f4\u7684\u8f6c\u6362\u3002 unicode/utf16\uff1a\u51fd\u6570\u6bd4\u8f83\u5c11\uff0c\u4e3b\u8981\u662f UTF-16 \u5e8f\u5217\u7684\u7f16\u7801\u548c\u89e3\u7801\u3002 Go \u4e2d\u5b57\u7b26\u4e32\u7684\u5199\u6cd5\u3002 \u5728 Go \u8bed\u8a00\u4e2d\uff0c\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6709 4 \u79cd\u5199\u6cd5\uff0c\u6bd4\u5982\u300c\u5f90\u65b0\u534e\u300d\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a s1 := \"\u5f90\u65b0\u534e\" s2 := \"\\u5F90\\u65B0\\u534E\" s3 := \"\\U00005F90\\U000065B0\\U0000534E\" s4 := \"\\xe5\\xbe\\x90\\xe6\\x96\\xb0\\xe5\\x8d\\x8e\" \u7b80\u5355\u6765\u751f\u6d3b\u5c31\u662f \\u \u7d27\u8ddf\u56db\u4e2a\u5341\u516d\u8fdb\u5236\u6570\uff0c\\U \u7d27\u8ddf\u516b\u4e2a\u5341\u516d\u8fdb\u5236\u6570\u3002\u5176\u4e2d \\u \u6216 \\U \u4ee3\u8868\u540e\u9762\u662f Unicode \u7801\u70b9\u3002\u800c \\x \u7d27\u8ddf\u4e24\u4e2a\u5341\u516d\u8fdb\u5236\u6570\uff0c\u8fd9\u4e9b\u5341\u516d\u8fdb\u5236\u4e0d\u662f Unicode \u7801\u70b9\uff0c\u800c\u662f UTF-8 \u7f16\u7801\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u6709\u5229\u4e8e\u7406\u89e3\uff1a package main import ( \"fmt\" \"unicode/utf8\" ) func main() { s := `\u5f90\u65b0\u534e` var ( buf = make([]byte, 4) n int ) fmt.Println(\"\u5b57\u7b26\\tUnicode\u7801\u70b9\\tUTF-8\u7f16\u7801\u5341\u516d\u8fdb\u5236\\tUTF-8\u7f16\u7801\u4e8c\u8fdb\u5236\") for _, r := range s { n = utf8.EncodeRune(buf, r) fmt.Printf(\"%q\\t%U\\t\\t%X\\t\\t%b\\n\", r, r, buf[:n], buf[:n]) } s2 := \"\\u5F90\\u65B0\\u534E\" s3 := \"\\U00005F90\\U000065B0\\U0000534E\" s4 := \"\\xe5\\xbe\\x90\\xe6\\x96\\xb0\\xe5\\x8d\\x8e\" fmt.Println(s2) fmt.Println(s3) fmt.Println(s4) } \u8fd0\u884c\u7ed3\u679c\uff1a \u5b57\u7b26 Unicode\u7801\u70b9 UTF-8\u7f16\u7801\u5341\u516d\u8fdb\u5236 UTF-8\u7f16\u7801\u4e8c\u8fdb\u5236 '\u5f90' U+5F90 E5BE90 [11100101 10111110 10010000] '\u65b0' U+65B0 E696B0 [11100110 10010110 10110000] '\u534e' U+534E E58D8E [11100101 10001101 10001110] \u5f90\u65b0\u534e \u5f90\u65b0\u534e \u5f90\u65b0\u534e \u6b64\u5916\uff0c\u5173\u4e8e\u5b57\u7b26\u4e32\u5176\u4ed6\u65b9\u9762\u7684\u5904\u7406\uff0c\u6bd4\u5982\u7f16\u7801\u8f6c\u6362\u7b49\uff0c\u53ef\u4ee5\u5230 https://pkg.go.dev/golang.org/x/text \u91cc\u627e\u3002 \u5927\u5c0f\u7aef\u95ee\u9898\uff08Little endian \u548c Big endian\uff09 \u4e00\u4e2a\u5b57\u7b26\u4f7f\u7528\u591a\u5b57\u8282\u5b58\u50a8\u65f6\uff0c\u6d89\u53ca\u5230\u54ea\u4e2a\u5728\u524d\u54ea\u4e2a\u5728\u540e\u3002\u4ee5\u6c49\u5b57\u300c\u5f90\u300d\u4e3a\u4f8b\uff0cUnicode \u7801\u70b9\u662f 5F90\uff0c\u9700\u8981\u7528\u4e24\u4e2a\u5b57\u8282\u5b58\u50a8\uff0c\u4e00\u4e2a\u5b57\u8282\u662f 5F \uff0c\u53e6\u4e00\u4e2a\u5b57\u8282\u662f 90 \u3002\u5b58\u50a8\u7684\u65f6\u5019\uff0c 5F \u5728\u524d\uff0c 90 \u5728\u540e\uff0c\u8fd9\u5c31\u662f Big endian \u65b9\u5f0f\uff1b 90 \u5728\u524d\uff0c 5F \u5728\u540e\uff0c\u8fd9\u662f Little endian \u65b9\u5f0f\u3002 \u8fd9\u4e24\u4e2a\u53e4\u602a\u7684\u540d\u79f0\u6765\u81ea\u82f1\u56fd\u4f5c\u5bb6\u65af\u5a01\u592b\u7279\u7684\u300a\u683c\u5217\u4f5b\u6e38\u8bb0\u300b\u3002\u5728\u8be5\u4e66\u4e2d\uff0c\u5c0f\u4eba\u56fd\u91cc\u7206\u53d1\u4e86\u5185\u6218\uff0c\u6218\u4e89\u8d77\u56e0\u662f\u4eba\u4eec\u4e89\u8bba\uff0c\u5403\u9e21\u86cb\u65f6\u7a76\u7adf\u662f\u4ece\u5927\u5934\uff08Big-endian\uff09\u6572\u5f00\u8fd8\u662f\u4ece\u5c0f\u5934\uff08Little-endian\uff09\u6572\u5f00\u3002\u4e3a\u4e86\u8fd9\u4ef6\u4e8b\u60c5\uff0c\u524d\u540e\u7206\u53d1\u4e86\u516d\u6b21\u6218\u4e89\uff0c\u4e00\u4e2a\u7687\u5e1d\u9001\u4e86\u547d\uff0c\u53e6\u4e00\u4e2a\u7687\u5e1d\u4e22\u4e86\u738b\u4f4d\u3002 \u7b2c\u4e00\u4e2a\u5b57\u8282\u5728\u524d\uff0c\u5c31\u662f\"\u5927\u7aef\u65b9\u5f0f\"\uff08Big endian\uff09\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u8282\u5728\u524d\u5c31\u662f\"\u5c0f\u7aef\u65b9\u5f0f\"\uff08Little endian\uff09\u3002 \u90a3\u4e48\u5f88\u81ea\u7136\u7684\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u8ba1\u7b97\u673a\u600e\u4e48\u77e5\u9053\u67d0\u4e00\u4e2a\u6587\u4ef6\u5230\u5e95\u91c7\u7528\u54ea\u4e00\u79cd\u65b9\u5f0f\u7f16\u7801\uff1f Unicode \u89c4\u8303\u5b9a\u4e49\uff0c\u6bcf\u4e00\u4e2a\u6587\u4ef6\u7684\u6700\u524d\u9762\u5206\u522b\u52a0\u5165\u4e00\u4e2a\u8868\u793a\u7f16\u7801\u987a\u5e8f\u7684\u5b57\u7b26\uff0c\u8fd9\u4e2a\u5b57\u7b26\u7684\u540d\u5b57\u53eb\u505a\"\u96f6\u5bbd\u5ea6\u975e\u6362\u884c\u7a7a\u683c\"\uff08zero width no-break space\uff09\uff0c\u7528 FEFF \u8868\u793a\u3002\u8fd9\u6b63\u597d\u662f\u4e24\u4e2a\u5b57\u8282\uff0c\u800c\u4e14 FF \u6bd4 FE \u59271\u3002 \u5982\u679c\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u7684\u5934\u4e24\u4e2a\u5b57\u8282\u662f FE FF\uff0c\u5c31\u8868\u793a\u8be5\u6587\u4ef6\u91c7\u7528\u5927\u7aef\u65b9\u5f0f\uff1b\u5982\u679c\u5934\u4e24\u4e2a\u5b57\u8282\u662f FF FE\uff0c\u5c31\u8868\u793a\u8be5\u6587\u4ef6\u91c7\u7528\u5c0f\u7aef\u65b9\u5f0f\u3002 \u4f46\u4ece\u4e0a\u9762\u5173\u4e8e UTF-8 \u7f16\u7801\u7684\u8bf4\u660e\u53ef\u4ee5\u770b\u51fa\uff0c\u867d\u7136 UTF-8 \u5b58\u5728\u591a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u7684\u60c5\u51b5\uff0c\u4f46\u987a\u5e8f\u662f\u56fa\u5b9a\u7684\uff0c\u6ca1\u6709\u5b57\u8282\u5e8f\u7684\u95ee\u9898\u3002Unix \u7cfb\u7edf\u4e0b\uff0cUTF-8 \u6ca1\u6709\u4efb\u4f55\u524d\u7f6e\u5b57\u7b26\uff0c\u4f46 Windows \u4e0b\u8bb0\u4e8b\u672c\u4fdd\u5b58\u7684 UTF-8 \u6587\u4ef6\u4f1a\u5e26\u4e0a BOM\uff08Byte Order Mark\uff09\uff0c\u5373 EF BB BF \u8fd9\u4e09\u4e2a\u5b57\u8282\u3002\u5173\u4e8e\u8fd9\u4e00\u70b9\uff0cUnicode \u4e4b\u7236 Rob Pike \u660e\u786e\u8bf4 UTF-8 \u4e0d\u9700\u8981 BOM\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb Go \u6e90\u6587\u4ef6\u662f\u4e0d\u5141\u8bb8\u6709 BOM \u7684\uff0c\u5426\u5219\u7f16\u8bd1\u4e0d\u901a\u8fc7\uff0c\u4e0d\u8fc7\u73b0\u5728\u5df2\u7ecf\u53ef\u4ee5\u6709\u4e86\u3002\u4f46\u5efa\u8bae\u8fd8\u662f\u522b\u5e26 BOM\u3002 UTF-8 \u5e26 BOM \u8bf4\u4e0d\u662f\u4e3a\u4e86\u533a\u5206\u5b57\u8282\u5e8f\uff0c\u800c\u662f\u4e3a\u4e86\u66f4\u65b9\u4fbf\u7684\u77e5\u6653\u8fd9\u662f\u4e00\u4e2a UTF-8 \u6587\u4ef6\u3002 Go \u6807\u51c6\u5e93\u4e4b unsafe \u5305 1. unsafe\u5305 1.1. ArbitraryType unsafe \u5305\u4e0b\u5b9a\u4e49\u4e86\u4e00\u4e2a ArbitratyType \u7c7b\u578b\uff0c\u4ee3\u8868\u4e86\u4efb\u610f\u7684Go\u8868\u8fbe\u5f0f\u3002 type ArbitraryType int 1.2. Pointer Pointer \u5b9a\u4e49\uff1a type Pointer *ArbitraryType Pointer \u4ee3\u8868\u4e86\u4e00\u4e2a\u6307\u5411\u4efb\u610f\u7c7b\u578b\u7684\u6307\u9488\uff0c\u6709\u56db\u79cd\u53ea\u9002\u7528\u5bf9 Pointer \u800c\u4e0d\u9002\u7528\u4e8e\u5176\u4ed6\u7c7b\u578b\u7684\u64cd\u4f5c\u3002 \u4efb\u610f\u7c7b\u578b\u7684\u6307\u9488\u503c\u53ef\u4ee5\u88ab\u8f6c\u6362\u4e3a\u4e00\u4e2a Pointer \u4e00\u4e2a Pointer \u53ef\u4ee5\u88ab\u8f6c\u6362\u4e3a\u4efb\u610f\u7c7b\u578b\u7684\u6307\u9488\u503c \u4e00\u4e2a uintptr \u53ef\u4ee5\u88ab\u8f6c\u6362\u4e3a\u4e00\u4e2a Pointer \u4e00\u4e2a Pointer \u4e5f\u53ef\u4ee5\u88ab\u8f6c\u6362\u4e3a\u4e00\u4e2a uintptr \u56e0\u6b64\uff0c Pointer \u53ef\u4ee5\u8df3\u8fc7\u7c7b\u578b\u7cfb\u7edf\u800c\u76f4\u63a5\u6307\u5411\u4efb\u610f\u7c7b\u578b\u3002\u6240\u4ee5\u9700\u8981\u5341\u5206\u5c0f\u5fc3\u7684\u4f7f\u7528\u3002 \u5173\u4e8e\u4f7f\u7528 Pointer \u7684\u89c4\u5219\uff0c\u4e0d\u4f7f\u7528\u8fd9\u4e9b\u89c4\u5219\u7684\u4ee3\u7801\u662f\u4e0d\u53ef\u7528\u7684\uff0c\u6216\u8005\u5728\u672a\u6765\u662f\u4e0d\u53ef\u7528\u7684\u3002 1.2.1. \u4f7f\u7528 Pointer \u4f5c\u4e3a\u4e2d\u95f4\u8005\u5c06 *T1 \u8f6c\u6362\u4e3a *T2 \u524d\u63d0\u662fT2\u7684\u5927\u5c0f\u4e0d\u8d85\u8fc7T1\uff0c\u800c\u4e14\u4e24\u8005\u7684\u5185\u5b58\u5206\u5e03\u76f8\u540c\u3002 func Float64bits(f float64) uint64 { return *(*uint64)(unsafe.Pointer(&f))} 1.2.2. \u628a Pointer \u8f6c\u6362\u4e3a uintptr \u628a Pointer \u8f6c\u6362\u4e3a uintptr \u5c06\u4ea7\u751f\u4e00\u4e2a\u6307\u5411\u7c7b\u578b\u503c\u7684 int \u53d8\u91cf\u3002\u5e38\u7528\u6765\u6253\u5370\u4e00\u4e2a uintptr \u3002 \u5c06 uintptr \u8f6c\u6362\u4e3a Pointer \u662f\u4e0d\u53ef\u7528\u7684\u3002 \u56e0\u4e3a uintptr \u662f\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u800c\u4e0d\u662f\u5f15\u7528\u3002\u5c31\u662f\u8bf4 uintptr \u548c\u6307\u9488\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002\u53ef\u4ee5\u8bf4\u662f\u5c06 Pointer \u6307\u5411\u7684\u5730\u5740\u7684\u503c\u8fd4\u56de\u7ed9 uintptr \uff0c\u5373\u4f7f uintptr \u4e2d\u7684\u503c\u5bf9\u5e94\u7684\u5730\u5740\u7684\u5bf9\u8c61\u66f4\u65b0\u4e86\u6216\u8005\u5220\u9664\u4e86\uff0c uintptr \u4e5f\u4e0d\u4f1a\u6539\u53d8\u3002 1.2.3. \u628a Pointer \u8f6c\u4e3a uintptr \u518d\u8f6c\u6362\u56de Pointer \uff0c\u5176\u4e2d\u5e26\u6709 uintptr \u6570\u503c\u8fd0\u7b97 \u5982\u679c Pointer \u6307\u5411\u4e00\u4e2a\u5206\u914d\u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u5982\u4e0b\u8f6c\u6362\u53ef\u4ee5\u628a Pointer \u6307\u9488\u5411\u540e\u79fb\u52a8\u3002 p = unsafe.Pointer(uintptr(p) + offset) \u6700\u5e38\u7528\u7684\u662f\u6307\u5411\u7ed3\u6784\u4f53\u4e2d\u4e0d\u540c\u5b57\u6bb5\u6216\u8005\u6570\u7ec4\u4e2d\u7684\u5143\u7d20 // equivalent to f := unsafe.Pointer(&s.f) f := unsafe.Pointer(uintptr(unsafe.Pointer(&s)) + unsafe.Offsetof(s.f)) // equivalent to e := unsafe.Pointer(&x[i]) e := unsafe.Pointer(uintptr(unsafe.Pointer(&x[0])) + i*unsafe.Sizeof(x[0])) \u8fd9\u53ef\u4ee5\u7528\u6765\u5411\u524d\u6216\u5411\u540e\u79fb\u52a8\u6307\u9488\uff0c\u901a\u8fc7\u52a0\u6216\u8005\u51cf offset \u3002\u6307\u9488\u79fb\u52a8\u4e4b\u540e\uff0c\u4e5f\u5e94\u8be5\u6307\u5411\u8be5\u5185\u5b58\u8303\u56f4\u4e2d\u3002 \u5c06 Pointer \u79fb\u52a8\u8d85\u8fc7\u5176\u5bf9\u8c61\u7684\u539f\u59cb\u5185\u5b58\u5206\u914d\u8303\u56f4\u662f\u4e0d\u53ef\u7528\u7684\uff0c\u5982\uff1a // INVALID: end points outside allocated space. var s thing end = unsafe.Pointer(uintptr(unsafe.Pointer(&s)) + unsafe.Sizeof(s)) // INVALID: end points outside allocated space. b := make([]byte, n) end = unsafe.Pointer(uintptr(unsafe.Pointer(&b[0])) + uintptr(n)) \u5f53\u7136\u5982\u4e0b\u4ee3\u7801\u4e5f\u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a uintptr \u4e0d\u53ef\u4ee5\u50a8\u5b58\u5728\u53d8\u91cf\u4e2d\uff1a // INVALID: uintptr cannot be stored in variable // before conversion back to Pointer. u := uintptr(p) p = unsafe.Pointer(u + offset) Pointer`\u5fc5\u987b\u6307\u5411\u4e00\u4e2a\u5df2\u7ecf\u5206\u914d\u597d\u7684\u5bf9\u8c61\uff0c\u800c\u4e0d\u80fd\u662f`nil // INVALID: conversion of nil pointer u := unsafe.Pointer(nil) p := unsafe.Pointer(uintptr(u) + offset) 1.2.4. \u5f53\u8c03\u7528 syscall.Syscall \u65f6\uff0c\u9700\u8981\u628a Poiner \u8f6c\u6362\u4e3a uintptr syscall \u5305\u4e0b\u7684 Syscall \u51fd\u6570\u628a uintptr \u53c2\u6570\u4f20\u9012\u7ed9\u64cd\u4f5c\u7cfb\u7edf\uff0c\u7136\u540e\u6839\u636e\u8c03\u7528\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u628a\u76f8\u5e94\u7684 uintptr \u518d\u8f6c\u6362\u4e3a\u6307\u9488\u3002 \u5982\u679c\u4e00\u4e2a\u6307\u9488\u53c2\u6570\u5fc5\u987b\u88ab\u8f6c\u6362\u4e3a uintptr \u4f5c\u4e3a\u53c2\u6570\u7684\u8bdd\uff0c\u8fd9\u4e2a\u8f6c\u6362\u53ea\u80fd\u5728\u8c03\u7528\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u8868\u8fbe\u5f0f\u5b8c\u6210\uff0c\u56e0\u4e3a uintptr \u662f\u4e0d\u80fd\u50a8\u5b58\u5728\u53d8\u91cf\u4e2d\u7684\u3002 syscall.Syscall(SYS_READ, uintptr(fd), uintptr(unsafe.Pointer(p)), uintptr(n)) \u7f16\u8bd1\u5668\u5904\u7406\u51fd\u6570\u8c03\u7528\u4e2d\u7684\u6307\u9488\u65f6\uff0c\u8be5\u6307\u9488\u6240\u6307\u5411\u7684\u5bf9\u8c61\u4f1a\u88ab\u4fdd\u7559\u5230\u51fd\u6570\u8c03\u7528\u7ed3\u675f\uff0c\u5373\u4f7f\u8be5\u5bf9\u8c61\u5728\u51fd\u6570\u8c03\u7528\u65f6\u5e76\u4e0d\u4f7f\u7528\u3002 \u5982\u4e0b\u662f\u9519\u8bef\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a uintptr \u4e0d\u80fd\u4fdd\u5b58\u5728\u53d8\u91cf\u4e2d // INVALID: uintptr cannot be stored in variable // before implicit conversion back to Pointer during system call. u := uintptr(unsafe.Pointer(p)) syscall.Syscall(SYS_READ, uintptr(fd), u, uintptr(n)) 1.2.5. \u5c06 reflect.Value.Pointer \u6216\u8005 reflect.Value.UnsafeAddr \u7684\u7ed3\u679c\u4ece uintptr \u8f6c\u6362\u4e3a Pointer \u5305 reflect \u4e0b Value \u7684 Pointer \u65b9\u6cd5\u548c UnsafeAddr \u65b9\u6cd5\u8fd4\u56de\u7684\u662f uintptr \u800c\u4e0d\u662f Pointer \u7c7b\u578b\uff0c\u4ee5\u4fbf\u4e8e\u8c03\u7528\u8005\u4e0d\u4f7f\u7528 usafe \u5305\u5c31\u53ef\u4ee5\u8f6c\u6362\u4e3a\u4efb\u610f\u7c7b\u578b\u3002\u8fd9\u4e5f\u610f\u5473\u7740\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u5fc5\u987b\u4f7f\u7528 Pointer \u8fdb\u884c\u8f6c\u6362\u624d\u53ef\u4ee5\u4f7f\u7528\uff1a p := (*int)(unsafe.Pointer(reflect.ValueOf(new(int)).Pointer())) \u56e0\u4e3a\u8fd9\u4e24\u4e2a\u51fd\u6570\u8c03\u7528\u7684\u8fd4\u56de\u503c\u662f uintptr \uff0c\u6240\u4ee5\u4e5f\u662f\u4e0d\u53ef\u4ee5\u53d8\u91cf\u50a8\u5b58\u7684\u3002 1.2.6. reflect.SliceHeader \u6216\u8005 reflect.StringHeader \u7684 Data \u5b57\u6bb5\u540c Pointer \u7684\u76f8\u4e92\u8f6c\u6362 \u524d\u9762\u8bf4\u8fc7\uff0c\u8fd4\u56de uintptr \u662f\u4e3a\u4e86\u8c03\u7528\u8005\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u4e0d\u540c\u7c7b\u578b\u7684\u8f6c\u6362\uff0c\u800c\u4e0d\u7528\u5bfc\u5165 unsafe \u5305\u3002\u8fd9\u610f\u5473\u7740\uff0c\u53ea\u6709\u5f53\u6307\u9488\u89e3\u6790\u4e3a\u5207\u7247\u6216\u8005\u5b57\u7b26\u4e32\u65f6 SliceHeader \u548c StringHeader \u624d\u53ef\u4ee5\u88ab\u4f7f\u7528\u3002 var s string hdr := (*reflect.StringHeader)(unsafe.Pointer(&s)) // case 1 hdr.Data = uintptr(unsafe.Pointer(p)) // case 6 (this case) hdr.Len = n \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c SliceHeader \u548c StringHeader \u53ea\u80fd\u4f5c\u4e3a *SliceHeader \u548c *StringHeader \u4f7f\u7528\uff0c\u800c\u4e0d\u53ef\u4ee5\u4f7f\u7528\u5176\u7ed3\u6784\u4f53\u5f62\u5f0f\u3002 // INVALID: a directly-declared header will not hold Data as a reference. var hdr reflect.StringHeader hdr.Data = uintptr(unsafe.Pointer(p)) hdr.Len = n s := *(*string)(unsafe.Pointer(&hdr)) // p possibly already lost 1.3 Sizeof \u51fd\u6570 \u5b9a\u4e49\uff1a func Sizeof(x ArbitraryType) uintptr \u76f4\u63a5\u590d\u5236\u6807\u51c6\u6587\u6863\u4e2d\u7684\u5185\u5bb9\uff0c\u4e0b\u540c\u3002 Sizeof \u8fd4\u56de\u7c7b\u578bv\u672c\u8eab\u6570\u636e\u6240\u5360\u7528\u7684\u5b57\u8282\u6570\u3002\u8fd4\u56de\u503c\u662f\u201c\u9876\u5c42\u201d\u7684\u6570\u636e\u5360\u6709\u7684\u5b57\u8282\u6570\u3002\u4f8b\u5982\uff0c\u82e5v\u662f\u4e00\u4e2a\u5207\u7247\uff0c\u5b83\u4f1a\u8fd4\u56de\u8be5\u5207\u7247\u63cf\u8ff0\u7b26\u7684\u5927\u5c0f\uff0c\u800c\u975e\u8be5\u5207\u7247\u5e95\u5c42\u5f15\u7528\u7684\u5185\u5b58\u7684\u5927\u5c0f\u3002 1.4 Alignof \u5b9a\u4e49\uff1a func Alignof(v ArbitraryType) uintptr Alignof \u8fd4\u56de\u7c7b\u578bv\u7684\u5bf9\u9f50\u65b9\u5f0f\uff08\u5373\u7c7b\u578bv\u5728\u5185\u5b58\u4e2d\u5360\u7528\u7684\u5b57\u8282\u6570\uff09\uff1b\u82e5\u662f\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u5b57\u6bb5\u7684\u5f62\u5f0f\uff0c\u5b83\u4f1a\u8fd4\u56de\u5b57\u6bb5f\u5728\u8be5\u7ed3\u6784\u4f53\u4e2d\u7684\u5bf9\u9f50\u65b9\u5f0f\u3002 1.5 Offsetof \u5b9a\u4e49\uff1a func Offsetof(v ArbitraryType) uintptr Offsetof \u8fd4\u56de\u7c7b\u578bv\u6240\u4ee3\u8868\u7684\u7ed3\u6784\u4f53\u5b57\u6bb5\u5728\u7ed3\u6784\u4f53\u4e2d\u7684\u504f\u79fb\u91cf\uff0c\u5b83\u5fc5\u987b\u4e3a\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u5b57\u6bb5\u7684\u5f62\u5f0f\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u8fd4\u56de\u8be5\u7ed3\u6784\u8d77\u59cb\u5904\u4e0e\u8be5\u5b57\u6bb5\u8d77\u59cb\u5904\u4e4b\u95f4\u7684\u5b57\u8282\u6570\u3002 \u603b\u7ed3 1.2\u4e2d\u7684 Pointer \u548c uintptr \u7684\u533a\u522b\uff1a \u5047\u8bbe\u5728\u5185\u5b58\u4e2d\u6709\u4e00\u4e2a\u53d8\u91cf a := 1 \u90a3\u4e48 p := Pointer(&a) \u4e2d\uff0cp\u5305\u542b\u7684\u5c31\u662fa\u7684\u5b9e\u9645\u5730\u5740\uff0c\u5047\u8bbe\u4e3a 1000 \uff0c\u5f53a\u5728\u5185\u5b58\u4e2d\u79fb\u52a8\u65f6\uff0cp\u4e2d\u7684\u5730\u5740\u503c\u4e5f\u4f1a\u5b9e\u65f6\u66f4\u65b0\u3002 \u800c uintprt(p) \u53ea\u662f 1000 \uff0c\u5c31\u662fa\u7684\u5730\u5740\u503c\uff0c\u4f46\u662f\u5f53a\u5728\u5185\u5b58\u4e2d\u79fb\u52a8\u65f6\uff0c\u539f\u6765\u83b7\u53d6\u7684 uintptr \u503c\u5e76\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u4e00\u76f4\u90fd\u662f1000\u3002 \u4e5f\u662f\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0c syscall.Syscall \u4f20\u5165\u7684 uintptr \u5982\u679c\u4ee3\u8868\u4e00\u4e2a\u5bf9\u8c61\u7684\u6307\u9488\uff0c\u90a3\u4e48\u8be5\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u662f\u4e00\u76f4\u88ab\u4fdd\u7559\u7684\uff0c\u800c\u4e14\u4e0d\u80fd\u79fb\u52a8\uff0c\u5426\u5219\u7684\u8bdd uintptr \u6307\u5411\u7684\u5c31\u4e0d\u662f\u539f\u6765\u7684\u5bf9\u8c61\u4e86\uff0c\u5bb9\u6613\u5185\u5b58\u6cc4\u6f0f\u3002 \u8fd8\u6709\u4e00\u4e2a\u5c31\u662f uintptr \u4e0d\u80fd\u4fdd\u5b58\u5728\u53d8\u91cf\u4e2d\uff0c\u53ea\u80fd\u4f7f\u7528 Pointer \u8fdb\u884c\u8f6c\u6362\u7136\u540e\u624d\u80fd\u4fdd\u5b58\u3002 \u7f16\u7801\u5206\u6790 \u80cc\u666f HTTP \u534f\u8bae\u57fa\u4e8e\u6587\u672c\u4f20\u8f93\uff0c\u5b57\u7b26\u7f16\u7801\u5c06\u6587\u672c\u53d8\u4e3a\u4e8c\u8fdb\u5236\uff0c\u4e8c\u8fdb\u5236\u7f16\u7801\u5c06\u4e8c\u8fdb\u5236\u53d8\u4e3a\u6587\u672c\u3002TCP \u534f\u8bae\u57fa\u4e8e\u4e8c\u8fdb\u5236\u4f20\u8f93\uff0c\u6570\u636e\u8bfb\u53d6\u65f6\u9700\u8981\u5904\u7406\u5b57\u8282\u5e8f\u3002\u672c\u6587\u5c06\u4ecb\u7ecd\u5e38\u89c1\u7684\u5b57\u7b26\u7f16\u7801\u3001\u4e8c\u8fdb\u5236\u7f16\u7801\u53ca\u5b57\u8282\u5e8f\uff0c\u5e76\u4e00\u63a2 Golang \u4e2d\u7684\u5b9e\u73b0\u3002 \u5b57\u7b26\u7f16\u7801 \u5f15\u8a00\uff1a\u5982\u4f55\u628a\u201cHello world\u201d\u53d8\u6210\u5b57\u8282\uff1f Step1\uff1a\u5f97\u5230\u8981\u8868\u793a\u7684\u5168\u91cf\u5b57\u7b26\uff08\u5b57\u7b26\u8868\uff09 Step2\uff1a\u4e3a\u6bcf\u4e2a\u5b57\u7b26\u6307\u5b9a\u4e00\u4e2a\u6574\u6570\u7f16\u53f7\uff08\u7f16\u7801\u5b57\u7b26\u96c6\uff09 Step3\uff1a\u5c06\u7f16\u53f7\u6620\u5c04\u6210\u6709\u9650\u957f\u5ea6\u6bd4\u7279\u503c\uff08\u5b57\u7b26\u7f16\u7801\u8868\uff09 \u5b57\u7b26\u662f\u5404\u79cd\u6587\u5b57\u548c\u7b26\u53f7\u7684\u603b\u79f0\uff0c\u5305\u62ec\u5404\u56fd\u5bb6\u6587\u5b57\u3001\u6807\u70b9\u7b26\u53f7\u3001\u56fe\u5f62\u7b26\u53f7\u3001\u6570\u5b57\u7b49\u3002\u5168\u4e16\u754c\u5171\u4f7f\u7528 5651 \u79cd\u8bed\u8a00\uff0c\u5176\u4e2d\u4f7f\u7528\u4eba\u6570\u8d85\u8fc7 5000 \u4e07\u7684\u8bed\u8a00\u6709 13 \u79cd\uff0c\u6bcf\u79cd\u8bed\u8a00\u6709\u81ea\u5df1\u7684\u5b57\u7b26\u3002\u6c49\u8bed\u4e2d\uff0c\u4e00\u4e2a\u6c49\u5b57\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u3002\u82f1\u8bed\u4e2d\uff0c\u4e00\u4e2a\u5b57\u6bcd\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u3002\u751a\u81f3\u770b\u4e0d\u89c1\u7684\u4e5f\u53ef\u4ee5\u662f\u5b57\u7b26\uff08\u5982\u63a7\u5236\u5b57\u7b26\uff09\u3002 \u5b57\u7b26\u7684\u96c6\u5408\u5373\u4e3a\u5b57\u7b26\u8868 \uff0c\u5982\u82f1\u6587\u5b57\u6bcd\u8868\uff0c\u963f\u62c9\u4f2f\u6570\u5b57\u8868\u3002ASCII \u7801\u8868\u4e2d\u4e00\u5171\u6709 128 \u4e2a\u5b57\u7b26\u3002 \u7f16\u7801\u5b57\u7b26\u96c6\uff08CCS:Coded Character Set\uff09 \u4e3a\u5b57\u7b26\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u6307\u5b9a\u4e00\u4e2a\u7f16\u53f7\uff08 \u7801\u70b9\uff0cCode Point \uff09\uff0c\u5373\u5f97\u5230\u7f16\u7801\u5b57\u7b26\u96c6\u3002\u5e38\u89c1\u6709 ASCII \u5b57\u7b26\u96c6\u3001Unicode \u5b57\u7b26\u96c6\u3001GB2312 \u5b57\u7b26\u96c6\u3001BIG5 \u5b57\u7b26\u96c6\u3001 GB18030 \u5b57\u7b26\u96c6\u7b49\u3002ASCII \u5b57\u7b26\u96c6\u4e2d\u4e00\u5171\u6709 128 \u4e2a\u5b57\u7b26\uff0c\u5305\u62ec\u4e86 94 \u4e2a\u53ef\u6253\u5370\u5b57\u7b26\uff08\u82f1\u6587\u5927\u5c0f\u5199\u5b57\u6bcd 52 \u4e2a\u3001\u963f\u62c9\u4f2f\u6570\u5b57 10 \u4e2a\u3001\u897f\u6587\u7b26\u53f7 32 \u4e2a\uff09\u548c 34 \u4e2a\u63a7\u5236\u7b26\u6216\u901a\u4fe1\u4e13\u7528\u5b57\u7b26\uff0c\u7801\u70b9\u503c\u8303\u56f4\u4e3a[0, 128)\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002Unicode \u5b57\u7b26\u96c6\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u96c6\u5408\uff0c\u73b0\u6709\u5bb9\u91cf\u5c06\u8fd1 2^21 \u4e2a\u5b57\u7b26\uff0c\u7801\u70b9\u503c\u8303\u56f4\u4e3a[0, 2^20+2^16)\u3002 ASCII\u5b57\u7b26\u7f16\u7801\u8868 \u5b57\u7b26\u7f16\u7801\u8868\uff08CEF:Character Encoding Form\uff09 \u7f16\u7801\u5b57\u7b26\u96c6\u53ea\u5b9a\u4e49\u4e86\u5b57\u7b26\u4e0e\u7801\u70b9\u7684\u6620\u5c04 \uff0c\u5e76\u6ca1\u6709\u89c4\u5b9a\u7801\u70b9\u7684\u5b57\u8282\u8868\u793a\u65b9\u5f0f\u3002\u7531\u4e8e 1 \u4e2a\u5b57\u8282\u53ef\u4ee5\u8868\u793a 256 \u4e2a\u7f16\u53f7\uff0c\u8db3\u4ee5\u5bb9\u7eb3 ASCII \u5b57\u7b26\u96c6\uff0c\u56e0\u6b64 ASCII \u7f16\u7801\u7684\u89c4\u5219\u5f88\u7b80\u5355\uff1a\u76f4\u63a5\u5c06\u7801\u70b9\u503c\u7528 uint8 \u8868\u793a\u5373\u53ef \u3002\u5bf9\u4e8e Unicode \u5b57\u7b26\u96c6\uff0c\u5bb9\u7eb3 2^21 \u81f3\u5c11\u9700\u8981 3 \u5b57\u8282\u3002\u53ef\u4ee5\u91c7\u7528\u7c7b\u4f3c ASCII \u7684\u7f16\u7801\u89c4\u5219\uff1a \u76f4\u63a5\u5c06\u7f16\u7801\u70b9\u503c\u7528 uint32 \u8868\u793a\u5373\u53ef\uff0c\u8fd9\u6b63\u662f UTF-32 \u7f16\u7801 \u3002 \u8fd9\u79cd\u4e00\u5200\u5207\u7684\u5b9a\u957f\u7f16\u7801\u65b9\u5f0f\u867d\u7136\u7b80\u5355\u7c97\u66b4\uff0c\u5f0a\u7aef\u4e5f\u5f88\u660e\u663e\uff1a \u5bf9\u4e8e\u7eaf\u82f1\u6587\u6587\u672c\uff0cUTF-32 \u7f16\u7801\u7a7a\u95f4\u5360\u7528\u5c06\u662f ACSII \u7f16\u7801\u7684 4 \u500d \uff0c\u9020\u6210\u6781\u5927\u7684\u7a7a\u95f4\u6d6a\u8d39\uff0c\u51e0\u4e4e\u6ca1\u4ec0\u4e48\u4eba\u7528\u3002\u6709\u6ca1\u6709\u66f4\u4f18\u96c5\u7684\u89e3\u51b3\u65b9\u6848\uff1f\u5f53\u7136\uff0c\u8fd9\u5c31\u662f UTF-8 \u548c UTF-16\uff0c\u4e24\u79cd\u5f53\u524d\u6bd4\u8f83\u6d41\u884c\u7684 Unicode \u7f16\u7801\u65b9\u5f0f\u3002 UTF-8 \u5386\u53f2\u7684\u7ecf\u9a8c\uff0c\u6210\u529f\u7684\u8bbe\u8ba1\u5f80\u5f80\u5177\u6709\u5305\u5bb9\u6027\u3002UTF-8 \u662f\u4e00\u4e2a\u5178\u578b\uff0c\u6f02\u4eae\u7684\u5b9e\u73b0\u4e86 \u5bf9 ASCII \u7801\u7684\u5411\u540e\u517c\u5bb9 \uff0c\u4ee5\u4fdd\u8bc1\u53ef\u4ee5\u88ab\u5927\u4f17\u63a5\u53d7\u3002UTF-8 \u662f\u76ee\u524d\u4e92\u8054\u7f51\u4e0a\u4f7f\u7528\u6700\u5e7f\u6cdb\u7684\u4e00\u79cd Unicode \u7f16\u7801\u65b9\u5f0f\uff0c\u5b83\u7684\u6700\u5927\u7279\u70b9\u5c31\u662f\u53ef\u53d8\u957f\uff0c\u968f\u7801\u70b9\u53d8\u6362\u957f\u5ea6\uff08\u4ece 1 \u5b57\u8282\u5230 4 \u5b57\u8282\uff09\u3002text \u5927\u9053\u81f3\u7b80\uff0c\u4f18\u96c5\u7684\u8bbe\u8ba1\u4e00\u5b9a\u662f\u7b80\u5355\u7684\uff0cUTF-8 \u7684\u7f16\u7801\u89c4\u5219\u4e5f\u8be0\u91ca\u4e86\u8fd9\u4e00\u70b9\u3002\u7f16\u7801\u89c4\u5219\u5982\u4e0b\uff1a <=127\uff08U+7F\uff09\u7684\u7801\u70b9\u91c7\u7528\u5355\u5b57\u8282\u7f16\u7801\uff0c\u4e0e ASCII \u4fdd\u6301\u4e00\u81f4\uff1b >127\uff08U+7F\uff09\u7684\u7801\u70b9\u91c7\u7528 N \u5b57\u8282\uff08N \u5c5e\u4e8e 2\uff0c3\uff0c4\uff09\u7f16\u7801\uff0c\u9996\u5b57\u8282\u7684\u524d N \u4f4d\u4e3a 1\uff0c\u7b2c N+1 \u4f4d\u4e3a 0\uff0c\u5269\u4f59 N-1 \u4e2a\u5b57\u8282\u7684\u524d\u4e24\u4f4d\u90fd\u4e3a 10\uff0c\u5269\u4e0b\u7684\u4e8c\u8fdb\u5236\u4f4d\u4f7f\u7528\u5b57\u7b26\u7684\u7801\u70b9\u6765\u586b\u5145\u3002 \u5176\u4e2d(U+7F)\u8868\u793a Unicode \u7684\u5341\u516d\u8fdb\u5236\u7801\u70b9\u503c\uff0c\u5373 127\u3002\u5982\u679c\u89c9\u5f97\u7f16\u7801\u89c4\u5219\u62bd\u8c61\uff0c\u7ed3\u5408\u4e0b\u8868\u66f4\u52a0\u6e05\u6670\uff1a Unicode \u7801\u70b9\u8303\u56f4 \u7801\u70b9\u6570\u91cf UTF-8 \u7f16\u7801\u683c\u5f0f 0000 0000 ~ 0000 007F 2^7 0xxxxxxx 0000 0080 ~ 0000 07FF 2^11 - 2^7 110xxxxx 10xxxxxx 0000 0800 ~ 0000 FFFF 2^16 - 2^11 1110xxxx 10xxxxxx 10xxxxxx 0001 0000 ~ 0010 FFFF 2^20 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u201c\u6c49\u201d\u7684 Unicode \u7801\u70b9\u662f U+6C49\uff08110 1100 0100 1001\uff09\uff0c\u6839\u636e\u4e0a\u8868\u53ef\u5f97\u9700\u8981 3 \u5b57\u8282\u7f16\u7801\uff0c\u586b\u5145\u7801\u70b9\u503c\u540e\u5f97\u5230 0xE6 0xB7 0x89\uff0811100110 10110001 10001001\uff09\u3002 \u6839\u636e\u7f16\u7801\u89c4\u5219\uff0c\u89e3\u7801\u4e5f\u5f88\u7b80\u5355\uff0c\u5173\u952e\u662f\u5982\u4f55\u5224\u65ad\u8fde\u7eed\u7684\u5b57\u8282\u6570\uff1a \u9996\u5b57\u8282\u8fde\u7eed 1 \u7684\u4e2a\u6570\u5373\u4e3a\u5b57\u8282\u6570 \u3002 \u9700\u8981\u4e00\u63d0\u7684\u662f\uff0c \u5728 MySQL \u4e2d\uff0cutf8 \u662f\u201c\u865a\u5047\u7684 utf8\u201d \uff0c\u6700\u5927\u53ea\u652f\u6301 3 \u4e2a\u5b57\u8282\uff0c\u5982\u679c\u5efa\u8868\u65f6\u9009\u62e9 CHARSET=utf8\uff0c\u4f1a\u5bfc\u81f4\u5f88\u591a\u7279\u6b8a\u5b57\u7b26\u548c emoji \u8868\u60c5\u90fd\u65e0\u6cd5\u63d2\u5165\u3002 utf8mb4 \u624d\u662f\u201c\u771f\u6b63\u7684 utf8\u201d \uff0cmb4 \u5373most bytes 4\u3002\u4e3a\u4ec0\u4e48 MySQL \u4e2d utf8 \u6700\u5927\u53ea\u652f\u6301 3 \u5b57\u8282\uff1f\u5386\u53f2\u539f\u56e0\uff0c\u5728 MySQL \u521a\u5f00\u53d1\u90a3\u4f1a\u513f\uff0cUnicode \u7a7a\u95f4\u53ea\u6709 2^16\uff0cUnicode \u59d4\u5458\u4f1a\u8fd8\u5728\u505a \u201c65535 \u4e2a\u5b57\u7b26\u8db3\u591f\u5168\u4e16\u754c\u7528\u4e86\u201d\u7684\u7f8e\u68a6\u5462\u3002 UTF-16 \u5728 C/C++ \u4e2d\u9047\u5230\u7684wchar_t\u7c7b\u578b\u6216 Java \u4e2d\u7684char\u7c7b\u578b\uff0c\u8fd9\u4e9b\u7c7b\u578b\u5360\u5185\u5b58\u4e24\u4e2a\u5b57\u8282\uff0c\u56e0\u4e3a Unicode \u4e2d\u5e38\u7528\u7684\u5b57\u7b26\u90fd\u5904\u4e8e[U+0, U+FFFF]\uff08\u57fa\u672c\u5e73\u9762\uff09\u7684\u8303\u56f4\u4e4b\u5185\uff0c\u56e0\u6b64 \u4e24\u4e2a\u5b57\u8282\u51e0\u4e4e\u53ef\u4ee5\u8986\u76d6\u5927\u90e8\u5206\u7684\u5e38\u7528\u5b57\u7b26 \uff0c\u8fd9\u6b63\u662f UTF-16 \u7f16\u7801\u7684\u4e00\u4e2a\u524d\u63d0\u3002 \u76f8\u6bd4 UTF-32 \u4e0e UTF-8\uff0c UTF-16 \u7f16\u7801\u662f\u4e00\u4e2a\u6298\u4e2d\uff1a\u5c0f\u4e8e\uff08U+FFFF\uff092^16 \u7684\u7801\u70b9\uff08\u57fa\u672c\u5e73\u9762\uff09\u4f7f\u7528 2 \u5b57\u8282\u7f16\u7801\uff0c\u5927\u4e8e\uff08U+FFFF\uff092^16 \u7684\u7801\u70b9\uff08\u8f85\u52a9\u7801\u70b9\uff09\u4f7f\u7528 4 \u5b57\u8282\u7f16\u7801 \u3002\u7531\u4e8e\u57fa\u7840\u5e73\u9762\u7a7a\u95f4\u4f1a\u5360\u7528 2 \u5b57\u8282\u7684\u6240\u6709\u6bd4\u7279\u4f4d\uff0c\u65e0\u6cd5\u50cf UTF-8 \u90a3\u6837\u7559\u6709\u201c10\u201d\u524d\u7f00\u3002\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff1a \u5f53\u9047\u5230\u4e24\u4e2a\u8282\u65f6\uff0c\u5982\u4f55\u5224\u65ad\u662f 2 \u5b57\u8282\u7f16\u7801\u8fd8\u662f 4 \u5b57\u8282\u7f16\u7801\uff1f UTF-16 \u7684\u7f16\u7801\u7684\u53e6\u4e00\u4e2a\u524d\u63d0\uff1a \u5728\u57fa\u672c\u5e73\u9762\u5185\uff0c [U+D800, U+DFFF] \u662f\u4e00\u4e2a\u7a7a\u6bb5\uff08\u7a7a\u95f4\u5927\u5c0f\u4e3a 2^11\uff09 \uff0c\u8fd9\u4e9b\u7801\u70b9\u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u7b26\u3002\u56e0\u6b64\uff0c\u8fd9\u4e2a\u7a7a\u6bb5\u53ef\u4ee5\u7528\u6765\u6620\u5c04\u8f85\u52a9\u5e73\u9762\u7684\u5b57\u7b26\u3002 \u8f85\u52a9\u5e73\u9762\u5bb9\u91cf\u4e3a 2^20\uff0c\u81f3\u5c11\u9700\u8981 20 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0cUTF-16 \u5c06\u8fd9 20 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\u5206\u6210\u4e24\u534a\uff0c\u524d 10 \u4f4d\u6620\u5c04\u5728 U+D800 \u5230 U+DBFF\uff08\u7a7a\u95f4\u5927\u5c0f 2^10\uff09\uff0c\u79f0\u4e3a \u9ad8\u4f4d \uff08H\uff09\uff0c\u540e 10 \u4f4d\u6620\u5c04\u5728 U+DC00 \u5230 U+DFFF\uff08\u7a7a\u95f4\u5927\u5c0f 2^10\uff09\uff0c\u79f0\u4e3a \u4f4e\u4f4d \uff08L\uff09\u3002 \u6620\u5c04\u65b9\u5f0f\u91c7\u7528\u7ebf\u6027\u6620\u5c04\u3002Unicode3.0 \u4e2d\u7ed9\u51fa\u4e86\u8f85\u52a9\u5e73\u9762\u5b57\u7b26\u7684\u8f6c\u6362\u516c\u5f0f\uff1a H = Math.floor((c-0x10000) / 0x400) + 0xD800 L = (c - 0x10000) % 0x400 + 0xDC00 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u8f85\u52a9\u5e73\u9762\u7684\u7801\u70b9\uff0c\u88ab\u62c6\u6210\u4e24\u4e2a\u57fa\u672c\u5e73\u9762\u7684\u7a7a\u6bb5\u7801\u70b9\u8868\u793a\u3002\u5982\u679c\u53cc\u5b57\u8282\u7684\u503c\u5728[U+D800, U+DBFF]\u4e2d\uff0c\u5219\u8981\u548c\u540e\u7eed\u76f8\u90bb\u7684\u53cc\u5b57\u8282\u4e00\u540c\u89e3\u7801\u3002\u5177\u4f53\u7f16\u7801\u89c4\u5219\u4e3a\uff1a <= (U+FFFF)\u7684\u7801\u70b9\u91c7\u7528\u53cc\u5b57\u8282\u7f16\u7801\uff0c\u76f4\u63a5\u5c06\u7801\u70b9\u4f7f\u7528 uint16 \u8868\u793a\uff1b > (U+FFFF)\u7684\u7801\u70b9\u91c7\u7528 4 \u5b57\u8282\u7f16\u7801\uff0c\u4f5c\u5dee\u8ba1\u7b97\u7801\u70b9\u6ea2\u51fa\u503c\uff0c\u5c06\u6ea2\u51fa\u503c\u7528 uint20 \u8868\u793a\u540e\uff0c\u524d 10 \u4f4d\u6620\u5c04\u5230[U+D800, U+DBFF]\uff0c\u540e 10 \u4f4d\u6620\u5c04\u5230[U+DC00, U+DFFF]; \u5c0f\u7ed3: \u5b9a\u957f\u7f16\u7801\u7684\u4f18\u70b9\u662f\u8f6c\u6362\u89c4\u5219\u7b80\u5355\u76f4\u89c2\uff0c\u67e5\u627e\u6548\u7387\u9ad8\uff0c\u7f3a\u70b9\u662f\u7a7a\u95f4\u6d6a\u8d39\uff0c\u4ee5\u53ca\u4e0d\u53ef\u6269\u5c55\u3002\u5982\u679c Unicode \u5b57\u7b26\u96c6\u8fdb\u4e00\u6b65\u6269\u5145\uff0cUTF-16 \u548c UTF-32 \u90fd\u5c06\u4e0d\u53ef\u7528\uff0c\u800c UTF-8 \u5177\u6709\u66f4\u5f3a\u7684\u53ef\u6269\u5c55\u6027\u3002 Golang \u4e2d\u5b57\u7b26\u7f16\u7801 \u4e0d\u50cf C++\u3001Java \u7b49\u8bed\u8a00\u652f\u6301\u4e94\u82b1\u516b\u95e8\u7684\u5b57\u7b26\u7f16\u7801\uff0cGolang \u9075\u4ece\u201c\u5927\u9053\u81f3\u7b80\u201d\u7684\u539f\u5219\uff1a \u5168\u7528 UTF-8 \u3002\u6240\u4ee5 go \u7a0b\u5e8f\u5458\u518d\u4e5f\u4e0d\u7528\u62c5\u5fc3\u4e71\u7801\u95ee\u9898\uff0c\u751a\u81f3\u53ef\u4ee5\u7528\u6c49\u5b57\u548c\u8868\u60c5\u5305\u5199\u4ee3\u7801\uff0cstring \u4e0e\u5b57\u8282\u6570\u7ec4\u8f6c\u6362\u4e5f\u662f\u76f4\u63a5\u8f6c\u6362\u3002 func TestTemp(t *testing.T) { \u6765\u81ea\u6253\u5de5\u4eba\u7684\u95ee\u5019() } func \u6765\u81ea\u6253\u5de5\u4eba\u7684\u95ee\u5019() { \u95ee\u5019\u8bed := \"\u65e9\u5b89\uff0c\u6253\u5de5\u4eba\ud83d\ude01\" fmt.Println(\u95ee\u5019\u8bed) bytes := []byte(\u95ee\u5019\u8bed) fmt.Println(hex.EncodeToString(bytes)) } // \u6267\u884c\u7ed3\u679c--> \u65e9\u5b89\uff0c\u6253\u5de5\u4eba\ud83d\ude01 e697a9e5ae89efbc8ce68993e5b7a5e4babaf09f9881 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0cGolang \u4e2d string \u7684\u5e95\u5c42\u6a21\u578b\u5c31\u662f\u5b57\u8282\u6570\u7ec4\uff0c\u6240\u4ee5\u7c7b\u578b\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u65e0\u9700\u7f16\u89e3\u7801\u3002\u4e5f\u56e0\u6b64\uff0c Golang \u4e2d string \u7684\u5e95\u5c42\u6a21\u578b\u662f\u5b57\u8282\u6570\u7ec4\uff0c\u5176\u957f\u5ea6\u5e76\u975e\u5b57\u7b26\u6570\uff0c\u800c\u662f\u5bf9\u5e94\u5b57\u8282\u6570 \u3002\u5982\u679c\u8981\u53d6\u5b57\u7b26\u6570\uff0c\u9700\u8981\u5148\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5b57\u7b26\u6570\u7ec4\u3002 \u5b57\u7b26\u7c7b\u578b\uff08rune\uff09\u5b9e\u9645\u4e0a\u662f int32 \u7684\u522b\u540d\uff0c\u5373\u7528 UTF-32 \u7f16\u7801\u8868\u793a\u5b57\u7b26 \u3002 func TestTemp(t *testing.T) { fmt.Println(len(\"\u65e9\")) // 3 fmt.Println(len([]byte(\"\u65e9\"))) // 3 fmt.Println(len([]rune(\"\u65e9\")) // 1 } // rune is an alias for int32 and is equivalent to int32 in all ways. It is // used, by convention, to distinguish character values from integer values. type rune = int32 \u518d\u770b\u4e00\u4e0b go \u4e2d utf-8 \u7f16\u7801\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u9996\u5148\u83b7\u53d6\u5b57\u7b26\u7684\u7801\u70b9\u503c\uff0c\u7136\u540e\u6839\u636e\u8303\u56f4\u5224\u65ad\u5b57\u8282\u6570\uff0c\u6839\u636e\u5bf9\u5e94\u683c\u5f0f\u751f\u6210\u7f16\u7801\u503c\u3002\u5982\u679c\u662f\u65e0\u6548\u7684\u7801\u70b9\u503c\uff0c\u6216\u7801\u70b9\u503c\u4f4d\u4e8e\u7a7a\u6bb5\uff0c\u5219\u8fd4\u56deU+FFFD(\u5373 \ufffd)\u3002\u89e3\u7801\u8fc7\u7a0b\u4e0d\u518d\u8d58\u8ff0\u3002 // EncodeRune writes into p (which must be large enough) the UTF-8 encoding of the rune. // It returns the number of bytes written. func EncodeRune(p []byte, r rune) int { // Negative values are erroneous. Making it unsigned addresses the problem. switch i := uint32(r); { case i <= rune1Max: p[0] = byte(r) return 1 case i <= rune2Max: _ = p[1] // eliminate bounds checks p[0] = t2 | byte(r>>6) p[1] = tx | byte(r)&maskx return 2 case i > MaxRune, surrogateMin <= i && i <= surrogateMax: r = RuneError fallthrough case i <= rune3Max: _ = p[2] // eliminate bounds checks p[0] = t3 | byte(r>>12) p[1] = tx | byte(r>>6)&maskx p[2] = tx | byte(r)&maskx return 3 default: _ = p[3] // eliminate bounds checks p[0] = t4 | byte(r>>18) p[1] = tx | byte(r>>12)&maskx p[2] = tx | byte(r>>6)&maskx p[3] = tx | byte(r)&maskx return 4 } } const( t1 = 0b00000000 tx = 0b10000000 t2 = 0b11000000 t3 = 0b11100000 t4 = 0b11110000 t5 = 0b11111000 maskx = 0b00111111 mask2 = 0b00011111 mask3 = 0b00001111 mask4 = 0b00000111 rune1Max = 1<<7 - 1 rune2Max = 1<<11 - 1 rune3Max = 1<<16 - 1 RuneError = '\\uFFFD' // the \"error\" Rune or \"Unicode replacement character\" ) // Code points in the surrogate range are not valid for UTF-8. const ( surrogateMin = 0xD800 surrogateMax = 0xDFFF ) \u4e8c\u8fdb\u5236\u7f16\u7801 \u5f15\u8a00\uff1aHTTP \u662f\u600e\u4e48\u4f20\u8f93\u4e8c\u8fdb\u5236\u6570\u636e\u7684\uff1f Step1\uff1a\u5b9a\u4e49\u5b57\u7b26\u96c6\uff1b Step2\uff1a\u5c06\u4e8c\u8fdb\u5236\u6570\u636e\u5206\u7ec4\uff1b Step3\uff1a\u5c06\u6bcf\u7ec4\u6620\u5c04\u4e3a\u5b57\u7b26\uff1b \u5b57\u7b26\u7f16\u7801\u662f\u300c\u6587\u672c\u300d\u53d8\u4e3a\u300c\u4e8c\u8fdb\u5236\u300d\u7684\u8fc7\u7a0b\uff0c\u90a3\u5982\u4f55\u5c06\u4efb\u610f\u300c\u4e8c\u8fdb\u5236\u300d\u53d8\u4e3a\u300c\u6587\u672c\u300d\uff1f\u7b54\u6848\u662f\u8fdb\u884c\u4e8c\u8fdb\u5236\u7f16\u7801\uff0c\u5e38\u89c1\u6709 Hex \u7f16\u7801\u4e0e Base64 \u7f16\u7801\u3002 \u663e\u7136 \u4e0d\u80fd\u6309\u5b57\u7b26\u7f16\u7801\u76f4\u63a5\u89e3\u7801 \uff0c\u56e0\u4e3a\u5b57\u7b26\u7f16\u7801\u7684\u7ed3\u679c\u4e8c\u8fdb\u5236\u662f\u6ee1\u8db3\u7f16\u7801\u89c4\u5f8b\u7684\uff0c\u800c\u975e\u300c\u4efb\u610f\u300d\u7684\uff0c\u975e\u6cd5\u683c\u5f0f\u8fdb\u884c\u5b57\u7b26\u89e3\u7801\u4f1a\u51fa\u73b0\u4e71\u7801\uff08\u6bd4\u5982\u5bf90b11xxxxxx\u8fdb\u884c UTF-8 \u89e3\u7801\uff09\u3002 Hex \u7f16\u7801 Hex \u7f16\u7801\u662f\u6700\u76f4\u89c2\u7684\u4e8c\u8fdb\u5236\u7f16\u7801\u65b9\u5f0f\uff0c\u6240\u89c1\u5373\u6240\u5f97\u3002\u4e0a\u6587\u4e2d\u7684\u5341\u516d\u8fdb\u5236\u8868\u793a\u5c31\u662f\u7528\u7684 Hex \u7f16\u7801\u3002\u89c4\u5219\u5982\u4e0b\uff1a Hex \u5b57\u7b26\u96c6\u4e3a0123456789abcdef\uff1b \u6bcf 4bit \u4e3a 1 \u7ec4(2^4=16)\uff1b \u6bcf\u7ec4\u6620\u5c04\u4e3a\u4e00\u4e2a Hex \u5b57\u7b26\uff1b \u8ba1\u7b97\u673a\u4e2d\u4e8c\u8fdb\u5236\u6570\u636e\u90fd\u662f\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u5b58\u50a8\u7684\uff0c1 \u4e2a\u5b57\u8282 8bit\uff0c\u4e0d\u4f1a\u51fa\u73b0\u65e0\u6cd5\u88ab 4 \u6574\u9664\u7684\u60c5\u51b5\u3002 \u6bcf\u4e2a\u5b57\u8282\u7f16\u7801\u4e3a 2 \u4e2a Hex \u5b57\u7b26\uff0c\u5373\u7f16\u7801\u540e\u7684\u5b57\u7b26\u6570\u662f\u539f\u59cb\u6570\u636e\u5b57\u8282\u6570\u7684 2 \u500d\u3002 \u5728 ASCII \u6216 UTF-8 \u7f16\u7801\u4e0b\uff0c\u5b58\u50a8 Hex \u7ed3\u679c\u5b57\u7b26\u4e32\u9700\u8981\u7684\u7a7a\u95f4\u662f\u539f\u59cb\u6570\u636e\u7684 2 \u500d\uff0c\u5b58\u50a8\u6548\u7387\u4e3a 50%\u3002 Base64 \u7f16\u7801 Base64 \u7f16\u7801\uff0c\u987e\u540d\u601d\u4e49\uff0c\u662f\u57fa\u4e8e 64 \u4e2a\u5b57\u7b26\u8fdb\u884c\u7f16\u7801\u3002\u89c4\u5219\u5982\u4e0b\uff1a Base64 \u5b57\u7b26\u96c6\uff08\u4ee5\u6807\u51c6 Base64 \u4e3a\u4f8b, 26 \u5927\u5199, 26 \u5c0f\u5199, 10 \u6570\u5b57, \u4ee5\u53ca+\u3001/\uff09\u4e3aABC...YZabc...yz012...89+/\uff1b \u6bcf 6bit \u4e3a\u4e00\u7ec4\uff082^6=64\uff09\uff0c\u5373 \u6bcf 3 \u4e2a\u5b57\u8282\u4e3a 4 \u7ec4 \uff1b \u6bcf\u7ec4\u6620\u5c04\u4e3a\u4e00\u4e2a Base64 \u5b57\u7b26\uff1b \u5982\u679c\u8981\u7f16\u7801\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u4e0d\u662f 3 \u7684\u500d\u6570\uff0c\u6700\u540e\u4f1a\u5269\u4e0b 1 \u4e2a\u6216 2 \u4e2a\u5b57\u8282\u600e\u4e48\u529e\uff1f \u6807\u51c6\u7f16\u7801(StdEncoding) \u4f1a\u5148\u5728\u672b\u5c3e\u7528 0x00 \u8865\u9f50\u518d\u5206\u7ec4\uff0c\u5e76\u5c06\u6700\u540e 2 \u4e2a\u6216 1 \u4e2a 6bit \u5206\u7ec4\uff08\u5168\u4e3a 0 \u586b\u5145\uff09\u6620\u5c04\u4e3a'='\uff0c\u8868\u793a\u8865\u9f50\u7684 0 \u5b57\u8282\u6570\u91cf\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4ee50x12 34 ab cd\u7f16\u7801\u4e3a\u6807\u51c6 base64 \u4e3a\u4f8b\uff1a \u4e0d\u8db3 3 \u7684\u500d\u6570\uff0c\u5148\u7528\u4e24\u4e2a 0 \u5b57\u8282\u8865\u9f50 -->0x12 34 ab cd 00 00 0x12 34 ab\u7f16\u7801\u4e3aEjSr 0xcd 00 00\u4e8c\u8fdb\u5236\u4e3a0b1100 1101 0000 0000 0000 0000\uff0c\u5206\u4e3a 4 \u7ec4\u540e\u4e3a110011 010000 000000 000000\uff0c\u7f16\u7801\u7ed3\u679c\u4e3azQ== \u6700\u7ec8\u7f16\u7801\u7ed3\u679c\u4e3aEjSrzQ== \u89e3\u7801\u8fc7\u7a0b\u6ce8\u610f\u672b\u5c3e\u5b57\u8282\u7684\u5904\u7406\u5373\u53ef\uff0c\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\u3002 EjSrzQ==-->0x12 34 ab cd 00 00-->0x12 34 ab cd \u6807\u51c6\u7f16\u7801\u4e2d\u7f16\u7801\u7ed3\u679c\u5b57\u7b26\u957f\u5ea6\u4e00\u5b9a\u662f 4 \u7684\u500d\u6570\uff0c\u4e14\u662f\u539f\u59cb\u6570\u636e\u5b57\u8282\u6570\u7684 4/3 \u500d \uff0c\u56e0\u4e3a\u4f1a\u5c06\u5b57\u8282\u6570\u636e\u8865\u9f50\u81f3 3 \u7684\u500d\u6570\uff0c\u6bcf 3 \u4e2a\u5b57\u8282\u7f16\u7801\u4e3a 4 \u4e2a\u5b57\u7b26\u3002 \u5728 ASCII \u6216 UTF-8 \u7f16\u7801\u4e0b\uff0c\u5b58\u50a8\u7ed3\u679c\u5b57\u7b26\u4e32\u9700\u8981\u7684\u7a7a\u95f4\u662f\u539f\u59cb\u6570\u636e\u7684 4/3 \u500d\uff0c\u5b58\u50a8\u6548\u7387\u4e3a 75% \u3002 \u6839\u636e\u5b57\u7b26\u96c6\u7684\u4e0d\u540c\uff0cBase64 \u7f16\u7801\u6709\u51e0\u4e2a\u53d8\u79cd\uff0c\u9664\u4e86\u6807\u51c6\u7f16\u7801\uff08StdEncoding\uff09\uff0c\u5e38\u89c1\u7684\u8fd8\u6709 URL \u7f16\u7801\uff08URLEncoding\uff09\u3001\u539f\u59cb\u6807\u51c6\u7f16\u7801\uff08RawStdEncoding\uff09\u4ee5\u53ca\u539f\u59cb URL \u7f16\u7801\uff08RawUrlEncoded\uff09\u3002 \u7b80\u5355\u6765\u8bf4\uff0cRaw \u6307\u7684\u662f\u65e0 Padding\uff0cURL \u6307\u7684\u662f\u7528-\u548c_\u53d6\u4ee3\u7f16\u7801\u7ed3\u679c\u4e2d\u5305\u542b\u7684 url \u5173\u952e\u5b57+\u548c/\u3002\u4e0d\u59a8\u53c2\u8003 Golang \u4e2dencoding/base64\u5305\u4e2d\u7684\u63cf\u8ff0\uff1a // StdEncoding is the standard base64 encoding, as defined in // RFC 4648. var StdEncoding = NewEncoding(*encodeStd*) // URLEncoding is the alternate base64 encoding defined in RFC 4648. // It is typically used in URLs and file names. var URLEncoding = NewEncoding(*encodeURL*) // RawStdEncoding is the standard raw, unpadded base64 encoding, // as defined in RFC 4648 section 3.2. // This is the same as StdEncoding but omits padding characters. var RawStdEncoding = StdEncoding.WithPadding(*NoPadding*) // RawURLEncoding is the unpadded alternate base64 encoding defined in RFC 4648. // It is typically used in URLs and file names. // This is the same as URLEncoding but omits padding characters. var RawURLEncoding = URLEncoding.WithPadding(*NoPadding*) \u4e0e\u6807\u51c6\u7f16\u7801\u4e0d\u540c\u7684\u662f\uff0c \u539f\u59cb\u7f16\u7801\u4e2d\uff0c\u5b57\u8282\u6570\u4e0d\u8db3 3 \u7684\u500d\u6570\u65f6\u4e0d\u4f1a\u8865\u9f50\u5b57\u8282\u6570 \uff0c\u91c7\u7528\u5982\u4e0b\u65b9\u6848\uff1a \u5982\u679c\u5269\u4f59 1 \u5b57\u8282\uff0c\u5219\u5de6\u79fb 4bit \u540e\u8f6c\u6362\u4e3a 2 \u5b57\u7b26\uff1b \u5982\u679c\u5269\u4f59 2 \u5b57\u8282\uff0c\u5219\u5de6\u79fb 2bit \u540e\u8f6c\u5316\u4e3a 3 \u5b57\u7b26\uff1b \u5373 \u539f\u59cb\u7f16\u7801\u65b9\u6848\u4e2d\uff0c\u7ed3\u679c\u5b57\u7b26\u4e32\u957f\u5ea6\u53ef\u4ee5\u4e0d\u662f 4 \u7684\u500d\u6570 \u3002 Hex \u7f16\u7801\u53ef\u4ee5\u770b\u6210\u201cBase16 \u7f16\u7801\u201d\u3002\u968f\u7740\u5b57\u7b26\u6570\u91cf\u7684\u589e\u52a0\uff0c\u5b58\u50a8\u6548\u7387\u4e5f\u968f\u4e4b\u589e\u52a0\u3002\u5982\u679c\u6709\u201cBase256\u201d\u7f16\u7801\uff0c\u5b58\u50a8\u6548\u7387\u5c82\u4e0d\u5c31 100%\u4e86\uff1f\u5f88\u9057\u61be\uff0c\u4e3b\u6d41\u5b57\u7b26\u7f16\u7801\u4e2d\uff0c\u5355\u5b57\u8282\u80fd\u8868\u793a\u7684\u53ef\u6253\u5370\u5b57\u7b26\u53ea\u6709 92 \u4e2a\u3002\u901a\u8fc7\u6269\u5145\u591a\u5b57\u8282\u5b57\u7b26\uff0c\u6216\u7528\u7ec4\u5408\u5b57\u7b26\u5b9e\u73b0 base256 \u610f\u4e49\u4e0d\u5927\u3002 Golang \u4e2d\u7684\u4e8c\u8fdb\u5236\u7f16\u7801 \u770b\u4e00\u4e0b Golang \u4e2d Base64 \u7f16\u7801\u7684\u5b9e\u73b0\u3002\u9996\u5148\u901a\u8fc7EncodedLen\u65b9\u6cd5\u786e\u5b9a\u7ed3\u679c\u957f\u5ea6\uff0c\u751f\u6210\u8f93\u51fabuf\uff0c\u7136\u540e\u901a\u8fc7Encode\u65b9\u6cd5\u5c06\u7f16\u7801\u7ed3\u679c\u586b\u5145\u5230buf\u5e76\u8fd4\u56de\u7ed3\u679c\u5b57\u7b26\u4e32\u3002 // EncodeToString returns the base64 encoding of src. func (enc *Encoding) EncodeToString(src []byte) string { buf := make([]byte, enc.EncodedLen(len(src))) enc.Encode(buf, src) return string(buf) } \u5982\u524d\u8ff0\uff0c\u6807\u51c6\u7f16\u7801\u548c\u539f\u59cb\u7f16\u7801\uff08\u65e0 Padding\uff09\u7684\u7ed3\u679c\u957f\u5ea6\u4e0d\u540c\uff1a\u5982\u679c\u9700\u8981 Padding\uff0c\u76f4\u63a5\u6839\u636e\u5b57\u8282\u6570\u8ba1\u7b97\u5373\u53ef\uff0c\u53cd\u4e4b\u5219\u9700\u8981\u6839\u636e bit \u6570\u8ba1\u7b97\u3002 // EncodedLen returns the length in bytes of the base64 encoding // of an input buffer of length n. func (enc *Encoding) EncodedLen(n int) int { if enc.padChar == *NoPadding* { return (n*8 + 5) / 6 // minimum # chars at 6 bits per char } return (n + 2) / 3 * 4 // minimum # 4-char quanta, 3 bytes each } Encode\u65b9\u6cd5\u5b9e\u73b0\u4e86\u7f16\u7801\u7ec6\u8282\u3002\u9996\u5148\u904d\u5386\u5b57\u8282\u6570\u7ec4\uff0c\u5c06\u6bcf 3 \u4e2a\u5b57\u8282\u7f16\u7801\u4e3a 4 \u4e2a\u5b57\u7b26\u3002\u6700\u540e\u5904\u7406\u5269\u4f59\u7684 1 \u6216 2 \u4e2a\u5b57\u8282\uff08\u5982\u6709\uff09\uff1a\u9996\u5148\u4f7f\u7528\u79fb\u4f4d\u8fd0\u7b97\u8fdb\u884c 0bit \u586b\u5145\uff0c\u7136\u540e\u8fdb\u884c\u5b57\u7b26\u8f6c\u6362\u3002\u5982\u524d\u8ff0\uff0c\u65e0 Padding \u65f6\uff0c\u5269\u4e0b 1 \u5b57\u8282\u5bf9\u5e94 2 \u5b57\u7b26\uff0c\u5269\u4e0b 2 \u5b57\u8282\u5bf9\u5e94 3 \u5b57\u7b26\uff0c\u5373\u81f3\u5c11\u4f1a\u6709 2 \u5b57\u7b26\u3002\u6700\u540e\u5728switch\u4ee3\u7801\u6bb5\u4e2d\uff0c\u6839\u636e\u5269\u4f59\u5b57\u8282\u6570\u586b\u5145\u7b2c 3 \u4e2a\u5b57\u7b26\u548c Padding \u5b57\u7b26\uff08\u5982\u6709\uff09\u5373\u53ef\u3002 func (enc *Encoding) Encode(dst, src []byte) { if len(src) == 0 { return } // enc is a pointer receiver, so the use of enc.encode within the hot // loop below means a nil check at every operation. Lift that nil check // outside of the loop to speed up the encoder. _ = enc.encode di, si := 0, 0 n := (len(src) / 3) * 3 for si < n { // Convert 3x 8bit source bytes into 4 bytes val := uint(src[si+0])<<16 | uint(src[si+1])<<8 | uint(src[si+2]) dst[di+0] = enc.encode[val>>18&0x3F] dst[di+1] = enc.encode[val>>12&0x3F] dst[di+2] = enc.encode[val>>6&0x3F] dst[di+3] = enc.encode[val&0x3F] si += 3 di += 4 } remain := len(src) - si if remain == 0 { return } // Add the remaining small block val := uint(src[si+0]) << 16 if remain == 2 { val |= uint(src[si+1]) << 8 } dst[di+0] = enc.encode[val>>18&0x3F] dst[di+1] = enc.encode[val>>12&0x3F] switch remain { case 2: dst[di+2] = enc.encode[val>>6&0x3F] if enc.padChar != *NoPadding* { dst[di+3] = byte(enc.padChar) } case 1: if enc.padChar != *NoPadding* { dst[di+2] = byte(enc.padChar) dst[di+3] = byte(enc.padChar) } } } \u5b57\u8282\u5e8f \u5f15\u8a00\uff1a\u62ff\u5230\u4e24\u4e2a\u5b57\u8282\uff0c\u5982\u4f55\u89e3\u6790\u4e3a\u6574\u5f62\uff1f Step1\uff1a\u660e\u786e\u5b57\u8282\u9ad8\u4f4e\u4f4d\u987a\u5e8f Step2\uff1a\u6309\u9ad8\u4f4e\u4f4d\u6743\u91cd\u8ba1\u7b97\u7ed3\u679c \u4e0a\u8ff0\u4e8c\u8fdb\u5236\u7f16\u7801\u4e3b\u8981\u7528\u4e8e\u6587\u672c\u4f20\u8f93\uff0c\u80fd\u4e0d\u80fd\u4e0d\u8fdb\u884c\u7f16\u7801\uff0c\u76f4\u63a5\u4f20\u8f93\u4e8c\u8fdb\u5236\uff1f\u5f53\u7136\u53ef\u4ee5\uff0c\u57fa\u4e8e\u4e8c\u8fdb\u5236\u4f20\u8f93\u534f\u8bae\uff0c\u5982 TCP \u534f\u8bae\u3002\u90a3\u4e48\u4ec0\u4e48\u662f\u6587\u672c\u4f20\u8f93\uff0c\u4ec0\u4e48\u662f\u4e8c\u8fdb\u5236\u4f20\u8f93\uff1f\u7b80\u5355\u6765\u8bf4\uff0c\u6587\u672c\u4f20\u8f93\uff0c\u5185\u5bb9\u4e3a\u6587\u672c\uff0c\u81ea\u5e26\u63cf\u8ff0\u4fe1\u606f\uff08\u53c2\u6570\u540d\uff09\uff0c\u5982 HTTP \u4e2d\u7684\u5b57\u6bb5\u90fd\u4ee5 KV \u5f62\u5f0f\u5b58\u5728\u3002\u4e8c\u8fdb\u5236\u4f20\u8f93\uff0c\u5185\u5bb9\u4e3a\u4e8c\u8fdb\u5236\uff0c \u4ee5\u9884\u5148\u5b9a\u4e49\u597d\u7684\u683c\u5f0f\u62fc\u5728\u4e00\u8d77 \uff0c\u5982 TCP \u534f\u8bae\u62a5\u6587\u683c\u5f0f\u3002 \u5927\u7aef\u4e0e\u5c0f\u7aef \u804a\u5230\u4e8c\u8fdb\u5236\u4f20\u8f93\uff0c\u4e00\u4e2a\u907f\u4e0d\u5f00\u7684\u8bdd\u9898\u662f \u5b57\u8282\u5e8f \u3002\u4ec0\u4e48\u662f\u5b57\u8282\u5e8f\uff1f\u5047\u8bbe\u8bfb\u53d6\u5230\u4e00\u4e2a\u4e24\u5b57\u8282\u7684 uint16 0x04 0x00\uff0c\u5982\u679c\u4ece\u5de6\u5f80\u53f3\uff08\u4ece\u9ad8\u4f4d\u5f80\u4f4e\u4f4d\uff09\u89e3\u7801\uff0c\u5f97\u5230\u7684\u662f 1024\uff0c\u53cd\u8fc7\u6765\uff08\u4ece\u4f4e\u4f4d\u5f80\u9ad8\u4f4d\uff09\u89e3\u7801\u5219\u662f 4\uff0c\u8fd9\u5c31\u662f\u5b57\u8282\u5e8f\u3002 \u7b26\u5408\u4eba\u7c7b\u9605\u8bfb\u4e60\u60ef\u7684\uff08\u4ece\u9ad8\u4f4d\u5f80\u4f4e\u4f4d\uff09\u662f\u5927\u7aef\uff08BigEndian\uff09\uff0c\u53cd\u4e4b\u4e3a\u5c0f\u7aef\uff08LittleEndian\uff09\u3002 \u53e6\u4e00\u79cd\u5927\u5c0f\u7aef\u7684\u5b9a\u4e49\uff1aLittleEndian \u5c06\u4f4e\u5e8f\u5b57\u8282\u5b58\u50a8\u5728\u4f4e\u5730\u5740\uff0cBigEndian \u5c06\u9ad8\u5e8f\u5b57\u8282\u5b58\u50a8\u5728\u4f4e\u5730\u5740\u3002\u7406\u89e3\u8d77\u6765\u6709\u4e9b\u62bd\u8c61\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u81f4\u7684\u3002 \u4e3a\u4ec0\u4e48\u4f1a\u6709\u5c0f\u7aef\u5b57\u8282\u5e8f\uff0c\u7edf\u4e00\u90fd\u7528\u5927\u7aef\u4e0d\u597d\u4e48\uff1f \u8ba1\u7b97\u673a\u4e0d\u8fd9\u4e48\u60f3\uff0c\u56e0\u4e3a\u8ba1\u7b97\u673a\u4e2d\u8ba1\u7b97\u90fd\u662f\u4ece\u4f4e\u4f4d\u5f00\u59cb\u7684\uff0c\u7535\u8def\u5148\u5904\u7406\u4f4e\u4f4d\u5b57\u8282\u6548\u7387\u6bd4\u8f83\u9ad8\u3002\u4f46\u662f\uff0c\u4eba\u7c7b\u8fd8\u662f\u4e60\u60ef\u8bfb\u5199\u5927\u7aef\u5b57\u8282\u5e8f\u3002\u6240\u4ee5\uff0c \u9664\u4e86\u8ba1\u7b97\u673a\u7684\u5185\u90e8\u5904\u7406\uff0c\u5176\u4ed6\u7684\u573a\u5408\u51e0\u4e4e\u90fd\u662f\u5927\u7aef\u5b57\u8282\u5e8f\uff0c\u6bd4\u5982\u7f51\u7edc\u4f20\u8f93\u548c\u6587\u4ef6\u50a8\u5b58\u3002 \u90a3\u4ec0\u4e48\u65f6\u5019\u7a0b\u5e8f\u5458\u9700\u8981\u8fdb\u884c\u5b57\u8282\u5e8f\u5904\u7406\u5462\uff1f\u5f53\u591a\u5b57\u8282\u6574\u5f62\uff08uint16\uff0cuint32\uff0cuint64\uff09\u9700\u8981\u548c\u5b57\u8282\u6570\u7ec4\u4e92\u76f8\u8f6c\u6362\u65f6\u3002 \u5b57\u8282\u6570\u7ec4\u662f\u65e0\u5b57\u8282\u5e8f\u7684\uff0c\u5ba2\u6237\u7aef\u5199\u5165\u5565\uff0c\u670d\u52a1\u7aef\u5c31\u8bfb\u53d6\u5565\uff0c\u4e0d\u4f1a\u51fa\u73b0\u9006\u5e8f\uff0c\u5199\u5165\u548c\u8bfb\u53d6\u65e0\u9700\u8003\u8651\u5b57\u8282\u5e8f\uff0c\u8fd9\u70b9\u5927\u53ef\u653e\u5fc3 \u3002 \u53ea\u6709\u5f53\u591a\u5b57\u8282\u6574\u5f62\u548c\u5b57\u8282\u6570\u7ec4\u4e92\u8f6c\u65f6\u5fc5\u987b\u6307\u660e\u5b57\u8282\u5e8f\u3002 Golang \u4e2d\u7684\u5b57\u8282\u5e8f \u4ee5 uint16 \u4e0e\u5b57\u8282\u6570\u7ec4\u4e92\u8f6c\u4e3a\u4f8b\uff0c\u770b\u4e00\u4e0b Golang \u4e2d encoding/binary \u5305\u4e2d\u7684\u5b57\u8282\u5e8f\u5904\u7406\u4e0e\u5b9e\u73b0\u3002\u53ef\u89c1\u5b9e\u73b0\u5e76\u4e0d\u590d\u6742\uff0c\u6ce8\u610f\u5b57\u8282\u987a\u5e8f\u5373\u53ef\u3002 func TestEndian(t *testing.T) { bytes := make([]byte, 2) binary.LittleEndian.PutUint16(bytes, 1024) // \u5c0f\u7aef\u5199 --> 0x0004 binary.BigEndian.PutUint16(bytes, 1024) // \u5927\u7aef\u5199 --> 0x0400 binary.LittleEndian.Uint16(bytes) // \u5c0f\u7aef\u8bfb --> 4 binary.BigEndian.Uint16(bytes) // \u5927\u7aef\u8bfb --> 1024 } func (littleEndian) PutUint16(b []byte, v uint16) { _ = b[1] // early bounds check to guarantee safety of writes below b[0] = byte(v) b[1] = byte(v >> 8) } func (bigEndian) PutUint16(b []byte, v uint16) { _ = b[1] // early bounds check to guarantee safety of writes below b[0] = byte(v >> 8) b[1] = byte(v) } func (littleEndian) Uint16(b []byte) uint16 { _ = b[1] // bounds check hint to compiler; see golang.org/issue/14808 return uint16(b[0]) | uint16(b[1])<<8 } func (bigEndian) Uint16(b []byte) uint16 { _ = b[1] // bounds check hint to compiler; see golang.org/issue/14808 return uint16(b[1]) | uint16(b[0])<<8 } \u5b9e\u6218\uff1a\u52a0\u89e3\u5bc6\u4e2d\u7684\u7f16\u7801\u4e0e\u5b57\u8282\u5e8f \u5728\u52a0\u89e3\u5bc6\u573a\u666f\u4e2d\uff0c\u901a\u5e38\u4f1a\u5bf9 \u660e\u6587 \u52a0\u5bc6\u5f97\u5230 \u5bc6\u6587 \uff0c\u5bf9\u5bc6\u6587\u89e3\u5bc6\u5f97\u5230\u660e\u6587\u3002\u6bd4\u5982\u5bf9\u5bc6\u7801\"123456\"\uff08\u660e\u6587\uff09\u8fdb\u884c \u5bf9\u79f0\u52a0\u5bc6 \uff08\u5982 SM4\uff09\u5f97\u5230\"G7EeTPnuvSU41T68qsuc_g\"\uff08\u5bc6\u6587\uff09\u3002 \u660e\u6587\u548c\u5bc6\u6587\u90fd\u662f\u7531\u53ef\u6253\u5370\u5b57\u7b26\u6784\u6210\u7684\u6587\u672c \uff0c\u901a\u5e38\u660e\u6587\u4eba\u7c7b\u53ef\u76f4\u63a5\u9605\u8bfb\u5176\u542b\u4e49\uff08\u4e0d\u8003\u8651\u4e8c\u6b21\u52a0\u5bc6\uff09\uff0c\u5bc6\u6587\u9700\u8981\u89e3\u5bc6\u540e\u624d\u80fd\u7406\u89e3\u542b\u4e49\u3002 \u90a3\u4e48\u4e0a\u8ff0\u660e\u6587\u53d8\u6210\u5bc6\u6587\uff0c\u671f\u95f4\u7ecf\u5386\u4e86\u54ea\u4e9b\u7f16\u7801\u8fc7\u7a0b\u5462\uff1f\u4ee5\u52a0\u5bc6\u4e3a\u4f8b\uff1a \u5c06\u660e\u6587\"123456\"\u8fdb\u884c\u5b57\u7b26\u89e3\u7801\uff08\u5982 UTF-8\uff09\uff0c\u5f97\u5230 \u660e\u6587\u5b57\u8282\u5e8f\u5217 0x31 32 33 34 35 36; \u5c06\u660e\u6587\u5b57\u8282\u5e8f\u5217\u8f93\u5165 SM4 \u52a0\u5bc6\u7b97\u6cd5\uff0c\u8f93\u51fa \u5bc6\u6587\u5b57\u8282\u5e8f\u5217 0x1b b1 1e 4c f9 ee bd 25 38 d5 3e bc aa cb 9c fe\uff1b \u5c06\u5bc6\u6587\u5b57\u8282\u5e8f\u5217\u8fdb\u884c\u4e8c\u8fdb\u5236\u7f16\u7801\uff08\u5982 RawURLBase64\uff09\uff0c\u5f97\u5230\u5bc6\u6587\"G7EeTPnuvSU41T68qsuc_g\"\uff1b \u540c\u7406\uff0c\u5c06\"G7EeTPnuvSU41T68qsuc_g\"\u89e3\u5bc6\u6210\"123456\"\u8fc7\u7a0b\u4e2d\uff0c\u5e94\u4e0e\u52a0\u5bc6\u8fc7\u7a0b\u7684\u7f16\u7801\u65b9\u5f0f\u5bf9\u5e94\uff1a\u5148\u8fdb\u884c RawRULBase64 \u89e3\u7801\uff0c\u518d\u89e3\u5bc6\uff0c\u6700\u540e\u518d\u8fdb\u884c UTF-8 \u7f16\u7801\u3002 \u52a0\u89e3\u5bc6\u7b97\u6cd5\u7684\u8f93\u5165\u8f93\u51fa\u90fd\u662f\u5b57\u8282\u5e8f\u5217\uff0c\u6240\u4ee5\u8981\u5c06\u660e\u6587\u3001\u5bc6\u6587\u4e0e\u5b57\u8282\u5e8f\u5217\u8fdb\u884c\u8f6c\u6362\u3002\u6709\u4e24\u70b9\u9700\u8981\u6ce8\u610f\uff1a \u660e\u6587\u89e3\u7801\u4e3a\u660e\u6587\u5b57\u8282\u5e8f\u5217\uff0c\u89e3\u7801\u65b9\u5f0f\u56e0\u573a\u666f\u800c\u5b9a \u3002\u5bf9\u4e8e\u591a\u6b21\u52a0\u5bc6\u573a\u666f\uff08\u5982\u5bf9\u201cG7EeTPnuvSU41T68qsuc_g\u201d\u518d\u6b21\u52a0\u5bc6\uff09\uff0c\u660e\u6587\u662f Base64 \u7f16\u7801\u5f97\u5230\u7684\uff0c\u5efa\u8bae\u91c7\u7528\u4e00\u81f4\u7684\u65b9\u5f0f\u89e3\u7801\u3002\u867d\u7136\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c UTF-8 \u89e3\u7801\uff0c\u4f46\u4f1a\u4f7f\u52a0\u89e3\u5bc6\u6d41\u7a0b\u8bbe\u8ba1\u53d8\u5f97\u590d\u6742\u3002 \u5bc6\u6587\u5b57\u8282\u5e8f\u5217\u7f16\u7801\u4e3a\u5bc6\u6587\uff0c\u5fc5\u987b\u7528\u4e8c\u8fdb\u5236\u7f16\u7801\uff0c\u4e0d\u80fd\u7528\u5b57\u7b26\u7f16\u7801 \u3002\u4f7f\u7528\u5b57\u7b26\u7f16\u7801\u4f1a\u4ea7\u751f\u4e71\u7801\uff08\u610f\u5473\u7740\u6570\u636e\u4e22\u5931\uff0c\u65e0\u6cd5\u9006\u5411\u89e3\u7801\u51fa\u539f\u59cb\u6570\u636e\uff09\u3002\u4e0a\u8ff0\u5bc6\u6587\u5e8f\u5217\u5bc6\u6587\u5e8f\u5217\u8fdb\u884c UTF-8 \u7f16\u7801\u7684\u7ed3\u679c\u662f \ufffdL\ufffd\ufffd\ufffd%8\ufffd>\ufffd\ufffd\u02dc\ufffd\u3002 \u5408\u89c4\u8981\u6c42\uff0c\u52a0\u89e3\u5bc6\u573a\u666f\u4e2d\u5e94\u4f7f\u7528 \u786c\u4ef6\u52a0\u5bc6\u673a \u3002\u901a\u5e38\u786c\u4ef6\u52a0\u5bc6\u673a\u63d0\u4f9b \u57fa\u4e8e TCP \u7684\u5b57\u8282\u6d41\u901a\u4fe1\u65b9\u5f0f \uff0c\u6bd4\u5982\u7ea6\u5b9a\u6bcf\u6b21\u901a\u4fe1\u6570\u636e\u4e2d\u7684\u524d 2 \u5b57\u8282\u4e3a\u6570\u636e\u957f\u5ea6\uff0c\u540e\u9762\u7684\u4e3a\u771f\u5b9e\u6570\u636e\u3002\u53d1\u9001\u65f6\uff0c\u9700\u8981\u5c06\u771f\u5b9e\u6570\u636e\u957f\u5ea6\u8f6c\u4e3a 2 \u5b57\u8282\u62fc\u5728\u524d\u9762\uff0c\u63a5\u6536\u65f6\uff0c\u9700\u8981\u5148\u8bfb\u53d6\u524d\u4e24\u5b57\u8282\u5f97\u5230\u771f\u5b9e\u6570\u636e\u957f\u5ea6 N\uff0c\u518d\u8bfb\u53d6 N \u5b57\u8282\u5f97\u5230\u771f\u5b9e\u6570\u636e\u3002\u5176\u4e2d \u957f\u5ea6\u4e0e\u5b57\u8282\u5e8f\u5217\u7684\u8f6c\u6362\u9700\u8981\u5173\u6ce8\u5b57\u8282\u5e8f\uff1a\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7684\u5b57\u8282\u5e8f\u5904\u7406\u4fdd\u6301\u4e00\u81f4 \u5373\u53ef\uff0c\u6bd4\u5982\u5168\u7528\u5927\u7aef\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u6570\u636e\u53d1\u9001\u7684\u793a\u4f8b\u4ee3\u7801\uff1a func (m *EncryptMachine) sendData(conn net.Conn, data []byte) error { // add length newData := m.addLength(data) // send new data return util.SocketWriteData(conn, newData) } func (m *EncryptMachine) addLength(data []byte) []byte { lengthBytes := make([]byte, 2) binary.BigEndian.PutUint16(lengthBytes, uint16(len(data))) return append(lengthBytes, data...) } \u603b\u7ed3 \u7f16\u7801\u867d\u7136\u57fa\u7840\uff0c\u4f46\u5374\u5bb9\u6613\u51fa\u9519\uff0c\u5207\u83ab\u773c\u9ad8\u624b\u4f4e\u3002\u5e0c\u671b\u672c\u6587\u80fd\u5e2e\u52a9\u5927\u5bb6\u8fdb\u4e00\u6b65\u4e86\u89e3\u5b57\u7b26\u7f16\u7801\u3001\u4e8c\u8fdb\u5236\u7f16\u7801\u4e0e\u5b57\u8282\u5e8f\uff0c\u907f\u514d\u8e29\u5751\u3002 \u672a\u5b8c\uff0c\u5f85\u7eed","title":"Go \u4e2d\u7684\u65f6\u95f4\u64cd\u4f5c"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#go","text":"Golang\u4e2d\u4e0e\u65f6\u95f4\u6709\u5173\u7684\u64cd\u4f5c\uff0c\u4e3b\u8981\u6d89\u53ca\u5230 time \u5305\uff0c\u6838\u5fc3\u6570\u636e\u7ed3\u6784\u662f time.Time \uff0c\u5982\u4e0b\uff1a type Time struct { wall uint64 ext int64 loc *Location }","title":"Go \u4e2d\u7684\u65f6\u95f4\u64cd\u4f5c"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#1","text":"","title":"1\u3001\u83b7\u53d6\u65f6\u95f4\u76f8\u5173\u51fd\u6570"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#11","text":"// \u8fd4\u56de\u5f53\u524d\u65f6\u95f4\uff0c\u6ce8\u610f\u6b64\u65f6\u8fd4\u56de\u7684\u662f time.Time \u7c7b\u578b now := time.Now() fmt.Println(now) // \u5f53\u524d\u65f6\u95f4\u6233 fmt.Println(now.Unix()) // \u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233 fmt.Println(now.UnixNano()) // \u65f6\u95f4\u6233\u5c0f\u6570\u90e8\u5206 \u5355\u4f4d\uff1a\u7eb3\u79d2 fmt.Println(now.Nanosecond()) \u8f93\u51fa\uff1a 2021-01-10 14:56:15.930562 +0800 CST m=+0.000124449 1610261775 1610261775930562000 930562000","title":"1.1 \u83b7\u53d6\u5f53\u524d\u65f6\u95f4"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#12","text":"now := time.Now() // \u8fd4\u56de\u65e5\u671f year, month, day := now.Date() fmt.Printf(\"year:%d, month:%d, day:%d\\n\", year, month, day) // \u5e74 fmt.Println(now.Year()) // \u6708 fmt.Println(now.Month()) // \u65e5 fmt.Println(now.Day()) // \u65f6\u5206\u79d2 hour, minute, second := now.Clock() fmt.Printf(\"hour:%d, minute:%d, second:%d\\n\", hour, minute, second) // \u65f6 fmt.Println(now.Hour()) // \u5206 fmt.Println(now.Minute()) // \u79d2 fmt.Println(now.Second()) // \u8fd4\u56de\u661f\u671f fmt.Println(now.Weekday()) //\u8fd4\u56de\u4e00\u5e74\u4e2d\u5bf9\u5e94\u7684\u7b2c\u51e0\u5929 fmt.Println(now.YearDay()) //\u8fd4\u56de\u65f6\u533a fmt.Println(now.Location()) // \u8fd4\u56de\u4e00\u5e74\u4e2d\u7b2c\u51e0\u5929 fmt.Println(now.YearDay())","title":"1.2 \u8fd4\u56de\u5f53\u524d\u5e74\u6708\u65e5\u65f6\u5206\u79d2\u3001\u661f\u671f\u51e0\u3001\u4e00\u5e74\u4e2d\u7684\u7b2c\u51e0\u5929\u7b49\u64cd\u4f5c"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#13","text":"Go \u8bed\u8a00\u63d0\u4f9b\u4e86\u65f6\u95f4\u7c7b\u578b\u683c\u5f0f\u5316\u51fd\u6570 Format() \uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f Go \u8bed\u8a00\u683c\u5f0f\u5316\u65f6\u95f4\u6a21\u677f\u4e0d\u662f\u5e38\u89c1\u7684 Y-m-d H:i:s \uff0c\u800c\u662f 2006-01-02 15:04:05\uff0c\u4e5f\u5f88\u597d\u8bb0\u5fc6(2006 1 2 3 4 5)\u3002 now := time.Now() fmt.Println(now.Format(\"2006-01-02 15:04:05\")) fmt.Println(now.Format(\"2006-01-02\")) fmt.Println(now.Format(\"15:04:05\")) fmt.Println(now.Format(\"2006/01/02 15:04\")) fmt.Println(now.Format(\"15:04 2006/01/02\"))","title":"1.3 \u683c\u5f0f\u5316\u65f6\u95f4"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#2","text":"\u65f6\u95f4\u6233\u8f6c\u6210\u65e5\u671f\u683c\u5f0f\uff0c\u9700\u8981\u5148\u8f6c\u6210\u5c06\u65f6\u95f4\u6233\u8f6c\u6210 time.Time \u7c7b\u578b\u518d\u683c\u5f0f\u5316\u6210\u65e5\u671f\u683c\u5f0f\u3002","title":"2\u3001\u65f6\u95f4\u6233\u4e0e\u65e5\u671f\u5b57\u7b26\u4e32\u76f8\u4e92\u8f6c\u5316"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#21-timetime","text":"now := time.Now() layout := \"2006-01-02 15:04:05\" t := time.Unix(now.Unix(),0) // \u53c2\u6570\u5206\u522b\u662f\uff1a\u79d2\u6570,\u7eb3\u79d2\u6570 fmt.Println(t.Format(layout))","title":"2.1 \u6839\u636e\u79d2\u6570\u3001\u7eb3\u79d2\u6570\u8fd4\u56de time.Time \u7c7b\u578b"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#22-timetime-timedate","text":"now := time.Now() layout := \"2006-01-02 15:04:05\" //\u6839\u636e\u6307\u5b9a\u65f6\u95f4\u8fd4\u56de time.Time \u7c7b\u578b //\u5206\u522b\u6307\u5b9a\u5e74\uff0c\u6708\uff0c\u65e5\uff0c\u65f6\uff0c\u5206\uff0c\u79d2\uff0c\u7eb3\u79d2\uff0c\u65f6\u533a t := time.Date(2011, time.Month(3), 12, 15, 30, 20, 0, now.Location()) fmt.Println(t.Format(layout))","title":"2.2 \u6839\u636e\u6307\u5b9a\u65f6\u95f4\u8fd4\u56de time.Time \u7c7b\u578b\uff0c\u4f7f\u7528\u51fd\u6570 time.Date()"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#23-timetime","text":"t, _ := time.ParseInLocation(\"2006-01-02 15:04:05\", time.Now().Format(\"2006-01-02 15:04:05\"), time.Local) fmt.Println(t) // \u8f93\u51fa 2021-01-10 17:28:50 +0800 CST // time.Local \u6307\u5b9a\u672c\u5730\u65f6\u95f4 \u89e3\u6790\u7684\u65f6\u5019\u9700\u8981\u7279\u522b\u6ce8\u610f\u65f6\u533a\u7684\u95ee\u9898\uff1a fmt.Println(time.Now()) fmt.Println(time.Now().Location()) t, _ := time.Parse(\"2006-01-02 15:04:05\", \"2021-01-10 15:01:02\") fmt.Println(t) \u8f93\u51fa\uff1a 2021-01-10 17:22:10.951904 +0800 CST m=+0.000094166 Local 2021-01-10 15:01:02 +0000 UTC \u53ef\u4ee5\u770b\u5230\uff0c time.Now() \u4f7f\u7528\u7684 CST(\u4e2d\u56fd\u6807\u51c6\u65f6\u95f4)\uff0c\u800c time.Parse() \u9ed8\u8ba4\u7684\u662f UTC(\u96f6\u65f6\u533a)\uff0c\u5b83\u4eec\u76f8\u5dee 8 \u5c0f\u65f6\u3002\u6240\u4ee5\u89e3\u6790\u65f6\u5e38\u7528 time.ParseInLocation() \uff0c\u53ef\u4ee5\u6307\u5b9a\u65f6\u533a\u3002","title":"2.3 \u65e5\u671f\u5b57\u7b26\u4e32\u89e3\u6790\u6210 time.Time \u7c7b\u578b"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#3","text":"\u8bb2\u5230\u65e5\u671f\u7684\u8ba1\u7b97\u5c31\u4e0d\u5f97\u4e0d\u63d0 time \u5305\u63d0\u4f9b\u7684\u4e00\u79cd\u65b0\u7684\u7c7b\u578b Duration \uff0c\u6e90\u7801\u662f\u8fd9\u6837\u5b9a\u4e49\u7684\uff1a type Duration int64 \u5e95\u5c42\u7c7b\u578b\u662f int64\uff0c\u8868\u793a\u4e00\u6bb5\u65f6\u95f4\u95f4\u9694\uff0c\u5355\u4f4d\u662f \u7eb3\u79d2\u3002","title":"3\u3001\u8ba1\u7b97\u3001\u6bd4\u8f83\u65e5\u671f"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#31-24","text":"now := time.Now() fmt.Println(now) // 1\u5c0f\u65f61\u52061s\u4e4b\u540e t1, _ := time.ParseDuration(\"1h1m1s\") fmt.Println(t1) m1 := now.Add(t1) fmt.Println(m1) // 1\u5c0f\u65f61\u52061s\u4e4b\u524d t2, _ := time.ParseDuration(\"-1h1m1s\") m2 := now.Add(t2) fmt.Println(m2) // 3\u5c0f\u65f6\u4e4b\u524d t3, _ := time.ParseDuration(\"-1h\") m3 := now.Add(t3 * 3) fmt.Println(m3) // 10 \u5206\u949f\u4e4b\u540e t4, _ := time.ParseDuration(\"10m\") m4 := now.Add(t4) fmt.Println(m4) // Sub \u8ba1\u7b97\u4e24\u4e2a\u65f6\u95f4\u5dee sub1 := now.Sub(m3) fmt.Println(sub1.Hours()) // \u76f8\u5dee\u5c0f\u65f6\u6570 fmt.Println(sub1.Minutes()) // \u76f8\u5dee\u5206\u949f\u6570 \u989d\u5916\u518d\u4ecb\u7ecd\u4e24\u4e2a\u51fd\u6570 time.Since() \u3001 time.Until() \uff1a // \u8fd4\u56de\u5f53\u524d\u65f6\u95f4\u4e0e t \u7684\u65f6\u95f4\u5dee\uff0c\u8fd4\u56de\u503c\u662f Duration time.Since(t Time) Duration // \u8fd4\u56de t \u4e0e\u5f53\u524d\u65f6\u95f4\u7684\u65f6\u95f4\u5dee\uff0c\u8fd4\u56de\u503c\u662f Duration time.Until(t Time) Duration now := time.Now() fmt.Println(now) t1, _ := time.ParseDuration(\"-1h\") m1 := now.Add(t1) fmt.Println(m1) fmt.Println(time.Since(m1)) fmt.Println(time.Until(m1)) \u8f93\u51fa\uff1a 2021-01-10 20:41:48.668232 +0800 CST m=+0.000095594 2021-01-10 19:41:48.668232 +0800 CST m=-3599.999904406 1h0m0.000199007s -1h0m0.000203035s","title":"3.1 24\u5c0f\u65f6\u4e4b\u5185\u7684\u65f6\u95f4\u8ba1\u7b97"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#32-24","text":"\u6d89\u53ca\u5230\u4e00\u5929\u4ee5\u5916\u7684\u65f6\u95f4\u8ba1\u7b97\uff0c\u5c31\u9700\u8981\u7528\u5230 time.AddDate() \uff0c\u51fd\u6570\u539f\u578b\uff1a func (t Time) AddDate(years int, months int, days int) Time \u6bd4\u5982\u60f3\u77e5\u9053 \u4e00\u5e74\u4e00\u4e2a\u6708\u96f6\u4e00\u5929 \u4e4b\u540e\u7684\u65f6\u95f4\uff0c\u5c31\u53ef\u4ee5\u8fd9\u6837\uff1a now := time.Now() fmt.Println(now) m1 := now.AddDate(1,1,1) fmt.Println(m1) \u518d\u6bd4\u5982\uff0c\u60f3\u83b7\u5f97 2 \u5929\u4e4b\u524d\u65f6\u95f4\uff1a now := time.Now() fmt.Println(now) m1 := now.AddDate(0,0,-2) fmt.Println(m1)","title":"3.2 24\u5c0f\u65f6\u4e4b\u5916\u7684\u65f6\u95f4\u8ba1\u7b97"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#33","text":"\u65e5\u671f\u7684\u6bd4\u8f83\u603b\u5171\u6709\u4e09\u79cd\uff1a\u4e4b\u524d\u3001\u4e4b\u540e\u548c\u76f8\u7b49\u3002 // \u5982\u679c t \u4ee3\u8868\u7684\u65f6\u95f4\u70b9\u5728 u \u4e4b\u524d\uff0c\u8fd4\u56de\u771f\uff1b\u5426\u5219\u8fd4\u56de\u5047\u3002 func (t Time) Before(u Time) bool // \u5982\u679c t \u4ee3\u8868\u7684\u65f6\u95f4\u70b9\u5728 u \u4e4b\u540e\uff0c\u8fd4\u56de\u771f\uff1b\u5426\u5219\u8fd4\u56de\u5047\u3002 func (t Time) After(u Time) bool // \u6bd4\u8f83\u65f6\u95f4\u662f\u5426\u76f8\u7b49\uff0c\u76f8\u7b49\u8fd4\u56de\u771f\uff1b\u5426\u5219\u8fd4\u56de\u5047\u3002 func (t Time) Equal(u Time) bool now := time.Now() fmt.Println(now) // 1\u5c0f\u65f6\u4e4b\u540e t1, _ := time.ParseDuration(\"1h\") m1 := now.Add(t1) fmt.Println(m1) fmt.Println(m1.After(now)) fmt.Println(now.Before(m1)) fmt.Println(now.Equal(m1)) \u8f93\u51fa\uff1a 2021-01-10 21:00:44.409785 +0800 CST m=+0.000186800 2021-01-10 22:00:44.409785 +0800 CST m=+3600.000186800 true true false","title":"3.3 \u65e5\u671f\u6bd4\u8f83"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#4","text":"\u4e0b\u9762\u5217\u4e3e\u4e00\u4e9b\u5e38\u89c1\u7684\u4f8b\u5b50\u548c\u51fd\u6570\u5c01\u88c5\u3002","title":"4\u3001\u5e38\u89c1\u4f8b\u5b50"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#41","text":"func TimeStr2Time(fmtStr,valueStr, locStr string) int64 { loc := time.Local if locStr != \"\" { loc, _ = time.LoadLocation(locStr) // \u8bbe\u7f6e\u65f6\u533a } if fmtStr == \"\" { fmtStr = \"2006-01-02 15:04:05\" } t, _ := time.ParseInLocation(fmtStr, valueStr, loc) return t.Unix() }","title":"4.1 \u65e5\u671f\u683c\u5f0f \u8f6c \u65f6\u95f4\u6233"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#42","text":"func GetCurrentFormatStr(fmtStr string) string { if fmtStr == \"\" { fmtStr = \"2006-01-02 15:04:05\" } return time.Now().Format(fmtStr) }","title":"4.2 \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u65e5\u671f\u683c\u5f0f"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#43-to","text":"func Sec2TimeStr(sec int64, fmtStr string) string { if fmtStr == \"\" { fmtStr = \"2006-01-02 15:04:05\" } return time.Unix(sec, 0).Format(fmtStr) }","title":"4.3 \u65f6\u95f4\u6233 to \u65e5\u671f\u683c\u5f0f"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#go-regexp","text":"package main import ( \"fmt\" \"regexp\" ) const text = \"My email is ccmouse@gmail.com\" func main() { compile := regexp.MustCompile(`[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+`) match := compile.FindString(text) fmt.Println(match) }","title":"Go-regexp\u6b63\u5219"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#go-io","text":"","title":"Go\u5b58\u50a8\u57fa\u7840 \u2014 \u6587\u4ef6 IO \u64cd\u4f5c"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#io","text":"\u8ba1\u7b97\u7684\u4f53\u7cfb\u67b6\u6784\uff0cCPU\uff0c\u5185\u5b58\uff0c\u7f51\u7edc\uff0cIO\u3002\u90a3\u4e48 IO \u662f\u4ec0\u4e48\u5462\uff1f\u4e00\u822c\u7406\u89e3\u6210 Input\u3001Output \u7684\u7f29\u5199\uff0c\u901a\u4fd7\u8bdd\u5c31\u662f\u8f93\u5165\u8f93\u51fa\u7684\u610f\u601d\u3002 IO \u5206\u4e3a\u7f51\u7edc\u548c\u5b58\u50a8 IO \u4e24\u79cd\u7c7b\u578b\uff08 \u5176\u5b9e\u7f51\u7edc IO \u548c\u78c1\u76d8 IO \u5728 Go \u91cc\u9762\u6709\u7740\u6839\u672c\u6027\u533a\u522b \uff09\u3002\u7f51\u7edc IO \u5bf9\u5e94\u7684\u662f\u7f51\u7edc\u6570\u636e\u4f20\u8f93\u8fc7\u7a0b\uff0c\u7f51\u7edc\u662f\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u57fa\u77f3\uff0c\u901a\u8fc7\u7f51\u7edc\u628a\u79bb\u6563\u7684\u7269\u7406\u8282\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u6709\u673a\u7684\u7cfb\u7edf\u3002 \u5b58\u50a8 IO \u5bf9\u5e94\u7684\u5c31\u662f\u6570\u636e\u5b58\u50a8\u5230\u7269\u7406\u4ecb\u8d28\u7684\u8fc7\u7a0b\uff0c\u901a\u5e38\u7269\u7406\u4ecb\u8d28\u5bf9\u5e94\u7684\u662f\u78c1\u76d8\uff0c\u78c1\u76d8\u4e0a\u4e00\u822c\u4f1a\u5206\u4e2a\u533a\uff0c\u7136\u540e\u5728\u4e0a\u9762\u683c\u5f0f\u5316\u4e2a\u6587\u4ef6\u7cfb\u7edf\u51fa\u6765\uff0c\u6240\u4ee5\u666e\u901a\u7a0b\u5e8f\u5458\u6700\u5e38\u770b\u89c1\u7684\u662f\u6587\u4ef6 IO \u7684\u5f62\u5f0f\u3002 \u5728 Golang \u91cc\u53ef\u4ee5\u5f52\u7c7b\u51fa\u4e24\u79cd\u8bfb\u5199\u6587\u4ef6\u7684\u65b9\u5f0f\uff1a \u6807\u51c6\u5e93\u5c01\u88c5\uff1a\u64cd\u4f5c\u5bf9\u8c61 File ; \u7cfb\u7edf\u8c03\u7528 \uff1a\u64cd\u4f5c\u5bf9\u8c61 fd ;","title":"\u4e24\u5927 IO \u5206\u7c7b"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_1","text":"\u6587\u4ef6\u7684\u8bfb\u5199\u6700\u6838\u5fc3\u7684\u8981\u7d20\u662f\u4ec0\u4e48\uff1f \u901a\u4fd7\u6765\u8bb2\uff1a\u8bfb\u6587\u4ef6\uff0c\u5c31\u662f\u628a\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\u7684 \u7279\u5b9a\u4f4d\u7f6e \u7684\u6570\u636e\u8bfb\u5230 \u5185\u5b58\u7684 buffer \u3002\u5199\u6587\u4ef6\uff0c\u5c31\u662f\u628a \u5185\u5b58 buffer \u7684\u6570\u636e\u5199\u5230\u78c1\u76d8\u7684\u6587\u4ef6\u7684 \u7279\u5b9a\u4f4d\u7f6e \u3002 \u8fd9\u91cc\u6ce8\u610f\u5230\u4e24\u4e2a\u5173\u952e\u8bcd\uff1a \u7279\u5b9a\u4f4d\u7f6e\uff1b \u5185\u5b58 buffer\uff1b \u7279\u5b9a\u4f4d\u7f6e\u600e\u4e48\u7406\u89e3\uff1f\u600e\u4e48\u6307\u5b9a\u6240\u8c13\u7684 \u7279\u5b9a\u4f4d\u7f6e \uff1f \u5f88\u7b80\u5355\uff0c\u7528 [ offset, length ] \u8fd9\u4e24\u4e2a\u53c2\u6570\u5c31\u80fd\u6807\u8bc6\u4e00\u6bb5\u4f4d\u7f6e\u3002 \u4e5f\u5c31\u662f IO \u504f\u79fb\u548c\u957f\u5ea6\uff0cOffset \u548c Length\u3002 \u5185\u5b58 buffer \u600e\u4e48\u7406\u89e3\uff1f \u5f52\u6839\u7ed3\u5e95\uff0c\u6587\u4ef6\u7684\u6570\u636e\u548c\u8c01\u76f4\u63a5\u6253\u4ea4\u9053\uff1f \u5185\u5b58 \uff0c\u5199\u7684\u65f6\u5019\u662f\u4ece\u5185\u5b58\u5199\u5230\u78c1\u76d8\u6587\u4ef6\u7684\uff0c\u8bfb\u7684\u65f6\u5019\u662f\u4ece\u78c1\u76d8\u6587\u4ef6\u8bfb\u5230\u5185\u5b58\u7684\u3002 \u672c\u8d28\u4e0a\uff0c\u4e0b\u9762\u7684 IO \u51fd\u6570\u90fd\u79bb\u4e0d\u5f00 Offset\uff0cLength\uff0cbuffer \u8fd9\u4e09\u4e2a\u8981\u7d20\u3002","title":"\u8bfb\u5199\u6570\u636e\u8981\u7d20"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_2","text":"Go \u5bf9\u6587\u4ef6\u8fdb\u884c\u8bfb\u5199\u975e\u5e38\u7b80\u5355\uff0c\u56e0\u4e3a Go \u5df2\u7ecf\u5c01\u88c5\u4e86\u4e00\u4e2a\u975e\u5e38\u4fbf\u6377\u7684\u4f7f\u7528\u63a5\u53e3\uff0c\u4f4d\u4e8e\u6807\u51c6\u5e93 os \u4e2d\u3002Go \u6807\u51c6\u5e93\u5bf9\u6587\u4ef6 IO \u7684\u5c01\u88c5\u4e5f\u5c31\u662f Go \u63a8\u8350\u5bf9\u6587\u4ef6\u8fdb\u884c IO \u65f6\u4f7f\u7528\u7684\u64cd\u4f5c\u65b9\u5f0f\u3002","title":"\u6807\u51c6\u5e93\u5c01\u88c5"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#open","text":"func OpenFile(name string, flag int, perm FileMode) (*File, error) Open \u6587\u4ef6\u4e4b\u540e\uff0c\u83b7\u53d6\u5230\u4e00\u4e2a\u53e5\u67c4\uff0c\u4e5f\u5c31\u662f File \u7ed3\u6784\uff0c\u4e4b\u540e\u5bf9\u6587\u4ef6\u7684\u8bfb\u5199\u90fd\u662f\u57fa\u4e8e File \u7ed3\u6784\u4e4b\u4e0a\u8fdb\u884c\u7684\u3002 type File struct { *file // os specific } \u6587\u4ef6\u8bfb\u5199\u53ea\u9700\u8981\u9488\u5bf9\u8fd9\u4e2a\u53e5\u67c4\u7ed3\u6784\u4f53\u505a\u64cd\u4f5c\u5373\u53ef\u3002 \u53e6\u5916\u6709\u4e00\u70b9\u9690\u85cf\u8d77\u6765\u7684\u77e5\u8bc6\u70b9\u5fc5\u987b\u8981\u63d0\u4e00\u4e0b\uff1a \u504f\u79fb \u3002\u4e5f\u5c31\u662f\u6700\u5f00\u59cb\u5f3a\u8c03\u7684\u8bfb\u5199 3 \u8981\u7d20\u4e4b\u4e00\u7684 Offset \u3002\u6253\u5f00\uff08 Open \uff09\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u6587\u4ef6\u5f53\u524d\u504f\u79fb\u91cf\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a 0\uff0c\u4e5f\u5c31\u662f\u8bf4 IO \u7684\u8d77\u59cb\u4f4d\u7f6e\u5c31\u662f\u6587\u4ef6\u7684\u6700\u5f00\u5934\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u8fd9\u4e2a\u65f6\u5019\uff0c\u5199 4K \u7684\u6570\u636e\u5230\u6587\u4ef6\uff0c\u90a3\u4e48\u5c31\u662f\u5199 [0, 4K] \u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6570\u636e\uff0c\u5982\u679c\u4e4b\u524d\u8fd9\u4e0a\u9762\u5df2\u7ecf\u6709\u6570\u636e\u4e86\uff0c\u90a3\u4e48\u5c31\u4f1a\u662f\u8986\u76d6\u5199\u3002 \u9664\u975e Open \u6587\u4ef6\u7684\u65f6\u5019\u6307\u5b9a O_APPEND \u9009\u9879\uff0c\u504f\u79fb\u91cf\u4f1a\u8bbe\u7f6e\u4e3a\u6587\u4ef6\u672b\u5c3e\uff0c\u90a3\u4e48 IO \u90fd\u662f\u4ece\u6587\u4ef6\u672b\u5c3e\u5f00\u59cb\u3002","title":"\u6253\u5f00\u6587\u4ef6\uff08Open\uff09"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#write","text":"\u6587\u4ef6 File \u53e5\u67c4\u5bf9\u8c61\u6709\u4e24\u4e2a\u5199\u65b9\u6cd5\uff1a \u7b2c\u4e00\u79cd\uff1a\u5199\u4e00\u4e2a buffer \u5230\u6587\u4ef6 \uff0c\u4f7f\u7528\u6587\u4ef6\u5f53\u524d\u504f\u79fb func (f *File) Write(b []byte) (n int, err error) \u6ce8\u610f\uff1a\u8be5\u5199\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u6587\u4ef6\u504f\u79fb\u91cf\u7684\u589e\u52a0\u3002 \u7b2c\u4e8c\u79cd\uff1a\u4ece\u6307\u5b9a\u6587\u4ef6\u504f\u79fb\uff0c\u5199\u5165 buffer \u5230\u6587\u4ef6 func (f *File) WriteAt(b []byte, off int64) (n int, err error) \u6ce8\u610f\uff1a\u8be5\u5199\u64cd\u4f5c\u4e0d\u4f1a\u66f4\u65b0\u6587\u4ef6\u504f\u79fb\u91cf","title":"\u6587\u4ef6\u5199\u64cd\u4f5c\uff08Write\uff09"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#read","text":"\u548c\u5199\u5bf9\u5e94\uff0c\u6587\u4ef6 File \u53e5\u67c4\u5bf9\u8c61\u6709\u4e24\u4e2a\u8bfb\u65b9\u6cd5\uff1a \u7b2c\u4e00\u79cd\uff1a\u4ece\u6587\u4ef6\u5f53\u524d\u504f\u79fb\u8bfb\u4e00\u4e2a buffer \u7684\u6570\u636e\u4e0a\u6765 func (f *File) Read(b []byte) (n int, err error) \u6ce8\u610f\uff1a\u8be5\u8bfb\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u6587\u4ef6\u504f\u79fb\u91cf\u7684\u589e\u52a0\u3002 \u7b2c\u4e8c\u79cd\uff1a\u4ece\u6307\u5b9a\u6587\u4ef6\u504f\u79fb\uff0c\u8bfb\u4e00\u4e2a buffer \u5927\u5c0f\u7684\u6570\u636e\u4e0a\u6765 func (f *File) ReadAt(b []byte, off int64) (n int, err error) \u6ce8\u610f\uff1a\u8be5\u8bfb\u64cd\u4f5c\u4e0d\u4f1a\u66f4\u65b0\u6587\u4ef6\u504f\u79fb\u91cf","title":"\u6587\u4ef6\u8bfb\u64cd\u4f5c\uff08Read\uff09"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#seek","text":"func (f *File) Seek(offset int64, whence int) (ret int64, err error) \u8fd9\u4e2a\u53e5\u67c4\u65b9\u6cd5\u5141\u8bb8\u7528\u6237\u6307\u5b9a\u6587\u4ef6\u7684\u504f\u79fb\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6587\u4ef6\u521a\u5f00\u59cb\u662f 0 \u5b57\u8282\uff0c\u5199 1M \u7684\u6570\u636e\u4e0b\u53bb\uff0c\u5927\u5c0f\u53d8\u6210 1M\uff0cOffset \u5f80\u540e\u632a 1M \uff0c\u9ed8\u8ba4\u5c31\u662f\u5f80\u540e\u632a\u3002 \u73b0\u5728 Seek \u65b9\u6cd5\u5141\u8bb8\u628a\u5199\u7684\u504f\u79fb\u5b9a\u4f4d\u5230\u4efb\u610f\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u5c31\u53ef\u4ee5\u4ece\u4efb\u610f\u5730\u65b9\u8986\u76d6\u5199\u5165\u6570\u636e\u3002 \u6240\u4ee5\u5728 Go \u91cc\u9762\uff0c\u6587\u4ef6 IO \u975e\u5e38\u7b80\u5355\uff0c\u5148 Open \u4e00\u4e2a\u6587\u4ef6\uff0c\u62ff\u5230 File \u53e5\u67c4\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u53e5\u67c4 Write \uff0cRead\uff0cSeek \u5c31\u80fd\u8fdb\u884c IO \u4e86\u3002","title":"\u6307\u5b9a\u504f\u79fb\u91cf\uff08Seek\uff09"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_3","text":"Go \u7684\u6807\u51c6\u5e93 os \u63d0\u4f9b\u4e86\u6781\u5176\u65b9\u4fbf\u7684\u5c01\u88c5\uff0c\u6df1\u5165\u6700\u539f\u59cb\u7684\u672c\u8d28\u53ef\u4ee5\u53d1\u73b0\u6700\u6838\u5fc3\u7684\u4e1c\u897f\uff1a \u7cfb\u7edf\u8c03\u7528 \u3002 Go \u6807\u51c6\u5e93\u7684\u6587\u4ef6\u5b58\u50a8 IO \u5c31\u662f\u57fa\u4e8e\u7cfb\u7edf\u8c03\u7528\u4e4b\u4e0a\u7684\u3002\u53ef\u4ee5\u7a0d\u5fae\u8ddf\u4e00\u4e0b os.OpenFile \u7684\u8c03\u7528\uff1a os \u5e93\u7684 OpenFile \u51fd\u6570\uff1a func OpenFile(name string, flag int, perm FileMode) (*File, error) { f, err := openFileNolog(name, flag, perm) if err != nil { return nil, err } f.appendMode = flag&O_APPEND != 0 return f, nil } \u7a0d\u5fae\u770b\u4e0b openFileNolog \u51fd\u6570\uff1a func openFileNolog(name string, flag int, perm FileMode) (*File, error) { var r int for { var e error r, e = syscall.Open(name, flag|syscall.O_CLOEXEC, syscallMode(perm)) if e == nil { break } if runtime.GOOS == \"darwin\" && e == syscall.EINTR { continue } return nil, &PathError{\"open\", name, e} } return newFile(uintptr(r), name, kindOpenFile), nil } \u53ef\u4ee5\u770b\u5230 syscall.Open \uff0c\u8fd9\u4e2a\u51fd\u6570\u83b7\u53d6\u5230\u4e00\u4e2a\u6574\u6570\uff0c\u4e5f\u5c31\u662f\u5728 c \u8bed\u8a00\u91cc\u6700\u5e38\u89c1\u7684 fd \u53e5\u67c4\uff0c\u800c File \u7ed3\u6784\u4f53\u5219\u4ec5\u4ec5\u662f\u57fa\u4e8e\u8fd9\u4e2a\u7684\u4e00\u5c42\u5c01\u88c5\u800c\u5df2\u3002 \u601d\u8003\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u6709\u6807\u51c6\u5e93\u5c01\u88c5\u8fd9\u4e00\u5c42\u5b58\u5728\uff1f \u5212\u91cd\u70b9\uff1a\u4e3a\u4e86\u5c4f\u853d\u64cd\u4f5c\u7cfb\u7edf\u7684\u533a\u522b \uff0c\u4f7f\u7528\u8fd9\u4e2a\u6807\u51c6\u5e93\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u8de8\u5e73\u53f0\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u662f\u7279\u6b8a\u64cd\u4f5c\u7cfb\u7edf\u624d\u6709\u7684\u7279\u6027\uff0c\u90a3\u4e48\u5728 os \u5e93\u91cc\u5c31\u627e\u4e0d\u5230\u5bf9\u5e94\u5c01\u88c5\u7684 IO \u64cd\u4f5c\u3002 \u90a3\u4e48\u600e\u4e48\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\uff1f \u76f4\u63a5\u4f7f\u7528 syscall \u5e93\uff0c\u4e5f\u5c31\u662f\u7cfb\u7edf\u8c03\u7528\u3002\u4ece\u540d\u5b57\u4e5f\u80fd\u770b\u51fa\u6765\uff0c\u7cfb\u7edf\u8c03\u7528\u662f\u548c\u64cd\u4f5c\u7cfb\u7edf\u5f3a\u76f8\u5173\u7684\uff0c\u56e0\u4e3a\u662f\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u8c03\u7528\u63a5\u53e3\uff0c\u6240\u4ee5\u7cfb\u7edf\u8c03\u7528\u4f1a\u56e0\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u540c\u800c\u5bfc\u81f4\u4e0d\u540c\u7684\u7279\u6027\uff0c\u4e0d\u540c\u7684\u63a5\u53e3\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u76f4\u63a5\u4f7f\u7528 syscall \u5e93\u6765\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\uff0c\u90a3\u4e48\u9700\u8981\u81ea\u5df1\u6765\u627f\u53d7\u7cfb\u7edf\u5e26\u6765\u7684\u517c\u5bb9\u6027\u95ee\u9898\u3002","title":"\u5e95\u5c42\u7684\u539f\u7406"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_4","text":"\u7cfb\u7edf\u8c03\u7528\u5728 syscall \u91cc\u6709\u4e00\u5c42\u6700\u57fa\u7840\u7684\u5c01\u88c5\uff1a","title":"\u7cfb\u7edf\u8c03\u7528"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#open_1","text":"func Open(path string, mode int, perm uint32) (fd int, err error)","title":"\u6587\u4ef6 Open"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#read_1","text":"func Read(fd int, p []byte) (n int, err error) func Pread(fd int, p []byte, offset int64) (n int, err error) \u6587\u4ef6\u8bfb\u6709\u4e24\u4e2a\u63a5\u53e3\uff0c\u4e00\u4e2a Read \u662f\u4ece \u5f53\u524d\u9ed8\u8ba4\u504f\u79fb \u8bfb\u4e00\u4e2a buffer \u6570\u636e\uff0c Pread \u63a5\u53e3\u5219\u662f\u4ece\u6307\u5b9a\u4f4d\u7f6e\u8bfb\u6570\u636e\u7684\u63a5\u53e3\u3002 \u601d\u8003\u4e00\u4e2a\u95ee\u9898\uff1a Pread \u4ece\u6548\u679c\u4e0a\u6765\u8bb2\u7b49\u4e8e Seek \u548c Read \u7ec4\u5408\u8d77\u6765\u4f7f\u7528\uff0c\u90a3\u4e48\u662f\u5426\u53ef\u4ee5\u8ba4\u4e3a Pread \u5c31\u53ef\u4ee5\u88ab Seek + Read \u66ff\u4ee3\u5462\uff1f \u4e0d\u884c\uff01\u6839\u672c\u539f\u56e0\u5728\u4e8e Seek + Read \u662f\u5728\u7528\u6237\u5c42\u5c31\u662f\u4e24\u6b65\u64cd\u4f5c\uff0c\u800c Pread \u867d\u7136\u662f Seek + Read \u7684\u6548\u679c\uff0c\u4f46\u662f\u64cd\u4f5c\u7cfb\u7edf\u7ed9\u5230\u7528\u6237\u7684\u8bed\u4e49\u662f\uff1a Pread \u662f\u4e00\u4e2a\u539f\u5b50\u64cd\u4f5c\u3002\u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u533a\u522b\uff0c Pread \u4e0d\u4f1a\u6539\u53d8\u5f53\u524d\u6587\u4ef6\u7684\u504f\u79fb\u91cf\uff08\u666e\u901a\u7684 Read \u8c03\u7528\u4f1a\u66f4\u65b0\u504f\u79fb\u91cf\uff09\u3002 \u6240\u4ee5\uff0c\u603b\u7ed3\u4e0b\uff0c **Pread** \u548c\u987a\u5e8f\u8c03\u7528 **Seek** \u540e\u8c03\u7528 **Read** \u6709\u4e24\u70b9\u91cd\u8981\u533a\u522b\uff1a Pread \u5bf9\u7528\u6237\u63d0\u4f9b\u7684\u8bed\u4e49\u662f\u539f\u5b50\u64cd\u4f5c\uff0c\u5728\u8c03\u7528 Pread \u65f6\uff0c\u65e0\u6cd5\u4e2d\u65ad Seek \u548c Read \u64cd\u4f5c\uff1b Pread \u8c03\u7528\u4e0d\u4f1a\u66f4\u65b0\u5f53\u524d\u6587\u4ef6\u504f\u79fb\u91cf\uff1b","title":"\u6587\u4ef6 Read"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#write_1","text":"func Write(fd int, p []byte) (n int, err error) func Pwrite(fd int, p []byte, offset int64) (n int, err error) \u6587\u4ef6\u5199\u5bf9\u5e94\u4e5f\u662f\u6709\u4e24\u79cd\u63a5\u53e3\uff0c Wrtie \u548c Pwrite \u5206\u522b\u662f\u5bf9\u5e94 Read \u548c Pread \u3002\u540c\u6837\u7684\uff0c Pwrite \u4f5c\u7528\u4e0a\u4e5f\u662f\u76f8\u5f53\u4e8e\u5148\u8c03\u7528 Seek \u518d\u8c03\u7528 Write \uff0c\u4f46\u662f\u540c\u6837\u7684\u4e5f\u6709 \u4e24\u70b9\u4e0d\u540c \uff1a Pwrite \u5b8c\u6210 Seek \u548c Write \u5bf9\u5916\u662f\u539f\u5b50\u64cd\u4f5c\u7684\u8bed\u4e49\uff1b Pwrite \u8c03\u7528\u4e0d\u4f1a\u66f4\u65b0\u5f53\u524d\u6587\u4ef6\u504f\u79fb\u91cf\uff1b","title":"\u6587\u4ef6 Write"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#seek_1","text":"func Seek(fd int, offset int64, whence int) (off int64, err error) \u8fd9\u4e2a\u51fd\u6570\u8c03\u7528\u5141\u8bb8\u7528\u6237\u6307\u5b9a\u504f\u79fb\uff08\u8fd9\u4e2a\u4f1a\u5f71\u54cd\u5230 Read \u548c Write \u8bfb\u5199\u7684\u4f4d\u7f6e\uff09\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6bcf\u4e2a\u6253\u5f00\u6587\u4ef6\u90fd\u6709\u4e00\u4e2a\u76f8\u5173\u8054\u7684\u201c\u5f53\u524d\u6587\u4ef6\u504f\u79fb\u91cf\u201d\uff08 current file offset \uff09\u3002\u8bfb\uff08 Read \uff09\u3001\u5199\uff08 Write \uff09\u64cd\u4f5c\u90fd\u662f\u4ece \u5f53\u524d\u6587\u4ef6\u504f\u79fb\u91cf\u5904 \u5f00\u59cb\uff0c\u5e76\u4e14 Read \u548c Write \u4f1a\u5bfc\u81f4\u504f\u79fb\u91cf\u589e\u52a0\uff0c\u589e\u52a0\u91cf\u5c31\u662f\u6240\u8bfb\u5199\u7684\u5b57\u8282\u6570\u3002 \u5c0f\u7ed3\u4e00\u4e0b \uff1aGo\u6838\u5fc3\u7684 Open\uff0cRead\uff0cWrite\uff0cSeek \u51e0\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u660e\u663e\u4e0d\u540c\u4e0e\u6807\u51c6 IO \u5e93\u7684\u533a\u522b\uff1a \u7cfb\u7edf\u8c03\u7528\u64cd\u4f5c\u5bf9\u8c61\u662f\u4e00\u4e2a\u6574\u6570\u53e5\u67c4 \u3002 Open \u6587\u4ef6\u5f97\u5230\u4e00\u4e2a\u6574\u6570 fd\uff0c\u4e4b\u540e\u7684\u6240\u6709 IO \u90fd\u662f\u9488\u5bf9\u8fd9\u4e2a fd \u6765\u64cd\u4f5c\u7684\u3002\u8fd9\u4e2a\u660e\u663e\u548c\u6807\u51c6\u5e93\u4e0d\u540c\uff0cos \u6807\u51c6\u5e93 OpenFile \u5f97\u5230\u7684\u662f\u4e00\u4e2a File \u7ed3\u6784\u4f53\uff0c\u6240\u6709\u7684 IO \u4e5f\u662f\u9488\u5bf9\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u3002","title":"\u6587\u4ef6 Seek"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_5","text":"\u90a3\u4e48\u7a76\u7adf\u5c01\u88c5\u7684\u5c42\u6b21\u4e00\u822c\u662f\u4ec0\u4e48\u6837\u7684\u5462\uff0c Unix \u7f16\u7a0b\u91cc\u9762\u5f00\u7bc7\u5c31\u6709\u4e00\u5f20\u5982\u4e0b\u56fe\uff1a \u8fd9\u5f20\u56fe\u5c31\u975e\u5e38\u5f62\u8c61\u7684\u8bb2\u660e\u767d\u4e86\u6574\u4e2a Unix \u4f53\u7cfb\u7ed3\u6784\u3002 \u5185\u6838\u662f\u6700\u6838\u5fc3\u7684\u5b9e\u73b0\uff0c\u5305\u62ec\u4e86\u548c IO \u8bbe\u5907\uff0c\u786c\u4ef6\u4ea4\u4e92\u7b49\u529f\u80fd\u3002\u4e0e\u5185\u6838\u7d27\u5bc6\u7684\u4e00\u5c42\u662f\u5185\u6838\u63d0\u4f9b\u7ed9\u5916\u90e8\u8c03\u7528\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u7cfb\u7edf\u8c03\u7528\u63d0\u4f9b\u4e86\u7528\u6237\u6001\u5230\u5185\u6838\u6001\u8c03\u7528\u7684\u4e00\u4e2a\u901a\u9053\uff1b \u5bf9\u4e8e\u7cfb\u7edf\u8c03\u7528\uff0c\u5404\u4e2a\u8bed\u8a00\u7684\u6807\u51c6\u5e93\u4f1a\u6709\u4e00\u4e9b\u5c01\u88c5\uff0c\u6bd4\u5982 C \u8bed\u8a00\u7684 libc \u5e93\uff0cGo \u8bed\u8a00\u7684 os \uff0csyscall \u5e93\u90fd\u662f\u7c7b\u4f3c\u7684\u5730\u4f4d\uff0c\u8fd9\u4e2a\u5c31\u662f\u6240\u8c13\u7684\u516c\u5171\u5e93 \u3002\u8fd9\u5c42\u5c01\u88c5\u7684\u4f5c\u7528\u6700\u4e3b\u8981\u662f\u7b80\u5316\u666e\u901a\u7a0b\u5e8f\u5458\u4f7f\u7528\u6548\u7387\uff0c\u5e76\u4e14\u5c4f\u853d\u7cfb\u7edf\u7ec6\u8282\uff0c\u4e3a\u8de8\u5e73\u53f0\u63d0\u4f9b\u57fa\u7840\uff08\u540c\u6837\u7684\uff0c\u4e3a\u4e86\u8de8\u5e73\u53f0\u7684\u7279\u6027\uff0c\u53ef\u80fd\u4f1a\u9609\u5272\u5f88\u591a\u4e0d\u517c\u5bb9\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u624d\u4f1a\u6709\u76f4\u63a5\u8c03\u7528\u7cfb\u7edf\u6389\u8c03\u7528\u7684\u9700\u6c42\uff09\uff1b \u5f53\u7136\uff0c\u53f3\u4e0a\u89d2\u8fd8\u770b\u5230\u4e00\u4e2a\u7f3a\u53e3\uff0c\u5e94\u7528\u7a0b\u5e8f\u9664\u4e86\u53ef\u4ee5\u4f7f\u7528\u516c\u5171\u51fd\u6570\u5e93\uff0c \u5176\u5b9e\u662f\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u7cfb\u7edf\u8c03\u7528\u7684\uff0c\u4f46\u662f\u7531\u6b64\u5e26\u6765\u7684\u590d\u6742\u6027\u53c8\u5e94\u7528\u81ea\u5df1\u627f\u62c5 \u3002\u8fd9\u79cd\u9700\u6c42\u4e5f\u662f\u5f88\u5e38\u89c1\u7684\uff0c\u6807\u51c6\u5e93\u5c01\u88c5\u4e86\u901a\u7528\u7684\u4e1c\u897f\uff0c\u540c\u6837\u5272\u820d\u4e86\u5f88\u591a\u7cfb\u7edf\u8c03\u7528\u7684\u529f\u80fd\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ea\u80fd\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u6765\u83b7\u53d6\uff1b","title":"\u5c42\u6b21\u67b6\u6784"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_6","text":"IO \u5927\u7c7b\u5206\u4e3a\u7f51\u7edc IO \u548c\u78c1\u76d8 IO\uff0cIO \u5bf9\u6587\u4ef6\u6765\u8bf4\u5c31\u662f\u8bfb\u5199\u64cd\u4f5c\uff0c\u5199\u7684\u65f6\u5019 \u6570\u636e\u4ece\u5185\u5b58\u5230\u78c1\u76d8 \uff0c\u8bfb\u7684\u65f6\u5019 \u6570\u636e\u4ece\u78c1\u76d8\u5230\u5185\u5b58 \uff1b Go \u6587\u4ef6 IO \u6700\u5e38\u7528\u7684\u662f os \u5e93\uff0c\u4f7f\u7528 Go \u5c01\u88c5\u7684\u6807\u51c6\u5e93\uff0c os.OpenFile \u6253\u5f00\uff0c File.Write \uff0c File.Read \u8fdb\u884c\u8bfb\u5199\uff0c\u64cd\u4f5c\u5bf9\u8c61\u90fd\u662f File \u7ed3\u6784\u4f53\uff1b Go \u6807\u51c6\u5e93\u5bf9 IO \u7684\u5c01\u88c5\u662f\u4e3a\u4e86\u5c4f\u853d\u590d\u6742\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u63d0\u4f9b\u8de8\u5e73\u53f0\u7684\u4f7f\u7528\u59ff\u52bf\u3002\u7136\u540e\u5355\u72ec\u63d0\u4f9b syscall \u5e93\uff0c\u8ba9\u7a0b\u5e8f\u5458\u81ea\u6211\u51b3\u7b56\u4f7f\u7528\u8981\u4f7f\u7528\u66f4\u4e30\u5bcc\u7684\u7cfb\u7edf\u8c03\u7528\u529f\u80fd\uff0c\u5f53\u7136\u540e\u679c\u81ea\u8d1f\uff1b Go \u6807\u51c6\u5e93 IO \u64cd\u4f5c\u5bf9\u8c61\u662f File \uff0c\u7cfb\u7edf\u8c03\u7528 IO \u64cd\u4f5c\u5bf9\u8c61\u662f fd\uff08\u975e\u8d1f\u6574\u6570\uff09\u3002 Open \u6587\u4ef6\u9ed8\u8ba4\u5f53\u524d\u504f\u79fb\u91cf\u662f 0 \uff08\u6587\u4ef6\u6700\u5f00\u59cb\uff09\uff0c\u52a0\u4e0a O_APPEND \u53c2\u6570\u4e4b\u540e\u504f\u79fb\u91cf\u4f1a\u662f\u6587\u4ef6\u672b\u5c3e\u3002\u901a\u8fc7 Seek \u8c03\u7528\u53ef\u4ee5\u4efb\u610f\u6307\u5b9a\u6587\u4ef6\u504f\u79fb\uff0c\u4ece\u800c\u5f71\u54cd\u6587\u4ef6 IO \u7684\u4f4d\u7f6e\uff1b Read \uff0c Write \u51fd\u6570\u53ea\u6709 buffer \uff08buffer \u6709\u957f\u5ea6\uff09\uff0c\u504f\u79fb\u5219\u4f7f\u7528\u5f53\u524d\u6587\u4ef6\u504f\u79fb\u91cf\uff1b Pread \uff0c Pwrite \u7684\u7cfb\u7edf\u8c03\u7528\u6548\u679c\u7b49\u540c\u4e8e Seek \u504f\u79fb\u91cf\u7136\u540e Read \uff0c Write \uff0c\u4f46\u662f\u53c8\u5927\u6709\u4e0d\u540c\u3002\u5bf9\u5916\u8bed\u4e49\u662f\u539f\u5b50\u64cd\u4f5c\uff0c\u5e76\u4e14\u4e0d\u66f4\u65b0\u5f53\u524d\u6587\u4ef6\u504f\u79fb\u91cf\uff1b","title":"\u603b\u7ed3"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#go-","text":"","title":"Go-\u6587\u4ef6\u8bfb\u5199\u64cd\u4f5c"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_7","text":"package main import ( \"bufio\" \"fmt\" \"io\" \"os\" ) /*\u5728\u5df2\u5b58\u5728\u6587\u4ef6\u6e05\u7a7a\u539f\u6709\u5185\u5bb9\u8fdb\u884c\u8ffd\u52a0*/ func main() { filePath := \"D:\\\\fcofficework\\\\DNS\\\\1.txt\" file, err := os.OpenFile(filePath, os.O_RDWR|os.O_APPEND, 0666) if err != nil { fmt.Printf(\"open file err = %v\\n\", err) return } /*\u5173\u95ed\u6587\u4ef6\u6d41*/ defer file.Close() /*\u8bfb\u53d6*/ reader := bufio.NewReader(file) for { str, err := reader.ReadString('\\n') if err == io.EOF { break } fmt.Print(str) } /*\u5199\u5165\u6587\u4ef6*/ str := \"hello FCC\u60a8\u597d\uff01\uff01\uff01\\r\\n\" writer := bufio.NewWriter(file) for i := 0; i < 5; i++ { writer.WriteString(str) } /*\u56e0\u4e3awriter\u662f\u5e26\u7f13\u5b58\u7684\uff0c\u9700\u8981\u901a\u8fc7flush\u5230\u78c1\u76d8*/ writer.Flush() }","title":"\u8bfb\u5199\u6587\u4ef6"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_8","text":"package main import ( \"fmt\" \"io/ioutil\" ) /*\u5c06\u6587\u4ef61\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u6587\u4ef62*/ func main() { file1Path := \"D:\\\\fcofficework\\\\DNS\\\\1.txt\" file2Path := \"D:\\\\fcofficework\\\\DNS\\\\2.txt\" data, err := ioutil.ReadFile(file1Path) if err != nil { fmt.Printf(\"read file err=%v\", err) return } err = ioutil.WriteFile(file2Path, data, 0666) if err != nil { fmt.Printf(\"write file err=%v\\n\", err) } }","title":"\u6587\u4ef6\u5185\u5bb9\u62f7\u8d1d\u81f3\u65b0\u6587\u4ef6"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_9","text":"package main import ( \"fmt\" \"os\" ) /*\u5224\u65ad\u6587\u4ef6\u4ee5\u53ca\u76ee\u5f55\u662f\u5426\u5b58\u5728*/ func PathExists(path string) (bool, error) { _, err := os.Stat(path) if err == nil { fmt.Println(\"\u5f53\u524d\u6587\u4ef6\u5b58\u5728\uff01\") return true, nil } if os.IsNotExist(err) { fmt.Println(\"\u5f53\u524d\u6587\u4ef6\u4e0d\u5b58\u5728\uff01\") return false, nil } return false, nil } func main() { path := \"D:\\\\fcofficework\\\\2.txt\" PathExists(path) }","title":"\u5224\u65ad\u6587\u4ef6\u6216\u8005\u76ee\u5f55\u662f\u5426\u5b58\u5728"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_10","text":"package main import ( \"bufio\" \"fmt\" \"io\" \"os\" ) /*\u6587\u4ef6\u7684\u62f7\u8d1d*/ func CopyFile(dstFileName string, srcFileName string) (written int64, err error) { srcFile, err := os.Open(srcFileName) if err != nil { fmt.Printf(\"open file err=%v\\n\", err) } reader := bufio.NewReader(srcFile) dstFile, err := os.OpenFile(dstFileName, os.O_WRONLY|os.O_CREATE, 0666) if err != nil { fmt.Printf(\"open file err=%v\\n\", err) return } writer := bufio.NewWriter(dstFile) defer dstFile.Close() return io.Copy(writer, reader) } func main() { srcFile := \"D:\\\\Photos\\\\Datapicture\\\\mmexport1530688562488.jpg\" dstFile := \"D:\\\\Photos\\\\1.jpg\" _, err := CopyFile(dstFile, srcFile) if err == nil { fmt.Println(\"\u62f7\u8d1d\u5b8c\u6210\uff01\") } else { fmt.Println(\"\u62f7\u8d1d\u5931\u8d25\uff0cerr=\", err) } }","title":"\u6587\u4ef6\u7684\u62f7\u8d1d"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_11","text":"package main import ( \"bufio\" \"fmt\" \"io\" \"os\" ) /*\u7edf\u8ba1\u6587\u4ef6\u7684\u5b57\u7b26\u4e2a\u6570*/ type CharCount struct { /*\u82f1\u6587\u7684\u4e2a\u6570*/ ChCount int /*\u6570\u5b57\u7684\u4e2a\u6570*/ NumCount int /*\u7a7a\u683c\u7684\u4e2a\u6570*/ SpaceCount int /*\u5176\u4ed6\u5b57\u7b26\u7684\u4e2a\u6570*/ OtherCount int } func main() { fileName := \"D:\\\\fcofficework\\\\DNS\\\\1.txt\" file, err := os.Open(fileName) if err != nil { fmt.Printf(\"open file err=%v\\n\", err) return } defer file.Close() var count CharCount reader := bufio.NewReader(file) for { str, err := reader.ReadString('\\n') if err == io.EOF { break } for _, v := range str { switch { case v >= 'a' && v <= 'z': fallthrough case v >= 'A' && v <= 'Z': count.ChCount++ case v == ' ' || v == '\\t': count.SpaceCount++ case v >= '0' && v <= '9': count.NumCount++ default: count.OtherCount++ } } } fmt.Printf(\"\u5b57\u7b26\u7684\u4e2a\u6570\u4e3a\uff1a%v \u6570\u5b57\u7684\u4e2a\u6570\u4e3a\uff1a%v \u7a7a\u683c\u7684\u4e2a\u6570\u4e3a\uff1a%v \u5176\u4ed6\u5b57\u7b26\u7684\u4e2a\u6570\u4e3a\uff1a%v\", count.ChCount, count.NumCount, count.SpaceCount, count.OtherCount) }","title":"\u8bfb\u53d6\u6587\u4ef6\u5e76\u7edf\u8ba1\u6587\u4ef6\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_12","text":"","title":"\u4e09\u79cd\u8bfb\u53d6\u6587\u4ef6\u7684\u65b9\u5f0f"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#os","text":"package main import ( \"fmt\" \"os\" ) func main() { file, err := os.Open(\"d:\\\\Photos\\\\Screenshots\\\\\u6697\u7269\u8d28\\\\IMG_20180927_194619.jpg\") if err != nil { fmt.Println(\"open file err\", err) } fmt.Printf(\"file=%v\", file) err1 := file.Close() if err1 != nil { fmt.Println(\"close file err = \", err1) } }","title":"\u901a\u8fc7os\u8bfb\u53d6"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_13","text":"package main import ( \"bufio\" \"fmt\" \"io\" \"os\" ) /*\u7f13\u51b2\u5f0f\u8bfb\u53d6\u6587\u4ef6*/ func main() { file, err := os.Open(\"d:\\\\Photos\\\\Screenshots\\\\\u6697\u7269\u8d28\\\\IMG_20180927_194619.jpg\") if err != nil { fmt.Println(\"open file err\", err) } defer file.Close() reader := bufio.NewReader(file) for { str, err := reader.ReadString('\\n') if err == io.EOF { break } fmt.Print(str) } fmt.Println(\"\u6587\u4ef6\u8bfb\u53d6\u7ed3\u675f!\") }","title":"\u7f13\u51b2\u5f0f\u8bfb\u53d6\u6587\u4ef6"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#ioutil","text":"package main import ( \"fmt\" \"io/ioutil\" ) func main() { file := \"D:\\\\fcofficework\\\\DNS\\\\authorized_keys\" content, err := ioutil.ReadFile(file) if err != nil { fmt.Printf(\"read file err=%v\", err) } fmt.Printf(\"%v\", string(content)) }","title":"\u901a\u8fc7ioutil\u8bfb\u53d6"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_14","text":"","title":"\u6587\u4ef6\u5199\u5165\u7684\u6848\u4f8b"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_15","text":"package main import ( \"bufio\" \"fmt\" \"os\" ) /*\u5728\u6587\u4ef6\u5199\u5165\u5185\u5bb9\uff0c\u6ca1\u6709\u6587\u4ef6\u5219\u91cd\u65b0\u521b\u5efa*/ func main() { filePath := \"D:\\\\fcofficework\\\\DNS\\\\1.txt\" file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE, 0666) if err != nil { fmt.Printf(\"open file err = %v\\n\", err) return } defer file.Close() str := \"hello world\\r\\n\" writer := bufio.NewWriter(file) for i := 0; i < 5; i++ { writer.WriteString(str) } /*\u56e0\u4e3awriter\u662f\u5e26\u7f13\u5b58\u7684\uff0c\u9700\u8981\u901a\u8fc7flush\u5230\u78c1\u76d8*/ writer.Flush() }","title":"\u5728\u6587\u4ef6\u5199\u5165\u5185\u5bb9\uff0c\u6ca1\u6709\u5219\u91cd\u65b0\u521b\u5efa"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_16","text":"package main import ( \"bufio\" \"fmt\" \"os\" ) /*\u5728\u5df2\u5b58\u5728\u6587\u4ef6\u6e05\u7a7a\u539f\u6709\u5185\u5bb9\u91cd\u65b0\u5199\u5165*/ func main() { filePath := \"D:\\\\fcofficework\\\\DNS\\\\1.txt\" file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_TRUNC, 0666) if err != nil { fmt.Printf(\"open file err = %v\\n\", err) return } defer file.Close() str := \"hello FCC\\r\\n\" writer := bufio.NewWriter(file) for i := 0; i < 5; i++ { writer.WriteString(str) } /*\u56e0\u4e3awriter\u662f\u5e26\u7f13\u5b58\u7684\uff0c\u9700\u8981\u901a\u8fc7flush\u5230\u78c1\u76d8*/ writer.Flush() }","title":"\u5728\u5df2\u5b58\u5728\u6587\u4ef6\u6e05\u7a7a\u539f\u6709\u5185\u5bb9\u91cd\u65b0\u5199\u5165"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_17","text":"package main import ( \"bufio\" \"fmt\" \"os\" ) /*\u5728\u5df2\u5b58\u5728\u6587\u4ef6\u6e05\u7a7a\u539f\u6709\u5185\u5bb9\u8fdb\u884c\u8ffd\u52a0*/ func main() { filePath := \"D:\\\\fcofficework\\\\DNS\\\\1.txt\" file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_APPEND, 0666) if err != nil { fmt.Printf(\"open file err = %v\\n\", err) return } defer file.Close() str := \"hello FCC\u60a8\u597d\uff01\uff01\uff01\\r\\n\" writer := bufio.NewWriter(file) for i := 0; i < 5; i++ { writer.WriteString(str) } /*\u56e0\u4e3awriter\u662f\u5e26\u7f13\u5b58\u7684\uff0c\u9700\u8981\u901a\u8fc7flush\u5230\u78c1\u76d8*/ writer.Flush() }","title":"\u5728\u5df2\u5b58\u5728\u6587\u4ef6\u6e05\u7a7a\u539f\u6709\u5185\u5bb9\u8fdb\u884c\u8ffd\u52a0"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_18","text":"package main import ( \"fmt\" \"os\" ) /*\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570*/ func main() { fmt.Println(\"\u547d\u4ee4\u884c\u53c2\u6570\u6709\uff1a\", len(os.Args)) for i, v := range os.Args { fmt.Printf(\"args[%v]=%v\\n\", i, v) } } package main import ( \"flag\" \"fmt\" ) /*\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570*/ func main() { var user string var pwd string var host string var port int flag.StringVar(&user, \"u\", \"\", \"\u7528\u6237\u540d\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\") flag.StringVar(&pwd, \"pwd\", \"\", \"\u5bc6\u7801\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\") flag.StringVar(&host, \"h\", \"localhost\", \"\u4e3b\u673a\u540d\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\") flag.IntVar(&port, \"port\", 3306, \"\u7aef\u53e3\u53f7\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\") /*\u8f6c\u6362*/ flag.Parse() fmt.Printf(\"user=%v pwd=%v host=%v port=%v\", user, pwd, host, port) }","title":"\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#go-json","text":"","title":"Go-json\u5e8f\u5217\u5316"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_19","text":"package main import ( \"encoding/json\" \"fmt\" ) type Monster struct { Name string `json:\"name\"` Age int `json:\"age\"` Birthday string `json:\"birthday\"` Sal float64 `json:\"sal\"` Skill string `json:\"skill\"` } /*\u7ed3\u6784\u4f53\u5e8f\u5217\u5316*/ func NewMinsterStruct() { monster := Monster{ Name: \"\u5b59\u609f\u7a7a\", Age: 500, Birthday: \"2011-11-11\", Sal: 8000.0, Skill: \"\u5982\u610f\u4e03\u5341\u4e8c\u53d8\", } data, err := json.Marshal(&monster) if err != nil { fmt.Printf(\"\u5e8f\u5217\u5316\u9519\u8beferr\uff1a%v\\n\", err) } fmt.Printf(\"Map\u5e8f\u5217\u5316\u540e=%v\\n\", string(data)) } /*Map\u5e8f\u5217\u5316*/ func MapSerlizer() { var a map[string]interface{} a = make(map[string]interface{}) a[\"name\"] = \"\u725b\u9b54\u738b\" a[\"age\"] = 10 a[\"address\"] = \"\u706b\u4e91\u6d1e\" data, err := json.Marshal(a) if err != nil { fmt.Printf(\"\u5e8f\u5217\u5316\u9519\u8beferr\uff1a%v\\n\", err) } fmt.Printf(\"monster\u5e8f\u5217\u5316\u540e=%v\\n\", string(data)) } /*\u5207\u7247\u5e8f\u5217\u5316*/ func SliceSerlizer() { var slice []map[string]interface{} var m1 map[string]interface{} m1 = make(map[string]interface{}) m1[\"name\"] = \"TGH\" m1[\"age\"] = \"19\" m1[\"address\"] = \"\u5317\u4eac\" slice = append(slice, m1) var m2 map[string]interface{} m2 = make(map[string]interface{}) m2[\"name\"] = \"FCC\" m2[\"age\"] = \"18\" m2[\"address\"] = [2]string{\"\u534e\u5e9c\", \"\u5f71\u89c6\u5e1d\u56fd\"} slice = append(slice, m2) data, err := json.Marshal(slice) if err != nil { fmt.Printf(\"\u5e8f\u5217\u5316\u9519\u8beferr\uff1a%v\\n\", err) } fmt.Printf(\"\u5207\u7247\u5e8f\u5217\u5316\u540e=%v\\n\", string(data)) } /*\u57fa\u672c\u6570\u636e\u7c7b\u578b\u5e8f\u5217\u5316*/ func FloatSerlize() { var num1 float64 = 245.56 data, err := json.Marshal(num1) if err != nil { fmt.Printf(\"\u5e8f\u5217\u5316\u9519\u8beferr\uff1a%v\\n\", err) } fmt.Printf(\"\u57fa\u672c\u6570\u636e\u7c7b\u578b\u5e8f\u5217\u5316\u540e=%v\\n\", string(data)) } func main() { NewMinsterStruct() MapSerlizer() SliceSerlizer() FloatSerlize() } Map\u5e8f\u5217\u5316\u540e={\"name\":\"\u5b59\u609f\u7a7a\",\"age\":500,\"birthday\":\"2011-11-11\",\"sal\":8000,\"skill\":\"\u5982\u610f\u4e03\u5341\u4e8c\u53d8\"} monster\u5e8f\u5217\u5316\u540e={\"address\":\"\u706b\u4e91\u6d1e\",\"age\":10,\"name\":\"\u725b\u9b54\u738b\"} \u5207\u7247\u5e8f\u5217\u5316\u540e=[{\"address\":\"\u5317\u4eac\",\"age\":\"19\",\"name\":\"TGH\"},{\"address\":[\"\u534e\u5e9c\",\"\u5f71\u89c6\u5e1d\u56fd\"],\"age\":\"18\",\"name\":\"FCC\"}] \u57fa\u672c\u6570\u636e\u7c7b\u578b\u5e8f\u5217\u5316\u540e=245.56","title":"\u5e8f\u5217\u5316"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_20","text":"package main import ( \"encoding/json\" \"fmt\" ) type Monster struct { Name string `json:\"name\"` Age int `json:\"age\"` Birthday string `json:\"birthday\"` Sal float64 `json:\"sal\"` Skill string `json:\"skill\"` } func unmarshalStruct() { str := \"{\\\"name\\\":\\\"\u5b59\u609f\u7a7a\\\",\\\"age\\\":500,\\\"birthday\\\":\\\"2011-11-11\\\",\\\"sal\\\":8000,\\\"skill\\\":\\\"\u5982\u610f\u4e03\u5341\u4e8c\u53d8\\\"}\" var monster Monster err := json.Unmarshal([]byte(str), &monster) if err != nil { fmt.Printf(\"\u53cd\u5e8f\u5217\u5316\u5931\u8d25err\uff1a%v\\n\", err) } fmt.Printf(\"\u53cd\u5e8f\u5217\u5316\u540emonster\uff1a%v\\n\", monster) } func unmarshallMap() { str := \"{\\\"address\\\":\\\"\u706b\u4e91\u6d1e\\\",\\\"age\\\":10,\\\"name\\\":\\\"\u725b\u9b54\u738b\\\"}\" var a map[string]interface{} err := json.Unmarshal([]byte(str), &a) if err != nil { fmt.Printf(\"\u53cd\u5e8f\u5217\u5316\u5931\u8d25err\uff1a%v\\n\", err) } fmt.Printf(\"\u53cd\u5e8f\u5217\u5316Map\u540e\uff1a%v\\n\", a) } func unmarshalSlice() { str := \"[{\\\"address\\\":\\\"\u5317\u4eac\\\",\\\"age\\\":\\\"19\\\",\\\"name\\\":\\\"TGH\\\"},\" + \"{\\\"address\\\":[\\\"\u534e\u5e9c\\\",\\\"\u5f71\u89c6\u5e1d\u56fd\\\"],\\\"age\\\":\\\"18\\\",\\\"name\\\":\\\"FCC\\\"}]\" var slice []map[string]interface{} err := json.Unmarshal([]byte(str), &slice) if err != nil { fmt.Printf(\"\u53cd\u5e8f\u5217\u5316\u5931\u8d25err\uff1a%v\\n\", err) } fmt.Printf(\"\u53cd\u5e8f\u5217\u5316Slice\u540e\uff1a%v\\n\", slice) } func main() { unmarshalStruct() unmarshallMap() unmarshalSlice() } \u8f93\u51fa\u7ed3\u679c\uff1a \u53cd\u5e8f\u5217\u5316\u540emonster\uff1a{\u5b59\u609f\u7a7a 500 2011-11-11 8000 \u5982\u610f\u4e03\u5341\u4e8c\u53d8} \u53cd\u5e8f\u5217\u5316Map\u540e\uff1amap[address:\u706b\u4e91\u6d1e age:10 name:\u725b\u9b54\u738b] \u53cd\u5e8f\u5217\u5316Slice\u540e\uff1a[map[address:\u5317\u4eac age:19 name:TGH] map[address:[\u534e\u5e9c \u5f71\u89c6\u5e1d\u56fd] age:18 name:FCC]]","title":"\u53cd\u5e8f\u5217\u5316"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#go-http","text":"Web\u662f\u57fa\u4e8ehttp\u534f\u8bae\u7684\u4e00\u4e2a\u670d\u52a1\uff0cGo\u8bed\u8a00\u91cc\u9762\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b8c\u5584\u7684net/http\u5305\uff0c\u901a\u8fc7http\u5305\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u642d\u5efa\u8d77\u6765\u4e00\u4e2a\u53ef\u4ee5\u8fd0\u884c\u7684Web\u670d\u52a1\u3002\u540c\u65f6\u4f7f\u7528\u8fd9\u4e2a\u5305\u80fd\u5f88\u7b80\u5355\u5730\u5bf9Web\u7684\u8def\u7531\uff0c\u9759\u6001\u6587\u4ef6\uff0c\u6a21\u7248\uff0ccookie\u7b49\u6570\u636e\u8fdb\u884c\u8bbe\u7f6e\u548c\u64cd\u4f5c\u3002","title":"Go-HTTP\u5305\u7684\u4f7f\u7528"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#httpweb","text":"package main import ( \"fmt\" \"net/http\" \"strings\" \"log\" ) func sayhelloName(w http.ResponseWriter, r *http.Request) { r.ParseForm() //\u89e3\u6790\u53c2\u6570\uff0c\u9ed8\u8ba4\u662f\u4e0d\u4f1a\u89e3\u6790\u7684 fmt.Println(r.Form) //\u8fd9\u4e9b\u4fe1\u606f\u662f\u8f93\u51fa\u5230\u670d\u52a1\u5668\u7aef\u7684\u6253\u5370\u4fe1\u606f fmt.Println(\"path\", r.URL.Path) fmt.Println(\"scheme\", r.URL.Scheme) fmt.Println(r.Form[\"url_long\"]) for k, v := range r.Form { fmt.Println(\"key:\", k) fmt.Println(\"val:\", strings.Join(v, \"\")) } fmt.Fprintf(w, \"Hello golang!\") //\u8fd9\u4e2a\u5199\u5165\u5230w\u7684\u662f\u8f93\u51fa\u5230\u5ba2\u6237\u7aef\u7684 } func main() { http.HandleFunc(\"/\", sayhelloName) //\u8bbe\u7f6e\u8bbf\u95ee\u7684\u8def\u7531 err := http.ListenAndServe(\":8080\", nil) //\u8bbe\u7f6e\u76d1\u542c\u7684\u7aef\u53e3 if err != nil { log.Fatal(\"ListenAndServe: \", err) } } \u4e0a\u9762\u8fd9\u4e2a\u4ee3\u7801\uff0cbuild\u4e4b\u540e\uff0c\u7136\u540e\u6267\u884cweb.exe,\u8fd9\u4e2a\u65f6\u5019\u5176\u5b9e\u5df2\u7ecf\u57288080\u7aef\u53e3\u76d1\u542chttp\u94fe\u63a5\u8bf7\u6c42\u4e86\u3002 \u5728\u6d4f\u89c8\u5668\u8f93\u5165 http://localhost:8080 \u53ef\u4ee5\u770b\u5230\u6d4f\u89c8\u5668\u9875\u9762\u8f93\u51fa\u4e86 Hello golang! \u6d4f\u89c8\u5668\u8f93\u5165\u5730\u5740\uff1a http://localhost:8080/?url_long=var1&url_long=var2 \u53ef\u4ee5\u770b\u770b\u6d4f\u89c8\u5668\u8f93\u51fa\u7684\u662f\u4ec0\u4e48 \u770b\u5230\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u8981\u7f16\u5199\u4e00\u4e2aWeb\u670d\u52a1\u5668\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u8c03\u7528http\u5305\u7684\u4e24\u4e2a\u51fd\u6570\u5c31\u53ef\u4ee5\u4e86\u3002","title":"http\u5305\u5efa\u7acbWeb\u670d\u52a1\u5668"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#http","text":"package main import ( \"fmt\" \"net/http\" \"net/http/httputil\" ) func main() { request, err := http.NewRequest(http.MethodGet, \"http://www.imooc.com\", nil) if err != nil { panic(err) } request.Header.Add(\"User-Agent\", \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\") client := http.Client{ CheckRedirect: func(req *http.Request, via []*http.Request) error { fmt.Println(\"Redirect:\", req) return nil }, } resp, err := client.Do(request) //resp, err := http.DefaultClient.Do(request) //resp, err := http.Get(\"http://www.imooc.com\") if err != nil { panic(err) } defer resp.Body.Close() s, err := httputil.DumpResponse(resp, true) if err != nil { panic(err) } fmt.Println(string(s)) } \u7a0b\u5e8f\u8fd0\u884c\u6253\u5370\u51faHTML\u5185\u5bb9","title":"\u4f7f\u7528http\u5305\u8bf7\u6c42\u9875\u9762"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#nethttpio-timeout","text":"","title":"net/http\u5305\u7684\u5751\u2014\u2014i/o timeout"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_21","text":"\u6765\u770b\u4e00\u6bb5\u65e5\u5e38\u4ee3\u7801\u3002 package main import ( \"bytes\" \"encoding/json\" \"fmt\" \"io/ioutil\" \"net\" \"net/http\" \"time\" ) var tr *http.Transport func init() { tr = &http.Transport{ MaxIdleConns: 100, Dial: func(netw, addr string) (net.Conn, error) { conn, err := net.DialTimeout(netw, addr, time.Second*2) //\u8bbe\u7f6e\u5efa\u7acb\u8fde\u63a5\u8d85\u65f6 if err != nil { return nil, err } err = conn.SetDeadline(time.Now().Add(time.Second * 3)) //\u8bbe\u7f6e\u53d1\u9001\u63a5\u53d7\u6570\u636e\u8d85\u65f6 if err != nil { return nil, err } return conn, nil }, } } func main() { for { _, err := Get(\"http://www.baidu.com/\") if err != nil { fmt.Println(err) break } } } func Get(url string) ([]byte, error) { m := make(map[string]interface{}) data, err := json.Marshal(m) if err != nil { return nil, err } body := bytes.NewReader(data) req, _ := http.NewRequest(\"Get\", url, body) req.Header.Add(\"content-type\", \"application/json\") client := &http.Client{ Transport: tr, } res, err := client.Do(req) if res != nil { defer res.Body.Close() } if err != nil { return nil, err } resBody, err := ioutil.ReadAll(res.Body) if err != nil { return nil, err } return resBody, nil } \u505a\u7684\u4e8b\u60c5\uff0c\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u662f\u5faa\u73af\u53bb\u8bf7\u6c42http://www.baidu.com/, \u7136\u540e\u7b49\u5f85\u54cd\u5e94\u3002 \u770b\u4e0a\u53bb\u8c8c\u4f3c\u6ca1\u5565\u95ee\u9898\u5427\u3002 \u4ee3\u7801\u8dd1\u8d77\u6765\uff0c\u4e5f\u786e\u5b9e\u80fd\u6b63\u5e38\u6536\u53d1\u6d88\u606f\u3002 \u4f46\u662f\u8fd9\u6bb5\u4ee3\u7801\u8dd1\u4e00\u6bb5\u65f6\u95f4\uff0c\u5c31\u4f1a\u51fa\u73b0i/o timeout\u7684\u62a5\u9519\u3002 \u8fd9\u5176\u5b9e\u662f\u6700\u8fd1\u6392\u67e5\u4e86\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u53d1\u73b0\u8fd9\u4e2a\u5751\u53ef\u80fd\u6bd4\u8f83\u5bb9\u6613\u8e29\u4e0a\uff0c\u8fd9\u8fb9\u5bf9\u4ee3\u7801\u505a\u4e86\u7b80\u5316\u3002 \u5b9e\u9645\u751f\u4ea7\u4e2d\u53d1\u751f\u7684\u73b0\u8c61\u662f\uff0cgolang\u670d\u52a1\u5728\u53d1\u8d77http\u8c03\u7528\u65f6\uff0c\u867d\u7136 http.Transport \u8bbe\u7f6e\u4e863s\u8d85\u65f6\uff0c\u4f1a\u5076\u53d1\u51fa\u73b0i/o timeout\u7684\u62a5\u9519\u3002 \u4f46\u662f\u67e5\u770b\u4e0b\u6e38\u670d\u52a1\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u4e0b\u6e38\u670d\u52a1\u5176\u5b9e100ms\u5c31\u5df2\u7ecf\u8fd4\u56de\u4e86\u3002","title":"\u95ee\u9898"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_22","text":"\u4e94\u5c42\u7f51\u7edc\u534f\u8bae\u5bf9\u5e94\u7684\u6d88\u606f\u4f53\u53d8\u5316\u5206\u6790 \u5c31\u5f88\u5947\u602a\u4e86\uff0c\u660e\u660e\u670d\u52a1\u7aef\u663e\u793a\u5904\u7406\u8017\u65f6\u624d100ms\uff0c\u4e14\u5ba2\u6237\u7aef\u8d85\u65f6\u8bbe\u7684\u662f3s, \u600e\u4e48\u5c31\u51fa\u73b0\u8d85\u65f6\u62a5\u9519i/o timeout\u5462\uff1f \u8fd9\u91cc\u63a8\u6d4b\u6709\u4e24\u4e2a\u53ef\u80fd\u3002 \u56e0\u4e3a\u670d\u52a1\u7aef\u6253\u5370\u7684\u65e5\u5fd7\u5176\u5b9e\u53ea\u662f\u670d\u52a1\u7aef\u5e94\u7528\u5c42\u6253\u5370\u7684\u65e5\u5fd7\u3002\u4f46\u5ba2\u6237\u7aef\u5e94\u7528\u5c42\u53d1\u51fa\u6570\u636e\u540e\uff0c\u4e2d\u95f4\u8fd8\u7ecf\u8fc7\u5ba2\u6237\u7aef\u7684\u4f20\u8f93\u5c42\uff0c\u7f51\u7edc\u5c42\uff0c\u6570\u636e\u94fe\u8def\u5c42\u548c\u7269\u7406\u5c42\uff0c\u518d\u7ecf\u8fc7\u670d\u52a1\u7aef\u7684\u7269\u7406\u5c42\uff0c\u6570\u636e\u94fe\u8def\u5c42\uff0c\u7f51\u7edc\u5c42\uff0c\u4f20\u8f93\u5c42\u5230\u670d\u52a1\u7aef\u7684\u5e94\u7528\u5c42\u3002\u670d\u52a1\u7aef\u5e94\u7528\u5c42\u5904\u8017\u65f6100ms\uff0c\u518d\u539f\u8def\u8fd4\u56de\u3002\u90a3\u5269\u4e0b\u76843s-100ms\u53ef\u80fd\u662f\u8017\u5728\u4e86\u6574\u4e2a\u6d41\u7a0b\u91cc\u7684\u5404\u4e2a\u5c42\u4e0a\u3002\u6bd4\u5982\u7f51\u7edc\u4e0d\u597d\u7684\u60c5\u51b5\u4e0b\uff0c\u4f20\u8f93\u5c42TCP\u4f7f\u52b2\u4e22\u5305\u91cd\u4f20\u4e4b\u7c7b\u7684\u539f\u56e0\u3002 \u7f51\u7edc\u6ca1\u95ee\u9898\uff0c\u5ba2\u6237\u7aef\u5230\u670d\u52a1\u7aef\u94fe\u8def\u6574\u4e2a\u6536\u53d1\u6d41\u7a0b\u5927\u6982\u8017\u65f6\u5c31\u662f100ms\u5de6\u53f3\u3002\u5ba2\u6237\u7aef\u5904\u7406\u903b\u8f91\u95ee\u9898\u5bfc\u81f4\u8d85\u65f6\u3002 \u4e00\u822c\u9047\u5230\u95ee\u9898\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u90fd\u4e0d\u4f1a\u662f\u5e95\u5c42\u7f51\u7edc\u7684\u95ee\u9898\uff0c\u5927\u80c6\u6000\u7591\u662f\u81ea\u5df1\u7684\u95ee\u9898\u5c31\u5bf9\u4e86\uff0c\u4e0d\u6b7b\u5fc3\u5c31\u6293\u4e2a\u5305\u770b\u4e0b\u3002 \u6293\u5305\u7ed3\u679c \u5206\u6790\u4e0b\uff0c\u4ece\u521a\u5f00\u59cb\u4e09\u6b21\u63e1\u624b\uff08\u753b\u4e86\u7ea2\u6846\u7684\u5730\u65b9\uff09\u3002 \u5230\u6700\u540e\u51fa\u73b0\u8d85\u65f6\u62a5\u9519i/o timeout\uff08\u753b\u4e86\u84dd\u6846\u7684\u5730\u65b9\uff09\u3002 \u4ecetime\u90a3\u4e00\u5217\u4ece7\u523010\uff0c\u786e\u5b9e\u95f4\u96943s\u3002\u800c\u4e14\u770b\u53f3\u4e0b\u89d2\u7684\u84dd\u6846\uff0c\u662f51169\u7aef\u53e3\u53d1\u523080\u7aef\u53e3\u7684\u4e00\u6b21Reset\u8fde\u63a5\u3002 80\u7aef\u53e3\u662f\u670d\u52a1\u7aef\u7684\u7aef\u53e3\u3002\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u5ba2\u6237\u7aef3s\u8d85\u65f6\u4e3b\u52a8\u65ad\u5f00\u94fe\u63a5\u7684\u3002 \u4f46\u662f\u518d\u4ed4\u7ec6\u770b\u4e0b\u7b2c\u4e00\u884c\u4e09\u6b21\u63e1\u624b\u5230\u6700\u540e\u5ba2\u6237\u7aef\u8d85\u65f6\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5\u7684\u4e2d\u95f4\uff0c\u5176\u5b9e\u6709\u975e\u5e38\u591a\u6b21HTTP\u8bf7\u6c42\u3002 \u56de\u53bb\u770b\u4ee3\u7801\u8bbe\u7f6e\u8d85\u65f6\u7684\u65b9\u5f0f\u3002 tr = &http.Transport{ MaxIdleConns: 100, Dial: func(netw, addr string) (net.Conn, error) { conn, err := net.DialTimeout(netw, addr, time.Second*2) //\u8bbe\u7f6e\u5efa\u7acb\u8fde\u63a5\u8d85\u65f6 if err != nil { return nil, err } err = conn.SetDeadline(time.Now().Add(time.Second * 3)) //\u8bbe\u7f6e\u53d1\u9001\u63a5\u53d7\u6570\u636e\u8d85\u65f6 if err != nil { return nil, err } return conn, nil }, } \u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u91cc\u76843s\u8d85\u65f6\uff0c\u5176\u5b9e\u662f\u5728\u5efa\u7acb\u8fde\u63a5\u4e4b\u540e\u5f00\u59cb\u7b97\u7684\uff0c\u800c\u4e0d\u662f\u5355\u6b21\u8c03\u7528\u5f00\u59cb\u7b97\u7684\u8d85\u65f6\u3002 \u770b\u6ce8\u91ca\u91cc\u5199\u7684\u662f SetDeadline sets the read and write deadlines associated with theconnection.","title":"\u6392\u67e5"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_23","text":"\u5927\u5bb6\u77e5\u9053HTTP\u662f\u5e94\u7528\u5c42\u534f\u8bae\uff0c\u4f20\u8f93\u5c42\u7528\u7684\u662fTCP\u534f\u8bae\u3002 HTTP\u534f\u8bae\u4ece1.0\u4ee5\u524d\uff0c\u9ed8\u8ba4\u7528\u7684\u662f\u77ed\u8fde\u63a5\uff0c\u6bcf\u6b21\u53d1\u8d77\u8bf7\u6c42\u90fd\u4f1a\u5efa\u7acbTCP\u8fde\u63a5\u3002\u6536\u53d1\u6570\u636e\u3002\u7136\u540e\u65ad\u5f00\u8fde\u63a5\u3002 TCP\u8fde\u63a5\u6bcf\u6b21\u90fd\u662f\u4e09\u6b21\u63e1\u624b\u3002\u6bcf\u6b21\u65ad\u5f00\u90fd\u8981\u56db\u6b21\u6325\u624b\u3002 \u5176\u5b9e\u6ca1\u5fc5\u8981\u6bcf\u6b21\u90fd\u5efa\u7acb\u65b0\u8fde\u63a5\uff0c\u5efa\u7acb\u7684\u8fde\u63a5\u4e0d\u65ad\u5f00\u5c31\u597d\u4e86\uff0c\u6bcf\u6b21\u53d1\u9001\u6570\u636e\u90fd\u590d\u7528\u5c31\u597d\u4e86\u3002 \u4e8e\u662f\u4e4e\uff0cHTTP\u534f\u8bae\u4ece1.1\u4e4b\u540e\u5c31\u9ed8\u8ba4\u4f7f\u7528\u957f\u8fde\u63a5\u3002\u5177\u4f53\u76f8\u5173\u4fe1\u606f\u53ef\u4ee5\u770b\u4e4b\u524d\u7684 \u8fd9\u7bc7\u6587\u7ae0 \u3002 \u90a3\u4e48golang\u6807\u51c6\u5e93\u91cc\u4e5f\u517c\u5bb9\u8fd9\u79cd\u5b9e\u73b0\u3002 \u901a\u8fc7\u5efa\u7acb\u4e00\u4e2a\u8fde\u63a5\u6c60\uff0c\u9488\u5bf9\u6bcf\u4e2a\u57df\u540d\u5efa\u7acb\u4e00\u4e2aTCP\u957f\u8fde\u63a5\uff0c\u6bd4\u5982http://baidu.com\u548chttp://golang.com\u5c31\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u57df\u540d\u3002 \u7b2c\u4e00\u6b21\u8bbf\u95eehttp://baidu.com\u57df\u540d\u7684\u65f6\u5019\u4f1a\u5efa\u7acb\u4e00\u4e2a\u8fde\u63a5\uff0c\u7528\u5b8c\u4e4b\u540e\u653e\u5230\u7a7a\u95f2\u8fde\u63a5\u6c60\u91cc\uff0c\u4e0b\u6b21\u518d\u8981\u8bbf\u95eehttp://baidu.com\u7684\u65f6\u5019\u4f1a\u91cd\u65b0\u4ece\u8fde\u63a5\u6c60\u91cc\u628a\u8fd9\u4e2a\u8fde\u63a5\u635e\u51fa\u6765\u590d\u7528\u3002 \u590d\u7528\u957f\u8fde\u63a5 \u4e3a\u4ec0\u4e48\u8981\u5f3a\u8c03\u662f\u540c\u4e00\u4e2a\u57df\u540d\uff1a\u4e00\u4e2a\u57df\u540d\u4f1a\u5efa\u7acb\u4e00\u4e2a\u8fde\u63a5\uff0c\u4e00\u4e2a\u8fde\u63a5\u5bf9\u5e94\u4e00\u4e2a\u8bfbgoroutine\u548c\u4e00\u4e2a\u5199goroutine\u3002\u6b63\u56e0\u4e3a\u662f\u540c\u4e00\u4e2a\u57df\u540d\uff0c\u6240\u4ee5\u6700\u540e\u624d\u4f1a\u6cc4\u6f0f3\u4e2agoroutine\uff0c\u5982\u679c\u4e0d\u540c\u57df\u540d\u7684\u8bdd\uff0c\u90a3\u5c31\u4f1a\u6cc4\u6f0f1+2*N\u4e2a\u534f\u7a0b\uff0cN\u5c31\u662f\u57df\u540d\u6570\u3002 \u5047\u8bbe\u7b2c\u4e00\u6b21\u8bf7\u6c42\u8981100ms\uff0c\u6bcf\u6b21\u8bf7\u6c42\u5b8chttp://baidu.com\u540e\u90fd\u653e\u5165\u8fde\u63a5\u6c60\u4e2d\uff0c\u4e0b\u6b21\u7ee7\u7eed\u590d\u7528\uff0c\u91cd\u590d29\u6b21\uff0c\u8017\u65f62900ms\u3002 \u7b2c30\u6b21\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u8fde\u63a5\u4ece\u5efa\u7acb\u5f00\u59cb\u5230\u670d\u52a1\u8fd4\u56de\u524d\u5c31\u5df2\u7ecf\u7528\u4e863000ms\uff0c\u521a\u597d\u5230\u8bbe\u7f6e\u76843s\u8d85\u65f6\u9608\u503c\uff0c\u90a3\u4e48\u6b64\u65f6\u5ba2\u6237\u7aef\u5c31\u4f1a\u62a5\u8d85\u65f6i/o timeout\u3002 \u867d\u7136\u8fd9\u65f6\u5019\u670d\u52a1\u7aef\u5176\u5b9e\u624d\u82b1\u4e86100ms\uff0c\u4f46\u8010\u4e0d\u4f4f\u524d\u976229\u6b21\u52a0\u8d77\u6765\u7684\u8017\u65f6\u5df2\u7ecf\u5f88\u957f\u3002 \u4e5f\u5c31\u662f\u8bf4\u53ea\u8981\u901a\u8fc7 http.Transport \u8bbe\u7f6e\u4e86 err = conn.SetDeadline(time.Now().Add(time.Second * 3)) \uff0c\u5e76\u4e14\u7528\u4e86\u957f\u8fde\u63a5\uff0c\u54ea\u6015\u670d\u52a1\u7aef\u5904\u7406\u518d\u5feb\uff0c\u5ba2\u6237\u7aef\u8bbe\u7f6e\u7684\u8d85\u65f6\u518d\u957f\uff0c\u603b\u6709\u4e00\u523b\uff0c\u7a0b\u5e8f\u4f1a\u62a5\u8d85\u65f6\u9519\u8bef\u3002","title":"\u8d85\u65f6\u539f\u56e0"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_24","text":"\u539f\u672c\u9884\u671f\u662f\u7ed9\u6bcf\u6b21\u8c03\u7528\u8bbe\u7f6e\u4e00\u4e2a\u8d85\u65f6\uff0c\u800c\u4e0d\u662f\u7ed9\u6574\u4e2a\u8fde\u63a5\u8bbe\u7f6e\u8d85\u65f6\u3002 \u53e6\u5916\uff0c\u4e0a\u9762\u51fa\u73b0\u95ee\u9898\u7684\u539f\u56e0\u662f\u7ed9\u957f\u8fde\u63a5\u8bbe\u7f6e\u4e86\u8d85\u65f6\uff0c\u4e14\u957f\u8fde\u63a5\u4f1a\u590d\u7528\u3002 \u57fa\u4e8e\u8fd9\u4e24\u70b9\uff0c\u6539\u4e00\u4e0b\u4ee3\u7801\u3002 package main import ( \"bytes\" \"encoding/json\" \"fmt\" \"io/ioutil\" \"net/http\" \"time\" ) var tr *http.Transport func init() { tr = &http.Transport{ MaxIdleConns: 100, // \u4e0b\u9762\u7684\u4ee3\u7801\u88ab\u5e72\u6389\u4e86 //Dial: func(netw, addr string) (net.Conn, error) { // conn, err := net.DialTimeout(netw, addr, time.Second*2) //\u8bbe\u7f6e\u5efa\u7acb\u8fde\u63a5\u8d85\u65f6 // if err != nil { // return nil, err // } // err = conn.SetDeadline(time.Now().Add(time.Second * 3)) //\u8bbe\u7f6e\u53d1\u9001\u63a5\u53d7\u6570\u636e\u8d85\u65f6 // if err != nil { // return nil, err // } // return conn, nil //}, } } func Get(url string) ([]byte, error) { m := make(map[string]interface{}) data, err := json.Marshal(m) if err != nil { return nil, err } body := bytes.NewReader(data) req, _ := http.NewRequest(\"Get\", url, body) req.Header.Add(\"content-type\", \"application/json\") client := &http.Client{ Transport: tr, Timeout: 3*time.Second, // \u8d85\u65f6\u52a0\u5728\u8fd9\u91cc\uff0c\u662f\u6bcf\u6b21\u8c03\u7528\u7684\u8d85\u65f6 } res, err := client.Do(req) if res != nil { defer res.Body.Close() } if err != nil { return nil, err } resBody, err := ioutil.ReadAll(res.Body) if err != nil { return nil, err } return resBody, nil } func main() { for { _, err := Get(\"http://www.baidu.com/\") if err != nil { fmt.Println(err) break } } } \u770b\u6ce8\u91ca\u4f1a\u53d1\u73b0\uff0c\u6539\u52a8\u7684\u70b9\u6709\u4e24\u4e2a http.Transport \u91cc\u7684\u5efa\u7acb\u8fde\u63a5\u65f6\u7684\u4e00\u4e9b\u8d85\u65f6\u8bbe\u7f6e\u5e72\u6389\u4e86\u3002 \u5728\u53d1\u8d77http\u8bf7\u6c42\u7684\u65f6\u5019\u4f1a\u573a\u666f http.Client \uff0c\u6b64\u65f6\u52a0\u5165\u8d85\u65f6\u8bbe\u7f6e\uff0c\u8fd9\u91cc\u7684\u8d85\u65f6\u5c31\u53ef\u4ee5\u7406\u89e3\u4e3a\u5355\u6b21\u8bf7\u6c42\u7684\u8d85\u65f6\u4e86\u3002\u540c\u6837\u53ef\u4ee5\u770b\u4e0b\u6ce8\u91ca Timeout specifies a time limit forrequestsmade by this Client. \u5230\u8fd9\u91cc\uff0c\u4ee3\u7801\u5c31\u6539\u597d\u4e86\uff0c\u5b9e\u9645\u751f\u4ea7\u4e2d\u95ee\u9898\u4e5f\u5c31\u89e3\u51b3\u4e86\u3002 \u5b9e\u4f8b\u4ee3\u7801\u91cc\uff0c\u5982\u679c\u62ff\u53bb\u8dd1\u7684\u8bdd\uff0c\u5176\u5b9e\u8fd8\u4f1a\u4e0b\u9762\u7684\u9519 Get http://www.baidu.com/: EOF \u8fd9\u4e2a\u662f\u56e0\u4e3a\u8c03\u7528\u5f97\u592a\u731b\u4e86\uff0chttp://www.baidu.com\u90a3\u8fb9\u4e3b\u52a8\u65ad\u5f00\u7684\u8fde\u63a5\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u9650\u6d41\u63aa\u65bd\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u4fdd\u62a4\u670d\u52a1\u5668\uff0c\u6bd5\u7adf\u6bcf\u4e2a\u4eba\u90fd\u50cf\u8fd9\u4e48\u641e\uff0c\u670d\u52a1\u5668\u662f\u4f1a\u70b8\u7684\u3002\u3002\u3002 \u89e3\u51b3\u65b9\u6848\u5f88\u7b80\u5355\uff0c\u6bcf\u6b21HTTP\u8c03\u7528\u4e2d\u95f4\u52a0\u4e2asleep\u95f4\u9694\u65f6\u95f4\u5c31\u597d\u3002 \u5230\u8fd9\u91cc\uff0c\u5176\u5b9e\u95ee\u9898\u5df2\u7ecf\u89e3\u51b3\u4e86\uff0c\u4e0b\u9762\u4f1a\u5728\u6e90\u7801\u5c42\u9762\u5206\u6790\u51fa\u73b0\u95ee\u9898\u7684\u539f\u56e0\u3002","title":"\u6b63\u786e\u59ff\u52bf"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_25","text":"\u7528\u7684go\u7248\u672c\u662f1.12.7\u3002 \u4ece\u53d1\u8d77\u4e00\u4e2a\u7f51\u7edc\u8bf7\u6c42\u5f00\u59cb\u8ddf\u3002 res, err := client.Do(req) func (c *Client) Do(req *Request) (*Response, error) { return c.do(req) } func (c *Client) do(req *Request) { // ... if resp, didTimeout, err = c.send(req, deadline); err != nil { // ... } // ... } func send(ireq *Request, rt RoundTripper, deadline time.Time) { // ... resp, err = rt.RoundTrip(req) // ... } // \u4ece\u8fd9\u91cc\u8fdb\u5165 RoundTrip \u903b\u8f91 /src/net/http/roundtrip.go: 16 func (t *Transport) RoundTrip(req *Request) (*Response, error) { return t.roundTrip(req) } func (t *Transport) roundTrip(req *Request) (*Response, error) { // \u5c1d\u8bd5\u53bb\u83b7\u53d6\u4e00\u4e2a\u7a7a\u95f2\u8fde\u63a5\uff0c\u7528\u4e8e\u53d1\u8d77 http \u8fde\u63a5 pconn, err := t.getConn(treq, cm) // ... } // \u91cd\u70b9\u5173\u6ce8\u8fd9\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u662f\u4e00\u4e2a\u957f\u8fde\u63a5 func (t *Transport) getConn(treq *transportRequest, cm connectMethod) (*persistConn, error) { // \u7701\u7565\u4e86\u5927\u91cf\u903b\u8f91\uff0c\u53ea\u5173\u6ce8\u4e0b\u9762\u4e24\u70b9 // \u6709\u7a7a\u95f2\u8fde\u63a5\u5c31\u8fd4\u56de pc := <-t.getIdleConnCh(cm) // \u6ca1\u6709\u521b\u5efa\u8fde\u63a5 pc, err := t.dialConn(ctx, cm) } \u8fd9\u91cc\u4e0a\u9762\u5f88\u591a\u4ee3\u7801\uff0c\u5176\u5b9e\u53ea\u662f\u4e3a\u4e86\u5c55\u793a\u8fd9\u90e8\u5206\u4ee3\u7801\u662f\u600e\u4e48\u8ddf\u8e2a\u4e0b\u6765\u7684\uff0c\u65b9\u4fbf\u5927\u5bb6\u53bb\u770b\u6e90\u7801\u7684\u65f6\u5019\u53bb\u8ddf\u4e00\u4e0b\u3002 \u6700\u540e\u4e00\u4e2a\u4e0a\u9762\u7684\u4ee3\u7801\u91cc\u6709\u4e2a getConn \u65b9\u6cd5\u3002\u5728\u53d1\u8d77\u7f51\u7edc\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u4f1a\u5148\u53d6\u4e00\u4e2a\u7f51\u7edc\u8fde\u63a5\uff0c\u53d6\u8fde\u63a5\u6709\u4e24\u4e2a\u6765\u6e90\u3002 \u5982\u679c\u6709\u7a7a\u95f2\u8fde\u63a5\uff0c\u5c31\u62ff\u7a7a\u95f2\u8fde\u63a5 // /src/net/http/tansport.go:810 func (t *Transport) getIdleConnCh(cm connectMethod) chan *persistConn { // \u8fd4\u56de\u653e\u7a7a\u95f2\u8fde\u63a5\u7684chan ch, ok := t.idleConnCh[key] // ... return ch } \u6ca1\u6709\u7a7a\u95f2\u8fde\u63a5\uff0c\u5c31\u521b\u5efa\u957f\u8fde\u63a5\u3002 // /src/net/http/tansport.go:1357 func (t *Transport) dialConn() { //... conn, err := t.dial(ctx, \"tcp\", cm.addr()) // ... go pconn.readLoop() go pconn.writeLoop() // ... } \u5f53\u7b2c\u4e00\u6b21\u53d1\u8d77\u4e00\u4e2ahttp\u8bf7\u6c42\u65f6\uff0c\u8fd9\u65f6\u5019\u80af\u5b9a\u6ca1\u6709\u7a7a\u95f2\u8fde\u63a5\uff0c\u4f1a\u5efa\u7acb\u4e00\u4e2a\u65b0\u8fde\u63a5\u3002\u540c\u65f6\u4f1a\u521b\u5efa\u4e00\u4e2a\u8bfbgoroutine\u548c\u4e00\u4e2a\u5199goroutine\u3002 \u8bfb\u5199\u534f\u7a0b \u6ce8\u610f\u4e0a\u9762\u4ee3\u7801\u91cc\u7684 t.dial(ctx, \"tcp\", cm.addr()) \uff0c\u5982\u679c\u50cf\u6587\u7ae0\u5f00\u5934\u90a3\u6837\u8bbe\u7f6e\u4e86 http.Transport \u7684 Dial: func(netw, addr string) (net.Conn, error) { conn, err := net.DialTimeout(netw, addr, time.Second*2) //\u8bbe\u7f6e\u5efa\u7acb\u8fde\u63a5\u8d85\u65f6 if err != nil { return nil, err } err = conn.SetDeadline(time.Now().Add(time.Second * 3)) //\u8bbe\u7f6e\u53d1\u9001\u63a5\u53d7\u6570\u636e\u8d85\u65f6 if err != nil { return nil, err } return conn, nil }, \u90a3\u4e48\u8fd9\u91cc\u5c31\u4f1a\u5728\u4e0b\u9762\u7684dial\u91cc\u88ab\u6267\u884c\u5230 func (t *Transport) dial(ctx context.Context, network, addr string) (net.Conn, error) { // ... c, err := t.Dial(network, addr) // ... } \u8fd9\u91cc\u9762\u8c03\u7528\u7684\u8bbe\u7f6e\u8d85\u65f6\uff0c\u4f1a\u6267\u884c\u5230 // /src/net/net.go func (c *conn) SetDeadline(t time.Time) error { //... c.fd.SetDeadline(t) //... } //... func setDeadlineImpl(fd *FD, t time.Time, mode int) error { // ... runtime_pollSetDeadline(fd.pd.runtimeCtx, d, mode) return nil } //go:linkname poll_runtime_pollSetDeadline internal/poll.runtime_pollSetDeadline func poll_runtime_pollSetDeadline(pd *pollDesc, d int64, mode int) { // ... // \u8bbe\u7f6e\u4e00\u4e2a\u5b9a\u65f6\u5668\u4e8b\u4ef6 rtf = netpollDeadline // \u5e76\u5c06\u4e8b\u4ef6\u6ce8\u518c\u5230\u5b9a\u65f6\u5668\u91cc modtimer(&pd.rt, pd.rd, 0, rtf, pd, pd.rseq) } \u4e0a\u9762\u7684\u6e90\u7801\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\uff0c\u5f53\u7b2c\u4e00\u6b21\u8c03\u7528\u8bf7\u6c42\u7684\uff0c\u4f1a\u5efa\u7acb\u4e2a\u8fde\u63a5\uff0c\u8fd9\u65f6\u5019\u8fd8\u4f1a\u6ce8\u518c\u4e00\u4e2a\u5b9a\u65f6\u5668\u4e8b\u4ef6\uff0c\u5047\u8bbe\u65f6\u95f4\u8bbe\u4e863s\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e8b\u4ef6\u4f1a\u57283s\u540e\u53d1\u751f\uff0c\u7136\u540e\u6267\u884c\u6ce8\u518c\u4e8b\u4ef6\u7684\u903b\u8f91\u3002\u800c\u8fd9\u4e2a\u6ce8\u518c\u4e8b\u4ef6\u5c31\u662f netpollDeadline \u3002\u6ce8\u610f\u8fd9\u4e2a netpollDeadline \uff0c\u5f85\u4f1a\u4f1a\u63d0\u5230\u3002 \u8bfb\u5199\u534f\u7a0b\u5b9a\u65f6\u5668\u4e8b\u4ef6 \u8bbe\u7f6e\u4e86\u8d85\u65f6\u4e8b\u4ef6\uff0c\u4e14\u8d85\u65f6\u4e8b\u4ef6\u662f3s\u540e\u4e4b\u540e\uff0c\u53d1\u751f\u3002\u518d\u6b21\u671f\u95f4\u6b63\u5e38\u6536\u53d1\u6570\u636e\u3002\u4e00\u5207\u5982\u5e38\u3002 \u76f4\u52303s\u8fc7\u540e\uff0c\u8fd9\u65f6\u5019\u770b\u8bfbgoroutine\uff0c\u4f1a\u7b49\u5f85\u7f51\u7edc\u6570\u636e\u8fd4\u56de\u3002 // /src/net/http/tansport.go:1642 func (pc *persistConn) readLoop() { //... for alive { _, err := pc.br.Peek(1) // \u963b\u585e\u8bfb\u53d6\u670d\u52a1\u7aef\u8fd4\u56de\u7684\u6570\u636e //... } \u7136\u540e\u5c31\u662f\u4e00\u76f4\u8ddf\u4ee3\u7801\u3002 src/bufio/bufio.go: 129 func (b *Reader) Peek(n int) ([]byte, error) { // ... b.fill() // ... } func (b *Reader) fill() { // ... n, err := b.rd.Read(b.buf[b.w:]) // ... } /src/net/http/transport.go: 1517 func (pc *persistConn) Read(p []byte) (n int, err error) { // ... n, err = pc.conn.Read(p) // ... } // /src/net/net.go: 173 func (c *conn) Read(b []byte) (int, error) { // ... n, err := c.fd.Read(b) // ... } func (fd *netFD) Read(p []byte) (n int, err error) { n, err = fd.pfd.Read(p) // ... } /src/internal/poll/fd_unix.go: func (fd *FD) Read(p []byte) (int, error) { //... if err = fd.pd.waitRead(fd.isFile); err == nil { continue } // ... } func (pd *pollDesc) waitRead(isFile bool) error { return pd.wait('r', isFile) } func (pd *pollDesc) wait(mode int, isFile bool) error { // ... res := runtime_pollWait(pd.runtimeCtx, mode) return convertErr(res, isFile) } \u76f4\u5230\u8ddf\u5230 runtime_pollWait \uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7b80\u5355\u8ba4\u4e3a\u662f\u7b49\u5f85\u670d\u52a1\u7aef\u6570\u636e\u8fd4\u56de\u3002 //go:linkname poll_runtime_pollWait internal/poll.runtime_pollWait func poll_runtime_pollWait(pd *pollDesc, mode int) int { // 1.\u5982\u679c\u7f51\u7edc\u6b63\u5e38\u8fd4\u56de\u6570\u636e\u5c31\u8df3\u51fa for !netpollblock(pd, int32(mode), false) { // 2.\u5982\u679c\u6709\u51fa\u9519\u60c5\u51b5\u4e5f\u8df3\u51fa err = netpollcheckerr(pd, int32(mode)) if err != 0 { return err } } return 0 } \u6574\u6761\u94fe\u8def\u8ddf\u4e0b\u6765\uff0c\u5c31\u662f\u4f1a\u4e00\u76f4\u7b49\u5f85\u6570\u636e\uff0c\u7b49\u5f85\u7684\u7ed3\u679c\u53ea\u6709\u4e24\u4e2a \u6709\u53ef\u4ee5\u8bfb\u7684\u6570\u636e \u51fa\u73b0\u62a5\u9519 \u8fd9\u91cc\u9762\u7684\u62a5\u9519\uff0c\u53c8\u6709\u90a3\u4e48\u4e24\u79cd \u8fde\u63a5\u5173\u95ed \u8d85\u65f6 func netpollcheckerr(pd *pollDesc, mode int32) int { if pd.closing { return 1 // errClosing } if (mode == 'r' && pd.rd < 0) || (mode == 'w' && pd.wd < 0) { return 2 // errTimeout } return 0 } \u5176\u4e2d\u63d0\u5230\u7684\u8d85\u65f6\uff0c\u5c31\u662f\u6307\u8fd9\u91cc\u9762\u8fd4\u56de\u7684 \u6570\u5b572 \uff0c\u4f1a\u901a\u8fc7\u4e0b\u9762\u7684\u51fd\u6570\uff0c\u8f6c\u5316\u4e3a ErrTimeout \uff0c \u800c ErrTimeout.Error() \u5176\u5b9e\u5c31\u662fi/o timeout\u3002 func convertErr(res int, isFile bool) error { switch res { case 0: return nil case 1: return errClosing(isFile) case 2: return ErrTimeout // ErrTimeout.Error() \u5c31\u662f \"i/o timeout\" } println(\"unreachable: \", res) panic(\"unreachable\") } \u90a3\u4e48\u95ee\u9898\u6765\u4e86\u3002\u4e0a\u9762\u8fd4\u56de\u7684\u8d85\u65f6\u9519\u8bef\uff0c\u4e5f\u5c31\u662f\u8fd4\u56de2\u7684\u65f6\u5019\u7684\u6761\u4ef6\u662f\u600e\u4e48\u6ee1\u8db3\u7684\uff1f if (mode == 'r' && pd.rd < 0) || (mode == 'w' && pd.wd < 0) { return 2 // errTimeout } \u8fd8\u8bb0\u5f97\u521a\u521a\u63d0\u5230\u7684netpollDeadline\u5417\uff1f \u8fd9\u91cc\u9762\u653e\u4e86\u5b9a\u65f6\u56683s\u5230\u70b9\u65f6\u6267\u884c\u7684\u903b\u8f91\u3002 func timerproc(tb *timersBucket) { // \u8ba1\u65f6\u5668\u5230\u8bbe\u5b9a\u65f6\u95f4\u70b9\u4e86\uff0c\u89e6\u53d1\u4e4b\u524d\u6ce8\u518c\u51fd\u6570 f(arg, seq) // \u4e4b\u524d\u6ce8\u518c\u7684\u662f netpollDeadline } func netpollDeadline(arg interface{}, seq uintptr) { netpolldeadlineimpl(arg.(*pollDesc), seq, true, true) } /src/runtime/netpoll.go: 428 func netpolldeadlineimpl(pd *pollDesc, seq uintptr, read, write bool) { //... if read { pd.rd = -1 rg = netpollunblock(pd, 'r', false) } //... } \u8fd9\u91cc\u4f1a\u8bbe\u7f6e pd.rd=-1 \uff0c\u662f\u6307 poller descriptor.read deadline \uff0c\u542b\u4e49\u7f51\u7edc\u8f6e\u8be2\u5668\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u8bfb\u8d85\u65f6\u65f6\u95f4\uff0c \u5728linux\u91cc\u4e07\u7269\u7686\u6587\u4ef6\uff0c\u8fd9\u91cc\u7684\u6587\u4ef6\u5176\u5b9e\u662f\u6307\u8fd9\u6b21\u7f51\u7edc\u901a\u8baf\u4e2d\u4f7f\u7528\u5230\u7684socket\u3002 \u8fd9\u65f6\u5019\u518d\u56de\u53bb\u770b\u53d1\u751f\u8d85\u65f6\u7684\u6761\u4ef6\u5c31\u662f if (mode == 'r' && pd.rd < 0) \u3002 \u81f3\u6b64\u3002\u4ee3\u7801\u91cc\u5c31\u6536\u5230\u4e86io timeout\u7684\u62a5\u9519\u3002","title":"\u6e90\u7801\u5206\u6790"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_26","text":"\u4e0d\u8981\u5728 http.Transport \u4e2d\u8bbe\u7f6e\u8d85\u65f6\uff0c\u90a3\u662f\u8fde\u63a5\u7684\u8d85\u65f6\uff0c\u4e0d\u662f\u8bf7\u6c42\u7684\u8d85\u65f6\u3002\u5426\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u83ab\u540dio timeout\u62a5\u9519\u3002 \u8bf7\u6c42\u7684\u8d85\u65f6\u5728\u521b\u5efa client \u91cc\u8bbe\u7f6e\u3002","title":"\u603b\u7ed3"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#gounicode","text":"","title":"Go\u4e2dUnicode\u76f8\u5173\u5305"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#gounicode_1","text":"Go \u8bed\u8a00\u8ba9\u590d\u6742\u7684\u7f16\u7801\u95ee\u9898\u53d8\u5f97\u7b80\u5355\u5f88\u591a\uff0c\u6781\u5927\u7684\u51cf\u8f7b\u4e86\u7a0b\u5e8f\u5458\u7684\u5fc3\u667a\u8d1f\u62c5\u3002\u4e3a\u4e86\u65b9\u4fbf\u5bf9 unicode \u5b57\u7b26\u4e32\u8fdb\u884c\u5904\u7406\uff0cGo \u8bed\u8a00\u6807\u51c6\u5e93\u63d0\u4f9b\u4e09\u4e2a\u5305\uff1aunicode\u3001unicode/utf8 \u548c unicode/utf16\u3002 \u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u4e0b\u4e09\u4e2a\u5305\u7684\u529f\u80fd\uff1a unicode\uff1aunicode \u63d0\u4f9b\u6570\u636e\u548c\u51fd\u6570\u6765\u6d4b\u8bd5 Unicode \u4ee3\u7801\u70b9\uff08Code Point\uff0c\u7528 rune \u5b58\u50a8\uff09\u7684\u67d0\u4e9b\u5c5e\u6027\u3002 unicode/utf8\uff1a\u7528\u4e8e\u5904\u7406 UTF-8 \u7f16\u7801\u7684\u6587\u672c\uff0c\u63d0\u4f9b\u4e00\u4e9b\u5e38\u91cf\u548c\u51fd\u6570\uff0c\u5305\u62ec\u5728 rune\uff08\u7801\u70b9\uff09 \u548c UTF-8 \u5b57\u8282\u5e8f\u5217\u4e4b\u95f4\u7684\u8f6c\u6362\u3002 unicode/utf16\uff1a\u51fd\u6570\u6bd4\u8f83\u5c11\uff0c\u4e3b\u8981\u662f UTF-16 \u5e8f\u5217\u7684\u7f16\u7801\u548c\u89e3\u7801\u3002 Go \u4e2d\u5b57\u7b26\u4e32\u7684\u5199\u6cd5\u3002 \u5728 Go \u8bed\u8a00\u4e2d\uff0c\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6709 4 \u79cd\u5199\u6cd5\uff0c\u6bd4\u5982\u300c\u5f90\u65b0\u534e\u300d\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a s1 := \"\u5f90\u65b0\u534e\" s2 := \"\\u5F90\\u65B0\\u534E\" s3 := \"\\U00005F90\\U000065B0\\U0000534E\" s4 := \"\\xe5\\xbe\\x90\\xe6\\x96\\xb0\\xe5\\x8d\\x8e\" \u7b80\u5355\u6765\u751f\u6d3b\u5c31\u662f \\u \u7d27\u8ddf\u56db\u4e2a\u5341\u516d\u8fdb\u5236\u6570\uff0c\\U \u7d27\u8ddf\u516b\u4e2a\u5341\u516d\u8fdb\u5236\u6570\u3002\u5176\u4e2d \\u \u6216 \\U \u4ee3\u8868\u540e\u9762\u662f Unicode \u7801\u70b9\u3002\u800c \\x \u7d27\u8ddf\u4e24\u4e2a\u5341\u516d\u8fdb\u5236\u6570\uff0c\u8fd9\u4e9b\u5341\u516d\u8fdb\u5236\u4e0d\u662f Unicode \u7801\u70b9\uff0c\u800c\u662f UTF-8 \u7f16\u7801\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u6709\u5229\u4e8e\u7406\u89e3\uff1a package main import ( \"fmt\" \"unicode/utf8\" ) func main() { s := `\u5f90\u65b0\u534e` var ( buf = make([]byte, 4) n int ) fmt.Println(\"\u5b57\u7b26\\tUnicode\u7801\u70b9\\tUTF-8\u7f16\u7801\u5341\u516d\u8fdb\u5236\\tUTF-8\u7f16\u7801\u4e8c\u8fdb\u5236\") for _, r := range s { n = utf8.EncodeRune(buf, r) fmt.Printf(\"%q\\t%U\\t\\t%X\\t\\t%b\\n\", r, r, buf[:n], buf[:n]) } s2 := \"\\u5F90\\u65B0\\u534E\" s3 := \"\\U00005F90\\U000065B0\\U0000534E\" s4 := \"\\xe5\\xbe\\x90\\xe6\\x96\\xb0\\xe5\\x8d\\x8e\" fmt.Println(s2) fmt.Println(s3) fmt.Println(s4) } \u8fd0\u884c\u7ed3\u679c\uff1a \u5b57\u7b26 Unicode\u7801\u70b9 UTF-8\u7f16\u7801\u5341\u516d\u8fdb\u5236 UTF-8\u7f16\u7801\u4e8c\u8fdb\u5236 '\u5f90' U+5F90 E5BE90 [11100101 10111110 10010000] '\u65b0' U+65B0 E696B0 [11100110 10010110 10110000] '\u534e' U+534E E58D8E [11100101 10001101 10001110] \u5f90\u65b0\u534e \u5f90\u65b0\u534e \u5f90\u65b0\u534e \u6b64\u5916\uff0c\u5173\u4e8e\u5b57\u7b26\u4e32\u5176\u4ed6\u65b9\u9762\u7684\u5904\u7406\uff0c\u6bd4\u5982\u7f16\u7801\u8f6c\u6362\u7b49\uff0c\u53ef\u4ee5\u5230 https://pkg.go.dev/golang.org/x/text \u91cc\u627e\u3002","title":"Go\u4e2dUnicode\u76f8\u5173\u5305"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#little-endian-big-endian","text":"\u4e00\u4e2a\u5b57\u7b26\u4f7f\u7528\u591a\u5b57\u8282\u5b58\u50a8\u65f6\uff0c\u6d89\u53ca\u5230\u54ea\u4e2a\u5728\u524d\u54ea\u4e2a\u5728\u540e\u3002\u4ee5\u6c49\u5b57\u300c\u5f90\u300d\u4e3a\u4f8b\uff0cUnicode \u7801\u70b9\u662f 5F90\uff0c\u9700\u8981\u7528\u4e24\u4e2a\u5b57\u8282\u5b58\u50a8\uff0c\u4e00\u4e2a\u5b57\u8282\u662f 5F \uff0c\u53e6\u4e00\u4e2a\u5b57\u8282\u662f 90 \u3002\u5b58\u50a8\u7684\u65f6\u5019\uff0c 5F \u5728\u524d\uff0c 90 \u5728\u540e\uff0c\u8fd9\u5c31\u662f Big endian \u65b9\u5f0f\uff1b 90 \u5728\u524d\uff0c 5F \u5728\u540e\uff0c\u8fd9\u662f Little endian \u65b9\u5f0f\u3002 \u8fd9\u4e24\u4e2a\u53e4\u602a\u7684\u540d\u79f0\u6765\u81ea\u82f1\u56fd\u4f5c\u5bb6\u65af\u5a01\u592b\u7279\u7684\u300a\u683c\u5217\u4f5b\u6e38\u8bb0\u300b\u3002\u5728\u8be5\u4e66\u4e2d\uff0c\u5c0f\u4eba\u56fd\u91cc\u7206\u53d1\u4e86\u5185\u6218\uff0c\u6218\u4e89\u8d77\u56e0\u662f\u4eba\u4eec\u4e89\u8bba\uff0c\u5403\u9e21\u86cb\u65f6\u7a76\u7adf\u662f\u4ece\u5927\u5934\uff08Big-endian\uff09\u6572\u5f00\u8fd8\u662f\u4ece\u5c0f\u5934\uff08Little-endian\uff09\u6572\u5f00\u3002\u4e3a\u4e86\u8fd9\u4ef6\u4e8b\u60c5\uff0c\u524d\u540e\u7206\u53d1\u4e86\u516d\u6b21\u6218\u4e89\uff0c\u4e00\u4e2a\u7687\u5e1d\u9001\u4e86\u547d\uff0c\u53e6\u4e00\u4e2a\u7687\u5e1d\u4e22\u4e86\u738b\u4f4d\u3002 \u7b2c\u4e00\u4e2a\u5b57\u8282\u5728\u524d\uff0c\u5c31\u662f\"\u5927\u7aef\u65b9\u5f0f\"\uff08Big endian\uff09\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u8282\u5728\u524d\u5c31\u662f\"\u5c0f\u7aef\u65b9\u5f0f\"\uff08Little endian\uff09\u3002 \u90a3\u4e48\u5f88\u81ea\u7136\u7684\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u8ba1\u7b97\u673a\u600e\u4e48\u77e5\u9053\u67d0\u4e00\u4e2a\u6587\u4ef6\u5230\u5e95\u91c7\u7528\u54ea\u4e00\u79cd\u65b9\u5f0f\u7f16\u7801\uff1f Unicode \u89c4\u8303\u5b9a\u4e49\uff0c\u6bcf\u4e00\u4e2a\u6587\u4ef6\u7684\u6700\u524d\u9762\u5206\u522b\u52a0\u5165\u4e00\u4e2a\u8868\u793a\u7f16\u7801\u987a\u5e8f\u7684\u5b57\u7b26\uff0c\u8fd9\u4e2a\u5b57\u7b26\u7684\u540d\u5b57\u53eb\u505a\"\u96f6\u5bbd\u5ea6\u975e\u6362\u884c\u7a7a\u683c\"\uff08zero width no-break space\uff09\uff0c\u7528 FEFF \u8868\u793a\u3002\u8fd9\u6b63\u597d\u662f\u4e24\u4e2a\u5b57\u8282\uff0c\u800c\u4e14 FF \u6bd4 FE \u59271\u3002 \u5982\u679c\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u7684\u5934\u4e24\u4e2a\u5b57\u8282\u662f FE FF\uff0c\u5c31\u8868\u793a\u8be5\u6587\u4ef6\u91c7\u7528\u5927\u7aef\u65b9\u5f0f\uff1b\u5982\u679c\u5934\u4e24\u4e2a\u5b57\u8282\u662f FF FE\uff0c\u5c31\u8868\u793a\u8be5\u6587\u4ef6\u91c7\u7528\u5c0f\u7aef\u65b9\u5f0f\u3002 \u4f46\u4ece\u4e0a\u9762\u5173\u4e8e UTF-8 \u7f16\u7801\u7684\u8bf4\u660e\u53ef\u4ee5\u770b\u51fa\uff0c\u867d\u7136 UTF-8 \u5b58\u5728\u591a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u7684\u60c5\u51b5\uff0c\u4f46\u987a\u5e8f\u662f\u56fa\u5b9a\u7684\uff0c\u6ca1\u6709\u5b57\u8282\u5e8f\u7684\u95ee\u9898\u3002Unix \u7cfb\u7edf\u4e0b\uff0cUTF-8 \u6ca1\u6709\u4efb\u4f55\u524d\u7f6e\u5b57\u7b26\uff0c\u4f46 Windows \u4e0b\u8bb0\u4e8b\u672c\u4fdd\u5b58\u7684 UTF-8 \u6587\u4ef6\u4f1a\u5e26\u4e0a BOM\uff08Byte Order Mark\uff09\uff0c\u5373 EF BB BF \u8fd9\u4e09\u4e2a\u5b57\u8282\u3002\u5173\u4e8e\u8fd9\u4e00\u70b9\uff0cUnicode \u4e4b\u7236 Rob Pike \u660e\u786e\u8bf4 UTF-8 \u4e0d\u9700\u8981 BOM\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb Go \u6e90\u6587\u4ef6\u662f\u4e0d\u5141\u8bb8\u6709 BOM \u7684\uff0c\u5426\u5219\u7f16\u8bd1\u4e0d\u901a\u8fc7\uff0c\u4e0d\u8fc7\u73b0\u5728\u5df2\u7ecf\u53ef\u4ee5\u6709\u4e86\u3002\u4f46\u5efa\u8bae\u8fd8\u662f\u522b\u5e26 BOM\u3002 UTF-8 \u5e26 BOM \u8bf4\u4e0d\u662f\u4e3a\u4e86\u533a\u5206\u5b57\u8282\u5e8f\uff0c\u800c\u662f\u4e3a\u4e86\u66f4\u65b9\u4fbf\u7684\u77e5\u6653\u8fd9\u662f\u4e00\u4e2a UTF-8 \u6587\u4ef6\u3002","title":"\u5927\u5c0f\u7aef\u95ee\u9898\uff08Little endian \u548c Big endian\uff09"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#go-unsafe","text":"","title":"Go \u6807\u51c6\u5e93\u4e4b unsafe \u5305"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#1-unsafe","text":"","title":"1. unsafe\u5305"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#11-arbitrarytype","text":"unsafe \u5305\u4e0b\u5b9a\u4e49\u4e86\u4e00\u4e2a ArbitratyType \u7c7b\u578b\uff0c\u4ee3\u8868\u4e86\u4efb\u610f\u7684Go\u8868\u8fbe\u5f0f\u3002 type ArbitraryType int","title":"1.1. ArbitraryType"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#12-pointer","text":"Pointer \u5b9a\u4e49\uff1a type Pointer *ArbitraryType Pointer \u4ee3\u8868\u4e86\u4e00\u4e2a\u6307\u5411\u4efb\u610f\u7c7b\u578b\u7684\u6307\u9488\uff0c\u6709\u56db\u79cd\u53ea\u9002\u7528\u5bf9 Pointer \u800c\u4e0d\u9002\u7528\u4e8e\u5176\u4ed6\u7c7b\u578b\u7684\u64cd\u4f5c\u3002 \u4efb\u610f\u7c7b\u578b\u7684\u6307\u9488\u503c\u53ef\u4ee5\u88ab\u8f6c\u6362\u4e3a\u4e00\u4e2a Pointer \u4e00\u4e2a Pointer \u53ef\u4ee5\u88ab\u8f6c\u6362\u4e3a\u4efb\u610f\u7c7b\u578b\u7684\u6307\u9488\u503c \u4e00\u4e2a uintptr \u53ef\u4ee5\u88ab\u8f6c\u6362\u4e3a\u4e00\u4e2a Pointer \u4e00\u4e2a Pointer \u4e5f\u53ef\u4ee5\u88ab\u8f6c\u6362\u4e3a\u4e00\u4e2a uintptr \u56e0\u6b64\uff0c Pointer \u53ef\u4ee5\u8df3\u8fc7\u7c7b\u578b\u7cfb\u7edf\u800c\u76f4\u63a5\u6307\u5411\u4efb\u610f\u7c7b\u578b\u3002\u6240\u4ee5\u9700\u8981\u5341\u5206\u5c0f\u5fc3\u7684\u4f7f\u7528\u3002 \u5173\u4e8e\u4f7f\u7528 Pointer \u7684\u89c4\u5219\uff0c\u4e0d\u4f7f\u7528\u8fd9\u4e9b\u89c4\u5219\u7684\u4ee3\u7801\u662f\u4e0d\u53ef\u7528\u7684\uff0c\u6216\u8005\u5728\u672a\u6765\u662f\u4e0d\u53ef\u7528\u7684\u3002","title":"1.2. Pointer"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#121-pointert1t2","text":"\u524d\u63d0\u662fT2\u7684\u5927\u5c0f\u4e0d\u8d85\u8fc7T1\uff0c\u800c\u4e14\u4e24\u8005\u7684\u5185\u5b58\u5206\u5e03\u76f8\u540c\u3002 func Float64bits(f float64) uint64 { return *(*uint64)(unsafe.Pointer(&f))}","title":"1.2.1. \u4f7f\u7528Pointer\u4f5c\u4e3a\u4e2d\u95f4\u8005\u5c06*T1\u8f6c\u6362\u4e3a*T2"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#122-pointeruintptr","text":"\u628a Pointer \u8f6c\u6362\u4e3a uintptr \u5c06\u4ea7\u751f\u4e00\u4e2a\u6307\u5411\u7c7b\u578b\u503c\u7684 int \u53d8\u91cf\u3002\u5e38\u7528\u6765\u6253\u5370\u4e00\u4e2a uintptr \u3002 \u5c06 uintptr \u8f6c\u6362\u4e3a Pointer \u662f\u4e0d\u53ef\u7528\u7684\u3002 \u56e0\u4e3a uintptr \u662f\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u800c\u4e0d\u662f\u5f15\u7528\u3002\u5c31\u662f\u8bf4 uintptr \u548c\u6307\u9488\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002\u53ef\u4ee5\u8bf4\u662f\u5c06 Pointer \u6307\u5411\u7684\u5730\u5740\u7684\u503c\u8fd4\u56de\u7ed9 uintptr \uff0c\u5373\u4f7f uintptr \u4e2d\u7684\u503c\u5bf9\u5e94\u7684\u5730\u5740\u7684\u5bf9\u8c61\u66f4\u65b0\u4e86\u6216\u8005\u5220\u9664\u4e86\uff0c uintptr \u4e5f\u4e0d\u4f1a\u6539\u53d8\u3002","title":"1.2.2. \u628aPointer\u8f6c\u6362\u4e3auintptr"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#123-pointeruintptrpointeruintptr","text":"\u5982\u679c Pointer \u6307\u5411\u4e00\u4e2a\u5206\u914d\u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u5982\u4e0b\u8f6c\u6362\u53ef\u4ee5\u628a Pointer \u6307\u9488\u5411\u540e\u79fb\u52a8\u3002 p = unsafe.Pointer(uintptr(p) + offset) \u6700\u5e38\u7528\u7684\u662f\u6307\u5411\u7ed3\u6784\u4f53\u4e2d\u4e0d\u540c\u5b57\u6bb5\u6216\u8005\u6570\u7ec4\u4e2d\u7684\u5143\u7d20 // equivalent to f := unsafe.Pointer(&s.f) f := unsafe.Pointer(uintptr(unsafe.Pointer(&s)) + unsafe.Offsetof(s.f)) // equivalent to e := unsafe.Pointer(&x[i]) e := unsafe.Pointer(uintptr(unsafe.Pointer(&x[0])) + i*unsafe.Sizeof(x[0])) \u8fd9\u53ef\u4ee5\u7528\u6765\u5411\u524d\u6216\u5411\u540e\u79fb\u52a8\u6307\u9488\uff0c\u901a\u8fc7\u52a0\u6216\u8005\u51cf offset \u3002\u6307\u9488\u79fb\u52a8\u4e4b\u540e\uff0c\u4e5f\u5e94\u8be5\u6307\u5411\u8be5\u5185\u5b58\u8303\u56f4\u4e2d\u3002 \u5c06 Pointer \u79fb\u52a8\u8d85\u8fc7\u5176\u5bf9\u8c61\u7684\u539f\u59cb\u5185\u5b58\u5206\u914d\u8303\u56f4\u662f\u4e0d\u53ef\u7528\u7684\uff0c\u5982\uff1a // INVALID: end points outside allocated space. var s thing end = unsafe.Pointer(uintptr(unsafe.Pointer(&s)) + unsafe.Sizeof(s)) // INVALID: end points outside allocated space. b := make([]byte, n) end = unsafe.Pointer(uintptr(unsafe.Pointer(&b[0])) + uintptr(n)) \u5f53\u7136\u5982\u4e0b\u4ee3\u7801\u4e5f\u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a uintptr \u4e0d\u53ef\u4ee5\u50a8\u5b58\u5728\u53d8\u91cf\u4e2d\uff1a // INVALID: uintptr cannot be stored in variable // before conversion back to Pointer. u := uintptr(p) p = unsafe.Pointer(u + offset) Pointer`\u5fc5\u987b\u6307\u5411\u4e00\u4e2a\u5df2\u7ecf\u5206\u914d\u597d\u7684\u5bf9\u8c61\uff0c\u800c\u4e0d\u80fd\u662f`nil // INVALID: conversion of nil pointer u := unsafe.Pointer(nil) p := unsafe.Pointer(uintptr(u) + offset)","title":"1.2.3. \u628aPointer\u8f6c\u4e3auintptr\u518d\u8f6c\u6362\u56dePointer\uff0c\u5176\u4e2d\u5e26\u6709uintptr\u6570\u503c\u8fd0\u7b97"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#124-syscallsyscallpoineruintptr","text":"syscall \u5305\u4e0b\u7684 Syscall \u51fd\u6570\u628a uintptr \u53c2\u6570\u4f20\u9012\u7ed9\u64cd\u4f5c\u7cfb\u7edf\uff0c\u7136\u540e\u6839\u636e\u8c03\u7528\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u628a\u76f8\u5e94\u7684 uintptr \u518d\u8f6c\u6362\u4e3a\u6307\u9488\u3002 \u5982\u679c\u4e00\u4e2a\u6307\u9488\u53c2\u6570\u5fc5\u987b\u88ab\u8f6c\u6362\u4e3a uintptr \u4f5c\u4e3a\u53c2\u6570\u7684\u8bdd\uff0c\u8fd9\u4e2a\u8f6c\u6362\u53ea\u80fd\u5728\u8c03\u7528\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u8868\u8fbe\u5f0f\u5b8c\u6210\uff0c\u56e0\u4e3a uintptr \u662f\u4e0d\u80fd\u50a8\u5b58\u5728\u53d8\u91cf\u4e2d\u7684\u3002 syscall.Syscall(SYS_READ, uintptr(fd), uintptr(unsafe.Pointer(p)), uintptr(n)) \u7f16\u8bd1\u5668\u5904\u7406\u51fd\u6570\u8c03\u7528\u4e2d\u7684\u6307\u9488\u65f6\uff0c\u8be5\u6307\u9488\u6240\u6307\u5411\u7684\u5bf9\u8c61\u4f1a\u88ab\u4fdd\u7559\u5230\u51fd\u6570\u8c03\u7528\u7ed3\u675f\uff0c\u5373\u4f7f\u8be5\u5bf9\u8c61\u5728\u51fd\u6570\u8c03\u7528\u65f6\u5e76\u4e0d\u4f7f\u7528\u3002 \u5982\u4e0b\u662f\u9519\u8bef\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a uintptr \u4e0d\u80fd\u4fdd\u5b58\u5728\u53d8\u91cf\u4e2d // INVALID: uintptr cannot be stored in variable // before implicit conversion back to Pointer during system call. u := uintptr(unsafe.Pointer(p)) syscall.Syscall(SYS_READ, uintptr(fd), u, uintptr(n))","title":"1.2.4. \u5f53\u8c03\u7528syscall.Syscall\u65f6\uff0c\u9700\u8981\u628aPoiner\u8f6c\u6362\u4e3auintptr"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#125-reflectvaluepointerreflectvalueunsafeaddruintptrpointer","text":"\u5305 reflect \u4e0b Value \u7684 Pointer \u65b9\u6cd5\u548c UnsafeAddr \u65b9\u6cd5\u8fd4\u56de\u7684\u662f uintptr \u800c\u4e0d\u662f Pointer \u7c7b\u578b\uff0c\u4ee5\u4fbf\u4e8e\u8c03\u7528\u8005\u4e0d\u4f7f\u7528 usafe \u5305\u5c31\u53ef\u4ee5\u8f6c\u6362\u4e3a\u4efb\u610f\u7c7b\u578b\u3002\u8fd9\u4e5f\u610f\u5473\u7740\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u5fc5\u987b\u4f7f\u7528 Pointer \u8fdb\u884c\u8f6c\u6362\u624d\u53ef\u4ee5\u4f7f\u7528\uff1a p := (*int)(unsafe.Pointer(reflect.ValueOf(new(int)).Pointer())) \u56e0\u4e3a\u8fd9\u4e24\u4e2a\u51fd\u6570\u8c03\u7528\u7684\u8fd4\u56de\u503c\u662f uintptr \uff0c\u6240\u4ee5\u4e5f\u662f\u4e0d\u53ef\u4ee5\u53d8\u91cf\u50a8\u5b58\u7684\u3002","title":"1.2.5. \u5c06reflect.Value.Pointer\u6216\u8005reflect.Value.UnsafeAddr\u7684\u7ed3\u679c\u4eceuintptr\u8f6c\u6362\u4e3aPointer"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#126-reflectsliceheaderreflectstringheaderdatapointer","text":"\u524d\u9762\u8bf4\u8fc7\uff0c\u8fd4\u56de uintptr \u662f\u4e3a\u4e86\u8c03\u7528\u8005\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u4e0d\u540c\u7c7b\u578b\u7684\u8f6c\u6362\uff0c\u800c\u4e0d\u7528\u5bfc\u5165 unsafe \u5305\u3002\u8fd9\u610f\u5473\u7740\uff0c\u53ea\u6709\u5f53\u6307\u9488\u89e3\u6790\u4e3a\u5207\u7247\u6216\u8005\u5b57\u7b26\u4e32\u65f6 SliceHeader \u548c StringHeader \u624d\u53ef\u4ee5\u88ab\u4f7f\u7528\u3002 var s string hdr := (*reflect.StringHeader)(unsafe.Pointer(&s)) // case 1 hdr.Data = uintptr(unsafe.Pointer(p)) // case 6 (this case) hdr.Len = n \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c SliceHeader \u548c StringHeader \u53ea\u80fd\u4f5c\u4e3a *SliceHeader \u548c *StringHeader \u4f7f\u7528\uff0c\u800c\u4e0d\u53ef\u4ee5\u4f7f\u7528\u5176\u7ed3\u6784\u4f53\u5f62\u5f0f\u3002 // INVALID: a directly-declared header will not hold Data as a reference. var hdr reflect.StringHeader hdr.Data = uintptr(unsafe.Pointer(p)) hdr.Len = n s := *(*string)(unsafe.Pointer(&hdr)) // p possibly already lost","title":"1.2.6. reflect.SliceHeader\u6216\u8005reflect.StringHeader\u7684Data\u5b57\u6bb5\u540cPointer\u7684\u76f8\u4e92\u8f6c\u6362"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#13-sizeof","text":"\u5b9a\u4e49\uff1a func Sizeof(x ArbitraryType) uintptr \u76f4\u63a5\u590d\u5236\u6807\u51c6\u6587\u6863\u4e2d\u7684\u5185\u5bb9\uff0c\u4e0b\u540c\u3002 Sizeof \u8fd4\u56de\u7c7b\u578bv\u672c\u8eab\u6570\u636e\u6240\u5360\u7528\u7684\u5b57\u8282\u6570\u3002\u8fd4\u56de\u503c\u662f\u201c\u9876\u5c42\u201d\u7684\u6570\u636e\u5360\u6709\u7684\u5b57\u8282\u6570\u3002\u4f8b\u5982\uff0c\u82e5v\u662f\u4e00\u4e2a\u5207\u7247\uff0c\u5b83\u4f1a\u8fd4\u56de\u8be5\u5207\u7247\u63cf\u8ff0\u7b26\u7684\u5927\u5c0f\uff0c\u800c\u975e\u8be5\u5207\u7247\u5e95\u5c42\u5f15\u7528\u7684\u5185\u5b58\u7684\u5927\u5c0f\u3002","title":"1.3 Sizeof\u51fd\u6570"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#14-alignof","text":"\u5b9a\u4e49\uff1a func Alignof(v ArbitraryType) uintptr Alignof \u8fd4\u56de\u7c7b\u578bv\u7684\u5bf9\u9f50\u65b9\u5f0f\uff08\u5373\u7c7b\u578bv\u5728\u5185\u5b58\u4e2d\u5360\u7528\u7684\u5b57\u8282\u6570\uff09\uff1b\u82e5\u662f\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u5b57\u6bb5\u7684\u5f62\u5f0f\uff0c\u5b83\u4f1a\u8fd4\u56de\u5b57\u6bb5f\u5728\u8be5\u7ed3\u6784\u4f53\u4e2d\u7684\u5bf9\u9f50\u65b9\u5f0f\u3002","title":"1.4 Alignof"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#15-offsetof","text":"\u5b9a\u4e49\uff1a func Offsetof(v ArbitraryType) uintptr Offsetof \u8fd4\u56de\u7c7b\u578bv\u6240\u4ee3\u8868\u7684\u7ed3\u6784\u4f53\u5b57\u6bb5\u5728\u7ed3\u6784\u4f53\u4e2d\u7684\u504f\u79fb\u91cf\uff0c\u5b83\u5fc5\u987b\u4e3a\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u5b57\u6bb5\u7684\u5f62\u5f0f\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u8fd4\u56de\u8be5\u7ed3\u6784\u8d77\u59cb\u5904\u4e0e\u8be5\u5b57\u6bb5\u8d77\u59cb\u5904\u4e4b\u95f4\u7684\u5b57\u8282\u6570\u3002","title":"1.5 Offsetof"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_27","text":"1.2\u4e2d\u7684 Pointer \u548c uintptr \u7684\u533a\u522b\uff1a \u5047\u8bbe\u5728\u5185\u5b58\u4e2d\u6709\u4e00\u4e2a\u53d8\u91cf a := 1 \u90a3\u4e48 p := Pointer(&a) \u4e2d\uff0cp\u5305\u542b\u7684\u5c31\u662fa\u7684\u5b9e\u9645\u5730\u5740\uff0c\u5047\u8bbe\u4e3a 1000 \uff0c\u5f53a\u5728\u5185\u5b58\u4e2d\u79fb\u52a8\u65f6\uff0cp\u4e2d\u7684\u5730\u5740\u503c\u4e5f\u4f1a\u5b9e\u65f6\u66f4\u65b0\u3002 \u800c uintprt(p) \u53ea\u662f 1000 \uff0c\u5c31\u662fa\u7684\u5730\u5740\u503c\uff0c\u4f46\u662f\u5f53a\u5728\u5185\u5b58\u4e2d\u79fb\u52a8\u65f6\uff0c\u539f\u6765\u83b7\u53d6\u7684 uintptr \u503c\u5e76\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u4e00\u76f4\u90fd\u662f1000\u3002 \u4e5f\u662f\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0c syscall.Syscall \u4f20\u5165\u7684 uintptr \u5982\u679c\u4ee3\u8868\u4e00\u4e2a\u5bf9\u8c61\u7684\u6307\u9488\uff0c\u90a3\u4e48\u8be5\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u662f\u4e00\u76f4\u88ab\u4fdd\u7559\u7684\uff0c\u800c\u4e14\u4e0d\u80fd\u79fb\u52a8\uff0c\u5426\u5219\u7684\u8bdd uintptr \u6307\u5411\u7684\u5c31\u4e0d\u662f\u539f\u6765\u7684\u5bf9\u8c61\u4e86\uff0c\u5bb9\u6613\u5185\u5b58\u6cc4\u6f0f\u3002 \u8fd8\u6709\u4e00\u4e2a\u5c31\u662f uintptr \u4e0d\u80fd\u4fdd\u5b58\u5728\u53d8\u91cf\u4e2d\uff0c\u53ea\u80fd\u4f7f\u7528 Pointer \u8fdb\u884c\u8f6c\u6362\u7136\u540e\u624d\u80fd\u4fdd\u5b58\u3002","title":"\u603b\u7ed3"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_28","text":"","title":"\u7f16\u7801\u5206\u6790"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_29","text":"HTTP \u534f\u8bae\u57fa\u4e8e\u6587\u672c\u4f20\u8f93\uff0c\u5b57\u7b26\u7f16\u7801\u5c06\u6587\u672c\u53d8\u4e3a\u4e8c\u8fdb\u5236\uff0c\u4e8c\u8fdb\u5236\u7f16\u7801\u5c06\u4e8c\u8fdb\u5236\u53d8\u4e3a\u6587\u672c\u3002TCP \u534f\u8bae\u57fa\u4e8e\u4e8c\u8fdb\u5236\u4f20\u8f93\uff0c\u6570\u636e\u8bfb\u53d6\u65f6\u9700\u8981\u5904\u7406\u5b57\u8282\u5e8f\u3002\u672c\u6587\u5c06\u4ecb\u7ecd\u5e38\u89c1\u7684\u5b57\u7b26\u7f16\u7801\u3001\u4e8c\u8fdb\u5236\u7f16\u7801\u53ca\u5b57\u8282\u5e8f\uff0c\u5e76\u4e00\u63a2 Golang \u4e2d\u7684\u5b9e\u73b0\u3002","title":"\u80cc\u666f"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_30","text":"\u5f15\u8a00\uff1a\u5982\u4f55\u628a\u201cHello world\u201d\u53d8\u6210\u5b57\u8282\uff1f Step1\uff1a\u5f97\u5230\u8981\u8868\u793a\u7684\u5168\u91cf\u5b57\u7b26\uff08\u5b57\u7b26\u8868\uff09 Step2\uff1a\u4e3a\u6bcf\u4e2a\u5b57\u7b26\u6307\u5b9a\u4e00\u4e2a\u6574\u6570\u7f16\u53f7\uff08\u7f16\u7801\u5b57\u7b26\u96c6\uff09 Step3\uff1a\u5c06\u7f16\u53f7\u6620\u5c04\u6210\u6709\u9650\u957f\u5ea6\u6bd4\u7279\u503c\uff08\u5b57\u7b26\u7f16\u7801\u8868\uff09 \u5b57\u7b26\u662f\u5404\u79cd\u6587\u5b57\u548c\u7b26\u53f7\u7684\u603b\u79f0\uff0c\u5305\u62ec\u5404\u56fd\u5bb6\u6587\u5b57\u3001\u6807\u70b9\u7b26\u53f7\u3001\u56fe\u5f62\u7b26\u53f7\u3001\u6570\u5b57\u7b49\u3002\u5168\u4e16\u754c\u5171\u4f7f\u7528 5651 \u79cd\u8bed\u8a00\uff0c\u5176\u4e2d\u4f7f\u7528\u4eba\u6570\u8d85\u8fc7 5000 \u4e07\u7684\u8bed\u8a00\u6709 13 \u79cd\uff0c\u6bcf\u79cd\u8bed\u8a00\u6709\u81ea\u5df1\u7684\u5b57\u7b26\u3002\u6c49\u8bed\u4e2d\uff0c\u4e00\u4e2a\u6c49\u5b57\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u3002\u82f1\u8bed\u4e2d\uff0c\u4e00\u4e2a\u5b57\u6bcd\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u3002\u751a\u81f3\u770b\u4e0d\u89c1\u7684\u4e5f\u53ef\u4ee5\u662f\u5b57\u7b26\uff08\u5982\u63a7\u5236\u5b57\u7b26\uff09\u3002 \u5b57\u7b26\u7684\u96c6\u5408\u5373\u4e3a\u5b57\u7b26\u8868 \uff0c\u5982\u82f1\u6587\u5b57\u6bcd\u8868\uff0c\u963f\u62c9\u4f2f\u6570\u5b57\u8868\u3002ASCII \u7801\u8868\u4e2d\u4e00\u5171\u6709 128 \u4e2a\u5b57\u7b26\u3002","title":"\u5b57\u7b26\u7f16\u7801"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#ccscoded-character-set","text":"\u4e3a\u5b57\u7b26\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u6307\u5b9a\u4e00\u4e2a\u7f16\u53f7\uff08 \u7801\u70b9\uff0cCode Point \uff09\uff0c\u5373\u5f97\u5230\u7f16\u7801\u5b57\u7b26\u96c6\u3002\u5e38\u89c1\u6709 ASCII \u5b57\u7b26\u96c6\u3001Unicode \u5b57\u7b26\u96c6\u3001GB2312 \u5b57\u7b26\u96c6\u3001BIG5 \u5b57\u7b26\u96c6\u3001 GB18030 \u5b57\u7b26\u96c6\u7b49\u3002ASCII \u5b57\u7b26\u96c6\u4e2d\u4e00\u5171\u6709 128 \u4e2a\u5b57\u7b26\uff0c\u5305\u62ec\u4e86 94 \u4e2a\u53ef\u6253\u5370\u5b57\u7b26\uff08\u82f1\u6587\u5927\u5c0f\u5199\u5b57\u6bcd 52 \u4e2a\u3001\u963f\u62c9\u4f2f\u6570\u5b57 10 \u4e2a\u3001\u897f\u6587\u7b26\u53f7 32 \u4e2a\uff09\u548c 34 \u4e2a\u63a7\u5236\u7b26\u6216\u901a\u4fe1\u4e13\u7528\u5b57\u7b26\uff0c\u7801\u70b9\u503c\u8303\u56f4\u4e3a[0, 128)\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002Unicode \u5b57\u7b26\u96c6\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u96c6\u5408\uff0c\u73b0\u6709\u5bb9\u91cf\u5c06\u8fd1 2^21 \u4e2a\u5b57\u7b26\uff0c\u7801\u70b9\u503c\u8303\u56f4\u4e3a[0, 2^20+2^16)\u3002 ASCII\u5b57\u7b26\u7f16\u7801\u8868","title":"\u7f16\u7801\u5b57\u7b26\u96c6\uff08CCS:Coded Character Set\uff09"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#cefcharacter-encoding-form","text":"\u7f16\u7801\u5b57\u7b26\u96c6\u53ea\u5b9a\u4e49\u4e86\u5b57\u7b26\u4e0e\u7801\u70b9\u7684\u6620\u5c04 \uff0c\u5e76\u6ca1\u6709\u89c4\u5b9a\u7801\u70b9\u7684\u5b57\u8282\u8868\u793a\u65b9\u5f0f\u3002\u7531\u4e8e 1 \u4e2a\u5b57\u8282\u53ef\u4ee5\u8868\u793a 256 \u4e2a\u7f16\u53f7\uff0c\u8db3\u4ee5\u5bb9\u7eb3 ASCII \u5b57\u7b26\u96c6\uff0c\u56e0\u6b64 ASCII \u7f16\u7801\u7684\u89c4\u5219\u5f88\u7b80\u5355\uff1a\u76f4\u63a5\u5c06\u7801\u70b9\u503c\u7528 uint8 \u8868\u793a\u5373\u53ef \u3002\u5bf9\u4e8e Unicode \u5b57\u7b26\u96c6\uff0c\u5bb9\u7eb3 2^21 \u81f3\u5c11\u9700\u8981 3 \u5b57\u8282\u3002\u53ef\u4ee5\u91c7\u7528\u7c7b\u4f3c ASCII \u7684\u7f16\u7801\u89c4\u5219\uff1a \u76f4\u63a5\u5c06\u7f16\u7801\u70b9\u503c\u7528 uint32 \u8868\u793a\u5373\u53ef\uff0c\u8fd9\u6b63\u662f UTF-32 \u7f16\u7801 \u3002 \u8fd9\u79cd\u4e00\u5200\u5207\u7684\u5b9a\u957f\u7f16\u7801\u65b9\u5f0f\u867d\u7136\u7b80\u5355\u7c97\u66b4\uff0c\u5f0a\u7aef\u4e5f\u5f88\u660e\u663e\uff1a \u5bf9\u4e8e\u7eaf\u82f1\u6587\u6587\u672c\uff0cUTF-32 \u7f16\u7801\u7a7a\u95f4\u5360\u7528\u5c06\u662f ACSII \u7f16\u7801\u7684 4 \u500d \uff0c\u9020\u6210\u6781\u5927\u7684\u7a7a\u95f4\u6d6a\u8d39\uff0c\u51e0\u4e4e\u6ca1\u4ec0\u4e48\u4eba\u7528\u3002\u6709\u6ca1\u6709\u66f4\u4f18\u96c5\u7684\u89e3\u51b3\u65b9\u6848\uff1f\u5f53\u7136\uff0c\u8fd9\u5c31\u662f UTF-8 \u548c UTF-16\uff0c\u4e24\u79cd\u5f53\u524d\u6bd4\u8f83\u6d41\u884c\u7684 Unicode \u7f16\u7801\u65b9\u5f0f\u3002","title":"\u5b57\u7b26\u7f16\u7801\u8868\uff08CEF:Character Encoding Form\uff09"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#utf-8","text":"\u5386\u53f2\u7684\u7ecf\u9a8c\uff0c\u6210\u529f\u7684\u8bbe\u8ba1\u5f80\u5f80\u5177\u6709\u5305\u5bb9\u6027\u3002UTF-8 \u662f\u4e00\u4e2a\u5178\u578b\uff0c\u6f02\u4eae\u7684\u5b9e\u73b0\u4e86 \u5bf9 ASCII \u7801\u7684\u5411\u540e\u517c\u5bb9 \uff0c\u4ee5\u4fdd\u8bc1\u53ef\u4ee5\u88ab\u5927\u4f17\u63a5\u53d7\u3002UTF-8 \u662f\u76ee\u524d\u4e92\u8054\u7f51\u4e0a\u4f7f\u7528\u6700\u5e7f\u6cdb\u7684\u4e00\u79cd Unicode \u7f16\u7801\u65b9\u5f0f\uff0c\u5b83\u7684\u6700\u5927\u7279\u70b9\u5c31\u662f\u53ef\u53d8\u957f\uff0c\u968f\u7801\u70b9\u53d8\u6362\u957f\u5ea6\uff08\u4ece 1 \u5b57\u8282\u5230 4 \u5b57\u8282\uff09\u3002text \u5927\u9053\u81f3\u7b80\uff0c\u4f18\u96c5\u7684\u8bbe\u8ba1\u4e00\u5b9a\u662f\u7b80\u5355\u7684\uff0cUTF-8 \u7684\u7f16\u7801\u89c4\u5219\u4e5f\u8be0\u91ca\u4e86\u8fd9\u4e00\u70b9\u3002\u7f16\u7801\u89c4\u5219\u5982\u4e0b\uff1a <=127\uff08U+7F\uff09\u7684\u7801\u70b9\u91c7\u7528\u5355\u5b57\u8282\u7f16\u7801\uff0c\u4e0e ASCII \u4fdd\u6301\u4e00\u81f4\uff1b >127\uff08U+7F\uff09\u7684\u7801\u70b9\u91c7\u7528 N \u5b57\u8282\uff08N \u5c5e\u4e8e 2\uff0c3\uff0c4\uff09\u7f16\u7801\uff0c\u9996\u5b57\u8282\u7684\u524d N \u4f4d\u4e3a 1\uff0c\u7b2c N+1 \u4f4d\u4e3a 0\uff0c\u5269\u4f59 N-1 \u4e2a\u5b57\u8282\u7684\u524d\u4e24\u4f4d\u90fd\u4e3a 10\uff0c\u5269\u4e0b\u7684\u4e8c\u8fdb\u5236\u4f4d\u4f7f\u7528\u5b57\u7b26\u7684\u7801\u70b9\u6765\u586b\u5145\u3002 \u5176\u4e2d(U+7F)\u8868\u793a Unicode \u7684\u5341\u516d\u8fdb\u5236\u7801\u70b9\u503c\uff0c\u5373 127\u3002\u5982\u679c\u89c9\u5f97\u7f16\u7801\u89c4\u5219\u62bd\u8c61\uff0c\u7ed3\u5408\u4e0b\u8868\u66f4\u52a0\u6e05\u6670\uff1a Unicode \u7801\u70b9\u8303\u56f4 \u7801\u70b9\u6570\u91cf UTF-8 \u7f16\u7801\u683c\u5f0f 0000 0000 ~ 0000 007F 2^7 0xxxxxxx 0000 0080 ~ 0000 07FF 2^11 - 2^7 110xxxxx 10xxxxxx 0000 0800 ~ 0000 FFFF 2^16 - 2^11 1110xxxx 10xxxxxx 10xxxxxx 0001 0000 ~ 0010 FFFF 2^20 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u201c\u6c49\u201d\u7684 Unicode \u7801\u70b9\u662f U+6C49\uff08110 1100 0100 1001\uff09\uff0c\u6839\u636e\u4e0a\u8868\u53ef\u5f97\u9700\u8981 3 \u5b57\u8282\u7f16\u7801\uff0c\u586b\u5145\u7801\u70b9\u503c\u540e\u5f97\u5230 0xE6 0xB7 0x89\uff0811100110 10110001 10001001\uff09\u3002 \u6839\u636e\u7f16\u7801\u89c4\u5219\uff0c\u89e3\u7801\u4e5f\u5f88\u7b80\u5355\uff0c\u5173\u952e\u662f\u5982\u4f55\u5224\u65ad\u8fde\u7eed\u7684\u5b57\u8282\u6570\uff1a \u9996\u5b57\u8282\u8fde\u7eed 1 \u7684\u4e2a\u6570\u5373\u4e3a\u5b57\u8282\u6570 \u3002 \u9700\u8981\u4e00\u63d0\u7684\u662f\uff0c \u5728 MySQL \u4e2d\uff0cutf8 \u662f\u201c\u865a\u5047\u7684 utf8\u201d \uff0c\u6700\u5927\u53ea\u652f\u6301 3 \u4e2a\u5b57\u8282\uff0c\u5982\u679c\u5efa\u8868\u65f6\u9009\u62e9 CHARSET=utf8\uff0c\u4f1a\u5bfc\u81f4\u5f88\u591a\u7279\u6b8a\u5b57\u7b26\u548c emoji \u8868\u60c5\u90fd\u65e0\u6cd5\u63d2\u5165\u3002 utf8mb4 \u624d\u662f\u201c\u771f\u6b63\u7684 utf8\u201d \uff0cmb4 \u5373most bytes 4\u3002\u4e3a\u4ec0\u4e48 MySQL \u4e2d utf8 \u6700\u5927\u53ea\u652f\u6301 3 \u5b57\u8282\uff1f\u5386\u53f2\u539f\u56e0\uff0c\u5728 MySQL \u521a\u5f00\u53d1\u90a3\u4f1a\u513f\uff0cUnicode \u7a7a\u95f4\u53ea\u6709 2^16\uff0cUnicode \u59d4\u5458\u4f1a\u8fd8\u5728\u505a \u201c65535 \u4e2a\u5b57\u7b26\u8db3\u591f\u5168\u4e16\u754c\u7528\u4e86\u201d\u7684\u7f8e\u68a6\u5462\u3002","title":"UTF-8"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#utf-16","text":"\u5728 C/C++ \u4e2d\u9047\u5230\u7684wchar_t\u7c7b\u578b\u6216 Java \u4e2d\u7684char\u7c7b\u578b\uff0c\u8fd9\u4e9b\u7c7b\u578b\u5360\u5185\u5b58\u4e24\u4e2a\u5b57\u8282\uff0c\u56e0\u4e3a Unicode \u4e2d\u5e38\u7528\u7684\u5b57\u7b26\u90fd\u5904\u4e8e[U+0, U+FFFF]\uff08\u57fa\u672c\u5e73\u9762\uff09\u7684\u8303\u56f4\u4e4b\u5185\uff0c\u56e0\u6b64 \u4e24\u4e2a\u5b57\u8282\u51e0\u4e4e\u53ef\u4ee5\u8986\u76d6\u5927\u90e8\u5206\u7684\u5e38\u7528\u5b57\u7b26 \uff0c\u8fd9\u6b63\u662f UTF-16 \u7f16\u7801\u7684\u4e00\u4e2a\u524d\u63d0\u3002 \u76f8\u6bd4 UTF-32 \u4e0e UTF-8\uff0c UTF-16 \u7f16\u7801\u662f\u4e00\u4e2a\u6298\u4e2d\uff1a\u5c0f\u4e8e\uff08U+FFFF\uff092^16 \u7684\u7801\u70b9\uff08\u57fa\u672c\u5e73\u9762\uff09\u4f7f\u7528 2 \u5b57\u8282\u7f16\u7801\uff0c\u5927\u4e8e\uff08U+FFFF\uff092^16 \u7684\u7801\u70b9\uff08\u8f85\u52a9\u7801\u70b9\uff09\u4f7f\u7528 4 \u5b57\u8282\u7f16\u7801 \u3002\u7531\u4e8e\u57fa\u7840\u5e73\u9762\u7a7a\u95f4\u4f1a\u5360\u7528 2 \u5b57\u8282\u7684\u6240\u6709\u6bd4\u7279\u4f4d\uff0c\u65e0\u6cd5\u50cf UTF-8 \u90a3\u6837\u7559\u6709\u201c10\u201d\u524d\u7f00\u3002\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff1a \u5f53\u9047\u5230\u4e24\u4e2a\u8282\u65f6\uff0c\u5982\u4f55\u5224\u65ad\u662f 2 \u5b57\u8282\u7f16\u7801\u8fd8\u662f 4 \u5b57\u8282\u7f16\u7801\uff1f UTF-16 \u7684\u7f16\u7801\u7684\u53e6\u4e00\u4e2a\u524d\u63d0\uff1a \u5728\u57fa\u672c\u5e73\u9762\u5185\uff0c [U+D800, U+DFFF] \u662f\u4e00\u4e2a\u7a7a\u6bb5\uff08\u7a7a\u95f4\u5927\u5c0f\u4e3a 2^11\uff09 \uff0c\u8fd9\u4e9b\u7801\u70b9\u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u7b26\u3002\u56e0\u6b64\uff0c\u8fd9\u4e2a\u7a7a\u6bb5\u53ef\u4ee5\u7528\u6765\u6620\u5c04\u8f85\u52a9\u5e73\u9762\u7684\u5b57\u7b26\u3002 \u8f85\u52a9\u5e73\u9762\u5bb9\u91cf\u4e3a 2^20\uff0c\u81f3\u5c11\u9700\u8981 20 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0cUTF-16 \u5c06\u8fd9 20 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\u5206\u6210\u4e24\u534a\uff0c\u524d 10 \u4f4d\u6620\u5c04\u5728 U+D800 \u5230 U+DBFF\uff08\u7a7a\u95f4\u5927\u5c0f 2^10\uff09\uff0c\u79f0\u4e3a \u9ad8\u4f4d \uff08H\uff09\uff0c\u540e 10 \u4f4d\u6620\u5c04\u5728 U+DC00 \u5230 U+DFFF\uff08\u7a7a\u95f4\u5927\u5c0f 2^10\uff09\uff0c\u79f0\u4e3a \u4f4e\u4f4d \uff08L\uff09\u3002 \u6620\u5c04\u65b9\u5f0f\u91c7\u7528\u7ebf\u6027\u6620\u5c04\u3002Unicode3.0 \u4e2d\u7ed9\u51fa\u4e86\u8f85\u52a9\u5e73\u9762\u5b57\u7b26\u7684\u8f6c\u6362\u516c\u5f0f\uff1a H = Math.floor((c-0x10000) / 0x400) + 0xD800 L = (c - 0x10000) % 0x400 + 0xDC00 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u8f85\u52a9\u5e73\u9762\u7684\u7801\u70b9\uff0c\u88ab\u62c6\u6210\u4e24\u4e2a\u57fa\u672c\u5e73\u9762\u7684\u7a7a\u6bb5\u7801\u70b9\u8868\u793a\u3002\u5982\u679c\u53cc\u5b57\u8282\u7684\u503c\u5728[U+D800, U+DBFF]\u4e2d\uff0c\u5219\u8981\u548c\u540e\u7eed\u76f8\u90bb\u7684\u53cc\u5b57\u8282\u4e00\u540c\u89e3\u7801\u3002\u5177\u4f53\u7f16\u7801\u89c4\u5219\u4e3a\uff1a <= (U+FFFF)\u7684\u7801\u70b9\u91c7\u7528\u53cc\u5b57\u8282\u7f16\u7801\uff0c\u76f4\u63a5\u5c06\u7801\u70b9\u4f7f\u7528 uint16 \u8868\u793a\uff1b > (U+FFFF)\u7684\u7801\u70b9\u91c7\u7528 4 \u5b57\u8282\u7f16\u7801\uff0c\u4f5c\u5dee\u8ba1\u7b97\u7801\u70b9\u6ea2\u51fa\u503c\uff0c\u5c06\u6ea2\u51fa\u503c\u7528 uint20 \u8868\u793a\u540e\uff0c\u524d 10 \u4f4d\u6620\u5c04\u5230[U+D800, U+DBFF]\uff0c\u540e 10 \u4f4d\u6620\u5c04\u5230[U+DC00, U+DFFF]; \u5c0f\u7ed3: \u5b9a\u957f\u7f16\u7801\u7684\u4f18\u70b9\u662f\u8f6c\u6362\u89c4\u5219\u7b80\u5355\u76f4\u89c2\uff0c\u67e5\u627e\u6548\u7387\u9ad8\uff0c\u7f3a\u70b9\u662f\u7a7a\u95f4\u6d6a\u8d39\uff0c\u4ee5\u53ca\u4e0d\u53ef\u6269\u5c55\u3002\u5982\u679c Unicode \u5b57\u7b26\u96c6\u8fdb\u4e00\u6b65\u6269\u5145\uff0cUTF-16 \u548c UTF-32 \u90fd\u5c06\u4e0d\u53ef\u7528\uff0c\u800c UTF-8 \u5177\u6709\u66f4\u5f3a\u7684\u53ef\u6269\u5c55\u6027\u3002","title":"UTF-16"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#golang","text":"\u4e0d\u50cf C++\u3001Java \u7b49\u8bed\u8a00\u652f\u6301\u4e94\u82b1\u516b\u95e8\u7684\u5b57\u7b26\u7f16\u7801\uff0cGolang \u9075\u4ece\u201c\u5927\u9053\u81f3\u7b80\u201d\u7684\u539f\u5219\uff1a \u5168\u7528 UTF-8 \u3002\u6240\u4ee5 go \u7a0b\u5e8f\u5458\u518d\u4e5f\u4e0d\u7528\u62c5\u5fc3\u4e71\u7801\u95ee\u9898\uff0c\u751a\u81f3\u53ef\u4ee5\u7528\u6c49\u5b57\u548c\u8868\u60c5\u5305\u5199\u4ee3\u7801\uff0cstring \u4e0e\u5b57\u8282\u6570\u7ec4\u8f6c\u6362\u4e5f\u662f\u76f4\u63a5\u8f6c\u6362\u3002 func TestTemp(t *testing.T) { \u6765\u81ea\u6253\u5de5\u4eba\u7684\u95ee\u5019() } func \u6765\u81ea\u6253\u5de5\u4eba\u7684\u95ee\u5019() { \u95ee\u5019\u8bed := \"\u65e9\u5b89\uff0c\u6253\u5de5\u4eba\ud83d\ude01\" fmt.Println(\u95ee\u5019\u8bed) bytes := []byte(\u95ee\u5019\u8bed) fmt.Println(hex.EncodeToString(bytes)) } // \u6267\u884c\u7ed3\u679c--> \u65e9\u5b89\uff0c\u6253\u5de5\u4eba\ud83d\ude01 e697a9e5ae89efbc8ce68993e5b7a5e4babaf09f9881 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0cGolang \u4e2d string \u7684\u5e95\u5c42\u6a21\u578b\u5c31\u662f\u5b57\u8282\u6570\u7ec4\uff0c\u6240\u4ee5\u7c7b\u578b\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u65e0\u9700\u7f16\u89e3\u7801\u3002\u4e5f\u56e0\u6b64\uff0c Golang \u4e2d string \u7684\u5e95\u5c42\u6a21\u578b\u662f\u5b57\u8282\u6570\u7ec4\uff0c\u5176\u957f\u5ea6\u5e76\u975e\u5b57\u7b26\u6570\uff0c\u800c\u662f\u5bf9\u5e94\u5b57\u8282\u6570 \u3002\u5982\u679c\u8981\u53d6\u5b57\u7b26\u6570\uff0c\u9700\u8981\u5148\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5b57\u7b26\u6570\u7ec4\u3002 \u5b57\u7b26\u7c7b\u578b\uff08rune\uff09\u5b9e\u9645\u4e0a\u662f int32 \u7684\u522b\u540d\uff0c\u5373\u7528 UTF-32 \u7f16\u7801\u8868\u793a\u5b57\u7b26 \u3002 func TestTemp(t *testing.T) { fmt.Println(len(\"\u65e9\")) // 3 fmt.Println(len([]byte(\"\u65e9\"))) // 3 fmt.Println(len([]rune(\"\u65e9\")) // 1 } // rune is an alias for int32 and is equivalent to int32 in all ways. It is // used, by convention, to distinguish character values from integer values. type rune = int32 \u518d\u770b\u4e00\u4e0b go \u4e2d utf-8 \u7f16\u7801\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u9996\u5148\u83b7\u53d6\u5b57\u7b26\u7684\u7801\u70b9\u503c\uff0c\u7136\u540e\u6839\u636e\u8303\u56f4\u5224\u65ad\u5b57\u8282\u6570\uff0c\u6839\u636e\u5bf9\u5e94\u683c\u5f0f\u751f\u6210\u7f16\u7801\u503c\u3002\u5982\u679c\u662f\u65e0\u6548\u7684\u7801\u70b9\u503c\uff0c\u6216\u7801\u70b9\u503c\u4f4d\u4e8e\u7a7a\u6bb5\uff0c\u5219\u8fd4\u56deU+FFFD(\u5373 \ufffd)\u3002\u89e3\u7801\u8fc7\u7a0b\u4e0d\u518d\u8d58\u8ff0\u3002 // EncodeRune writes into p (which must be large enough) the UTF-8 encoding of the rune. // It returns the number of bytes written. func EncodeRune(p []byte, r rune) int { // Negative values are erroneous. Making it unsigned addresses the problem. switch i := uint32(r); { case i <= rune1Max: p[0] = byte(r) return 1 case i <= rune2Max: _ = p[1] // eliminate bounds checks p[0] = t2 | byte(r>>6) p[1] = tx | byte(r)&maskx return 2 case i > MaxRune, surrogateMin <= i && i <= surrogateMax: r = RuneError fallthrough case i <= rune3Max: _ = p[2] // eliminate bounds checks p[0] = t3 | byte(r>>12) p[1] = tx | byte(r>>6)&maskx p[2] = tx | byte(r)&maskx return 3 default: _ = p[3] // eliminate bounds checks p[0] = t4 | byte(r>>18) p[1] = tx | byte(r>>12)&maskx p[2] = tx | byte(r>>6)&maskx p[3] = tx | byte(r)&maskx return 4 } } const( t1 = 0b00000000 tx = 0b10000000 t2 = 0b11000000 t3 = 0b11100000 t4 = 0b11110000 t5 = 0b11111000 maskx = 0b00111111 mask2 = 0b00011111 mask3 = 0b00001111 mask4 = 0b00000111 rune1Max = 1<<7 - 1 rune2Max = 1<<11 - 1 rune3Max = 1<<16 - 1 RuneError = '\\uFFFD' // the \"error\" Rune or \"Unicode replacement character\" ) // Code points in the surrogate range are not valid for UTF-8. const ( surrogateMin = 0xD800 surrogateMax = 0xDFFF )","title":"Golang \u4e2d\u5b57\u7b26\u7f16\u7801"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_31","text":"\u5f15\u8a00\uff1aHTTP \u662f\u600e\u4e48\u4f20\u8f93\u4e8c\u8fdb\u5236\u6570\u636e\u7684\uff1f Step1\uff1a\u5b9a\u4e49\u5b57\u7b26\u96c6\uff1b Step2\uff1a\u5c06\u4e8c\u8fdb\u5236\u6570\u636e\u5206\u7ec4\uff1b Step3\uff1a\u5c06\u6bcf\u7ec4\u6620\u5c04\u4e3a\u5b57\u7b26\uff1b \u5b57\u7b26\u7f16\u7801\u662f\u300c\u6587\u672c\u300d\u53d8\u4e3a\u300c\u4e8c\u8fdb\u5236\u300d\u7684\u8fc7\u7a0b\uff0c\u90a3\u5982\u4f55\u5c06\u4efb\u610f\u300c\u4e8c\u8fdb\u5236\u300d\u53d8\u4e3a\u300c\u6587\u672c\u300d\uff1f\u7b54\u6848\u662f\u8fdb\u884c\u4e8c\u8fdb\u5236\u7f16\u7801\uff0c\u5e38\u89c1\u6709 Hex \u7f16\u7801\u4e0e Base64 \u7f16\u7801\u3002 \u663e\u7136 \u4e0d\u80fd\u6309\u5b57\u7b26\u7f16\u7801\u76f4\u63a5\u89e3\u7801 \uff0c\u56e0\u4e3a\u5b57\u7b26\u7f16\u7801\u7684\u7ed3\u679c\u4e8c\u8fdb\u5236\u662f\u6ee1\u8db3\u7f16\u7801\u89c4\u5f8b\u7684\uff0c\u800c\u975e\u300c\u4efb\u610f\u300d\u7684\uff0c\u975e\u6cd5\u683c\u5f0f\u8fdb\u884c\u5b57\u7b26\u89e3\u7801\u4f1a\u51fa\u73b0\u4e71\u7801\uff08\u6bd4\u5982\u5bf90b11xxxxxx\u8fdb\u884c UTF-8 \u89e3\u7801\uff09\u3002","title":"\u4e8c\u8fdb\u5236\u7f16\u7801"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#hex","text":"Hex \u7f16\u7801\u662f\u6700\u76f4\u89c2\u7684\u4e8c\u8fdb\u5236\u7f16\u7801\u65b9\u5f0f\uff0c\u6240\u89c1\u5373\u6240\u5f97\u3002\u4e0a\u6587\u4e2d\u7684\u5341\u516d\u8fdb\u5236\u8868\u793a\u5c31\u662f\u7528\u7684 Hex \u7f16\u7801\u3002\u89c4\u5219\u5982\u4e0b\uff1a Hex \u5b57\u7b26\u96c6\u4e3a0123456789abcdef\uff1b \u6bcf 4bit \u4e3a 1 \u7ec4(2^4=16)\uff1b \u6bcf\u7ec4\u6620\u5c04\u4e3a\u4e00\u4e2a Hex \u5b57\u7b26\uff1b \u8ba1\u7b97\u673a\u4e2d\u4e8c\u8fdb\u5236\u6570\u636e\u90fd\u662f\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u5b58\u50a8\u7684\uff0c1 \u4e2a\u5b57\u8282 8bit\uff0c\u4e0d\u4f1a\u51fa\u73b0\u65e0\u6cd5\u88ab 4 \u6574\u9664\u7684\u60c5\u51b5\u3002 \u6bcf\u4e2a\u5b57\u8282\u7f16\u7801\u4e3a 2 \u4e2a Hex \u5b57\u7b26\uff0c\u5373\u7f16\u7801\u540e\u7684\u5b57\u7b26\u6570\u662f\u539f\u59cb\u6570\u636e\u5b57\u8282\u6570\u7684 2 \u500d\u3002 \u5728 ASCII \u6216 UTF-8 \u7f16\u7801\u4e0b\uff0c\u5b58\u50a8 Hex \u7ed3\u679c\u5b57\u7b26\u4e32\u9700\u8981\u7684\u7a7a\u95f4\u662f\u539f\u59cb\u6570\u636e\u7684 2 \u500d\uff0c\u5b58\u50a8\u6548\u7387\u4e3a 50%\u3002","title":"Hex \u7f16\u7801"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#base64","text":"Base64 \u7f16\u7801\uff0c\u987e\u540d\u601d\u4e49\uff0c\u662f\u57fa\u4e8e 64 \u4e2a\u5b57\u7b26\u8fdb\u884c\u7f16\u7801\u3002\u89c4\u5219\u5982\u4e0b\uff1a Base64 \u5b57\u7b26\u96c6\uff08\u4ee5\u6807\u51c6 Base64 \u4e3a\u4f8b, 26 \u5927\u5199, 26 \u5c0f\u5199, 10 \u6570\u5b57, \u4ee5\u53ca+\u3001/\uff09\u4e3aABC...YZabc...yz012...89+/\uff1b \u6bcf 6bit \u4e3a\u4e00\u7ec4\uff082^6=64\uff09\uff0c\u5373 \u6bcf 3 \u4e2a\u5b57\u8282\u4e3a 4 \u7ec4 \uff1b \u6bcf\u7ec4\u6620\u5c04\u4e3a\u4e00\u4e2a Base64 \u5b57\u7b26\uff1b \u5982\u679c\u8981\u7f16\u7801\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u4e0d\u662f 3 \u7684\u500d\u6570\uff0c\u6700\u540e\u4f1a\u5269\u4e0b 1 \u4e2a\u6216 2 \u4e2a\u5b57\u8282\u600e\u4e48\u529e\uff1f \u6807\u51c6\u7f16\u7801(StdEncoding) \u4f1a\u5148\u5728\u672b\u5c3e\u7528 0x00 \u8865\u9f50\u518d\u5206\u7ec4\uff0c\u5e76\u5c06\u6700\u540e 2 \u4e2a\u6216 1 \u4e2a 6bit \u5206\u7ec4\uff08\u5168\u4e3a 0 \u586b\u5145\uff09\u6620\u5c04\u4e3a'='\uff0c\u8868\u793a\u8865\u9f50\u7684 0 \u5b57\u8282\u6570\u91cf\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4ee50x12 34 ab cd\u7f16\u7801\u4e3a\u6807\u51c6 base64 \u4e3a\u4f8b\uff1a \u4e0d\u8db3 3 \u7684\u500d\u6570\uff0c\u5148\u7528\u4e24\u4e2a 0 \u5b57\u8282\u8865\u9f50 -->0x12 34 ab cd 00 00 0x12 34 ab\u7f16\u7801\u4e3aEjSr 0xcd 00 00\u4e8c\u8fdb\u5236\u4e3a0b1100 1101 0000 0000 0000 0000\uff0c\u5206\u4e3a 4 \u7ec4\u540e\u4e3a110011 010000 000000 000000\uff0c\u7f16\u7801\u7ed3\u679c\u4e3azQ== \u6700\u7ec8\u7f16\u7801\u7ed3\u679c\u4e3aEjSrzQ== \u89e3\u7801\u8fc7\u7a0b\u6ce8\u610f\u672b\u5c3e\u5b57\u8282\u7684\u5904\u7406\u5373\u53ef\uff0c\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\u3002 EjSrzQ==-->0x12 34 ab cd 00 00-->0x12 34 ab cd \u6807\u51c6\u7f16\u7801\u4e2d\u7f16\u7801\u7ed3\u679c\u5b57\u7b26\u957f\u5ea6\u4e00\u5b9a\u662f 4 \u7684\u500d\u6570\uff0c\u4e14\u662f\u539f\u59cb\u6570\u636e\u5b57\u8282\u6570\u7684 4/3 \u500d \uff0c\u56e0\u4e3a\u4f1a\u5c06\u5b57\u8282\u6570\u636e\u8865\u9f50\u81f3 3 \u7684\u500d\u6570\uff0c\u6bcf 3 \u4e2a\u5b57\u8282\u7f16\u7801\u4e3a 4 \u4e2a\u5b57\u7b26\u3002 \u5728 ASCII \u6216 UTF-8 \u7f16\u7801\u4e0b\uff0c\u5b58\u50a8\u7ed3\u679c\u5b57\u7b26\u4e32\u9700\u8981\u7684\u7a7a\u95f4\u662f\u539f\u59cb\u6570\u636e\u7684 4/3 \u500d\uff0c\u5b58\u50a8\u6548\u7387\u4e3a 75% \u3002 \u6839\u636e\u5b57\u7b26\u96c6\u7684\u4e0d\u540c\uff0cBase64 \u7f16\u7801\u6709\u51e0\u4e2a\u53d8\u79cd\uff0c\u9664\u4e86\u6807\u51c6\u7f16\u7801\uff08StdEncoding\uff09\uff0c\u5e38\u89c1\u7684\u8fd8\u6709 URL \u7f16\u7801\uff08URLEncoding\uff09\u3001\u539f\u59cb\u6807\u51c6\u7f16\u7801\uff08RawStdEncoding\uff09\u4ee5\u53ca\u539f\u59cb URL \u7f16\u7801\uff08RawUrlEncoded\uff09\u3002 \u7b80\u5355\u6765\u8bf4\uff0cRaw \u6307\u7684\u662f\u65e0 Padding\uff0cURL \u6307\u7684\u662f\u7528-\u548c_\u53d6\u4ee3\u7f16\u7801\u7ed3\u679c\u4e2d\u5305\u542b\u7684 url \u5173\u952e\u5b57+\u548c/\u3002\u4e0d\u59a8\u53c2\u8003 Golang \u4e2dencoding/base64\u5305\u4e2d\u7684\u63cf\u8ff0\uff1a // StdEncoding is the standard base64 encoding, as defined in // RFC 4648. var StdEncoding = NewEncoding(*encodeStd*) // URLEncoding is the alternate base64 encoding defined in RFC 4648. // It is typically used in URLs and file names. var URLEncoding = NewEncoding(*encodeURL*) // RawStdEncoding is the standard raw, unpadded base64 encoding, // as defined in RFC 4648 section 3.2. // This is the same as StdEncoding but omits padding characters. var RawStdEncoding = StdEncoding.WithPadding(*NoPadding*) // RawURLEncoding is the unpadded alternate base64 encoding defined in RFC 4648. // It is typically used in URLs and file names. // This is the same as URLEncoding but omits padding characters. var RawURLEncoding = URLEncoding.WithPadding(*NoPadding*) \u4e0e\u6807\u51c6\u7f16\u7801\u4e0d\u540c\u7684\u662f\uff0c \u539f\u59cb\u7f16\u7801\u4e2d\uff0c\u5b57\u8282\u6570\u4e0d\u8db3 3 \u7684\u500d\u6570\u65f6\u4e0d\u4f1a\u8865\u9f50\u5b57\u8282\u6570 \uff0c\u91c7\u7528\u5982\u4e0b\u65b9\u6848\uff1a \u5982\u679c\u5269\u4f59 1 \u5b57\u8282\uff0c\u5219\u5de6\u79fb 4bit \u540e\u8f6c\u6362\u4e3a 2 \u5b57\u7b26\uff1b \u5982\u679c\u5269\u4f59 2 \u5b57\u8282\uff0c\u5219\u5de6\u79fb 2bit \u540e\u8f6c\u5316\u4e3a 3 \u5b57\u7b26\uff1b \u5373 \u539f\u59cb\u7f16\u7801\u65b9\u6848\u4e2d\uff0c\u7ed3\u679c\u5b57\u7b26\u4e32\u957f\u5ea6\u53ef\u4ee5\u4e0d\u662f 4 \u7684\u500d\u6570 \u3002 Hex \u7f16\u7801\u53ef\u4ee5\u770b\u6210\u201cBase16 \u7f16\u7801\u201d\u3002\u968f\u7740\u5b57\u7b26\u6570\u91cf\u7684\u589e\u52a0\uff0c\u5b58\u50a8\u6548\u7387\u4e5f\u968f\u4e4b\u589e\u52a0\u3002\u5982\u679c\u6709\u201cBase256\u201d\u7f16\u7801\uff0c\u5b58\u50a8\u6548\u7387\u5c82\u4e0d\u5c31 100%\u4e86\uff1f\u5f88\u9057\u61be\uff0c\u4e3b\u6d41\u5b57\u7b26\u7f16\u7801\u4e2d\uff0c\u5355\u5b57\u8282\u80fd\u8868\u793a\u7684\u53ef\u6253\u5370\u5b57\u7b26\u53ea\u6709 92 \u4e2a\u3002\u901a\u8fc7\u6269\u5145\u591a\u5b57\u8282\u5b57\u7b26\uff0c\u6216\u7528\u7ec4\u5408\u5b57\u7b26\u5b9e\u73b0 base256 \u610f\u4e49\u4e0d\u5927\u3002","title":"Base64 \u7f16\u7801"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#golang_1","text":"\u770b\u4e00\u4e0b Golang \u4e2d Base64 \u7f16\u7801\u7684\u5b9e\u73b0\u3002\u9996\u5148\u901a\u8fc7EncodedLen\u65b9\u6cd5\u786e\u5b9a\u7ed3\u679c\u957f\u5ea6\uff0c\u751f\u6210\u8f93\u51fabuf\uff0c\u7136\u540e\u901a\u8fc7Encode\u65b9\u6cd5\u5c06\u7f16\u7801\u7ed3\u679c\u586b\u5145\u5230buf\u5e76\u8fd4\u56de\u7ed3\u679c\u5b57\u7b26\u4e32\u3002 // EncodeToString returns the base64 encoding of src. func (enc *Encoding) EncodeToString(src []byte) string { buf := make([]byte, enc.EncodedLen(len(src))) enc.Encode(buf, src) return string(buf) } \u5982\u524d\u8ff0\uff0c\u6807\u51c6\u7f16\u7801\u548c\u539f\u59cb\u7f16\u7801\uff08\u65e0 Padding\uff09\u7684\u7ed3\u679c\u957f\u5ea6\u4e0d\u540c\uff1a\u5982\u679c\u9700\u8981 Padding\uff0c\u76f4\u63a5\u6839\u636e\u5b57\u8282\u6570\u8ba1\u7b97\u5373\u53ef\uff0c\u53cd\u4e4b\u5219\u9700\u8981\u6839\u636e bit \u6570\u8ba1\u7b97\u3002 // EncodedLen returns the length in bytes of the base64 encoding // of an input buffer of length n. func (enc *Encoding) EncodedLen(n int) int { if enc.padChar == *NoPadding* { return (n*8 + 5) / 6 // minimum # chars at 6 bits per char } return (n + 2) / 3 * 4 // minimum # 4-char quanta, 3 bytes each } Encode\u65b9\u6cd5\u5b9e\u73b0\u4e86\u7f16\u7801\u7ec6\u8282\u3002\u9996\u5148\u904d\u5386\u5b57\u8282\u6570\u7ec4\uff0c\u5c06\u6bcf 3 \u4e2a\u5b57\u8282\u7f16\u7801\u4e3a 4 \u4e2a\u5b57\u7b26\u3002\u6700\u540e\u5904\u7406\u5269\u4f59\u7684 1 \u6216 2 \u4e2a\u5b57\u8282\uff08\u5982\u6709\uff09\uff1a\u9996\u5148\u4f7f\u7528\u79fb\u4f4d\u8fd0\u7b97\u8fdb\u884c 0bit \u586b\u5145\uff0c\u7136\u540e\u8fdb\u884c\u5b57\u7b26\u8f6c\u6362\u3002\u5982\u524d\u8ff0\uff0c\u65e0 Padding \u65f6\uff0c\u5269\u4e0b 1 \u5b57\u8282\u5bf9\u5e94 2 \u5b57\u7b26\uff0c\u5269\u4e0b 2 \u5b57\u8282\u5bf9\u5e94 3 \u5b57\u7b26\uff0c\u5373\u81f3\u5c11\u4f1a\u6709 2 \u5b57\u7b26\u3002\u6700\u540e\u5728switch\u4ee3\u7801\u6bb5\u4e2d\uff0c\u6839\u636e\u5269\u4f59\u5b57\u8282\u6570\u586b\u5145\u7b2c 3 \u4e2a\u5b57\u7b26\u548c Padding \u5b57\u7b26\uff08\u5982\u6709\uff09\u5373\u53ef\u3002 func (enc *Encoding) Encode(dst, src []byte) { if len(src) == 0 { return } // enc is a pointer receiver, so the use of enc.encode within the hot // loop below means a nil check at every operation. Lift that nil check // outside of the loop to speed up the encoder. _ = enc.encode di, si := 0, 0 n := (len(src) / 3) * 3 for si < n { // Convert 3x 8bit source bytes into 4 bytes val := uint(src[si+0])<<16 | uint(src[si+1])<<8 | uint(src[si+2]) dst[di+0] = enc.encode[val>>18&0x3F] dst[di+1] = enc.encode[val>>12&0x3F] dst[di+2] = enc.encode[val>>6&0x3F] dst[di+3] = enc.encode[val&0x3F] si += 3 di += 4 } remain := len(src) - si if remain == 0 { return } // Add the remaining small block val := uint(src[si+0]) << 16 if remain == 2 { val |= uint(src[si+1]) << 8 } dst[di+0] = enc.encode[val>>18&0x3F] dst[di+1] = enc.encode[val>>12&0x3F] switch remain { case 2: dst[di+2] = enc.encode[val>>6&0x3F] if enc.padChar != *NoPadding* { dst[di+3] = byte(enc.padChar) } case 1: if enc.padChar != *NoPadding* { dst[di+2] = byte(enc.padChar) dst[di+3] = byte(enc.padChar) } } }","title":"Golang \u4e2d\u7684\u4e8c\u8fdb\u5236\u7f16\u7801"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_32","text":"\u5f15\u8a00\uff1a\u62ff\u5230\u4e24\u4e2a\u5b57\u8282\uff0c\u5982\u4f55\u89e3\u6790\u4e3a\u6574\u5f62\uff1f Step1\uff1a\u660e\u786e\u5b57\u8282\u9ad8\u4f4e\u4f4d\u987a\u5e8f Step2\uff1a\u6309\u9ad8\u4f4e\u4f4d\u6743\u91cd\u8ba1\u7b97\u7ed3\u679c \u4e0a\u8ff0\u4e8c\u8fdb\u5236\u7f16\u7801\u4e3b\u8981\u7528\u4e8e\u6587\u672c\u4f20\u8f93\uff0c\u80fd\u4e0d\u80fd\u4e0d\u8fdb\u884c\u7f16\u7801\uff0c\u76f4\u63a5\u4f20\u8f93\u4e8c\u8fdb\u5236\uff1f\u5f53\u7136\u53ef\u4ee5\uff0c\u57fa\u4e8e\u4e8c\u8fdb\u5236\u4f20\u8f93\u534f\u8bae\uff0c\u5982 TCP \u534f\u8bae\u3002\u90a3\u4e48\u4ec0\u4e48\u662f\u6587\u672c\u4f20\u8f93\uff0c\u4ec0\u4e48\u662f\u4e8c\u8fdb\u5236\u4f20\u8f93\uff1f\u7b80\u5355\u6765\u8bf4\uff0c\u6587\u672c\u4f20\u8f93\uff0c\u5185\u5bb9\u4e3a\u6587\u672c\uff0c\u81ea\u5e26\u63cf\u8ff0\u4fe1\u606f\uff08\u53c2\u6570\u540d\uff09\uff0c\u5982 HTTP \u4e2d\u7684\u5b57\u6bb5\u90fd\u4ee5 KV \u5f62\u5f0f\u5b58\u5728\u3002\u4e8c\u8fdb\u5236\u4f20\u8f93\uff0c\u5185\u5bb9\u4e3a\u4e8c\u8fdb\u5236\uff0c \u4ee5\u9884\u5148\u5b9a\u4e49\u597d\u7684\u683c\u5f0f\u62fc\u5728\u4e00\u8d77 \uff0c\u5982 TCP \u534f\u8bae\u62a5\u6587\u683c\u5f0f\u3002","title":"\u5b57\u8282\u5e8f"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_33","text":"\u804a\u5230\u4e8c\u8fdb\u5236\u4f20\u8f93\uff0c\u4e00\u4e2a\u907f\u4e0d\u5f00\u7684\u8bdd\u9898\u662f \u5b57\u8282\u5e8f \u3002\u4ec0\u4e48\u662f\u5b57\u8282\u5e8f\uff1f\u5047\u8bbe\u8bfb\u53d6\u5230\u4e00\u4e2a\u4e24\u5b57\u8282\u7684 uint16 0x04 0x00\uff0c\u5982\u679c\u4ece\u5de6\u5f80\u53f3\uff08\u4ece\u9ad8\u4f4d\u5f80\u4f4e\u4f4d\uff09\u89e3\u7801\uff0c\u5f97\u5230\u7684\u662f 1024\uff0c\u53cd\u8fc7\u6765\uff08\u4ece\u4f4e\u4f4d\u5f80\u9ad8\u4f4d\uff09\u89e3\u7801\u5219\u662f 4\uff0c\u8fd9\u5c31\u662f\u5b57\u8282\u5e8f\u3002 \u7b26\u5408\u4eba\u7c7b\u9605\u8bfb\u4e60\u60ef\u7684\uff08\u4ece\u9ad8\u4f4d\u5f80\u4f4e\u4f4d\uff09\u662f\u5927\u7aef\uff08BigEndian\uff09\uff0c\u53cd\u4e4b\u4e3a\u5c0f\u7aef\uff08LittleEndian\uff09\u3002 \u53e6\u4e00\u79cd\u5927\u5c0f\u7aef\u7684\u5b9a\u4e49\uff1aLittleEndian \u5c06\u4f4e\u5e8f\u5b57\u8282\u5b58\u50a8\u5728\u4f4e\u5730\u5740\uff0cBigEndian \u5c06\u9ad8\u5e8f\u5b57\u8282\u5b58\u50a8\u5728\u4f4e\u5730\u5740\u3002\u7406\u89e3\u8d77\u6765\u6709\u4e9b\u62bd\u8c61\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u81f4\u7684\u3002 \u4e3a\u4ec0\u4e48\u4f1a\u6709\u5c0f\u7aef\u5b57\u8282\u5e8f\uff0c\u7edf\u4e00\u90fd\u7528\u5927\u7aef\u4e0d\u597d\u4e48\uff1f \u8ba1\u7b97\u673a\u4e0d\u8fd9\u4e48\u60f3\uff0c\u56e0\u4e3a\u8ba1\u7b97\u673a\u4e2d\u8ba1\u7b97\u90fd\u662f\u4ece\u4f4e\u4f4d\u5f00\u59cb\u7684\uff0c\u7535\u8def\u5148\u5904\u7406\u4f4e\u4f4d\u5b57\u8282\u6548\u7387\u6bd4\u8f83\u9ad8\u3002\u4f46\u662f\uff0c\u4eba\u7c7b\u8fd8\u662f\u4e60\u60ef\u8bfb\u5199\u5927\u7aef\u5b57\u8282\u5e8f\u3002\u6240\u4ee5\uff0c \u9664\u4e86\u8ba1\u7b97\u673a\u7684\u5185\u90e8\u5904\u7406\uff0c\u5176\u4ed6\u7684\u573a\u5408\u51e0\u4e4e\u90fd\u662f\u5927\u7aef\u5b57\u8282\u5e8f\uff0c\u6bd4\u5982\u7f51\u7edc\u4f20\u8f93\u548c\u6587\u4ef6\u50a8\u5b58\u3002 \u90a3\u4ec0\u4e48\u65f6\u5019\u7a0b\u5e8f\u5458\u9700\u8981\u8fdb\u884c\u5b57\u8282\u5e8f\u5904\u7406\u5462\uff1f\u5f53\u591a\u5b57\u8282\u6574\u5f62\uff08uint16\uff0cuint32\uff0cuint64\uff09\u9700\u8981\u548c\u5b57\u8282\u6570\u7ec4\u4e92\u76f8\u8f6c\u6362\u65f6\u3002 \u5b57\u8282\u6570\u7ec4\u662f\u65e0\u5b57\u8282\u5e8f\u7684\uff0c\u5ba2\u6237\u7aef\u5199\u5165\u5565\uff0c\u670d\u52a1\u7aef\u5c31\u8bfb\u53d6\u5565\uff0c\u4e0d\u4f1a\u51fa\u73b0\u9006\u5e8f\uff0c\u5199\u5165\u548c\u8bfb\u53d6\u65e0\u9700\u8003\u8651\u5b57\u8282\u5e8f\uff0c\u8fd9\u70b9\u5927\u53ef\u653e\u5fc3 \u3002 \u53ea\u6709\u5f53\u591a\u5b57\u8282\u6574\u5f62\u548c\u5b57\u8282\u6570\u7ec4\u4e92\u8f6c\u65f6\u5fc5\u987b\u6307\u660e\u5b57\u8282\u5e8f\u3002","title":"\u5927\u7aef\u4e0e\u5c0f\u7aef"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#golang_2","text":"\u4ee5 uint16 \u4e0e\u5b57\u8282\u6570\u7ec4\u4e92\u8f6c\u4e3a\u4f8b\uff0c\u770b\u4e00\u4e0b Golang \u4e2d encoding/binary \u5305\u4e2d\u7684\u5b57\u8282\u5e8f\u5904\u7406\u4e0e\u5b9e\u73b0\u3002\u53ef\u89c1\u5b9e\u73b0\u5e76\u4e0d\u590d\u6742\uff0c\u6ce8\u610f\u5b57\u8282\u987a\u5e8f\u5373\u53ef\u3002 func TestEndian(t *testing.T) { bytes := make([]byte, 2) binary.LittleEndian.PutUint16(bytes, 1024) // \u5c0f\u7aef\u5199 --> 0x0004 binary.BigEndian.PutUint16(bytes, 1024) // \u5927\u7aef\u5199 --> 0x0400 binary.LittleEndian.Uint16(bytes) // \u5c0f\u7aef\u8bfb --> 4 binary.BigEndian.Uint16(bytes) // \u5927\u7aef\u8bfb --> 1024 } func (littleEndian) PutUint16(b []byte, v uint16) { _ = b[1] // early bounds check to guarantee safety of writes below b[0] = byte(v) b[1] = byte(v >> 8) } func (bigEndian) PutUint16(b []byte, v uint16) { _ = b[1] // early bounds check to guarantee safety of writes below b[0] = byte(v >> 8) b[1] = byte(v) } func (littleEndian) Uint16(b []byte) uint16 { _ = b[1] // bounds check hint to compiler; see golang.org/issue/14808 return uint16(b[0]) | uint16(b[1])<<8 } func (bigEndian) Uint16(b []byte) uint16 { _ = b[1] // bounds check hint to compiler; see golang.org/issue/14808 return uint16(b[1]) | uint16(b[0])<<8 }","title":"Golang \u4e2d\u7684\u5b57\u8282\u5e8f"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_34","text":"\u5728\u52a0\u89e3\u5bc6\u573a\u666f\u4e2d\uff0c\u901a\u5e38\u4f1a\u5bf9 \u660e\u6587 \u52a0\u5bc6\u5f97\u5230 \u5bc6\u6587 \uff0c\u5bf9\u5bc6\u6587\u89e3\u5bc6\u5f97\u5230\u660e\u6587\u3002\u6bd4\u5982\u5bf9\u5bc6\u7801\"123456\"\uff08\u660e\u6587\uff09\u8fdb\u884c \u5bf9\u79f0\u52a0\u5bc6 \uff08\u5982 SM4\uff09\u5f97\u5230\"G7EeTPnuvSU41T68qsuc_g\"\uff08\u5bc6\u6587\uff09\u3002 \u660e\u6587\u548c\u5bc6\u6587\u90fd\u662f\u7531\u53ef\u6253\u5370\u5b57\u7b26\u6784\u6210\u7684\u6587\u672c \uff0c\u901a\u5e38\u660e\u6587\u4eba\u7c7b\u53ef\u76f4\u63a5\u9605\u8bfb\u5176\u542b\u4e49\uff08\u4e0d\u8003\u8651\u4e8c\u6b21\u52a0\u5bc6\uff09\uff0c\u5bc6\u6587\u9700\u8981\u89e3\u5bc6\u540e\u624d\u80fd\u7406\u89e3\u542b\u4e49\u3002 \u90a3\u4e48\u4e0a\u8ff0\u660e\u6587\u53d8\u6210\u5bc6\u6587\uff0c\u671f\u95f4\u7ecf\u5386\u4e86\u54ea\u4e9b\u7f16\u7801\u8fc7\u7a0b\u5462\uff1f\u4ee5\u52a0\u5bc6\u4e3a\u4f8b\uff1a \u5c06\u660e\u6587\"123456\"\u8fdb\u884c\u5b57\u7b26\u89e3\u7801\uff08\u5982 UTF-8\uff09\uff0c\u5f97\u5230 \u660e\u6587\u5b57\u8282\u5e8f\u5217 0x31 32 33 34 35 36; \u5c06\u660e\u6587\u5b57\u8282\u5e8f\u5217\u8f93\u5165 SM4 \u52a0\u5bc6\u7b97\u6cd5\uff0c\u8f93\u51fa \u5bc6\u6587\u5b57\u8282\u5e8f\u5217 0x1b b1 1e 4c f9 ee bd 25 38 d5 3e bc aa cb 9c fe\uff1b \u5c06\u5bc6\u6587\u5b57\u8282\u5e8f\u5217\u8fdb\u884c\u4e8c\u8fdb\u5236\u7f16\u7801\uff08\u5982 RawURLBase64\uff09\uff0c\u5f97\u5230\u5bc6\u6587\"G7EeTPnuvSU41T68qsuc_g\"\uff1b \u540c\u7406\uff0c\u5c06\"G7EeTPnuvSU41T68qsuc_g\"\u89e3\u5bc6\u6210\"123456\"\u8fc7\u7a0b\u4e2d\uff0c\u5e94\u4e0e\u52a0\u5bc6\u8fc7\u7a0b\u7684\u7f16\u7801\u65b9\u5f0f\u5bf9\u5e94\uff1a\u5148\u8fdb\u884c RawRULBase64 \u89e3\u7801\uff0c\u518d\u89e3\u5bc6\uff0c\u6700\u540e\u518d\u8fdb\u884c UTF-8 \u7f16\u7801\u3002 \u52a0\u89e3\u5bc6\u7b97\u6cd5\u7684\u8f93\u5165\u8f93\u51fa\u90fd\u662f\u5b57\u8282\u5e8f\u5217\uff0c\u6240\u4ee5\u8981\u5c06\u660e\u6587\u3001\u5bc6\u6587\u4e0e\u5b57\u8282\u5e8f\u5217\u8fdb\u884c\u8f6c\u6362\u3002\u6709\u4e24\u70b9\u9700\u8981\u6ce8\u610f\uff1a \u660e\u6587\u89e3\u7801\u4e3a\u660e\u6587\u5b57\u8282\u5e8f\u5217\uff0c\u89e3\u7801\u65b9\u5f0f\u56e0\u573a\u666f\u800c\u5b9a \u3002\u5bf9\u4e8e\u591a\u6b21\u52a0\u5bc6\u573a\u666f\uff08\u5982\u5bf9\u201cG7EeTPnuvSU41T68qsuc_g\u201d\u518d\u6b21\u52a0\u5bc6\uff09\uff0c\u660e\u6587\u662f Base64 \u7f16\u7801\u5f97\u5230\u7684\uff0c\u5efa\u8bae\u91c7\u7528\u4e00\u81f4\u7684\u65b9\u5f0f\u89e3\u7801\u3002\u867d\u7136\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c UTF-8 \u89e3\u7801\uff0c\u4f46\u4f1a\u4f7f\u52a0\u89e3\u5bc6\u6d41\u7a0b\u8bbe\u8ba1\u53d8\u5f97\u590d\u6742\u3002 \u5bc6\u6587\u5b57\u8282\u5e8f\u5217\u7f16\u7801\u4e3a\u5bc6\u6587\uff0c\u5fc5\u987b\u7528\u4e8c\u8fdb\u5236\u7f16\u7801\uff0c\u4e0d\u80fd\u7528\u5b57\u7b26\u7f16\u7801 \u3002\u4f7f\u7528\u5b57\u7b26\u7f16\u7801\u4f1a\u4ea7\u751f\u4e71\u7801\uff08\u610f\u5473\u7740\u6570\u636e\u4e22\u5931\uff0c\u65e0\u6cd5\u9006\u5411\u89e3\u7801\u51fa\u539f\u59cb\u6570\u636e\uff09\u3002\u4e0a\u8ff0\u5bc6\u6587\u5e8f\u5217\u5bc6\u6587\u5e8f\u5217\u8fdb\u884c UTF-8 \u7f16\u7801\u7684\u7ed3\u679c\u662f \ufffdL\ufffd\ufffd\ufffd%8\ufffd>\ufffd\ufffd\u02dc\ufffd\u3002 \u5408\u89c4\u8981\u6c42\uff0c\u52a0\u89e3\u5bc6\u573a\u666f\u4e2d\u5e94\u4f7f\u7528 \u786c\u4ef6\u52a0\u5bc6\u673a \u3002\u901a\u5e38\u786c\u4ef6\u52a0\u5bc6\u673a\u63d0\u4f9b \u57fa\u4e8e TCP \u7684\u5b57\u8282\u6d41\u901a\u4fe1\u65b9\u5f0f \uff0c\u6bd4\u5982\u7ea6\u5b9a\u6bcf\u6b21\u901a\u4fe1\u6570\u636e\u4e2d\u7684\u524d 2 \u5b57\u8282\u4e3a\u6570\u636e\u957f\u5ea6\uff0c\u540e\u9762\u7684\u4e3a\u771f\u5b9e\u6570\u636e\u3002\u53d1\u9001\u65f6\uff0c\u9700\u8981\u5c06\u771f\u5b9e\u6570\u636e\u957f\u5ea6\u8f6c\u4e3a 2 \u5b57\u8282\u62fc\u5728\u524d\u9762\uff0c\u63a5\u6536\u65f6\uff0c\u9700\u8981\u5148\u8bfb\u53d6\u524d\u4e24\u5b57\u8282\u5f97\u5230\u771f\u5b9e\u6570\u636e\u957f\u5ea6 N\uff0c\u518d\u8bfb\u53d6 N \u5b57\u8282\u5f97\u5230\u771f\u5b9e\u6570\u636e\u3002\u5176\u4e2d \u957f\u5ea6\u4e0e\u5b57\u8282\u5e8f\u5217\u7684\u8f6c\u6362\u9700\u8981\u5173\u6ce8\u5b57\u8282\u5e8f\uff1a\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7684\u5b57\u8282\u5e8f\u5904\u7406\u4fdd\u6301\u4e00\u81f4 \u5373\u53ef\uff0c\u6bd4\u5982\u5168\u7528\u5927\u7aef\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u6570\u636e\u53d1\u9001\u7684\u793a\u4f8b\u4ee3\u7801\uff1a func (m *EncryptMachine) sendData(conn net.Conn, data []byte) error { // add length newData := m.addLength(data) // send new data return util.SocketWriteData(conn, newData) } func (m *EncryptMachine) addLength(data []byte) []byte { lengthBytes := make([]byte, 2) binary.BigEndian.PutUint16(lengthBytes, uint16(len(data))) return append(lengthBytes, data...) }","title":"\u5b9e\u6218\uff1a\u52a0\u89e3\u5bc6\u4e2d\u7684\u7f16\u7801\u4e0e\u5b57\u8282\u5e8f"},{"location":"golang/Go%E8%87%AA%E5%B8%A6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/#_35","text":"\u7f16\u7801\u867d\u7136\u57fa\u7840\uff0c\u4f46\u5374\u5bb9\u6613\u51fa\u9519\uff0c\u5207\u83ab\u773c\u9ad8\u624b\u4f4e\u3002\u5e0c\u671b\u672c\u6587\u80fd\u5e2e\u52a9\u5927\u5bb6\u8fdb\u4e00\u6b65\u4e86\u89e3\u5b57\u7b26\u7f16\u7801\u3001\u4e8c\u8fdb\u5236\u7f16\u7801\u4e0e\u5b57\u8282\u5e8f\uff0c\u907f\u514d\u8e29\u5751\u3002 \u672a\u5b8c\uff0c\u5f85\u7eed","title":"\u603b\u7ed3"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/","text":"1. Rob\uff0c\u4f60\u521b\u5efa\u4e86Google Go\u8fd9\u95e8\u8bed\u8a00\u3002\u4ec0\u4e48\u662fGoogle Go\uff1f\u80fd\u7b80\u660e\u627c\u8981\u7684\u4ecb\u7ecd\u4e00\u4e0bGoogle Go\u5417\uff1f \u6211\u8fd8\u662f\u8bb2\u8bb2\u4e3a\u4ec0\u4e48\u8981\u521b\u5efa\u8fd9\u95e8\u8bed\u8a00\u5427\uff0c\u548c\u4f60\u7684\u95ee\u9898\u7a0d\u6709\u4e9b\u4e0d\u540c\u3002\u6211\u5728Google\u505a\u4e86\u4e00\u4e2a\u6709\u5173\u7f16\u7a0b\u8bed\u8a00\u7684\u7cfb\u5217\u8bb2\u5ea7\uff0c\u5728Youtube\u4e0a\u6709\uff0c\u8c08\u53ca\u4e86\u6211\u65e9\u671f\u6240\u5199\u7684\u4e00\u4e2a\u8bed\u8a00\uff0c\u53eb\u505aNewsqueak\uff0c\u90a3\u662f\u516b\u5341\u5e74\u4ee3\u7684\u4e8b\uff0c\u975e\u5e38\u65e9\u3002\u5728\u505a\u8bb2\u5ea7\u671f\u95f4\uff0c\u6211\u5f00\u59cb\u601d\u8003\u4e3a\u4ec0\u4e48Newsqueak\u4e2d\u7684\u4e00\u4e9b\u60f3\u6cd5\u5728\u6211\u73b0\u5728\u4ee5C++\u4e3a\u4e3b\u7684\u5de5\u4f5c\u73af\u5883\u4e2d\u65e0\u6cd5\u4f7f\u7528\u3002\u800c\u4e14\u5728Google\u6211\u4eec\u7ecf\u5e38\u8981\u6784\u5efa\u975e\u5e38\u5927\u7684\u7a0b\u5e8f\uff0c\u5149\u6784\u5efa\u5c31\u8981\u82b1\u5f88\u591a\u65f6\u95f4\uff0c\u5bf9\u4f9d\u8d56\u7684\u7ba1\u7406\u4e5f\u6709\u95ee\u9898\uff0c\u7531\u4e8e\u94fe\u63a5\u4e86\u672c\u6765\u5e76\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u5305\u53d8\u5f97\u5f88\u5927\uff0c\u94fe\u63a5\u65f6\u95f4\u5f88\u957f\uff0c\u7f16\u8bd1\u65f6\u95f4\u4e5f\u5f88\u957f\uff0c\u800c\u4e14C++\u7684\u5de5\u4f5c\u65b9\u5f0f\u6709\u70b9\u53e4\u8001\uff0c\u5176\u5e95\u5c42\u5b9e\u9645\u4e0aC\uff0cC++\u5df2\u7ecf\u6709\u4e09\u5341\u5e74\u7684\u5386\u53f2\u4e86\uff0c\u800cC\u5219\u66f4\u662f\u6709\u56db\u5341\u5e74\u4e86\u3002\u7528\u73b0\u4eca\u7684\u786c\u4ef6\u505a\u8ba1\u7b97\uff0c\u6709\u5f88\u591a\u65b0\u4e1c\u897f\u9700\u8981\u8003\u8651\uff1a\u591a\u6838\u673a\u5668\u3001\u7f51\u7edc\u5316\u3001\u5206\u5e03\u5f0f\u7cfb\u7edf\u3001\u4e91\u8ba1\u7b97\u7b49\u7b49\u3002 2. Go\u7684\u4e3b\u8981\u7279\u70b9\u662f\u4ec0\u4e48\uff1f\u6709\u4ec0\u4e48\u91cd\u8981\u529f\u80fd\uff1f \u5bf9\u4e8e\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0c\u4ed6\u4eec\u5bf9Go\u7684\u7b2c\u4e00\u5370\u8c61\u662f\u8be5\u8bed\u8a00\u5c06\u5e76\u53d1\u6027\u4f5c\u4e3a\u8bed\u8a00\u539f\u8bed\uff0c\u8fd9\u5bf9\u6211\u4eec\u5904\u7406\u5206\u5e03\u5f0f\u8ba1\u7b97\u548c\u591a\u6838\u8fd9\u7c7b\u4e1c\u897f\u6765\u8bf4\u975e\u5e38\u597d\u3001\u4e5f\u975e\u5e38\u91cd\u8981\u3002\u6211\u731c\u8bb8\u591a\u4eba\u4f1a\u8ba4\u4e3aGo\u662f\u4e00\u95e8\u7b80\u5355\u65e0\u8da3\u7684\u8bed\u8a00\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u7684\u4e1c\u897f\uff0c\u56e0\u4e3a\u5176\u6784\u60f3\u770b\u8d77\u6765\u4e00\u76ee\u4e86\u7136\u3002\u4f46\u5b9e\u9645\u4e0a\u4e0d\u80fd\u7528\u7b2c\u4e00\u5370\u8c61\u6765\u5224\u65adGo\u3002\u5f88\u591a\u7528\u8fc7Go\u7684\u4eba\u4f1a\u53d1\u73b0\u5b83\u662f\u4e00\u95e8\u975e\u5e38\u9ad8\u4ea7\u800c\u4e14\u6709\u8868\u73b0\u529b\u7684\u8bed\u8a00\uff0c\u80fd\u591f\u89e3\u51b3\u6211\u4eec\u7f16\u5199\u8fd9\u95e8\u8bed\u8a00\u65f6\u671f\u671b\u5176\u6240\u80fd\u89e3\u51b3\u7684\u6240\u6709\u95ee\u9898\u3002 Go\u7684\u7f16\u8bd1\u8fc7\u7a0b\u5f88\u5feb\uff0c\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u5305\u53c8\u6bd4\u8f83\u5c0f\uff0c\u5b83\u7ba1\u7406\u4f9d\u8d56\u7684\u65b9\u5f0f\u5982\u540c\u7ba1\u7406\u8bed\u8a00\u672c\u8eab\u7684\u4e1c\u897f\u4e00\u6837\u3002\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u6545\u4e8b\u5462\uff0c\u4f46\u662f\u5728\u8fd9\u91cc\u5c31\u4e0d\u518d\u5c55\u5f00\u8ba8\u8bba\u4e86\uff0c\u4f46\u662f\u8fd9\u95e8\u8bed\u8a00\u7684\u5e76\u53d1\u6027\u4f7f\u5176\u80fd\u591f\u4ee5\u975e\u5e38\u7b80\u5355\u7684\u6a21\u5f0f\u6765\u5904\u7406\u975e\u5e38\u590d\u6742\u7684\u64cd\u4f5c\u53ca\u5206\u5e03\u5f0f\u8ba1\u7b97\u73af\u5883\u3002\u6211\u60f3\u6700\u91cd\u8981\u7684\u529f\u80fd\u53ef\u80fd\u5c31\u662f\u5e76\u53d1\u6027\u4e86\uff0c\u540e\u9762\u6211\u4eec\u53ef\u4ee5\u8c08\u8c08\u8be5\u8bed\u8a00\u7684\u7c7b\u578b\u7cfb\u7edf\uff0c\u5176\u4e0eC++\u3001Java\u8fd9\u7c7b\u4f20\u7edf\u9762\u5411\u5bf9\u8c61\u7c7b\u578b\u7cfb\u7edf\u7684\u5dee\u5f02\u5f88\u5927\u3002 3. \u5728\u6211\u4eec\u7ee7\u7eed\u8bdd\u9898\u4e4b\u524d\uff0c\u80fd\u5426\u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48Go\u7f16\u8bd1\u5668\u80fd\u8fbe\u5230\u90a3\u4e48\u5feb\u7684\u7f16\u8bd1\u901f\u5ea6\u5462\uff1f\u6709\u4ec0\u4e48\u6cd5\u5b9d\uff1f \u5b83\u4e4b\u6240\u4ee5\u5feb\uff0c\u6709\u4e24\u4e2a\u539f\u56e0\u3002\u9996\u5148Go\u6709\u4e24\u4e2a\u7f16\u8bd1\u5668\u2014\u2014\u4e24\u4e2a\u5355\u72ec\u7684\u5b9e\u73b0\u3002\u4e00\u4e2a\u662f\u6309\u7167Plan 9\uff08http://plan9.bell-labs.com/wiki/plan9/1/\uff09 \u98ce\u683c\u65b0\u5199\u7684\u7f16\u8bd1\u5668\uff0c\u5b83\u6709\u81ea\u5df1\u72ec\u7279\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u662f\u4e2a\u5168\u65b0\u7684\u7f16\u8bd1\u5668\u3002\u53e6\u4e00\u4e2a\u7f16\u8bd1\u5668\u53eb\u505aGCC Go\uff0c\u5b83\u62e5\u6709GCC\u524d\u7aef\uff0c\u8fd9\u4e2a\u7f16\u8bd1\u5668\u662fIan Taylor\u540e\u6765\u5199\u7684\u3002\u6240\u4ee5Go\u6709\u4e24\u4e2a\u7f16\u8bd1\u5668\uff0c\u901f\u5ea6\u5feb\u662f\u4e8c\u8005\u7684\u5171\u540c\u7279\u70b9\uff0c\u4f46\u662fPlan 9\u98ce\u683c\u7f16\u8bd1\u5668\u7684\u901f\u5ea6\u662fGCC Go\u76845\u500d\uff0c\u56e0\u4e3a\u5b83\u4ece\u5934\u5230\u811a\u90fd\u662f\u5168\u65b0\u7684\uff0c\u6ca1\u6709GCC\u540e\u7aef\uff0c\u90a3\u4e9b\u4e1c\u897f\u4f1a\u82b1\u5f88\u591a\u65f6\u95f4\u6765\u4ea7\u751f\u771f\u6b63\u7684\u597d\u4ee3\u7801\u3002 GCC Go\u7f16\u8bd1\u5668\u8981\u4ea7\u751f\u66f4\u597d\u7684\u4ee3\u7801\uff0c\u6240\u4ee5\u901f\u5ea6\u6162\u4e9b\u3002\u4e0d\u8fc7\u771f\u6b63\u91cd\u8981\u7684\u4e00\u70b9\u662fGo\u7f16\u8bd1\u5668\u7684\u4f9d\u8d56\u7ba1\u7406\u7279\u6027\u624d\u662f\u5176\u7f16\u8bd1\u901f\u5ea6\u5feb\u7684\u771f\u6b63\u539f\u56e0\u3002\u5982\u679c\u4f60\u53bb\u770b\u4e00\u4e2aC\u6216C++\u7a0b\u5e8f\uff0c\u4fbf\u4f1a\u53d1\u73b0\u5176\u5934\u6587\u4ef6\u63cf\u8ff0\u4e86\u51fd\u6570\u5e93\u3001\u5bf9\u8c61\u4ee3\u7801\u7b49\u7b49\u4e1c\u897f\u3002\u8bed\u8a00\u672c\u8eab\u5e76\u4e0d\u5f3a\u5236\u68c0\u67e5\u4f9d\u8d56\uff0c\u6bcf\u4e00\u6b21\u4f60\u90fd\u5fc5\u987b\u5206\u6790\u4ee3\u7801\u4ee5\u4fbf\u6e05\u695a\u4f60\u7684\u51fd\u6570\u662f\u600e\u6837\u7684\u3002\u5982\u679c\u4f60\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u60f3\u7528\u53e6\u4e00\u4e2a\u7c7b\u7684C++\u7a0b\u5e8f\uff0c\u4f60\u5fc5\u987b\u5148\u7f16\u8bd1\u5b83\u6240\u4f9d\u8d56\u7684\u7c7b\u548c\u5934\u6587\u4ef6\u7b49\u7b49\u7b49\u7b49\u3002\u5982\u679c\u4f60\u6240\u7f16\u8bd1\u7684C++\u7a0b\u5e8f\u6709\u8bb8\u591a\u7c7b\uff0c\u5e76\u4e14\u5185\u90e8\u76f8\u5173\uff0c\u4f60\u53ef\u80fd\u4f1a\u628a\u540c\u4e00\u4e2a\u5934\u6587\u4ef6\u7f16\u8bd1\u6570\u767e\u6b21\u751a\u81f3\u4e0a\u5343\u6b21\u3002\u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u7528\u9884\u7f16\u8bd1\u5934\u6587\u4ef6\u53ca\u5176\u4ed6\u6280\u5de7\u6765\u56de\u907f\u4e4b\u4e00\u95ee\u9898\u3002 \u4f46\u662f\u8bed\u8a00\u672c\u8eab\u5e76\u4e0d\u80fd\u5e2e\u4e0a\u4f60\u7684\u5fd9\uff0c\u5de5\u5177\u53ef\u80fd\u4f1a\u8ba9\u8fd9\u4e00\u95ee\u9898\u5f97\u5230\u6539\u5584\uff0c\u53ef\u662f\u6700\u5927\u7684\u95ee\u9898\u662f\u5e76\u6ca1\u6709\u4ec0\u4e48\u80fd\u4fdd\u8bc1\u4f60\u6240\u7f16\u8bd1\u7684\u4e1c\u897f\u5c31\u662f\u7a0b\u5e8f\u771f\u6b63\u9700\u8981\u7684\u4e1c\u897f\u3002\u6709\u53ef\u80fd\u4f60\u7684\u7a0b\u5e8f\u5305\u542b\u4e86\u4e00\u4e2a\u5e76\u4e0d\u771f\u6b63\u9700\u8981\u7684\u5934\u6587\u4ef6\uff0c\u4f46\u662f\u4f60\u6ca1\u529e\u6cd5\u77e5\u9053\uff0c\u56e0\u4e3a\u8bed\u8a00\u5e76\u6ca1\u6709\u5f3a\u5236\u68c0\u67e5\u3002\u800cGo\u6709\u4e00\u4e2a\u66f4\u52a0\u4e25\u683c\u7684\u4f9d\u8d56\u6a21\u578b\uff0c\u5b83\u6709\u4e00\u4e9b\u53eb\u505a\u5305\uff08packages\uff09\u7684\u4e1c\u897f\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u60f3\u8c61\u6210Java\u7c7b\u6587\u4ef6\u6216\u7740\u7c7b\u4f3c\u7684\u4e1c\u897f\uff0c\u6216\u8005\u51fd\u6570\u5e93\u4ec0\u4e48\u7684\uff0c\u867d\u7136\u4ed6\u4eec\u5e76\u4e0d\u76f8\u540c\uff0c\u4f46\u57fa\u672c\u601d\u8def\u662f\u4e00\u6837\u7684\u3002\u5173\u952e\u95ee\u9898\u662f\uff0c\u5982\u679c\u8fd9\u4e2a\u4e1c\u897f\u4f9d\u8d56\u90a3\u4e2a\u4e1c\u897f\uff0c\u800c\u90a3\u4e2a\u4e1c\u897f\u53c8\u4f9d\u8d56\u53e6\u5916\u4e00\u4e2a\u4e1c\u897f\uff0c\u6bd4\u5982A\u4f9d\u8d56\u4e8eB\uff0cB\u53c8\u4f9d\u8d56\u4e8eC\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u9996\u5148\u7f16\u8bd1\u6700\u5185\u5c42\u7684\u4f9d\u8d56\uff1a\u5373\uff0c\u4f60\u5148\u7f16\u8bd1C\uff0c\u7136\u540e\u7f16\u8bd1B\uff0c\u6700\u540e\u7f16\u8bd1A\u3002 \u4f46\u662f\u5982\u679cA\u4f9d\u8d56B\uff0c\u4f46\u662fA\u5e76\u4e0d\u76f4\u63a5\u4f9d\u8d56\u4e8eC\uff0c\u800c\u662f\u5b58\u5728\u4f9d\u8d56\u4f20\u9012\uff0c\u90a3\u4e48\u8be5\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u65f6\u6240\u6709B\u9700\u8981\u4eceC\u62ff\u5230\u7684\u4fe1\u606f\u90fd\u4f1a\u88ab\u653e\u5728B\u7684\u5bf9\u8c61\u4ee3\u7801\u91cc\u3002\u8fd9\u6837\uff0c\u5f53\u6211\u7f16\u8bd1A\u7684\u65f6\u5019\uff0c\u6211\u4e0d\u9700\u8981\u518d\u7ba1C\u4e86\u3002\u4e8e\u662f\u4e8b\u60c5\u5c31\u975e\u5e38\u7b80\u5355\u4e86\uff1a\u5728\u4f60\u7f16\u8bd1\u7a0b\u5e8f\u65f6\uff0c\u4f60\u53ea\u9700\u5c06\u7c7b\u578b\u4fe1\u606f\u6cbf\u7740\u4f9d\u8d56\u5173\u7cfb\u6811\u5411\u4e0a\u904d\u5386\u5373\u53ef\uff0c\u5982\u679c\u4f60\u5230\u8fbe\u6811\u7684\u9876\u7aef\uff0c\u5219\u53ea\u9700\u7f16\u8bd1\u7d27\u90bb\u7684\u4f9d\u8d56\uff0c\u800c\u4e0d\u7528\u7ba1\u5176\u5b83\u5c42\u7ea7\u7684\u4f9d\u8d56\u4e86\u3002\u5982\u679c\u4f60\u8981\u505a\u7b97\u672f\u8fd0\u7b97\uff0c\u4f60\u4f1a\u53d1\u73b0\u5728Objective-C\u6216C++\u6216\u7c7b\u4f3c\u7684\u8bed\u8a00\u91cc\uff0c\u867d\u7136\u53ea\u5305\u542b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5934\u6587\u4ef6\uff0c\u4f46\u7531\u4e8e\u4f9d\u8d56\u4f20\u9012\u7684\u5b58\u5728\uff0c\u4f60\u53ef\u80fd\u4f1a\u7f16\u8bd1\u6570\u5341\u4e07\u884c\u7a0b\u5e8f\u3002\u7136\u800c\u5728Go\u4e2d\uff0c\u4f60\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u91cc\u9762\u6216\u8bb8\u53ea\u670920\u884c\uff0c\u56e0\u4e3a\u5176\u4e2d\u53ea\u63cf\u8ff0\u4e86\u516c\u5171\u63a5\u53e3\u3002 \u5982\u679c\u4e00\u4e2a\u4f9d\u8d56\u94fe\u91cc\u53ea\u6709\u4e09\u4e2a\u6587\u4ef6\uff0cGo\u7684\u4f18\u52bf\u53ef\u80fd\u5e76\u4e0d\u660e\u663e\uff0c\u4f46\u662f\u5982\u679c\u4f60\u6709\u6210\u5343\u4e0a\u4e07\u4e2a\u6587\u4ef6\u7684\u65f6\u5019\uff0cGo\u7684\u901f\u5ea6\u4f18\u52bf\u4f1a\u6210\u6307\u6570\u589e\u957f\u3002\u6211\u4eec\u76f8\u4fe1\uff0c\u5982\u679c\u7528Go\u7684\u8bdd\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u5728\u6570\u79d2\u5185\u5c31\u7f16\u8bd1\u5b8c\u6570\u767e\u4e07\u884c\u4ee3\u7801\u3002\u7136\u800c\u5982\u679c\u662f\u7b49\u91cf\u7684\u7528C++\u7f16\u5199\u7684\u7a0b\u5e8f\uff0c\u7531\u4e8e\u4f9d\u8d56\u7ba1\u7406\u95ee\u9898\uff0c\u7f16\u8bd1\u7684\u5f00\u9500\u4f1a\u5927\u5f97\u591a\uff0c\u7f16\u8bd1\u7684\u65f6\u95f4\u5c06\u4f1a\u957f\u8fbe\u82e5\u5e72\u5206\u949f\u3002\u56e0\u6b64\uff0cGo\u901f\u5ea6\u5feb\u7684\u6839\u6e90\u4e3b\u8981\u5f52\u529f\u4e8e\u5bf9\u4f9d\u8d56\u7684\u7ba1\u7406\u3002 4. \u8ba9\u6211\u4eec\u5f00\u59cb\u804a\u804aGo\u91cc\u7684\u7c7b\u578b\u7cfb\u7edf\u5427\u3002Go\u91cc\u9762\u6709\u7ed3\u6784\uff08struct\uff09\u3001\u6709\u7c7b\u578b\uff08type\uff09,\u90a3\u4e48Go\u91cc\u7684\u7c7b\u578b\u662f\u4ec0\u4e48\uff1f Go\u91cc\u7684\u7c7b\u578b\u4e0e\u5176\u5b83\u4f20\u7edf\u7f16\u7a0b\u8bed\u8a00\u91cc\u7684\u7c7b\u578b\u662f\u7c7b\u4f3c\u7684\u3002Go\u91cc\u7684\u7c7b\u578b\u6709\u6574\u6570\u3001\u5b57\u7b26\u4e32\u3001struct\u6570\u636e\u7ed3\u6784\u3001\u4ee5\u53ca\u6570\u7ec4\uff08array\uff09\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u5207\u7247\uff08slice\uff09\uff0c\u5b83\u4eec\u7c7b\u4f3c\u4e8eC\u7684\u6570\u7ec4\uff0c\u4f46\u66f4\u6613\u4e8e\u4f7f\u7528\uff0c\u66f4\u52a0\u56fa\u5b9a\u4e00\u4e9b\u3002\u4f60\u53ef\u4ee5\u58f0\u660e\u672c\u5730\u7c7b\u578b\u5e76\u4e88\u4ee5\u547d\u540d\uff0c\u7136\u540e\u6309\u7167\u901a\u5e38\u7684\u65b9\u5f0f\u6765\u4f7f\u7528\u3002Go\u548c\u9762\u5411\u5bf9\u8c61\u65b9\u5f0f\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u7c7b\u578b\u53ea\u662f\u4e66\u5199\u6570\u636e\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u65b9\u6cd5\u5219\u662f\u4e00\u4e2a\u5b8c\u5168\u72ec\u7acb\u7684\u6982\u5ff5\u3002\u4f60\u53ef\u4ee5\u628a\u65b9\u6cd5\u653e\u5728struct\u4e0a\uff0c\u5728Go\u91cc\u6ca1\u6709\u7c7b\u7684\u6982\u5ff5\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u7ed3\u6784\uff0c\u4ee5\u53ca\u4e3a\u6b64\u7ed3\u6784\u58f0\u660e\u7684\u4e00\u4e9b\u65b9\u6cd5\u3002 \u7ed3\u6784\u4e0d\u80fd\u4e0e\u7c7b\u6df7\u4e3a\u4e00\u8c08\u3002\u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u628a\u65b9\u6cd5\u653e\u5728\u6570\u7ec4\u3001\u6574\u6570\u3001\u6d6e\u70b9\u6570\u6216\u5b57\u7b26\u4e32\u4e0a\uff0c\u5b9e\u9645\u4e0a\u4efb\u4f55\u7c7b\u578b\u90fd\u53ef\u4ee5\u6709\u65b9\u6cd5\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u65b9\u6cd5\u7684\u6982\u5ff5\u6bd4Java\u7684\u65b9\u6cd5\u66f4\u52a0\u6cdb\u5316\uff0c\u5728Java\u91cc\u65b9\u6cd5\u662f\u7c7b\u7684\u4e00\u90e8\u5206\uff0c\u4ec5\u6b64\u800c\u5df2\u3002\u4f8b\u5982\uff0c\u4f60\u7684\u6574\u6570\u4e0a\u53ef\u4ee5\u6709\u65b9\u6cd5\uff0c\u542c\u4e0a\u53bb\u4f3c\u4e4e\u6ca1\u4ec0\u4e48\u7528\uff0c\u4f46\u662f\u5982\u679c\u4f60\u60f3\u5728\u4e00\u4e2a\u53eb\u505aTuesday\u7684\u6574\u6570\u5e38\u91cf\u4e0a\u9644\u52a0\u4e0ato_string\u65b9\u6cd5\u6765\u6253\u5370\u51fa\u6f02\u4eae\u7684\u661f\u671f\u683c\u5f0f\uff1b\u6216\u8005\uff0c\u4f60\u60f3\u91cd\u65b0\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4f7f\u5176\u80fd\u591f\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u6253\u5370\u51fa\u81ea\u5df1\uff0c\u8fd9\u65f6\u4f60\u5c31\u4f1a\u610f\u8bc6\u5230\u5b83\u7684\u4f5c\u7528\u3002\u4e3a\u4ec0\u4e48\u975e\u8981\u628a\u6240\u6709\u65b9\u6cd5\u6216\u8005\u5176\u5b83\u597d\u4e1c\u897f\u90fd\u585e\u8fdb\u7c7b\u91cc\u9762\u5462\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u8ba9\u5b83\u4eec\u63d0\u4f9b\u66f4\u5e7f\u6cdb\u7684\u670d\u52a1\u5462\uff1f 5. \u90a3\u4e48\u8fd9\u4e9b\u65b9\u6cd5\u53ea\u662f\u5728\u5305\u5185\u90e8\u53ef\u89c1\u55bd\uff1f \u975e\u4e5f\uff0c\u5b9e\u9645\u4e0a\u662f\u8fd9\u6837\uff0cGo\u53ea\u5141\u8bb8\u4f60\u5728\u5305\u5185\u4e3a\u4f60\u6240\u5b9e\u73b0\u7684\u7c7b\u578b\u5b9a\u4e49\u65b9\u6cd5\u3002\u6211\u4e0d\u80fd\u5f15\u5165\u4f60\u7684\u7c7b\u578b\u7136\u540e\u76f4\u63a5\u628a\u6211\u7684\u65b9\u6cd5\u589e\u52a0\u8fdb\u53bb\uff0c\u4f46\u662f\u6211\u53ef\u4ee5\u4f7f\u7528\u533f\u540d\u5c5e\u6027\uff08anonymous field\uff09\u5c06\u5176\u5305\u88f9\u8d77\u6765\uff0c\u65b9\u6cd5\u53ef\u4e0d\u662f\u4f60\u60f3\u52a0\u5230\u54ea\u5c31\u52a0\u5230\u54ea\u7684\uff0c\u4f60\u8981\u5b9a\u4e49\u7c7b\u578b\uff0c\u7136\u540e\u624d\u80fd\u628a\u65b9\u6cd5\u653e\u5728\u4e0a\u9762\u3002\u6b63\u56e0\u4e3a\u5982\u6b64\uff0c\u6211\u4eec\u5728\u5305\u91cc\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u5c01\u88c5\u2014\u2014\u63a5\u53e3\uff08interface\uff09\uff0c\u4f46\u662f\u5982\u679c\u4f60\u4e0d\u660e\u767d\u8c01\u80fd\u4e3a\u5bf9\u8c61\u589e\u52a0\u65b9\u6cd5\u7684\u4e25\u683c\u754c\u9650\uff0c\u5c31\u5f88\u96be\u7406\u89e3\u63a5\u53e3\u3002 6. \u4f60\u7684\u610f\u601d\u662f\uff0c\u6211\u53ef\u4ee5\u7ed9int\u589e\u52a0\u65b9\u6cd5\uff0c\u4f46\u662f\u5fc5\u987b\u5148\u4f7f\u7528typedef\u5417\uff1f \u4f60\u8981typedef\u4e00\u4e2a\u6574\u6570\u7c7b\u578b\uff0c\u8d77\u4e2a\u540d\u5b57\uff0c\u5982\u679c\u4f60\u6b63\u5728\u5904\u7406\u4e00\u661f\u671f\u4e2d\u7684\u4e03\u5929\uff0c\u53ef\u4ee5\u5c31\u53eb\u5b83\u201cDay\u201d\uff0c\u4f60\u53ef\u4ee5\u7ed9\u4f60\u6240\u58f0\u660e\u7684\u7c7b\u578b\u2014\u2014Day\u589e\u52a0\u65b9\u6cd5\uff0c\u4f46\u662f\u4f60\u4e0d\u80fd\u76f4\u63a5\u7ed9int\u589e\u52a0\u65b9\u6cd5\u3002\u56e0\u4e3a\u6574\u6570\u7c7b\u578b\u4e0d\u662f\u4f60\u5b9a\u4e49\u7684\uff0c\u4e0d\u5728\u4f60\u7684\u5305\u91cc\uff0c\u5b83\u662f\u5f15\u5165\u7684\u4f46\u5e76\u4e0d\u5728\u4f60\u7684\u5305\u4e2d\u5b9a\u4e49\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u4f60\u4e0d\u80fd\u7ed9\u5176\u589e\u52a0\u65b9\u6cd5\u3002\u4f60\u4e0d\u80fd\u7ed9\u4e0d\u5728\u4f60\u5305\u91cc\u5b9a\u4e49\u7684\u7c7b\u578b\u589e\u52a0\u65b9\u6cd5\u3002 7. \u4f60\u4eec\u501f\u9274\u4e86Ruby\u91cc\u5f00\u653e\u7c7b\u7684\u601d\u60f3\uff0c\u8fd9\u5f88\u6709\u610f\u601d\u3002Ruby\u7684\u5f00\u653e\u7c7b\u5b9e\u9645\u4e0a\u662f\u53ef\u4ee5\u4fee\u6539\u7c7b\u5e76\u589e\u52a0\u65b0\u7684\u65b9\u6cd5\uff0c\u8fd9\u662f\u6709\u7834\u574f\u6027\u7684\uff0c\u4f46\u662f\u4f60\u4eec\u7684\u65b9\u6cd5\u672c\u8d28\u4e0a\u662f\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u521b\u5efa\u4e86\u65b0\u7684\u4e1c\u897f\u3002 \u5b83\u662f\u5b89\u5168\u53ef\u63a7\u7684\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u7406\u89e3\u3002\u6700\u521d\u6211\u4eec\u89c9\u5f97\u7c7b\u578b\u7528\u8d77\u6765\u53ef\u80fd\u4e0d\u592a\u65b9\u4fbf\uff0c\u6211\u4eec\u4e5f\u5e0c\u671b\u50cfRuby\u90a3\u6837\u6dfb\u52a0\u65b9\u6cd5\uff0c\u4f46\u8fd9\u53c8\u8ba9\u63a5\u53e3\u6bd4\u8f83\u96be\u4ee5\u7406\u89e3\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u628a\u65b9\u6cd5\u53d6\u51fa\u6765\uff0c\u800c\u4e0d\u662f\u653e\u8fdb\u53bb\uff0c\u6211\u4eec\u60f3\u4e0d\u51fa\u6709\u4ec0\u4e48\u66f4\u597d\u7684\u529e\u6cd5\uff0c\u4e8e\u662f\u9650\u5236\u65b9\u6cd5\u53ea\u80fd\u5728\u672c\u5730\u7c7b\u578b\u4e0a\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u601d\u8def\u786e\u5b9e\u5f88\u5bb9\u6613\u7406\u89e3\u548c\u4f7f\u7528\u3002 8. \u4f60\u8fd8\u63d0\u5230\u4e86typedef\uff0c\u662f\u53ebtypedef\u5427\uff1f \u5e94\u8be5\u53eb\u201ctype\u201d\uff0c\u4f60\u6240\u8bf4\u7684\u7c7b\u578b\u2014\u2014Day\u7684\u5b9a\u4e49\u65b9\u5f0f\u662f\u8fd9\u6837\u201ctype Day int\u201d\uff0c\u8fd9\u6837\u4f60\u5c31\u6709\u4e00\u4e2a\u65b0\u7c7b\u578b\u4e86\uff0c\u4f60\u53ef\u4ee5\u5728\u5176\u4e0a\u589e\u52a0\u65b9\u6cd5\u3001\u58f0\u660e\u53d8\u91cf\uff0c\u4f46\u8fd9\u4e2a\u7c7b\u578b\u4e0d\u540c\u4e8eint\uff0c\u4e0d\u50cfC\u90a3\u6837\uff0c\u53ea\u662f\u540c\u4e00\u4e8b\u7269\u53e6\u8d77\u4e86\u4e2a\u540d\u5b57\u800c\u5df2\uff0c\u5728Go\u91cc\u5b9e\u9645\u4e0a\u4f60\u521b\u5efa\u4e86\u4e00\u4e2a\u4e0d\u540c\u4e8eint\u7684\u65b0\u7c7b\u578b\uff0c\u53eb\u505a\u201cDay\u201d\uff0c\u5b83\u62e5\u6709int\u7684\u7ed3\u6784\u7279\u6027\uff0c\u4f46\u5374\u6709\u81ea\u5df1\u7684\u65b9\u6cd5\u96c6\u3002 9. Typedef\u5728C\u91cc\u662f\u4e00\u79cd\u9884\u5904\u7406\u6307\u4ee4\u5417\uff1f\u3010\u7f16\u8f91\u6ce8/\u514d\u8d23\u7533\u660e\uff1aC\u8bed\u8a00\u91cc\u7684typedef\u4e0e\u9884\u5904\u7406\u65e0\u5173\u3011 \u90a3\u5b9e\u9645\u4e0a\u5c31\u662f\u4e2a\u522b\u540d\uff0c\u4f46\u5728Go\u91cc\u4e0d\u662f\u522b\u540d\uff0c\u662f\u65b0\u7c7b\u578b\u3002 10. \u6211\u4eec\u4ece\u5e95\u5c42\u8bf4\u8d77\u5427\uff0c\u5728Go\u91cc\u6700\u5c0f\u7684\u7c7b\u578b\u662f\u4ec0\u4e48\uff1f \u6700\u5c0f\u7684\u7c7b\u578b\u5e94\u8be5\u662f\u5e03\u5c14\u7c7b\u578b\uff08bool\uff09\u5427\u3002bool\u3001int\u548cfloat\uff0c\u7136\u540e\u662fint32\u3001float64\u4e4b\u7c7b\u6709\u5c3a\u5bf8\u7684\u7c7b\u578b\u3001\u5b57\u7b26\u4e32\u3001\u590d\u6742\u7c7b\u578b\uff0c\u53ef\u80fd\u6709\u9057\u6f0f\uff0c\u4f46\u8fd9\u5c31\u662f\u57fa\u672c\u7c7b\u578b\u96c6\u4e86\u3002\u4f60\u53ef\u4ee5\u7531\u8fd9\u4e9b\u7c7b\u578b\u6784\u5efa\u7ed3\u6784\u3001\u6570\u7ec4\u3001\u6620\u5c04\uff08map\uff09\uff0c\u6620\u5c04\u5728Go\u91cc\u662f\u5185\u5efa\u7c7b\u578b\u4e0d\u662f\u51fd\u6570\u5e93\u3002\u7136\u540e\u6211\u60f3\u5c31\u8be5\u662f\u63a5\u53e3\u4e86\uff0c\u5230\u4e86\u63a5\u53e3\uff0c\u6709\u8da3\u7684\u4e1c\u897f\u624d\u771f\u6b63\u5f00\u59cb\u3002 11. \u4f46\u662f\uff0cint\u8fd9\u6837\u7684\u7c7b\u578b\u662f\u503c\u7c7b\u578b\u5bf9\u5427. Int\u662f\u503c\u7c7b\u578b\u3002\u5728Go\u91cc\uff0c\u4efb\u4f55\u7c7b\u578b\u90fd\u662f\u503c\u7c7b\u578b\uff0c\u548cC\u4e00\u6837\uff0c\u6240\u6709\u4e1c\u897f\u90fd\u662f\u6309\u503c\u8c03\u7528\uff0c\u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u7528\u6307\u9488\u3002\u5982\u679c\u4f60\u60f3\u5f15\u7528\u67d0\u6837\u4e1c\u897f\uff0c\u53ef\u4ee5\u83b7\u53d6\u5176\u5730\u5740\uff0c\u8fd9\u6837\u4f60\u5c31\u6709\u4e86\u4e00\u4e2a\u6307\u9488\u3002Go\u4e5f\u6709\u6307\u9488\u4f46\u662f\u6bd4C\u6307\u9488\u6709\u66f4\u591a\u9650\u5236\uff0cGo\u91cc\u7684\u6307\u9488\u662f\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u4ed6\u4eec\u662f\u7c7b\u578b\u5b89\u5168\u7684\uff0c\u6240\u4ee5\u4f60\u6ca1\u6cd5\u6b3a\u9a97\u7f16\u8bd1\u5668\uff0c\u800c\u4e14\u4e5f\u6ca1\u6709\u6307\u9488\u8fd0\u7b97\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u6709\u4e2a\u6307\u5411\u67d0\u7269\u7684\u6307\u9488\uff0c\u4f60\u65e0\u6cd5\u5c06\u5176\u79fb\u5230\u5bf9\u8c61\u5916\uff0c\u4e5f\u65e0\u6cd5\u6b3a\u9a97\u7f16\u8bd1\u5668\u3002 12. \u5b83\u4eec\u7c7b\u4f3cC++\u7684\u5f15\u7528\u5417\uff1f \u662f\u7684\uff0c\u5f88\u50cf\u5f15\u7528\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u6309\u7167\u4f60\u9884\u671f\u7684\u65b9\u5f0f\u5bf9\u5b83\u4eec\u8fdb\u884c\u5199\u64cd\u4f5c\u3002\u800c\u4e14\u4f60\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u5185\u90e8\uff08\u5982\u7f13\u51b2\u533a\uff09\u4e2d\u95f4\u7684\u67d0\u4e2a\u5730\u5740\uff0c\u5b83\u548cJava\u7684\u5f15\u7528\u4e0d\u4e00\u6837\u3002\u5728Java\u4e2d\uff0c\u4f60\u5fc5\u987b\u5728\u65c1\u8fb9\u5206\u914d\u4e00\u4e2a\u7f13\u51b2\u533a\uff0c\u8fd9\u662f\u989d\u5916\u7684\u5f00\u9500\u3002\u5728Go\u4e2d\uff0c\u4f60\u5b9e\u9645\u4e0a\u628a\u8be5\u5bf9\u8c61\u5206\u914d\u4e3a\u7ed3\u6784\u7684\u4e00\u90e8\u5206\uff0c\u5728\u540c\u4e00\u5185\u5b58\u5757\u4e2d\uff0c\u8fd9\u5bf9\u6027\u80fd\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002 13. \u5b83\u662f\u7ed3\u6784\u5185\u90e8\u4e00\u4e2a\u590d\u5408\u5bf9\u8c61\u3002 \u662f\u7684\uff0c\u5982\u679c\u5b83\u662f\u503c\u800c\u4e0d\u662f\u6307\u9488\u7684\u8bdd\uff0c\u662f\u8fd9\u6837\u3002\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u628a\u6307\u9488\u653e\u5728\u7ed3\u6784\u5185\u90e8\u548c\u5916\u90e8\uff0c\u4f46\u662f\u5982\u679c\u4f60\u6709struct A\uff0c\u800c\u628astruct B\u653e\u5728struct A\u91cc\uff0c\u90a3\u4e48stuct B\u5c31\u662f\u4e00\u5757\u5185\u5b58\uff0c\u800c\u4e0d\u50cfJava\u90a3\u6837\uff0c\u8fd9\u4e5f\u662fJava\u6027\u80fd\u95ee\u9898\u7684\u539f\u56e0\u4e4b\u4e00\u3002 14. \u4f60\u63d0\u5230\u8fc7\u63a5\u53e3\u6bd4\u8f83\u6709\u8da3\uff0c\u90a3\u4e0b\u9762\u54b1\u4eec\u5c31\u8c08\u8c08\u8fd9\u4e00\u90e8\u5206\u3002 Go\u91cc\u7684\u63a5\u53e3\u771f\u7684\u975e\u5e38\u3001\u975e\u5e38\u5730\u7b80\u5355\u3002\u63a5\u53e3\u6307\u660e\u4e86\u4e24\u4e2a\u4e0d\u540c\u4e8b\u60c5\uff1a\u5176\u4e00\uff0c\u5b83\u8868\u660e\u4e86\u7c7b\u578b\u7684\u6784\u601d\uff0c\u63a5\u53e3\u7c7b\u578b\u662f\u4e00\u4e2a\u7f57\u5217\u4e86\u4e00\u7ec4\u65b9\u6cd5\u7684\u7c7b\u578b\uff0c\u56e0\u6b64\u5982\u679c\u4f60\u8981\u62bd\u8c61\u4e00\u7ec4\u65b9\u6cd5\u6765\u5b9a\u4e49\u4e00\u4e2a\u884c\u4e3a\uff0c\u90a3\u4e48\u5c31\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\u5e76\u58f0\u660e\u8fd9\u4e9b\u65b9\u6cd5\u3002\u73b0\u5728\u4f60\u5c31\u6709\u4e86\u4e00\u4e2a\u7c7b\u578b\uff0c\u6211\u4eec\u5c31\u53eb\u5b83\u63a5\u53e3\u7c7b\u578b\u5427\uff0c\u90a3\u4e48\u4ece\u73b0\u5728\u8d77\u6240\u6709\u5b9e\u73b0\u4e86\u63a5\u53e3\u4e2d\u8fd9\u4e9b\u65b9\u6cd5\u7684\u7c7b\u578b\u2014\u2014\u5305\u62ec\u57fa\u672c\u7c7b\u578b\u3001\u7ed3\u6784\u3001\u6620\u5c04\uff08map\uff09\u6216\u5176\u5b83\u4ec0\u4e48\u7c7b\u578b\uff0c\u90fd\u9690\u542b\u7b26\u5408\u8be5\u63a5\u53e3\u8981\u6c42\u3002\u5176\u4e8c\uff0c\u4e5f\u662f\u771f\u6b63\u6709\u610f\u601d\u7684\u662f\uff0c\u548c\u5927\u591a\u6570\u8bed\u8a00\u4e2d\u7684\u63a5\u53e3\u4e0d\u540c\u7684\u662f\uff0cGo\u91cc\u9762\u6ca1\u6709\u201cimplements\u201d\u58f0\u660e\u3002 \u4f60\u65e0\u987b\u8bf4\u660e\u201c\u6211\u7684\u5bf9\u8c61\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\u201d\uff0c\u53ea\u8981\u4f60\u5b9a\u4e49\u4e86\u63a5\u53e3\u4e2d\u7684\u90a3\u4e9b\u65b9\u6cd5\uff0c\u5b83\u5c31\u81ea\u52a8\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\u3002\u6709\u4e9b\u4eba\u5bf9\u6b64\u611f\u5230\u975e\u5e38\u62c5\u5fe7\uff0c\u4f9d\u6211\u770b\u4ed6\u4eec\u60f3\u8bf4\u7684\u662f\uff1a\u77e5\u9053\u81ea\u5df1\u5b9e\u73b0\uff08Implement\uff09\u4e86\u4ec0\u4e48\u63a5\u53e3\u771f\u7684\u5f88\u91cd\u8981\u3002\u5982\u679c\u4f60\u771f\u60f3\u786e\u5b9a\u81ea\u5df1\u5b9e\u73b0\u4e86\u4ec0\u4e48\u63a5\u53e3\uff0c\u8fd8\u662f\u6709\u6280\u5de7\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u3002\u4f46\u662f\u6211\u4eec\u7684\u60f3\u6cd5\u4e0e\u6b64\u622a\u7136\u4e0d\u540c\uff0c\u6211\u4eec\u7684\u60f3\u6cd5\u662f\u4f60\u4e0d\u5e94\u8be5\u8003\u8651\u5b9e\u73b0\u4ec0\u4e48\u63a5\u53e3\uff0c\u800c\u662f\u5e94\u8be5\u5199\u4e0b\u8981\u505a\u7684\u4e1c\u897f\uff0c\u56e0\u4e3a\u4f60\u4e0d\u5fc5\u4e8b\u524d\u5c31\u51b3\u5b9a\u8981\u5b9e\u73b0\u54ea\u4e2a\u63a5\u53e3\u3002\u53ef\u80fd\u540e\u6765\u4f60\u5b9e\u9645\u4e0a\u5b9e\u73b0\u4e86\u67d0\u4e2a\u73b0\u5728\u4f60\u5c1a\u4e0d\u77e5\u6653\u7684\u63a5\u53e3\uff0c\u56e0\u4e3a\u8be5\u63a5\u53e3\u8fd8\u672a\u8bbe\u8ba1\u51fa\u6765\uff0c\u4f46\u662f\u73b0\u5728\u4f60\u5df2\u7ecf\u5728\u5b9e\u73b0\u5b83\u3002 \u540e\u6765\u4f60\u53ef\u80fd\u53d1\u73b0\u4e24\u4e2a\u539f\u5148\u672a\u66fe\u8003\u8651\u8fc7\u76f8\u5173\u6027\u7684\u7c7b\u5177\u6709\u4e86\u76f8\u5173\u6027\u2014\u2014\u6211\u53c8\u7528\u4e86\u7c7b\u8fd9\u4e2a\u8bcd\uff0c\u6211\u601d\u8003Java\u592a\u591a\u4e86\u2014\u2014\u4e24\u4e2astructs\u90fd\u5b9e\u73b0\u4e86\u4e00\u4e9b\u975e\u5e38\u6709\u7528\u7684\u5c0f\u5b50\u96c6\u4e2d\u7684\u76f8\u5173\u65b9\u6cd5\uff0c\u8fd9\u65f6\u6709\u529e\u6cd5\u80fd\u591f\u64cd\u4f5c\u8fd9\u4e24\u4e2astructs\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5c31\u663e\u5f97\u975e\u5e38\u6709\u7528\u4e86\u3002\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u63a5\u53e3\uff0c\u7136\u540e\u4ec0\u4e48\u90fd\u4e0d\u7528\u7ba1\u4e86\uff0c\u5373\u4f7f\u8fd9\u4e9b\u65b9\u6cd5\u662f\u5728\u522b\u4eba\u7684\u4ee3\u7801\u4e2d\u5b9e\u73b0\u7684\u4e5f\u6ca1\u95ee\u9898\uff0c\u867d\u7136\u4f60\u4e0d\u80fd\u7f16\u8f91\u8fd9\u4e9b\u4ee3\u7801\u3002\u5982\u679c\u662fJava\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5fc5\u987b\u8981\u58f0\u660e\u5b9e\u73b0\u4f60\u7684\u63a5\u53e3\uff0c\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\uff0c\u5b9e\u73b0\u662f\u5355\u5411\u7684\u3002\u7136\u800c\u5728Go\u91cc\uff0c\u5b9e\u73b0\u662f\u53cc\u5411\u7684\u3002\u5bf9\u4e8e\u63a5\u53e3\u5b9e\u9645\u4e0a\u6709\u4e0d\u5c11\u6f02\u4eae\u800c\u7b80\u5355\u7684\u4f8b\u5b50\u3002 \u6211\u6700\u7231\u7528\u7684\u4e00\u4e2a\u771f\u5b9e\u4f8b\u5b50\u5c31\u662f\u201cReader\u201d\uff0cGo\u91cc\u6709\u4e2a\u5305\u53eb\u505aIO\uff0cIO\u5305\u91cc\u6709\u4e2aReader\u63a5\u53e3\uff0c\u5b83\u53ea\u6709\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u662fread\u65b9\u6cd5\u7684\u6807\u51c6\u58f0\u660e\uff0c\u6bd4\u5982\u4ece\u64cd\u4f5c\u7cfb\u7edf\u6216\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5185\u5bb9\u3002\u8fd9\u4e2a\u63a5\u53e3\u53ef\u4ee5\u88ab\u7cfb\u7edf\u4e2d\u4efb\u4f55\u505aread\u7cfb\u7edf\u8c03\u7528\u7684\u4e1c\u897f\u6240\u5b9e\u73b0\u3002\u663e\u7136\uff0c\u6587\u4ef6\u3001\u7f51\u7edc\u3001\u7f13\u5b58\u3001\u89e3\u538b\u5668\u3001\u89e3\u5bc6\u673a\u3001\u7ba1\u9053\uff0c\u751a\u81f3\u4efb\u4f55\u60f3\u8bbf\u95ee\u6570\u636e\u7684\u4e1c\u897f\uff0c\u90fd\u53ef\u4ee5\u7ed9\u5176\u6570\u636e\u63d0\u4f9b\u4e00\u4e2aReader\u63a5\u53e3\uff0c\u7136\u540e\u60f3\u4ece\u8fd9\u4e9b\u8d44\u6e90\u4e2d\u8bfb\u53d6\u6570\u636e\u7684\u4efb\u4f55\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u901a\u8fc7\u8be5\u63a5\u53e3\u8fbe\u5230\u76ee\u7684\u3002\u8fd9\u6709\u70b9\u50cf\u6211\u4eec\u524d\u9762\u8bf4\u8fc7\u7684Plan 9\uff0c\u4f46\u662f\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u6cdb\u5316\u7684\u3002 \u4e0e\u4e4b\u7c7b\u4f3c\uff0cWriter\u4e5f\u662f\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0cWriter \u7531\u90a3\u4e9b\u8981\u505a\u5199\u64cd\u4f5c\u7684\u4eba\u6765\u5b9e\u73b0\u3002\u90a3\u4e48\u5728\u505a\u683c\u5f0f\u5316\u6253\u5370\u65f6\uff0cfpringf\u7684\u7b2c\u4e00\u53c2\u6570\u4e0d\u662ffile\u4e86\uff0c\u800c\u662fWriter\u3002\u8fd9\u6837\uff0cfprintf\u53ef\u4ee5\u7ed9\u4efb\u4f55\u5b9e\u73b0\u4e86write\u65b9\u6cd5\u7684\u4e1c\u897f\u505aIO\u683c\u5f0f\u5316\u7684\u5de5\u4f5c\u3002\u6709\u5f88\u591a\u5f88\u597d\u7684\u4f8b\u5b50\uff1a\u6bd4\u5982HTTP\uff0c\u5982\u679c\u4f60\u6b63\u5728\u5b9e\u73b0\u4e00\u4e2aHTTP\u670d\u52a1\u5668\uff0c\u4f60\u4ec5\u987b\u5bf9connection\u505afprintf\uff0c\u4fbf\u53ef\u5c06\u6570\u636e\u4f20\u9012\u5230\u5ba2\u6237\u7aef\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u82b1\u54e8\u7684\u64cd\u4f5c\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u538b\u7f29\u5668\u6765\u8fdb\u884c\u5199\u64cd\u4f5c\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6211\u6240\u63d0\u5230\u7684\u4efb\u4f55\u4e1c\u897f\u6765\u8fdb\u884c\u5199\u64cd\u4f5c\uff1a\u538b\u7f29\u5668\u3001\u52a0\u5bc6\u673a\u3001\u7f13\u5b58\u3001\u7f51\u7edc\u8fde\u63a5\u3001\u7ba1\u9053\u3001\u6587\u4ef6\uff0c\u4f60\u90fd\u53ef\u4ee5\u901a\u8fc7fprintf\u76f4\u63a5\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u5b9e\u73b0\u4e86write\u65b9\u6cd5\uff0c\u56e0\u6b64\uff0c\u9690\u542b\u90fd\u9690\u542b\u7b26\u5408writer\u63a5\u53e3\u8981\u6c42\u3002 15. \u67d0\u79cd\u7a0b\u5ea6\u4e0a\u6709\u70b9\u7c7b\u4f3c\u7ed3\u6784\u5316\u7c7b\u578b\u7cfb\u7edf\uff08structural typing) \u4e0d\u8003\u8651\u5b83\u7684\u884c\u4e3a\u7684\u8bdd\uff0c\u5b83\u662f\u6709\u70b9\u50cf\u7ed3\u6784\u5316\u7c7b\u578b\u7cfb\u7edf\u3002\u4e0d\u8fc7\u5b83\u662f\u5b8c\u5168\u62bd\u8c61\u7684\uff0c\u5176\u610f\u5e76\u4e0d\u5728\u62e5\u6709\u4ec0\u4e48\uff0c\u800c\u662f\u80fd\u505a\u4ec0\u4e48\u3002\u6709\u4e86\u7ed3\u6784\uff08struct\uff09\u4e4b\u540e\uff0c\u5c31\u89c4\u5b9a\u4e86\u5176\u5185\u5b58\u7684\u6837\u5b50\uff0c\u7136\u540e\u65b9\u6cd5\u8bf4\u660e\u4e86\u7ed3\u6784\u7684\u884c\u4e3a\uff0c\u518d\u4e4b\u540e\uff0c\u63a5\u53e3\u5219\u62bd\u8c61\u4e86\u8be5\u7ed3\u6784\u53ca\u5176\u5b83\u5b9e\u73b0\u4e86\u76f8\u540c\u65b9\u6cd5\u7684\u5176\u4ed6\u7ed3\u6784\u4e2d\u7684\u8fd9\u4e9b\u65b9\u6cd5\u3002\u8fd9\u662f\u4e00\u79cd\u9e2d\u5b50\u7c7b\u578b\u7cfb\u7edf\uff08duck typing\uff0c\u4e00\u79cd\u52a8\u6001\u7c7b\u578b\u7cfb\u7edf\uff0chttp://en.wikipedia.org/wiki/Duck_typing\uff09\uff0c\u800c\u4e0d\u662f\u7ed3\u6784\u5316\u7c7b\u578b\u7cfb\u7edf\u3002 16. \u4f60\u63d0\u5230\u8fc7\u7c7b\uff0c\u4f46Go\u6ca1\u6709\u7c7b\uff0c\u5bf9\u5427\u3002 Go\u6ca1\u6709\u7c7b\u3002 17. \u4f46\u662f\u6ca1\u6709\u7c7b\u600e\u4e48\u53bb\u5199\u4ee3\u7801\uff1f \u5e26\u65b9\u6cd5\u7684\u7ed3\u6784\uff08stuct\uff09\u5f88\u50cf\u662f\u7c7b\u3002\u6bd4\u8f83\u6709\u610f\u601d\u7684\u4e0d\u540c\u4e4b\u5904\u662f\uff0cGo\u6ca1\u6709\u5b50\u7c7b\u578b\u7ee7\u627f\uff0c\u4f60\u5fc5\u987b\u5b66\u4e60Go\u7684\u53e6\u7c7b\u5199\u6cd5\uff0cGo\u6709\u66f4\u5f3a\u5927\u3001\u66f4\u6709\u8868\u73b0\u529b\u7684\u4e1c\u897f\u3002\u4e0d\u8fc7Java\u7a0b\u5e8f\u5458\u548cC++\u7a0b\u5e8f\u5458\u521a\u5f00\u59cb\u4f7f\u7528Go\u7684\u65f6\u5019\u4f1a\u611f\u5230\u610f\u5916\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5b9e\u9645\u4e0a\u5728\u7528Go\u53bb\u7f16\u5199Java\u7a0b\u5e8f\u6216C++\u7a0b\u5e8f\uff0c\u8fd9\u6837\u7684\u4ee3\u7801\u5de5\u4f5c\u5f97\u5e76\u4e0d\u597d\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u4f46\u8fd9\u6837\u5c31\u7565\u663e\u7b28\u62d9\u4e86\u3002\u4f46\u662f\u5982\u679c\u4f60\u9000\u4e00\u6b65\uff0c\u5bf9\u81ea\u5df1\u8bf4\u201c\u6211\u8be5\u600e\u6837\u7528Go\u53bb\u7f16\u5199\u8fd9\u4e9b\u4e1c\u897f\u5462\uff1f\u201d\uff0c\u4f60\u4f1a\u53d1\u73b0\u6a21\u5f0f\u5176\u5b9e\u662f\u4e0d\u540c\u7684\uff0c\u7528Go\u4f60\u53ef\u4ee5\u7528\u66f4\u77ed\u7684\u7a0b\u5e8f\u6765\u8868\u8fbe\u7c7b\u4f3c\u7684\u60f3\u6cd5\uff0c\u56e0\u4e3a\u4f60\u4e0d\u9700\u8981\u5728\u6240\u6709\u5b50\u7c7b\u91cc\u91cd\u590d\u5b9e\u73b0\u884c\u4e3a\u3002\u8fd9\u662f\u4e2a\u975e\u5e38\u4e0d\u540c\u7684\u73af\u5883\uff0c\u6bd4\u4f60\u7b2c\u4e00\u773c\u770b\u4e0a\u53bb\u7684\u8fd8\u8981\u4e0d\u540c\u3002 18. \u5982\u679c\u6211\u6709\u4e00\u4e9b\u884c\u4e3a\u8981\u5b9e\u73b0\uff0c\u800c\u4e14\u60f3\u653e\u5728\u591a\u4e2astructs\u91cc\uff0c\u600e\u4e48\u53bb\u5171\u4eab\u8fd9\u4e9b\u884c\u4e3a\uff1f \u6709\u4e00\u4e2a\u53eb\u505a\u533f\u540d\u57df\u7684\u6982\u5ff5\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684\u5d4c\u5165\u3002\u5176\u5de5\u4f5c\u65b9\u5f0f\u662f\u8fd9\u6837\uff1a\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u7ed3\u6784\uff08struct\uff09\uff0c\u800c\u53c8\u6709\u4e00\u4e9b\u5176\u5b83\u4e1c\u897f\u5b9e\u73b0\u4e86\u4f60\u60f3\u8981\u7684\u884c\u4e3a\uff0c\u4f60\u53ef\u4ee5\u628a\u8fd9\u4e9b\u4e1c\u897f\u5d4c\u5165\u5230\u4f60\u7684\u7ed3\u6784\uff08struct\uff09\u91cc\uff0c\u8fd9\u6837\uff0c\u8fd9\u4e2a\u7ed3\u6784\uff08struct\uff09\u4e0d\u4ec5\u4ec5\u53ef\u4ee5\u83b7\u5f97\u88ab\u5d4c\u5165\u8005\u7684\u6570\u636e\u8fd8\u53ef\u4ee5\u83b7\u5f97\u5b83\u7684\u65b9\u6cd5\u3002\u5982\u679c\u4f60\u6709\u4e00\u4e9b\u516c\u5171\u884c\u4e3a\uff0c\u6bd4\u5982\u67d0\u4e9b\u7c7b\u578b\u91cc\u90fd\u6709\u4e00\u4e2aname\u65b9\u6cd5\uff0c\u5728Java\u91cc\u7684\u8bdd\u4f60\u4f1a\u8ba4\u4e3a\u8fd9\u662f\u4e00\u7ec4\u5b50\u7c7b\uff08\u7ee7\u627f\u6765\u7684\u65b9\u6cd5\uff09\uff0c\u5728Go\u91cc\uff0c\u4f60\u53ea\u9700\u62ff\u5230\u4e00\u4e2a\u62e5\u6709name\u65b9\u6cd5\u7684\u7c7b\u578b\uff0c\u653e\u5728\u6240\u6709\u4f60\u8981\u5b9e\u73b0\u8fd9\u4e2a\u65b9\u6cd5\u7684\u7ed3\u6784\u91cc\uff0c\u5b83\u4eec\u5c31\u4f1a\u81ea\u52a8\u83b7\u5f97name\u65b9\u6cd5\uff0c\u800c\u4e0d\u7528\u5728\u6bcf\u4e2a\u7ed3\u6784\u91cc\u90fd\u53bb\u5199\u8fd9\u4e2a\u65b9\u6cd5\u3002\u8fd9\u662f\u4e2a\u5f88\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u4f46\u6709\u4e0d\u5c11\u6709\u8da3\u7684\u7ed3\u6784\u5316\u7684\u4e1c\u897f\u4f7f\u7528\u5230\u4e86\u5d4c\u5165\u3002 \u800c\u4e14\uff0c\u4f60\u8fd8\u53ef\u4ee5\u628a\u591a\u4e2a\u4e1c\u897f\u5d4c\u5165\u5230\u4e00\u4e2a\u5355\u4e00\u7ed3\u6784\u4e2d\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u60f3\u8c61\u6210\u591a\u91cd\u7ee7\u627f\uff0c\u4e0d\u8fc7\u8fd9\u4f1a\u8ba9\u4eba\u66f4\u52a0\u8ff7\u60d1\uff0c\u5b9e\u9645\u5728Go\u91cc\u5b83\u662f\u5f88\u7b80\u5355\u7684\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u4f60\u53ef\u4ee5\u653e\u4efb\u4f55\u4e1c\u897f\u5728\u91cc\u9762\uff0c\u57fa\u672c\u4e0a\u8054\u5408\u4e86\u6240\u6709\u7684\u65b9\u6cd5\uff0c\u5bf9\u6bcf\u4e2a\u65b9\u6cd5\u96c6\u5408\uff0c\u4f60\u53ea\u9700\u5199\u4e00\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u62e5\u6709\u5176\u6240\u6709\u884c\u4e3a\u3002 19. \u5982\u679c\u6709\u591a\u91cd\u7ee7\u627f\u547d\u540d\u51b2\u7a81\u7684\u95ee\u9898\u8be5\u600e\u4e48\u529e\uff1f \u547d\u540d\u51b2\u7a81\u5b9e\u9645\u4e0a\u5e76\u6ca1\u4ec0\u4e48\uff0cGo\u662f\u9759\u6001\u5904\u7406\u8fd9\u4e00\u95ee\u9898\u7684\u3002\u5176\u89c4\u5219\u662f\uff0c\u5982\u679c\u6709\u591a\u5c42\u5d4c\u5165\uff0c\u5219\u6700\u9ad8\u5c42\u4f18\u5148\uff1b\u5982\u679c\u540c\u4e00\u5c42\u6709\u4e24\u4e2a\u76f8\u540c\u7684\u540d\u5b57\u6216\u76f8\u540c\u7684\u65b9\u6cd5\uff0cGo\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u9759\u6001\u9519\u8bef\u3002\u4f60\u4e0d\u7528\u81ea\u5df1\u68c0\u67e5\uff0c\u53ea\u9700\u7559\u610f\u8fd9\u4e2a\u9519\u8bef\u5373\u53ef\u3002\u547d\u540d\u51b2\u7a81\u662f\u9759\u6001\u68c0\u67e5\u7684\uff0c\u800c\u4e14\u89c4\u5219\u975e\u5e38\u7b80\u5355\uff0c\u5728\u5b9e\u8df5\u4e2d\u547d\u540d\u51b2\u7a81\u53d1\u751f\u7684\u4e5f\u5e76\u4e0d\u591a\u3002 20. \u56e0\u4e3a\u7cfb\u7edf\u4e2d\u6ca1\u6709\u6839\u5bf9\u8c61\u6216\u6839\u7c7b\uff0c\u5982\u679c\u6211\u60f3\u5f97\u5230\u4e00\u4e2a\u62e5\u6709\u4e0d\u540c\u7c7b\u578b\u7684\u7ed3\u6784\u7684\u5217\u8868\uff0c\u5e94\u8be5\u600e\u4e48\u529e\uff1f \u63a5\u53e3\u4e00\u4e2a\u6709\u610f\u601d\u7684\u5730\u65b9\u662f\u4ed6\u4eec\u53ea\u662f\u96c6\u5408\uff0c\u65b9\u6cd5\u7684\u96c6\u5408\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709\u7a7a\u96c6\u5408\uff0c\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u7684\u63a5\u53e3\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u7a7a\u63a5\u53e3\u3002\u7cfb\u7edf\u4e2d\u4efb\u4f55\u4e1c\u897f\u90fd\u7b26\u5408\u7a7a\u63a5\u53e3\u7684\u8981\u6c42\u3002\u7a7a\u63a5\u53e3\u6709\u70b9\u7c7b\u4f3c\u4e8eJava\u7684Object\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0cint\u3001float\u548cstring\u4e5f\u7b26\u5408\u7a7a\u63a5\u53e3\uff0cGo\u5e76\u4e0d\u9700\u8981\u4e00\u4e2a\u5b9e\u9645\u7684\u7c7b\uff0c\u56e0\u4e3aGo\u91cc\u6ca1\u6709\u7c7b\u7684\u6982\u5ff5\uff0c\u6240\u6709\u4e1c\u897f\u90fd\u662f\u7edf\u4e00\u7684\uff0c\u8fd9\u6709\u70b9\u50cfvoid \uff0c\u53ea\u4e0d\u8fc7void \u662f\u9488\u5bf9\u6307\u9488\u800c\u4e0d\u662f\u503c\u3002 \u4f46\u662f\u4e00\u4e2a\u7a7a\u63a5\u53e3\u503c\u53ef\u4ee5\u4ee3\u8868\u7cfb\u7edf\u4e2d\u7684\u4efb\u4f55\u4e1c\u897f\uff0c\u975e\u5e38\u5177\u6709\u666e\u904d\u6027\u3002\u6240\u4ee5\uff0c\u5982\u679c\u521b\u5efa\u4e00\u4e2a\u7a7a\u63a5\u53e3\u6570\u7ec4\uff0c\u5b9e\u9645\u4e0a\u4f60\u5c31\u6709\u4e86\u4e00\u4e2a\u591a\u6001\u6027\u5bb9\u5668\uff0c\u5982\u679c\u4f60\u60f3\u518d\u628a\u5b83\u62ff\u51fa\u6765\uff0cGo\u91cc\u9762\u6709\u7c7b\u578b\u5f00\u5173\uff0c\u4f60\u53ef\u4ee5\u5728\u89e3\u5305\u7684\u65f6\u5019\u8be2\u95ee\u91cc\u9762\u7684\u7c7b\u578b\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b89\u5168\u7684\u8fdb\u884c\u89e3\u5305\u64cd\u4f5c\u3002 21. Go\u91cc\u6709\u53eb\u505aGoroutines\u7684\u4e1c\u897f\uff0c\u5b83\u4eec\u548ccoroutines\u6709\u4ec0\u4e48\u533a\u522b\uff1f\u4e0d\u4e00\u6837\u4e48\uff1f Coroutines\u548cGoroutines\u662f\u4e0d\u540c\u7684\uff0c\u5b83\u4eec\u7684\u540d\u5b57\u53cd\u5e94\u4e86\u8fd9\u4e00\u70b9\u3002\u6211\u4eec\u7ed9\u5b83\u8d77\u4e86\u4e2a\u65b0\u540d\uff0c\u56e0\u4e3a\u6709\u592a\u591a\u672f\u8bed\u4e86\uff0c\u8fdb\u7a0b\uff08processes\uff09\u3001\u7ebf\u7a0b\uff08threads\uff09\u3001\u8f7b\u91cf\u7ea7\u7ebf\u7a0b\u3001\u5f26\uff08chords\uff09\uff0c\u8fd9\u4e9b\u4e1c\u897f\u6709\u6570\u4e0d\u6e05\u7684\u540d\u5b57\uff0c\u800cGoroutines\u4e5f\u5e76\u4e0d\u65b0\u9c9c\uff0c\u540c\u6837\u7684\u6982\u5ff5\u5728\u5176\u5b83\u7cfb\u7edf\u91cc\u5df2\u7ecf\u90fd\u6709\u4e86\u3002\u4f46\u662f\u8fd9\u4e2a\u6982\u5ff5\u548c\u524d\u9762\u90a3\u4e9b\u540d\u5b57\u6709\u5f88\u5927\u4e0d\u540c\uff0c\u6211\u5e0c\u671b\u6211\u4eec\u81ea\u5df1\u8d77\u540d\u5b57\u6765\u547d\u540d\u5b83\u4eec\u3002Goroutine\u80cc\u540e\u7684\u542b\u4e49\u662f\uff1a\u5b83\u662f\u4e00\u4e2acoroutine\uff0c\u4f46\u662f\u5b83\u5728\u963b\u585e\u4e4b\u540e\u4f1a\u8f6c\u79fb\u5230\u5176\u5b83coroutine\uff0c\u540c\u4e00\u7ebf\u7a0b\u4e0a\u7684\u5176\u5b83coroutines\u4e5f\u4f1a\u8f6c\u79fb\uff0c\u56e0\u6b64\u5b83\u4eec\u4e0d\u4f1a\u963b\u585e\u3002 \u56e0\u6b64\uff0c\u4ece\u6839\u672c\u4e0a\u8bb2Goroutines\u662fcoroutines\u7684\u4e00\u4e2a\u5206\u652f\uff0c\u53ef\u5728\u8db3\u591f\u591a\u7684\u64cd\u4f5c\u7ebf\u7a0b\u4e0a\u83b7\u5f97\u591a\u8def\u7279\u6027\uff0c\u4e0d\u4f1a\u6709Goroutines\u4f1a\u88ab\u5176\u4ed6coroutine\u963b\u585e\u3002\u5982\u679c\u5b83\u4eec\u53ea\u662f\u534f\u4f5c\u7684\u8bdd\uff0c\u53ea\u9700\u4e00\u4e2a\u7ebf\u7a0b\u5373\u53ef\u3002\u4f46\u662f\u5982\u679c\u6709\u5f88\u591aIO\u64cd\u4f5c\u7684\u8bdd\uff0c\u5c31\u4f1a\u6709\u8bb8\u591a\u64cd\u4f5c\u7cfb\u7edf\u52a8\u4f5c\uff0c\u4e5f\u5c31\u4f1a\u6709\u8bb8\u591a\u8bb8\u591a\u7ebf\u7a0b\u3002\u4f46\u662fGoroutines\u8fd8\u662f\u975e\u5e38\u5ec9\u4ef7\u7684\uff0c\u5b83\u4eec\u53ef\u4ee5\u6709\u6570\u5341\u4e07\u4e4b\u4f17\uff0c\u603b\u4f53\u8fd0\u884c\u826f\u597d\u5e76\u53ea\u5360\u7528\u5408\u7406\u6570\u91cf\u7684\u5185\u5b58\uff0c\u5b83\u4eec\u521b\u5efa\u8d77\u6765\u5f88\u5ec9\u4ef7\u5e76\u6709\u5783\u573e\u56de\u6536\u529f\u80fd\uff0c\u4e00\u5207\u90fd\u975e\u5e38\u7b80\u5355\u3002 22. \u4f60\u63d0\u5230\u4f60\u4eec\u4f7f\u7528\u4e86m:n\u7ebf\u7a0b\u6a21\u578b\uff0c\u5373m\u4e2acoroutines\u6620\u5c04\u5230n\u4e2a\u7ebf\u7a0b\u4e0a\uff1f \u5bf9\u7684\uff0c\u4f46\u662fcoroutines\u7684\u6570\u91cf\u548c\u7ebf\u7a0b\u7684\u6570\u91cf\u662f\u6309\u7167\u7a0b\u5e8f\u6240\u505a\u5de5\u4f5c\u52a8\u6001\u51b3\u5b9a\u7684\u3002 23. Goroutines\u6709\u7528\u4e8e\u901a\u4fe1\u7684\u901a\u9053\u5417\uff1f \u662f\u7684\uff0c\u4e00\u65e6\u6709\u4e24\u4e2a\u72ec\u7acb\u6267\u884c\u7684\u529f\u80fd\uff0c\u5982\u679cGoroutine\u4eec\u8981\u76f8\u4e92\u534f\u4f5c\u5b83\u4eec\u5c31\u9700\u8981\u76f8\u4e92\u5bf9\u8bdd\u3002\u6240\u4ee5\u5c31\u6709\u4e86\u901a\u9053\u8fd9\u4e2a\u6982\u5ff5\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7c7b\u578b\u6d88\u606f\u961f\u5217\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u6765\u53d1\u9001\u503c\uff0c\u5982\u679c\u4f60\u5728Goroutine\u4e2d\u6301\u6709\u901a\u9053\u7684\u4e00\u7aef\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u53d1\u9001\u7c7b\u578b\u503c\u7ed9\u53e6\u5916\u4e00\u7aef\uff0c\u90a3\u4e00\u7aef\u5219\u4f1a\u5f97\u5230\u60f3\u8981\u7684\u4e1c\u897f\u3002\u901a\u9053\u6709\u540c\u6b65\u548c\u5f02\u6b65\u4e4b\u5206\uff0c\u6211\u4eec\u5c3d\u53ef\u80fd\u4f7f\u7528\u540c\u6b65\u901a\u9053\uff0c\u56e0\u4e3a\u540c\u6b65\u901a\u9053\u7684\u6784\u601d\u975e\u5e38\u597d\uff0c\u4f60\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c\u540c\u6b65\u548c\u901a\u4fe1\uff0c\u6240\u6709\u4e1c\u897f\u8fd0\u884c\u8d77\u6765\u90fd\u6b65\u8c03\u4e00\u81f4\u3002 \u4f46\u662f\u6709\u65f6\u7531\u4e8e\u6548\u7387\u539f\u56e0\u6216\u8c03\u5ea6\u539f\u56e0\uff0c\u5bf9\u6d88\u606f\u8fdb\u884c\u7f13\u5b58\u4e5f\u662f\u6709\u610f\u4e49\u7684\u3002\u4f60\u53ef\u4ee5\u5411\u901a\u9053\u53d1\u9001\u6574\u578b\u6d88\u606f\u3001\u5b57\u7b26\u4e32\u3001\u7ed3\u6784\u3001\u6307\u5411\u7ed3\u6784\u7684\u6307\u9488\u7b49\u4efb\u4f55\u4e1c\u897f\uff0c\u975e\u5e38\u6709\u610f\u601d\u7684\u4e8b\uff0c\u4f60\u53ef\u4ee5\u5728\u901a\u9053\u4e0a\u53d1\u9001\u53e6\u4e00\u4e2a\u901a\u9053\u3002\u8fd9\u6837\uff0c\u6211\u5c31\u80fd\u591f\u628a\u4e0e\u4ed6\u4eba\u7684\u901a\u4fe1\u53d1\u9001\u7ed9\u4f60\uff0c\u8fd9\u662f\u975e\u5e38\u6709\u610f\u601d\u7684\u6982\u5ff5\u3002 24. \u4f60\u63d0\u5230\u4f60\u4eec\u6709\u7f13\u5b58\u7684\u540c\u6b65\u901a\u9053\u548c\u5f02\u6b65\u901a\u9053\u3002 \u4e0d\u5bf9\uff0c\u540c\u6b65\u662f\u6ca1\u6709\u7f13\u5b58\u7684\uff1b\u5f02\u6b65\u548c\u7f13\u5b58\u662f\u4e00\u4e2a\u610f\u601d\uff0c\u56e0\u4e3a\u6709\u4e86\u7f13\u5b58\uff0c\u6211\u624d\u80fd\u628a\u503c\u653e\u5728\u7f13\u5b58\u7684\u7a7a\u95f4\u91cc\u8fdb\u884c\u4fdd\u5b58\u3002\u4f46\u662f\u5982\u679c\u6ca1\u6709\u7f13\u5b58\uff0c\u6211\u5fc5\u987b\u7b49\u7740\u522b\u4eba\u628a\u503c\u62ff\u8d70\uff0c\u56e0\u6b64\u65e0\u7f13\u5b58\u548c\u540c\u6b65\u662f\u4e00\u4e2a\u610f\u601d\u3002 25. \u6bcf\u4e2aGoroutine\u5c31\u50cf\u662f\u4e00\u4e2a\u5c0f\u7684\u7ebf\u7a0b\uff0c\u53ef\u4ee5\u8fd9\u4e48\u7ed9\u8bfb\u8005\u89e3\u91ca\u5427\u3002 \u5bf9\uff0c\u4f46\u662f\u8f7b\u91cf\u7ea7\u7684\u3002 26. \u5b83\u4eec\u662f\u8f7b\u91cf\u7ea7\u7684\u3002\u4f46\u662f\u6bcf\u4e2a\u7ebf\u7a0b\u540c\u6837\u90fd\u9884\u5206\u914d\u6808\u7a7a\u95f4\uff0c\u56e0\u800c\u5b83\u4eec\u975e\u5e38\u8017\u8d39\u8d44\uff0cGoroutines\u662f\u600e\u4e48\u5904\u7406\u7684\u5462\uff1f \u6ca1\u9519\uff0cGoroutines\u5728\u88ab\u521b\u5efa\u7684\u65f6\u5019\uff0c\u53ea\u6709\u975e\u5e38\u5c0f\u7684\u4e00\u4e2a\u6808\u2014\u20144K\uff0c\u53ef\u80fd\u6709\u70b9\u5c0f\u5427\uff0c\u8fd9\u4e2a\u6808\u662f\u5728\u5806\u4e2d\u7684\uff0c\u5f53\u7136\uff0c\u4f60\u77e5\u9053\u5982\u679c\u5728C\u8bed\u8a00\u91cc\u6709\u8fd9\u4e48\u4e00\u4e2a\u5c0f\u6808\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u5f53\u4f60\u8c03\u7528\u51fd\u6570\u6216\u5206\u914d\u6570\u7ec4\u4e4b\u7c7b\u7684\u4e1c\u897f\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u9a6c\u4e0a\u6ea2\u51fa\u3002\u5728Go\u91cc\u5219\u4e0d\u4f1a\u53d1\u751f\u8fd9\u6837\u7684\u4e8b\u60c5\uff0c\u6bcf\u4e2a\u51fd\u6570\u7684\u5f00\u5934\u90fd\u4f1a\u6709\u82e5\u5e72\u6307\u4ee4\u4ee5\u68c0\u67e5\u6808\u6307\u9488\u662f\u5426\u8fbe\u5230\u5176\u754c\u9650\uff0c\u5982\u679c\u5230\u8fbe\u754c\u9650\uff0c\u5b83\u4f1a\u94fe\u63a5\u5230\u5176\u5b83\u5757\u4e0a\uff0c\u8fd9\u79cd\u8fde\u63a5\u7684\u6808\u53eb\u505a\u5206\u6bb5\u6808\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86\u6bd4\u521a\u5f00\u59cb\u542f\u52a8\u65f6\u66f4\u591a\u7684\u6808\uff0c\u4f60\u5c31\u6709\u4e86\u8fd9\u79cd\u6808\u5757\u94fe\u63a5\u4e32\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u5206\u6bb5\u6808\u3002 \u7531\u4e8e\u53ea\u6709\u82e5\u5e72\u6307\u4ee4\uff0c\u8fd9\u79cd\u673a\u5236\u975e\u5e38\u5ec9\u4ef7\u3002\u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u5206\u914d\u591a\u4e2a\u6808\u5757\uff0c\u4f46\u662fGo\u7f16\u8bd1\u5668\u66f4\u503e\u5411\u4e8e\u5c06\u5927\u7684\u4e1c\u897f\u79fb\u5230\u5806\u4e0a\uff0c\u56e0\u6b64\u5b9e\u9645\u4e0a\u5178\u578b\u7684\u7528\u6cd5\u662f\uff0c\u4f60\u5fc5\u987b\u5728\u8fbe\u52304K\u8fb9\u754c\u4e4b\u524d\u8c03\u7528\u51e0\u4e2a\u65b9\u6cd5\uff0c\u867d\u7136\u8fd9\u5e76\u4e0d\u7ecf\u5e38\u53d1\u751f\u3002\u4f46\u662f\u6709\u4e00\u70b9\u5f88\u91cd\u8981\uff1a\u5b83\u4eec\u521b\u5efa\u8d77\u6765\u5f88\u5ec9\u4ef7\uff0c\u56e0\u4e3a\u4ec5\u6709\u4e00\u6b21\u5185\u5b58\u5206\u914d\uff0c\u800c\u4e14\u5206\u914d\u7684\u5185\u5b58\u975e\u5e38\u5c0f\uff0c\u5728\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Goroutine\u65f6\u4f60\u4e0d\u7528\u6307\u660e\u6808\u7684\u5c3a\u5bf8\uff0c\u8fd9\u662f\u5f88\u597d\u7684\u4e00\u79cd\u62bd\u8c61\uff0c\u4f60\u6839\u672c\u4e0d\u7528\u62c5\u5fc3\u6808\u7684\u5927\u5c0f\u95ee\u9898\u3002\u4e4b\u540e\uff0c\u6808\u4f1a\u968f\u9700\u6c42\u589e\u957f\u6216\u7f29\u5c0f\uff0c\u4f60\u4e0d\u7528\u62c5\u5fc3\u9012\u5f52\u4f1a\u6709\u95ee\u9898\uff0c\u4f60\u4e5f\u4e0d\u7528\u62c5\u5fc3\u5927\u7684\u7f13\u5b58\u6216\u4efb\u4f55\u5bf9\u7a0b\u5e8f\u5458\u5b8c\u5168\u4e0d\u53ef\u89c1\u7684\u4e1c\u897f\uff0c\u4e00\u5207\u7531Go\u8bed\u8a00\u6765\u6253\u7406\uff0c\u8fd9\u662f\u4e00\u95e8\u8bed\u8a00\u7684\u6574\u4f53\u6784\u601d\u3002 27. \u6211\u4eec\u518d\u6765\u8c08\u8c08\u81ea\u52a8\u5316\u65b9\u9762\u7684\u4e1c\u897f\uff0c\u6700\u521d\u4f60\u4eec\u662f\u5c06Go\u8bed\u8a00\u4f5c\u4e3a\u7cfb\u7edf\u7ea7\u8bed\u8a00\u6765\u63a8\u5e7f\u7684\uff0c\u4e00\u4e2a\u6709\u8da3\u7684\u9009\u62e9\u662f\u4f7f\u7528\u4e86\u5783\u573e\u56de\u6536\u5668\uff0c\u4f46\u662f\u5b83\u901f\u5ea6\u5e76\u4e0d\u5feb\u6216\u8005\u8bf4\u6709\u5783\u573e\u56de\u6536\u95f4\u6b47\u95ee\u9898\uff0c\u5982\u679c\u7528\u5b83\u5199\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7684\u8bdd\uff0c\u8fd9\u662f\u975e\u5e38\u70e6\u4eba\u7684\u3002\u4f60\u4eec\u662f\u600e\u4e48\u770b\u8fd9\u4e00\u95ee\u9898\u7684\uff1f \u6211\u8ba4\u4e3a\u8fd9\u662f\u4e2a\u975e\u5e38\u96be\u7684\u95ee\u9898\uff0c\u6211\u4eec\u4e5f\u8fd8\u6ca1\u6709\u89e3\u51b3\u5b83\uff0c\u6211\u4eec\u7684\u5783\u573e\u56de\u6536\u5668\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u5ef6\u8fdf\u95ee\u9898\uff0c\u5783\u573e\u56de\u6536\u5668\u53ef\u80fd\u4f1a\u505c\u987f\uff0c\u4f46\u662f\u6211\u4eec\u7684\u770b\u6cd5\u662f\uff0c\u6211\u4eec\u76f8\u4fe1\u5c3d\u7ba1\u8fd9\u662f\u4e00\u4e2a\u7814\u7a76\u8bfe\u9898\uff0c\u867d\u8fd8\u6ca1\u89e3\u51b3\u4f46\u662f\u6211\u4eec\u6b63\u5728\u52aa\u529b\u3002\u5bf9\u4e8e\u73b0\u4eca\u7684\u5e76\u884c\u673a\uff0c\u901a\u8fc7\u628a\u673a\u5668\u5185\u6838\u7684\u4e00\u4e9b\u788e\u7247\u4e13\u95e8\u5206\u7ed9\u4f5c\u4e3a\u540e\u53f0\u4efb\u52a1\u7684\u5783\u573e\u56de\u6536\u6765\u8fdb\u884c\u5e76\u884c\u56de\u6536\u662f\u53ef\u884c\u7684\u3002\u5728\u8fd9\u4e00\u9886\u57df\u6709\u5f88\u591a\u5de5\u4f5c\u8981\u505a\uff0c\u4e5f\u53d6\u5f97\u4e86\u4e0d\u5c11\u6210\u529f\uff0c\u4f46\u8fd9\u662f\u4e2a\u5f88\u5fae\u5999\u7684\u95ee\u9898\uff0c\u6211\u4e0d\u8ba4\u4e3a\u800c\u6211\u4eec\u4f1a\u628a\u5ef6\u8fdf\u964d\u4e3a0\uff0c\u4f46\u662f\u6211\u76f8\u4fe1\u6211\u4eec\u53ef\u4ee5\u8ba9\u5ef6\u8fdf\u5c3d\u53ef\u80fd\u4f4e\uff0c\u8fd9\u6837\u5bf9\u4e8e\u7edd\u5927\u591a\u6570\u7cfb\u7edf\u8f6f\u4ef6\u6765\u8bb2\u5b83\u4e0d\u518d\u662f\u4e2a\u95ee\u9898\u3002\u6211\u4e0d\u4fdd\u8bc1\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u4e0d\u4f1a\u6709\u663e\u8457\u5ef6\u8fdf\uff0c\u4f46\u662f\u6211\u60f3\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u6210\u529f\uff0c\u800c\u4e14\u8fd9\u662fGo\u8bed\u8a00\u4e2d\u4e00\u4e2a\u6bd4\u8f83\u6d3b\u8dc3\u7684\u9886\u57df\u3002 28. \u6709\u6ca1\u6709\u65b9\u6cd5\u80fd\u591f\u907f\u514d\u76f4\u9762\u5783\u573e\u56de\u6536\u5668\uff0c\u6bd4\u5982\u7528\u4e00\u4e9b\u5927\u5bb9\u91cf\u7f13\u5b58\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6570\u636e\u6254\u8fdb\u53bb\u3002 Go\u53ef\u4ee5\u8ba9\u4f60\u6df1\u5165\u5230\u5185\u5b58\u5e03\u5c40\uff0c\u4f60\u53ef\u4ee5\u5206\u914d\u81ea\u5df1\u7684\u7a7a\u95f4\uff0c\u5982\u679c\u4f60\u60f3\u7684\u8bdd\u53ef\u4ee5\u81ea\u5df1\u505a\u5185\u5b58\u7ba1\u7406\u3002\u867d\u7136\u6ca1\u6709alloc\u548cfree\u65b9\u6cd5\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u7f13\u5b58\u628a\u4e1c\u897f\u653e\u8fdb\u53bb\uff0c\u8fd9\u4e2a\u6280\u5de7\u53ef\u7528\u6765\u907f\u514d\u4ea7\u751f\u4e0d\u5fc5\u8981\u7684\u5783\u573e\u3002\u5c31\u50cf\u5728C\u8bed\u8a00\u4e00\u6837\uff0c\u5728C\u91cc\uff0c\u5982\u679c\u4f60\u8001\u662fmalloc\u548cfree\uff0c\u4ee3\u4ef7\u5f88\u5927\u3002\u56e0\u6b64\uff0c\u4f60\u5206\u914d\u4e00\u4e2a\u5bf9\u8c61\u6570\u7ec4\u5e76\u628a\u5b83\u4eec\u94fe\u63a5\u5728\u4e00\u8d77\uff0c\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u7ba1\u7406\u4f60\u81ea\u5df1\u7684\u7a7a\u95f4\uff0c\u800c\u4e14\u8fd8\u4e0d\u7528malloc\u548cfree\uff0c\u90a3\u4e48\u901f\u5ea6\u4f1a\u5f88\u5feb\u3002\u4f60\u53ef\u4ee5\u505a\u4e0eGo\u6240\u505a\u76f8\u540c\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3aGo\u8d4b\u4e88\u4f60\u4e0e\u5e95\u5c42\u4e8b\u7269\u5b89\u5168\u6253\u4ea4\u9053\u7684\u80fd\u529b\uff0c\u56e0\u6b64\u4e0d\u7528\u6b3a\u9a97\u7c7b\u578b\u7cfb\u7edf\u6765\u8fbe\u5230\u76ee\u7684\uff0c\u4f60\u5b9e\u9645\u4e0a\u53ef\u4ee5\u81ea\u5df1\u6765\u505a\u3002 \u524d\u9762\u6211\u8868\u8fbe\u4e86\u8fd9\u6837\u7684\u89c2\u70b9\uff0c\u5728Java\u91cc\uff0c\u65e0\u8bba\u4f55\u65f6\u4f60\u5728\u7ed3\u6784\u91cc\u5d4c\u5165\u5176\u5b83\u4e1c\u897f\uff0c\u90fd\u662f\u901a\u8fc7\u6307\u9488\u6765\u5b9e\u73b0\u7684\uff0c\u4f46\u5728Go\u91cc\u4f60\u53ef\u4ee5\u628a\u5b83\u653e\u5728\u4e00\u4e2a\u5355\u4e00\u7ed3\u6784\u4e2d\u3002\u56e0\u6b64\u5982\u679c\u4f60\u6709\u4e00\u4e9b\u9700\u8981\u82e5\u5e72\u7f13\u5b58\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f60\u53ef\u4ee5\u628a\u7f13\u5b58\u653e\u5728\u7ed3\u6784\u7684\u5185\u5b58\u91cc\uff0c\u8fd9\u4e0d\u4ec5\u610f\u5473\u7740\u9ad8\u6548\uff08\u56e0\u4e3a\u4f60\u4e0d\u7528\u95f4\u63a5\u5f97\u5230\u7f13\u5b58\uff09\uff0c\u800c\u4e14\u8fd8\u610f\u5473\u7740\u5355\u4e00\u7ed3\u6784\u53ef\u4ee5\u5728\u4e00\u6b65\u4e4b\u5185\u8fdb\u884c\u5185\u5b58\u5206\u914d\u4e0e\u5783\u573e\u56de\u6536\u3002\u8fd9\u6837\u5f00\u9500\u5c31\u4f1a\u51cf\u5c11\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u8003\u8651\u4e00\u4e0b\u5783\u573e\u56de\u6536\u7684\u5b9e\u9645\u60c5\u51b5\uff0c\u5f53\u4f60\u6b63\u5728\u8bbe\u8ba1\u6027\u80fd\u8981\u6c42\u4e0d\u9ad8\u7684\u4e1c\u897f\u65f6\uff0c\u4f60\u4e0d\u5e94\u8be5\u603b\u662f\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u5982\u679c\u662f\u9ad8\u6027\u80fd\u8981\u6c42\u7684\uff0c\u8003\u8651\u5230\u5185\u5b58\u5e03\u5c40\uff0c\u5c3d\u7ba1Go\u662f\u5177\u6709\u771f\u6b63\u5783\u573e\u56de\u6536\u7279\u6027\u7684\u8bed\u8a00\uff0c\u5b83\u8fd8\u662f\u7ed9\u4e86\u4f60\u5de5\u5177\uff0c\u8ba9\u4f60\u81ea\u5df1\u6765\u63a7\u5236\u6709\u591a\u5c11\u5185\u5b58\u548c\u4ea7\u751f\u4e86\u7684\u5783\u573e\u3002\u6211\u60f3\u8fd9\u662f\u5f88\u591a\u4eba\u5bb9\u6613\u5ffd\u7565\u7684\u3002 29. \u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1aGo\u662f\u7cfb\u7edf\u7ea7\u8bed\u8a00\u8fd8\u662f\u5e94\u7528\u7ea7\u8bed\u8a00\uff1f \u6211\u4eec\u662f\u628a\u4ed6\u8bbe\u8ba1\u4e3a\u4e00\u79cd\u7cfb\u7edf\u7ea7\u8bed\u8a00\uff0c\u56e0\u4e3a\u6211\u4eec\u5728Google\u6240\u505a\u7684\u5de5\u4f5c\u662f\u7cfb\u7edf\u7ea7\u7684\uff0c\u5bf9\u5427\uff1fWeb\u670d\u52a1\u5668\u548c\u6570\u636e\u5e93\u7cfb\u7edf\u3001\u4ee5\u53ca\u5b58\u50a8\u7cfb\u7edf\u7b49\uff0c\u8fd9\u4e9b\u90fd\u662f\u7cfb\u7edf\u3002\u4f46\u4e0d\u662f\u64cd\u4f5c\u7cfb\u7edf\uff0c\u6211\u4e0d\u77e5\u9053Go\u662f\u5426\u80fd\u6210\u4e3a\u4e00\u4e2a\u597d\u7684\u64cd\u4f5c\u7cfb\u7edf\u8bed\u8a00\uff0c\u4f46\u662f\u4e5f\u4e0d\u80fd\u8bf4\u5b83\u4e0d\u4f1a\u6210\u4e3a\u8fd9\u6837\u7684\u8bed\u8a00\u3002\u6709\u8da3\u7684\u662f\u7531\u4e8e\u6211\u4eec\u8bbe\u8ba1\u8bed\u8a00\u65f6\u6240\u91c7\u7528\u7684\u65b9\u6cd5\uff0cGo\u6700\u7ec8\u6210\u4e3a\u4e86\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u901a\u7528\u8bed\u8a00\uff0c\u8fd9\u6709\u70b9\u51fa\u4e4e\u6211\u4eec\u610f\u6599\u3002\u6211\u60f3\u5927\u591a\u6570\u7528\u6237\u5e76\u6ca1\u6709\u5b9e\u9645\u4ece\u7cfb\u7edf\u89c2\u70b9\u6765\u8003\u8651\u8fc7\u5b83\uff0c\u5c3d\u7ba1\u5f88\u591a\u4eba\u505a\u8fc7\u4e00\u70b9Web\u670d\u52a1\u5668\u6216\u7c7b\u4f3c\u4e1c\u897f\u3002 Go\u7528\u6765\u505a\u5f88\u591a\u5e94\u7528\u7c7b\u7684\u4e1c\u897f\u4e5f\u975e\u5e38\u4e0d\u9519\uff0c\u5b83\u5c06\u4f1a\u6709\u66f4\u597d\u7684\u51fd\u6570\u5e93\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u5de5\u5177\u4ee5\u53ca\u4e00\u4e9bGo\u66f4\u6709\u7528\u7684\u4e1c\u897f\uff0cGo\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u901a\u7528\u8bed\u8a00\uff0c\u5b83\u662f\u6211\u7528\u8fc7\u7684\u6700\u9ad8\u4ea7\u7684\u8bed\u8a00\u3002","title":"Rob Pike\u8c08Google Go"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#1-robgoogle-gogoogle-gogoogle-go","text":"\u6211\u8fd8\u662f\u8bb2\u8bb2\u4e3a\u4ec0\u4e48\u8981\u521b\u5efa\u8fd9\u95e8\u8bed\u8a00\u5427\uff0c\u548c\u4f60\u7684\u95ee\u9898\u7a0d\u6709\u4e9b\u4e0d\u540c\u3002\u6211\u5728Google\u505a\u4e86\u4e00\u4e2a\u6709\u5173\u7f16\u7a0b\u8bed\u8a00\u7684\u7cfb\u5217\u8bb2\u5ea7\uff0c\u5728Youtube\u4e0a\u6709\uff0c\u8c08\u53ca\u4e86\u6211\u65e9\u671f\u6240\u5199\u7684\u4e00\u4e2a\u8bed\u8a00\uff0c\u53eb\u505aNewsqueak\uff0c\u90a3\u662f\u516b\u5341\u5e74\u4ee3\u7684\u4e8b\uff0c\u975e\u5e38\u65e9\u3002\u5728\u505a\u8bb2\u5ea7\u671f\u95f4\uff0c\u6211\u5f00\u59cb\u601d\u8003\u4e3a\u4ec0\u4e48Newsqueak\u4e2d\u7684\u4e00\u4e9b\u60f3\u6cd5\u5728\u6211\u73b0\u5728\u4ee5C++\u4e3a\u4e3b\u7684\u5de5\u4f5c\u73af\u5883\u4e2d\u65e0\u6cd5\u4f7f\u7528\u3002\u800c\u4e14\u5728Google\u6211\u4eec\u7ecf\u5e38\u8981\u6784\u5efa\u975e\u5e38\u5927\u7684\u7a0b\u5e8f\uff0c\u5149\u6784\u5efa\u5c31\u8981\u82b1\u5f88\u591a\u65f6\u95f4\uff0c\u5bf9\u4f9d\u8d56\u7684\u7ba1\u7406\u4e5f\u6709\u95ee\u9898\uff0c\u7531\u4e8e\u94fe\u63a5\u4e86\u672c\u6765\u5e76\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u5305\u53d8\u5f97\u5f88\u5927\uff0c\u94fe\u63a5\u65f6\u95f4\u5f88\u957f\uff0c\u7f16\u8bd1\u65f6\u95f4\u4e5f\u5f88\u957f\uff0c\u800c\u4e14C++\u7684\u5de5\u4f5c\u65b9\u5f0f\u6709\u70b9\u53e4\u8001\uff0c\u5176\u5e95\u5c42\u5b9e\u9645\u4e0aC\uff0cC++\u5df2\u7ecf\u6709\u4e09\u5341\u5e74\u7684\u5386\u53f2\u4e86\uff0c\u800cC\u5219\u66f4\u662f\u6709\u56db\u5341\u5e74\u4e86\u3002\u7528\u73b0\u4eca\u7684\u786c\u4ef6\u505a\u8ba1\u7b97\uff0c\u6709\u5f88\u591a\u65b0\u4e1c\u897f\u9700\u8981\u8003\u8651\uff1a\u591a\u6838\u673a\u5668\u3001\u7f51\u7edc\u5316\u3001\u5206\u5e03\u5f0f\u7cfb\u7edf\u3001\u4e91\u8ba1\u7b97\u7b49\u7b49\u3002","title":"1. Rob\uff0c\u4f60\u521b\u5efa\u4e86Google Go\u8fd9\u95e8\u8bed\u8a00\u3002\u4ec0\u4e48\u662fGoogle Go\uff1f\u80fd\u7b80\u660e\u627c\u8981\u7684\u4ecb\u7ecd\u4e00\u4e0bGoogle Go\u5417\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#2-go","text":"\u5bf9\u4e8e\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0c\u4ed6\u4eec\u5bf9Go\u7684\u7b2c\u4e00\u5370\u8c61\u662f\u8be5\u8bed\u8a00\u5c06\u5e76\u53d1\u6027\u4f5c\u4e3a\u8bed\u8a00\u539f\u8bed\uff0c\u8fd9\u5bf9\u6211\u4eec\u5904\u7406\u5206\u5e03\u5f0f\u8ba1\u7b97\u548c\u591a\u6838\u8fd9\u7c7b\u4e1c\u897f\u6765\u8bf4\u975e\u5e38\u597d\u3001\u4e5f\u975e\u5e38\u91cd\u8981\u3002\u6211\u731c\u8bb8\u591a\u4eba\u4f1a\u8ba4\u4e3aGo\u662f\u4e00\u95e8\u7b80\u5355\u65e0\u8da3\u7684\u8bed\u8a00\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u7684\u4e1c\u897f\uff0c\u56e0\u4e3a\u5176\u6784\u60f3\u770b\u8d77\u6765\u4e00\u76ee\u4e86\u7136\u3002\u4f46\u5b9e\u9645\u4e0a\u4e0d\u80fd\u7528\u7b2c\u4e00\u5370\u8c61\u6765\u5224\u65adGo\u3002\u5f88\u591a\u7528\u8fc7Go\u7684\u4eba\u4f1a\u53d1\u73b0\u5b83\u662f\u4e00\u95e8\u975e\u5e38\u9ad8\u4ea7\u800c\u4e14\u6709\u8868\u73b0\u529b\u7684\u8bed\u8a00\uff0c\u80fd\u591f\u89e3\u51b3\u6211\u4eec\u7f16\u5199\u8fd9\u95e8\u8bed\u8a00\u65f6\u671f\u671b\u5176\u6240\u80fd\u89e3\u51b3\u7684\u6240\u6709\u95ee\u9898\u3002 Go\u7684\u7f16\u8bd1\u8fc7\u7a0b\u5f88\u5feb\uff0c\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u5305\u53c8\u6bd4\u8f83\u5c0f\uff0c\u5b83\u7ba1\u7406\u4f9d\u8d56\u7684\u65b9\u5f0f\u5982\u540c\u7ba1\u7406\u8bed\u8a00\u672c\u8eab\u7684\u4e1c\u897f\u4e00\u6837\u3002\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u6545\u4e8b\u5462\uff0c\u4f46\u662f\u5728\u8fd9\u91cc\u5c31\u4e0d\u518d\u5c55\u5f00\u8ba8\u8bba\u4e86\uff0c\u4f46\u662f\u8fd9\u95e8\u8bed\u8a00\u7684\u5e76\u53d1\u6027\u4f7f\u5176\u80fd\u591f\u4ee5\u975e\u5e38\u7b80\u5355\u7684\u6a21\u5f0f\u6765\u5904\u7406\u975e\u5e38\u590d\u6742\u7684\u64cd\u4f5c\u53ca\u5206\u5e03\u5f0f\u8ba1\u7b97\u73af\u5883\u3002\u6211\u60f3\u6700\u91cd\u8981\u7684\u529f\u80fd\u53ef\u80fd\u5c31\u662f\u5e76\u53d1\u6027\u4e86\uff0c\u540e\u9762\u6211\u4eec\u53ef\u4ee5\u8c08\u8c08\u8be5\u8bed\u8a00\u7684\u7c7b\u578b\u7cfb\u7edf\uff0c\u5176\u4e0eC++\u3001Java\u8fd9\u7c7b\u4f20\u7edf\u9762\u5411\u5bf9\u8c61\u7c7b\u578b\u7cfb\u7edf\u7684\u5dee\u5f02\u5f88\u5927\u3002","title":"2. Go\u7684\u4e3b\u8981\u7279\u70b9\u662f\u4ec0\u4e48\uff1f\u6709\u4ec0\u4e48\u91cd\u8981\u529f\u80fd\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#3-go","text":"\u5b83\u4e4b\u6240\u4ee5\u5feb\uff0c\u6709\u4e24\u4e2a\u539f\u56e0\u3002\u9996\u5148Go\u6709\u4e24\u4e2a\u7f16\u8bd1\u5668\u2014\u2014\u4e24\u4e2a\u5355\u72ec\u7684\u5b9e\u73b0\u3002\u4e00\u4e2a\u662f\u6309\u7167Plan 9\uff08http://plan9.bell-labs.com/wiki/plan9/1/\uff09 \u98ce\u683c\u65b0\u5199\u7684\u7f16\u8bd1\u5668\uff0c\u5b83\u6709\u81ea\u5df1\u72ec\u7279\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u662f\u4e2a\u5168\u65b0\u7684\u7f16\u8bd1\u5668\u3002\u53e6\u4e00\u4e2a\u7f16\u8bd1\u5668\u53eb\u505aGCC Go\uff0c\u5b83\u62e5\u6709GCC\u524d\u7aef\uff0c\u8fd9\u4e2a\u7f16\u8bd1\u5668\u662fIan Taylor\u540e\u6765\u5199\u7684\u3002\u6240\u4ee5Go\u6709\u4e24\u4e2a\u7f16\u8bd1\u5668\uff0c\u901f\u5ea6\u5feb\u662f\u4e8c\u8005\u7684\u5171\u540c\u7279\u70b9\uff0c\u4f46\u662fPlan 9\u98ce\u683c\u7f16\u8bd1\u5668\u7684\u901f\u5ea6\u662fGCC Go\u76845\u500d\uff0c\u56e0\u4e3a\u5b83\u4ece\u5934\u5230\u811a\u90fd\u662f\u5168\u65b0\u7684\uff0c\u6ca1\u6709GCC\u540e\u7aef\uff0c\u90a3\u4e9b\u4e1c\u897f\u4f1a\u82b1\u5f88\u591a\u65f6\u95f4\u6765\u4ea7\u751f\u771f\u6b63\u7684\u597d\u4ee3\u7801\u3002 GCC Go\u7f16\u8bd1\u5668\u8981\u4ea7\u751f\u66f4\u597d\u7684\u4ee3\u7801\uff0c\u6240\u4ee5\u901f\u5ea6\u6162\u4e9b\u3002\u4e0d\u8fc7\u771f\u6b63\u91cd\u8981\u7684\u4e00\u70b9\u662fGo\u7f16\u8bd1\u5668\u7684\u4f9d\u8d56\u7ba1\u7406\u7279\u6027\u624d\u662f\u5176\u7f16\u8bd1\u901f\u5ea6\u5feb\u7684\u771f\u6b63\u539f\u56e0\u3002\u5982\u679c\u4f60\u53bb\u770b\u4e00\u4e2aC\u6216C++\u7a0b\u5e8f\uff0c\u4fbf\u4f1a\u53d1\u73b0\u5176\u5934\u6587\u4ef6\u63cf\u8ff0\u4e86\u51fd\u6570\u5e93\u3001\u5bf9\u8c61\u4ee3\u7801\u7b49\u7b49\u4e1c\u897f\u3002\u8bed\u8a00\u672c\u8eab\u5e76\u4e0d\u5f3a\u5236\u68c0\u67e5\u4f9d\u8d56\uff0c\u6bcf\u4e00\u6b21\u4f60\u90fd\u5fc5\u987b\u5206\u6790\u4ee3\u7801\u4ee5\u4fbf\u6e05\u695a\u4f60\u7684\u51fd\u6570\u662f\u600e\u6837\u7684\u3002\u5982\u679c\u4f60\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u60f3\u7528\u53e6\u4e00\u4e2a\u7c7b\u7684C++\u7a0b\u5e8f\uff0c\u4f60\u5fc5\u987b\u5148\u7f16\u8bd1\u5b83\u6240\u4f9d\u8d56\u7684\u7c7b\u548c\u5934\u6587\u4ef6\u7b49\u7b49\u7b49\u7b49\u3002\u5982\u679c\u4f60\u6240\u7f16\u8bd1\u7684C++\u7a0b\u5e8f\u6709\u8bb8\u591a\u7c7b\uff0c\u5e76\u4e14\u5185\u90e8\u76f8\u5173\uff0c\u4f60\u53ef\u80fd\u4f1a\u628a\u540c\u4e00\u4e2a\u5934\u6587\u4ef6\u7f16\u8bd1\u6570\u767e\u6b21\u751a\u81f3\u4e0a\u5343\u6b21\u3002\u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u7528\u9884\u7f16\u8bd1\u5934\u6587\u4ef6\u53ca\u5176\u4ed6\u6280\u5de7\u6765\u56de\u907f\u4e4b\u4e00\u95ee\u9898\u3002 \u4f46\u662f\u8bed\u8a00\u672c\u8eab\u5e76\u4e0d\u80fd\u5e2e\u4e0a\u4f60\u7684\u5fd9\uff0c\u5de5\u5177\u53ef\u80fd\u4f1a\u8ba9\u8fd9\u4e00\u95ee\u9898\u5f97\u5230\u6539\u5584\uff0c\u53ef\u662f\u6700\u5927\u7684\u95ee\u9898\u662f\u5e76\u6ca1\u6709\u4ec0\u4e48\u80fd\u4fdd\u8bc1\u4f60\u6240\u7f16\u8bd1\u7684\u4e1c\u897f\u5c31\u662f\u7a0b\u5e8f\u771f\u6b63\u9700\u8981\u7684\u4e1c\u897f\u3002\u6709\u53ef\u80fd\u4f60\u7684\u7a0b\u5e8f\u5305\u542b\u4e86\u4e00\u4e2a\u5e76\u4e0d\u771f\u6b63\u9700\u8981\u7684\u5934\u6587\u4ef6\uff0c\u4f46\u662f\u4f60\u6ca1\u529e\u6cd5\u77e5\u9053\uff0c\u56e0\u4e3a\u8bed\u8a00\u5e76\u6ca1\u6709\u5f3a\u5236\u68c0\u67e5\u3002\u800cGo\u6709\u4e00\u4e2a\u66f4\u52a0\u4e25\u683c\u7684\u4f9d\u8d56\u6a21\u578b\uff0c\u5b83\u6709\u4e00\u4e9b\u53eb\u505a\u5305\uff08packages\uff09\u7684\u4e1c\u897f\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u60f3\u8c61\u6210Java\u7c7b\u6587\u4ef6\u6216\u7740\u7c7b\u4f3c\u7684\u4e1c\u897f\uff0c\u6216\u8005\u51fd\u6570\u5e93\u4ec0\u4e48\u7684\uff0c\u867d\u7136\u4ed6\u4eec\u5e76\u4e0d\u76f8\u540c\uff0c\u4f46\u57fa\u672c\u601d\u8def\u662f\u4e00\u6837\u7684\u3002\u5173\u952e\u95ee\u9898\u662f\uff0c\u5982\u679c\u8fd9\u4e2a\u4e1c\u897f\u4f9d\u8d56\u90a3\u4e2a\u4e1c\u897f\uff0c\u800c\u90a3\u4e2a\u4e1c\u897f\u53c8\u4f9d\u8d56\u53e6\u5916\u4e00\u4e2a\u4e1c\u897f\uff0c\u6bd4\u5982A\u4f9d\u8d56\u4e8eB\uff0cB\u53c8\u4f9d\u8d56\u4e8eC\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u9996\u5148\u7f16\u8bd1\u6700\u5185\u5c42\u7684\u4f9d\u8d56\uff1a\u5373\uff0c\u4f60\u5148\u7f16\u8bd1C\uff0c\u7136\u540e\u7f16\u8bd1B\uff0c\u6700\u540e\u7f16\u8bd1A\u3002 \u4f46\u662f\u5982\u679cA\u4f9d\u8d56B\uff0c\u4f46\u662fA\u5e76\u4e0d\u76f4\u63a5\u4f9d\u8d56\u4e8eC\uff0c\u800c\u662f\u5b58\u5728\u4f9d\u8d56\u4f20\u9012\uff0c\u90a3\u4e48\u8be5\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u65f6\u6240\u6709B\u9700\u8981\u4eceC\u62ff\u5230\u7684\u4fe1\u606f\u90fd\u4f1a\u88ab\u653e\u5728B\u7684\u5bf9\u8c61\u4ee3\u7801\u91cc\u3002\u8fd9\u6837\uff0c\u5f53\u6211\u7f16\u8bd1A\u7684\u65f6\u5019\uff0c\u6211\u4e0d\u9700\u8981\u518d\u7ba1C\u4e86\u3002\u4e8e\u662f\u4e8b\u60c5\u5c31\u975e\u5e38\u7b80\u5355\u4e86\uff1a\u5728\u4f60\u7f16\u8bd1\u7a0b\u5e8f\u65f6\uff0c\u4f60\u53ea\u9700\u5c06\u7c7b\u578b\u4fe1\u606f\u6cbf\u7740\u4f9d\u8d56\u5173\u7cfb\u6811\u5411\u4e0a\u904d\u5386\u5373\u53ef\uff0c\u5982\u679c\u4f60\u5230\u8fbe\u6811\u7684\u9876\u7aef\uff0c\u5219\u53ea\u9700\u7f16\u8bd1\u7d27\u90bb\u7684\u4f9d\u8d56\uff0c\u800c\u4e0d\u7528\u7ba1\u5176\u5b83\u5c42\u7ea7\u7684\u4f9d\u8d56\u4e86\u3002\u5982\u679c\u4f60\u8981\u505a\u7b97\u672f\u8fd0\u7b97\uff0c\u4f60\u4f1a\u53d1\u73b0\u5728Objective-C\u6216C++\u6216\u7c7b\u4f3c\u7684\u8bed\u8a00\u91cc\uff0c\u867d\u7136\u53ea\u5305\u542b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5934\u6587\u4ef6\uff0c\u4f46\u7531\u4e8e\u4f9d\u8d56\u4f20\u9012\u7684\u5b58\u5728\uff0c\u4f60\u53ef\u80fd\u4f1a\u7f16\u8bd1\u6570\u5341\u4e07\u884c\u7a0b\u5e8f\u3002\u7136\u800c\u5728Go\u4e2d\uff0c\u4f60\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u91cc\u9762\u6216\u8bb8\u53ea\u670920\u884c\uff0c\u56e0\u4e3a\u5176\u4e2d\u53ea\u63cf\u8ff0\u4e86\u516c\u5171\u63a5\u53e3\u3002 \u5982\u679c\u4e00\u4e2a\u4f9d\u8d56\u94fe\u91cc\u53ea\u6709\u4e09\u4e2a\u6587\u4ef6\uff0cGo\u7684\u4f18\u52bf\u53ef\u80fd\u5e76\u4e0d\u660e\u663e\uff0c\u4f46\u662f\u5982\u679c\u4f60\u6709\u6210\u5343\u4e0a\u4e07\u4e2a\u6587\u4ef6\u7684\u65f6\u5019\uff0cGo\u7684\u901f\u5ea6\u4f18\u52bf\u4f1a\u6210\u6307\u6570\u589e\u957f\u3002\u6211\u4eec\u76f8\u4fe1\uff0c\u5982\u679c\u7528Go\u7684\u8bdd\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u5728\u6570\u79d2\u5185\u5c31\u7f16\u8bd1\u5b8c\u6570\u767e\u4e07\u884c\u4ee3\u7801\u3002\u7136\u800c\u5982\u679c\u662f\u7b49\u91cf\u7684\u7528C++\u7f16\u5199\u7684\u7a0b\u5e8f\uff0c\u7531\u4e8e\u4f9d\u8d56\u7ba1\u7406\u95ee\u9898\uff0c\u7f16\u8bd1\u7684\u5f00\u9500\u4f1a\u5927\u5f97\u591a\uff0c\u7f16\u8bd1\u7684\u65f6\u95f4\u5c06\u4f1a\u957f\u8fbe\u82e5\u5e72\u5206\u949f\u3002\u56e0\u6b64\uff0cGo\u901f\u5ea6\u5feb\u7684\u6839\u6e90\u4e3b\u8981\u5f52\u529f\u4e8e\u5bf9\u4f9d\u8d56\u7684\u7ba1\u7406\u3002","title":"3. \u5728\u6211\u4eec\u7ee7\u7eed\u8bdd\u9898\u4e4b\u524d\uff0c\u80fd\u5426\u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48Go\u7f16\u8bd1\u5668\u80fd\u8fbe\u5230\u90a3\u4e48\u5feb\u7684\u7f16\u8bd1\u901f\u5ea6\u5462\uff1f\u6709\u4ec0\u4e48\u6cd5\u5b9d\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#4-gogostructtypego","text":"Go\u91cc\u7684\u7c7b\u578b\u4e0e\u5176\u5b83\u4f20\u7edf\u7f16\u7a0b\u8bed\u8a00\u91cc\u7684\u7c7b\u578b\u662f\u7c7b\u4f3c\u7684\u3002Go\u91cc\u7684\u7c7b\u578b\u6709\u6574\u6570\u3001\u5b57\u7b26\u4e32\u3001struct\u6570\u636e\u7ed3\u6784\u3001\u4ee5\u53ca\u6570\u7ec4\uff08array\uff09\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u5207\u7247\uff08slice\uff09\uff0c\u5b83\u4eec\u7c7b\u4f3c\u4e8eC\u7684\u6570\u7ec4\uff0c\u4f46\u66f4\u6613\u4e8e\u4f7f\u7528\uff0c\u66f4\u52a0\u56fa\u5b9a\u4e00\u4e9b\u3002\u4f60\u53ef\u4ee5\u58f0\u660e\u672c\u5730\u7c7b\u578b\u5e76\u4e88\u4ee5\u547d\u540d\uff0c\u7136\u540e\u6309\u7167\u901a\u5e38\u7684\u65b9\u5f0f\u6765\u4f7f\u7528\u3002Go\u548c\u9762\u5411\u5bf9\u8c61\u65b9\u5f0f\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u7c7b\u578b\u53ea\u662f\u4e66\u5199\u6570\u636e\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u65b9\u6cd5\u5219\u662f\u4e00\u4e2a\u5b8c\u5168\u72ec\u7acb\u7684\u6982\u5ff5\u3002\u4f60\u53ef\u4ee5\u628a\u65b9\u6cd5\u653e\u5728struct\u4e0a\uff0c\u5728Go\u91cc\u6ca1\u6709\u7c7b\u7684\u6982\u5ff5\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u7ed3\u6784\uff0c\u4ee5\u53ca\u4e3a\u6b64\u7ed3\u6784\u58f0\u660e\u7684\u4e00\u4e9b\u65b9\u6cd5\u3002 \u7ed3\u6784\u4e0d\u80fd\u4e0e\u7c7b\u6df7\u4e3a\u4e00\u8c08\u3002\u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u628a\u65b9\u6cd5\u653e\u5728\u6570\u7ec4\u3001\u6574\u6570\u3001\u6d6e\u70b9\u6570\u6216\u5b57\u7b26\u4e32\u4e0a\uff0c\u5b9e\u9645\u4e0a\u4efb\u4f55\u7c7b\u578b\u90fd\u53ef\u4ee5\u6709\u65b9\u6cd5\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u65b9\u6cd5\u7684\u6982\u5ff5\u6bd4Java\u7684\u65b9\u6cd5\u66f4\u52a0\u6cdb\u5316\uff0c\u5728Java\u91cc\u65b9\u6cd5\u662f\u7c7b\u7684\u4e00\u90e8\u5206\uff0c\u4ec5\u6b64\u800c\u5df2\u3002\u4f8b\u5982\uff0c\u4f60\u7684\u6574\u6570\u4e0a\u53ef\u4ee5\u6709\u65b9\u6cd5\uff0c\u542c\u4e0a\u53bb\u4f3c\u4e4e\u6ca1\u4ec0\u4e48\u7528\uff0c\u4f46\u662f\u5982\u679c\u4f60\u60f3\u5728\u4e00\u4e2a\u53eb\u505aTuesday\u7684\u6574\u6570\u5e38\u91cf\u4e0a\u9644\u52a0\u4e0ato_string\u65b9\u6cd5\u6765\u6253\u5370\u51fa\u6f02\u4eae\u7684\u661f\u671f\u683c\u5f0f\uff1b\u6216\u8005\uff0c\u4f60\u60f3\u91cd\u65b0\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4f7f\u5176\u80fd\u591f\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u6253\u5370\u51fa\u81ea\u5df1\uff0c\u8fd9\u65f6\u4f60\u5c31\u4f1a\u610f\u8bc6\u5230\u5b83\u7684\u4f5c\u7528\u3002\u4e3a\u4ec0\u4e48\u975e\u8981\u628a\u6240\u6709\u65b9\u6cd5\u6216\u8005\u5176\u5b83\u597d\u4e1c\u897f\u90fd\u585e\u8fdb\u7c7b\u91cc\u9762\u5462\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u8ba9\u5b83\u4eec\u63d0\u4f9b\u66f4\u5e7f\u6cdb\u7684\u670d\u52a1\u5462\uff1f","title":"4. \u8ba9\u6211\u4eec\u5f00\u59cb\u804a\u804aGo\u91cc\u7684\u7c7b\u578b\u7cfb\u7edf\u5427\u3002Go\u91cc\u9762\u6709\u7ed3\u6784\uff08struct\uff09\u3001\u6709\u7c7b\u578b\uff08type\uff09,\u90a3\u4e48Go\u91cc\u7684\u7c7b\u578b\u662f\u4ec0\u4e48\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#5","text":"\u975e\u4e5f\uff0c\u5b9e\u9645\u4e0a\u662f\u8fd9\u6837\uff0cGo\u53ea\u5141\u8bb8\u4f60\u5728\u5305\u5185\u4e3a\u4f60\u6240\u5b9e\u73b0\u7684\u7c7b\u578b\u5b9a\u4e49\u65b9\u6cd5\u3002\u6211\u4e0d\u80fd\u5f15\u5165\u4f60\u7684\u7c7b\u578b\u7136\u540e\u76f4\u63a5\u628a\u6211\u7684\u65b9\u6cd5\u589e\u52a0\u8fdb\u53bb\uff0c\u4f46\u662f\u6211\u53ef\u4ee5\u4f7f\u7528\u533f\u540d\u5c5e\u6027\uff08anonymous field\uff09\u5c06\u5176\u5305\u88f9\u8d77\u6765\uff0c\u65b9\u6cd5\u53ef\u4e0d\u662f\u4f60\u60f3\u52a0\u5230\u54ea\u5c31\u52a0\u5230\u54ea\u7684\uff0c\u4f60\u8981\u5b9a\u4e49\u7c7b\u578b\uff0c\u7136\u540e\u624d\u80fd\u628a\u65b9\u6cd5\u653e\u5728\u4e0a\u9762\u3002\u6b63\u56e0\u4e3a\u5982\u6b64\uff0c\u6211\u4eec\u5728\u5305\u91cc\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u5c01\u88c5\u2014\u2014\u63a5\u53e3\uff08interface\uff09\uff0c\u4f46\u662f\u5982\u679c\u4f60\u4e0d\u660e\u767d\u8c01\u80fd\u4e3a\u5bf9\u8c61\u589e\u52a0\u65b9\u6cd5\u7684\u4e25\u683c\u754c\u9650\uff0c\u5c31\u5f88\u96be\u7406\u89e3\u63a5\u53e3\u3002","title":"5. \u90a3\u4e48\u8fd9\u4e9b\u65b9\u6cd5\u53ea\u662f\u5728\u5305\u5185\u90e8\u53ef\u89c1\u55bd\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#6-inttypedef","text":"\u4f60\u8981typedef\u4e00\u4e2a\u6574\u6570\u7c7b\u578b\uff0c\u8d77\u4e2a\u540d\u5b57\uff0c\u5982\u679c\u4f60\u6b63\u5728\u5904\u7406\u4e00\u661f\u671f\u4e2d\u7684\u4e03\u5929\uff0c\u53ef\u4ee5\u5c31\u53eb\u5b83\u201cDay\u201d\uff0c\u4f60\u53ef\u4ee5\u7ed9\u4f60\u6240\u58f0\u660e\u7684\u7c7b\u578b\u2014\u2014Day\u589e\u52a0\u65b9\u6cd5\uff0c\u4f46\u662f\u4f60\u4e0d\u80fd\u76f4\u63a5\u7ed9int\u589e\u52a0\u65b9\u6cd5\u3002\u56e0\u4e3a\u6574\u6570\u7c7b\u578b\u4e0d\u662f\u4f60\u5b9a\u4e49\u7684\uff0c\u4e0d\u5728\u4f60\u7684\u5305\u91cc\uff0c\u5b83\u662f\u5f15\u5165\u7684\u4f46\u5e76\u4e0d\u5728\u4f60\u7684\u5305\u4e2d\u5b9a\u4e49\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u4f60\u4e0d\u80fd\u7ed9\u5176\u589e\u52a0\u65b9\u6cd5\u3002\u4f60\u4e0d\u80fd\u7ed9\u4e0d\u5728\u4f60\u5305\u91cc\u5b9a\u4e49\u7684\u7c7b\u578b\u589e\u52a0\u65b9\u6cd5\u3002","title":"6. \u4f60\u7684\u610f\u601d\u662f\uff0c\u6211\u53ef\u4ee5\u7ed9int\u589e\u52a0\u65b9\u6cd5\uff0c\u4f46\u662f\u5fc5\u987b\u5148\u4f7f\u7528typedef\u5417\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#7-rubyruby","text":"\u5b83\u662f\u5b89\u5168\u53ef\u63a7\u7684\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u7406\u89e3\u3002\u6700\u521d\u6211\u4eec\u89c9\u5f97\u7c7b\u578b\u7528\u8d77\u6765\u53ef\u80fd\u4e0d\u592a\u65b9\u4fbf\uff0c\u6211\u4eec\u4e5f\u5e0c\u671b\u50cfRuby\u90a3\u6837\u6dfb\u52a0\u65b9\u6cd5\uff0c\u4f46\u8fd9\u53c8\u8ba9\u63a5\u53e3\u6bd4\u8f83\u96be\u4ee5\u7406\u89e3\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u628a\u65b9\u6cd5\u53d6\u51fa\u6765\uff0c\u800c\u4e0d\u662f\u653e\u8fdb\u53bb\uff0c\u6211\u4eec\u60f3\u4e0d\u51fa\u6709\u4ec0\u4e48\u66f4\u597d\u7684\u529e\u6cd5\uff0c\u4e8e\u662f\u9650\u5236\u65b9\u6cd5\u53ea\u80fd\u5728\u672c\u5730\u7c7b\u578b\u4e0a\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u601d\u8def\u786e\u5b9e\u5f88\u5bb9\u6613\u7406\u89e3\u548c\u4f7f\u7528\u3002","title":"7. \u4f60\u4eec\u501f\u9274\u4e86Ruby\u91cc\u5f00\u653e\u7c7b\u7684\u601d\u60f3\uff0c\u8fd9\u5f88\u6709\u610f\u601d\u3002Ruby\u7684\u5f00\u653e\u7c7b\u5b9e\u9645\u4e0a\u662f\u53ef\u4ee5\u4fee\u6539\u7c7b\u5e76\u589e\u52a0\u65b0\u7684\u65b9\u6cd5\uff0c\u8fd9\u662f\u6709\u7834\u574f\u6027\u7684\uff0c\u4f46\u662f\u4f60\u4eec\u7684\u65b9\u6cd5\u672c\u8d28\u4e0a\u662f\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u521b\u5efa\u4e86\u65b0\u7684\u4e1c\u897f\u3002"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#8-typedeftypedef","text":"\u5e94\u8be5\u53eb\u201ctype\u201d\uff0c\u4f60\u6240\u8bf4\u7684\u7c7b\u578b\u2014\u2014Day\u7684\u5b9a\u4e49\u65b9\u5f0f\u662f\u8fd9\u6837\u201ctype Day int\u201d\uff0c\u8fd9\u6837\u4f60\u5c31\u6709\u4e00\u4e2a\u65b0\u7c7b\u578b\u4e86\uff0c\u4f60\u53ef\u4ee5\u5728\u5176\u4e0a\u589e\u52a0\u65b9\u6cd5\u3001\u58f0\u660e\u53d8\u91cf\uff0c\u4f46\u8fd9\u4e2a\u7c7b\u578b\u4e0d\u540c\u4e8eint\uff0c\u4e0d\u50cfC\u90a3\u6837\uff0c\u53ea\u662f\u540c\u4e00\u4e8b\u7269\u53e6\u8d77\u4e86\u4e2a\u540d\u5b57\u800c\u5df2\uff0c\u5728Go\u91cc\u5b9e\u9645\u4e0a\u4f60\u521b\u5efa\u4e86\u4e00\u4e2a\u4e0d\u540c\u4e8eint\u7684\u65b0\u7c7b\u578b\uff0c\u53eb\u505a\u201cDay\u201d\uff0c\u5b83\u62e5\u6709int\u7684\u7ed3\u6784\u7279\u6027\uff0c\u4f46\u5374\u6709\u81ea\u5df1\u7684\u65b9\u6cd5\u96c6\u3002","title":"8. \u4f60\u8fd8\u63d0\u5230\u4e86typedef\uff0c\u662f\u53ebtypedef\u5427\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#9-typedefcctypedef","text":"\u90a3\u5b9e\u9645\u4e0a\u5c31\u662f\u4e2a\u522b\u540d\uff0c\u4f46\u5728Go\u91cc\u4e0d\u662f\u522b\u540d\uff0c\u662f\u65b0\u7c7b\u578b\u3002","title":"9. Typedef\u5728C\u91cc\u662f\u4e00\u79cd\u9884\u5904\u7406\u6307\u4ee4\u5417\uff1f\u3010\u7f16\u8f91\u6ce8/\u514d\u8d23\u7533\u660e\uff1aC\u8bed\u8a00\u91cc\u7684typedef\u4e0e\u9884\u5904\u7406\u65e0\u5173\u3011"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#10-go","text":"\u6700\u5c0f\u7684\u7c7b\u578b\u5e94\u8be5\u662f\u5e03\u5c14\u7c7b\u578b\uff08bool\uff09\u5427\u3002bool\u3001int\u548cfloat\uff0c\u7136\u540e\u662fint32\u3001float64\u4e4b\u7c7b\u6709\u5c3a\u5bf8\u7684\u7c7b\u578b\u3001\u5b57\u7b26\u4e32\u3001\u590d\u6742\u7c7b\u578b\uff0c\u53ef\u80fd\u6709\u9057\u6f0f\uff0c\u4f46\u8fd9\u5c31\u662f\u57fa\u672c\u7c7b\u578b\u96c6\u4e86\u3002\u4f60\u53ef\u4ee5\u7531\u8fd9\u4e9b\u7c7b\u578b\u6784\u5efa\u7ed3\u6784\u3001\u6570\u7ec4\u3001\u6620\u5c04\uff08map\uff09\uff0c\u6620\u5c04\u5728Go\u91cc\u662f\u5185\u5efa\u7c7b\u578b\u4e0d\u662f\u51fd\u6570\u5e93\u3002\u7136\u540e\u6211\u60f3\u5c31\u8be5\u662f\u63a5\u53e3\u4e86\uff0c\u5230\u4e86\u63a5\u53e3\uff0c\u6709\u8da3\u7684\u4e1c\u897f\u624d\u771f\u6b63\u5f00\u59cb\u3002","title":"10. \u6211\u4eec\u4ece\u5e95\u5c42\u8bf4\u8d77\u5427\uff0c\u5728Go\u91cc\u6700\u5c0f\u7684\u7c7b\u578b\u662f\u4ec0\u4e48\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#11-int","text":"Int\u662f\u503c\u7c7b\u578b\u3002\u5728Go\u91cc\uff0c\u4efb\u4f55\u7c7b\u578b\u90fd\u662f\u503c\u7c7b\u578b\uff0c\u548cC\u4e00\u6837\uff0c\u6240\u6709\u4e1c\u897f\u90fd\u662f\u6309\u503c\u8c03\u7528\uff0c\u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u7528\u6307\u9488\u3002\u5982\u679c\u4f60\u60f3\u5f15\u7528\u67d0\u6837\u4e1c\u897f\uff0c\u53ef\u4ee5\u83b7\u53d6\u5176\u5730\u5740\uff0c\u8fd9\u6837\u4f60\u5c31\u6709\u4e86\u4e00\u4e2a\u6307\u9488\u3002Go\u4e5f\u6709\u6307\u9488\u4f46\u662f\u6bd4C\u6307\u9488\u6709\u66f4\u591a\u9650\u5236\uff0cGo\u91cc\u7684\u6307\u9488\u662f\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u4ed6\u4eec\u662f\u7c7b\u578b\u5b89\u5168\u7684\uff0c\u6240\u4ee5\u4f60\u6ca1\u6cd5\u6b3a\u9a97\u7f16\u8bd1\u5668\uff0c\u800c\u4e14\u4e5f\u6ca1\u6709\u6307\u9488\u8fd0\u7b97\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u6709\u4e2a\u6307\u5411\u67d0\u7269\u7684\u6307\u9488\uff0c\u4f60\u65e0\u6cd5\u5c06\u5176\u79fb\u5230\u5bf9\u8c61\u5916\uff0c\u4e5f\u65e0\u6cd5\u6b3a\u9a97\u7f16\u8bd1\u5668\u3002","title":"11. \u4f46\u662f\uff0cint\u8fd9\u6837\u7684\u7c7b\u578b\u662f\u503c\u7c7b\u578b\u5bf9\u5427."},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#12-c","text":"\u662f\u7684\uff0c\u5f88\u50cf\u5f15\u7528\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u6309\u7167\u4f60\u9884\u671f\u7684\u65b9\u5f0f\u5bf9\u5b83\u4eec\u8fdb\u884c\u5199\u64cd\u4f5c\u3002\u800c\u4e14\u4f60\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u5185\u90e8\uff08\u5982\u7f13\u51b2\u533a\uff09\u4e2d\u95f4\u7684\u67d0\u4e2a\u5730\u5740\uff0c\u5b83\u548cJava\u7684\u5f15\u7528\u4e0d\u4e00\u6837\u3002\u5728Java\u4e2d\uff0c\u4f60\u5fc5\u987b\u5728\u65c1\u8fb9\u5206\u914d\u4e00\u4e2a\u7f13\u51b2\u533a\uff0c\u8fd9\u662f\u989d\u5916\u7684\u5f00\u9500\u3002\u5728Go\u4e2d\uff0c\u4f60\u5b9e\u9645\u4e0a\u628a\u8be5\u5bf9\u8c61\u5206\u914d\u4e3a\u7ed3\u6784\u7684\u4e00\u90e8\u5206\uff0c\u5728\u540c\u4e00\u5185\u5b58\u5757\u4e2d\uff0c\u8fd9\u5bf9\u6027\u80fd\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002","title":"12. \u5b83\u4eec\u7c7b\u4f3cC++\u7684\u5f15\u7528\u5417\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#13","text":"\u662f\u7684\uff0c\u5982\u679c\u5b83\u662f\u503c\u800c\u4e0d\u662f\u6307\u9488\u7684\u8bdd\uff0c\u662f\u8fd9\u6837\u3002\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u628a\u6307\u9488\u653e\u5728\u7ed3\u6784\u5185\u90e8\u548c\u5916\u90e8\uff0c\u4f46\u662f\u5982\u679c\u4f60\u6709struct A\uff0c\u800c\u628astruct B\u653e\u5728struct A\u91cc\uff0c\u90a3\u4e48stuct B\u5c31\u662f\u4e00\u5757\u5185\u5b58\uff0c\u800c\u4e0d\u50cfJava\u90a3\u6837\uff0c\u8fd9\u4e5f\u662fJava\u6027\u80fd\u95ee\u9898\u7684\u539f\u56e0\u4e4b\u4e00\u3002","title":"13. \u5b83\u662f\u7ed3\u6784\u5185\u90e8\u4e00\u4e2a\u590d\u5408\u5bf9\u8c61\u3002"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#14","text":"Go\u91cc\u7684\u63a5\u53e3\u771f\u7684\u975e\u5e38\u3001\u975e\u5e38\u5730\u7b80\u5355\u3002\u63a5\u53e3\u6307\u660e\u4e86\u4e24\u4e2a\u4e0d\u540c\u4e8b\u60c5\uff1a\u5176\u4e00\uff0c\u5b83\u8868\u660e\u4e86\u7c7b\u578b\u7684\u6784\u601d\uff0c\u63a5\u53e3\u7c7b\u578b\u662f\u4e00\u4e2a\u7f57\u5217\u4e86\u4e00\u7ec4\u65b9\u6cd5\u7684\u7c7b\u578b\uff0c\u56e0\u6b64\u5982\u679c\u4f60\u8981\u62bd\u8c61\u4e00\u7ec4\u65b9\u6cd5\u6765\u5b9a\u4e49\u4e00\u4e2a\u884c\u4e3a\uff0c\u90a3\u4e48\u5c31\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\u5e76\u58f0\u660e\u8fd9\u4e9b\u65b9\u6cd5\u3002\u73b0\u5728\u4f60\u5c31\u6709\u4e86\u4e00\u4e2a\u7c7b\u578b\uff0c\u6211\u4eec\u5c31\u53eb\u5b83\u63a5\u53e3\u7c7b\u578b\u5427\uff0c\u90a3\u4e48\u4ece\u73b0\u5728\u8d77\u6240\u6709\u5b9e\u73b0\u4e86\u63a5\u53e3\u4e2d\u8fd9\u4e9b\u65b9\u6cd5\u7684\u7c7b\u578b\u2014\u2014\u5305\u62ec\u57fa\u672c\u7c7b\u578b\u3001\u7ed3\u6784\u3001\u6620\u5c04\uff08map\uff09\u6216\u5176\u5b83\u4ec0\u4e48\u7c7b\u578b\uff0c\u90fd\u9690\u542b\u7b26\u5408\u8be5\u63a5\u53e3\u8981\u6c42\u3002\u5176\u4e8c\uff0c\u4e5f\u662f\u771f\u6b63\u6709\u610f\u601d\u7684\u662f\uff0c\u548c\u5927\u591a\u6570\u8bed\u8a00\u4e2d\u7684\u63a5\u53e3\u4e0d\u540c\u7684\u662f\uff0cGo\u91cc\u9762\u6ca1\u6709\u201cimplements\u201d\u58f0\u660e\u3002 \u4f60\u65e0\u987b\u8bf4\u660e\u201c\u6211\u7684\u5bf9\u8c61\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\u201d\uff0c\u53ea\u8981\u4f60\u5b9a\u4e49\u4e86\u63a5\u53e3\u4e2d\u7684\u90a3\u4e9b\u65b9\u6cd5\uff0c\u5b83\u5c31\u81ea\u52a8\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\u3002\u6709\u4e9b\u4eba\u5bf9\u6b64\u611f\u5230\u975e\u5e38\u62c5\u5fe7\uff0c\u4f9d\u6211\u770b\u4ed6\u4eec\u60f3\u8bf4\u7684\u662f\uff1a\u77e5\u9053\u81ea\u5df1\u5b9e\u73b0\uff08Implement\uff09\u4e86\u4ec0\u4e48\u63a5\u53e3\u771f\u7684\u5f88\u91cd\u8981\u3002\u5982\u679c\u4f60\u771f\u60f3\u786e\u5b9a\u81ea\u5df1\u5b9e\u73b0\u4e86\u4ec0\u4e48\u63a5\u53e3\uff0c\u8fd8\u662f\u6709\u6280\u5de7\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u3002\u4f46\u662f\u6211\u4eec\u7684\u60f3\u6cd5\u4e0e\u6b64\u622a\u7136\u4e0d\u540c\uff0c\u6211\u4eec\u7684\u60f3\u6cd5\u662f\u4f60\u4e0d\u5e94\u8be5\u8003\u8651\u5b9e\u73b0\u4ec0\u4e48\u63a5\u53e3\uff0c\u800c\u662f\u5e94\u8be5\u5199\u4e0b\u8981\u505a\u7684\u4e1c\u897f\uff0c\u56e0\u4e3a\u4f60\u4e0d\u5fc5\u4e8b\u524d\u5c31\u51b3\u5b9a\u8981\u5b9e\u73b0\u54ea\u4e2a\u63a5\u53e3\u3002\u53ef\u80fd\u540e\u6765\u4f60\u5b9e\u9645\u4e0a\u5b9e\u73b0\u4e86\u67d0\u4e2a\u73b0\u5728\u4f60\u5c1a\u4e0d\u77e5\u6653\u7684\u63a5\u53e3\uff0c\u56e0\u4e3a\u8be5\u63a5\u53e3\u8fd8\u672a\u8bbe\u8ba1\u51fa\u6765\uff0c\u4f46\u662f\u73b0\u5728\u4f60\u5df2\u7ecf\u5728\u5b9e\u73b0\u5b83\u3002 \u540e\u6765\u4f60\u53ef\u80fd\u53d1\u73b0\u4e24\u4e2a\u539f\u5148\u672a\u66fe\u8003\u8651\u8fc7\u76f8\u5173\u6027\u7684\u7c7b\u5177\u6709\u4e86\u76f8\u5173\u6027\u2014\u2014\u6211\u53c8\u7528\u4e86\u7c7b\u8fd9\u4e2a\u8bcd\uff0c\u6211\u601d\u8003Java\u592a\u591a\u4e86\u2014\u2014\u4e24\u4e2astructs\u90fd\u5b9e\u73b0\u4e86\u4e00\u4e9b\u975e\u5e38\u6709\u7528\u7684\u5c0f\u5b50\u96c6\u4e2d\u7684\u76f8\u5173\u65b9\u6cd5\uff0c\u8fd9\u65f6\u6709\u529e\u6cd5\u80fd\u591f\u64cd\u4f5c\u8fd9\u4e24\u4e2astructs\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5c31\u663e\u5f97\u975e\u5e38\u6709\u7528\u4e86\u3002\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u63a5\u53e3\uff0c\u7136\u540e\u4ec0\u4e48\u90fd\u4e0d\u7528\u7ba1\u4e86\uff0c\u5373\u4f7f\u8fd9\u4e9b\u65b9\u6cd5\u662f\u5728\u522b\u4eba\u7684\u4ee3\u7801\u4e2d\u5b9e\u73b0\u7684\u4e5f\u6ca1\u95ee\u9898\uff0c\u867d\u7136\u4f60\u4e0d\u80fd\u7f16\u8f91\u8fd9\u4e9b\u4ee3\u7801\u3002\u5982\u679c\u662fJava\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5fc5\u987b\u8981\u58f0\u660e\u5b9e\u73b0\u4f60\u7684\u63a5\u53e3\uff0c\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\uff0c\u5b9e\u73b0\u662f\u5355\u5411\u7684\u3002\u7136\u800c\u5728Go\u91cc\uff0c\u5b9e\u73b0\u662f\u53cc\u5411\u7684\u3002\u5bf9\u4e8e\u63a5\u53e3\u5b9e\u9645\u4e0a\u6709\u4e0d\u5c11\u6f02\u4eae\u800c\u7b80\u5355\u7684\u4f8b\u5b50\u3002 \u6211\u6700\u7231\u7528\u7684\u4e00\u4e2a\u771f\u5b9e\u4f8b\u5b50\u5c31\u662f\u201cReader\u201d\uff0cGo\u91cc\u6709\u4e2a\u5305\u53eb\u505aIO\uff0cIO\u5305\u91cc\u6709\u4e2aReader\u63a5\u53e3\uff0c\u5b83\u53ea\u6709\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u662fread\u65b9\u6cd5\u7684\u6807\u51c6\u58f0\u660e\uff0c\u6bd4\u5982\u4ece\u64cd\u4f5c\u7cfb\u7edf\u6216\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5185\u5bb9\u3002\u8fd9\u4e2a\u63a5\u53e3\u53ef\u4ee5\u88ab\u7cfb\u7edf\u4e2d\u4efb\u4f55\u505aread\u7cfb\u7edf\u8c03\u7528\u7684\u4e1c\u897f\u6240\u5b9e\u73b0\u3002\u663e\u7136\uff0c\u6587\u4ef6\u3001\u7f51\u7edc\u3001\u7f13\u5b58\u3001\u89e3\u538b\u5668\u3001\u89e3\u5bc6\u673a\u3001\u7ba1\u9053\uff0c\u751a\u81f3\u4efb\u4f55\u60f3\u8bbf\u95ee\u6570\u636e\u7684\u4e1c\u897f\uff0c\u90fd\u53ef\u4ee5\u7ed9\u5176\u6570\u636e\u63d0\u4f9b\u4e00\u4e2aReader\u63a5\u53e3\uff0c\u7136\u540e\u60f3\u4ece\u8fd9\u4e9b\u8d44\u6e90\u4e2d\u8bfb\u53d6\u6570\u636e\u7684\u4efb\u4f55\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u901a\u8fc7\u8be5\u63a5\u53e3\u8fbe\u5230\u76ee\u7684\u3002\u8fd9\u6709\u70b9\u50cf\u6211\u4eec\u524d\u9762\u8bf4\u8fc7\u7684Plan 9\uff0c\u4f46\u662f\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u6cdb\u5316\u7684\u3002 \u4e0e\u4e4b\u7c7b\u4f3c\uff0cWriter\u4e5f\u662f\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0cWriter \u7531\u90a3\u4e9b\u8981\u505a\u5199\u64cd\u4f5c\u7684\u4eba\u6765\u5b9e\u73b0\u3002\u90a3\u4e48\u5728\u505a\u683c\u5f0f\u5316\u6253\u5370\u65f6\uff0cfpringf\u7684\u7b2c\u4e00\u53c2\u6570\u4e0d\u662ffile\u4e86\uff0c\u800c\u662fWriter\u3002\u8fd9\u6837\uff0cfprintf\u53ef\u4ee5\u7ed9\u4efb\u4f55\u5b9e\u73b0\u4e86write\u65b9\u6cd5\u7684\u4e1c\u897f\u505aIO\u683c\u5f0f\u5316\u7684\u5de5\u4f5c\u3002\u6709\u5f88\u591a\u5f88\u597d\u7684\u4f8b\u5b50\uff1a\u6bd4\u5982HTTP\uff0c\u5982\u679c\u4f60\u6b63\u5728\u5b9e\u73b0\u4e00\u4e2aHTTP\u670d\u52a1\u5668\uff0c\u4f60\u4ec5\u987b\u5bf9connection\u505afprintf\uff0c\u4fbf\u53ef\u5c06\u6570\u636e\u4f20\u9012\u5230\u5ba2\u6237\u7aef\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u82b1\u54e8\u7684\u64cd\u4f5c\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u538b\u7f29\u5668\u6765\u8fdb\u884c\u5199\u64cd\u4f5c\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6211\u6240\u63d0\u5230\u7684\u4efb\u4f55\u4e1c\u897f\u6765\u8fdb\u884c\u5199\u64cd\u4f5c\uff1a\u538b\u7f29\u5668\u3001\u52a0\u5bc6\u673a\u3001\u7f13\u5b58\u3001\u7f51\u7edc\u8fde\u63a5\u3001\u7ba1\u9053\u3001\u6587\u4ef6\uff0c\u4f60\u90fd\u53ef\u4ee5\u901a\u8fc7fprintf\u76f4\u63a5\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u5b9e\u73b0\u4e86write\u65b9\u6cd5\uff0c\u56e0\u6b64\uff0c\u9690\u542b\u90fd\u9690\u542b\u7b26\u5408writer\u63a5\u53e3\u8981\u6c42\u3002","title":"14. \u4f60\u63d0\u5230\u8fc7\u63a5\u53e3\u6bd4\u8f83\u6709\u8da3\uff0c\u90a3\u4e0b\u9762\u54b1\u4eec\u5c31\u8c08\u8c08\u8fd9\u4e00\u90e8\u5206\u3002"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#15-structural-typing","text":"\u4e0d\u8003\u8651\u5b83\u7684\u884c\u4e3a\u7684\u8bdd\uff0c\u5b83\u662f\u6709\u70b9\u50cf\u7ed3\u6784\u5316\u7c7b\u578b\u7cfb\u7edf\u3002\u4e0d\u8fc7\u5b83\u662f\u5b8c\u5168\u62bd\u8c61\u7684\uff0c\u5176\u610f\u5e76\u4e0d\u5728\u62e5\u6709\u4ec0\u4e48\uff0c\u800c\u662f\u80fd\u505a\u4ec0\u4e48\u3002\u6709\u4e86\u7ed3\u6784\uff08struct\uff09\u4e4b\u540e\uff0c\u5c31\u89c4\u5b9a\u4e86\u5176\u5185\u5b58\u7684\u6837\u5b50\uff0c\u7136\u540e\u65b9\u6cd5\u8bf4\u660e\u4e86\u7ed3\u6784\u7684\u884c\u4e3a\uff0c\u518d\u4e4b\u540e\uff0c\u63a5\u53e3\u5219\u62bd\u8c61\u4e86\u8be5\u7ed3\u6784\u53ca\u5176\u5b83\u5b9e\u73b0\u4e86\u76f8\u540c\u65b9\u6cd5\u7684\u5176\u4ed6\u7ed3\u6784\u4e2d\u7684\u8fd9\u4e9b\u65b9\u6cd5\u3002\u8fd9\u662f\u4e00\u79cd\u9e2d\u5b50\u7c7b\u578b\u7cfb\u7edf\uff08duck typing\uff0c\u4e00\u79cd\u52a8\u6001\u7c7b\u578b\u7cfb\u7edf\uff0chttp://en.wikipedia.org/wiki/Duck_typing\uff09\uff0c\u800c\u4e0d\u662f\u7ed3\u6784\u5316\u7c7b\u578b\u7cfb\u7edf\u3002","title":"15. \u67d0\u79cd\u7a0b\u5ea6\u4e0a\u6709\u70b9\u7c7b\u4f3c\u7ed3\u6784\u5316\u7c7b\u578b\u7cfb\u7edf\uff08structural typing)"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#16-go","text":"Go\u6ca1\u6709\u7c7b\u3002","title":"16. \u4f60\u63d0\u5230\u8fc7\u7c7b\uff0c\u4f46Go\u6ca1\u6709\u7c7b\uff0c\u5bf9\u5427\u3002"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#17","text":"\u5e26\u65b9\u6cd5\u7684\u7ed3\u6784\uff08stuct\uff09\u5f88\u50cf\u662f\u7c7b\u3002\u6bd4\u8f83\u6709\u610f\u601d\u7684\u4e0d\u540c\u4e4b\u5904\u662f\uff0cGo\u6ca1\u6709\u5b50\u7c7b\u578b\u7ee7\u627f\uff0c\u4f60\u5fc5\u987b\u5b66\u4e60Go\u7684\u53e6\u7c7b\u5199\u6cd5\uff0cGo\u6709\u66f4\u5f3a\u5927\u3001\u66f4\u6709\u8868\u73b0\u529b\u7684\u4e1c\u897f\u3002\u4e0d\u8fc7Java\u7a0b\u5e8f\u5458\u548cC++\u7a0b\u5e8f\u5458\u521a\u5f00\u59cb\u4f7f\u7528Go\u7684\u65f6\u5019\u4f1a\u611f\u5230\u610f\u5916\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5b9e\u9645\u4e0a\u5728\u7528Go\u53bb\u7f16\u5199Java\u7a0b\u5e8f\u6216C++\u7a0b\u5e8f\uff0c\u8fd9\u6837\u7684\u4ee3\u7801\u5de5\u4f5c\u5f97\u5e76\u4e0d\u597d\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u4f46\u8fd9\u6837\u5c31\u7565\u663e\u7b28\u62d9\u4e86\u3002\u4f46\u662f\u5982\u679c\u4f60\u9000\u4e00\u6b65\uff0c\u5bf9\u81ea\u5df1\u8bf4\u201c\u6211\u8be5\u600e\u6837\u7528Go\u53bb\u7f16\u5199\u8fd9\u4e9b\u4e1c\u897f\u5462\uff1f\u201d\uff0c\u4f60\u4f1a\u53d1\u73b0\u6a21\u5f0f\u5176\u5b9e\u662f\u4e0d\u540c\u7684\uff0c\u7528Go\u4f60\u53ef\u4ee5\u7528\u66f4\u77ed\u7684\u7a0b\u5e8f\u6765\u8868\u8fbe\u7c7b\u4f3c\u7684\u60f3\u6cd5\uff0c\u56e0\u4e3a\u4f60\u4e0d\u9700\u8981\u5728\u6240\u6709\u5b50\u7c7b\u91cc\u91cd\u590d\u5b9e\u73b0\u884c\u4e3a\u3002\u8fd9\u662f\u4e2a\u975e\u5e38\u4e0d\u540c\u7684\u73af\u5883\uff0c\u6bd4\u4f60\u7b2c\u4e00\u773c\u770b\u4e0a\u53bb\u7684\u8fd8\u8981\u4e0d\u540c\u3002","title":"17. \u4f46\u662f\u6ca1\u6709\u7c7b\u600e\u4e48\u53bb\u5199\u4ee3\u7801\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#18-structs","text":"\u6709\u4e00\u4e2a\u53eb\u505a\u533f\u540d\u57df\u7684\u6982\u5ff5\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684\u5d4c\u5165\u3002\u5176\u5de5\u4f5c\u65b9\u5f0f\u662f\u8fd9\u6837\uff1a\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u7ed3\u6784\uff08struct\uff09\uff0c\u800c\u53c8\u6709\u4e00\u4e9b\u5176\u5b83\u4e1c\u897f\u5b9e\u73b0\u4e86\u4f60\u60f3\u8981\u7684\u884c\u4e3a\uff0c\u4f60\u53ef\u4ee5\u628a\u8fd9\u4e9b\u4e1c\u897f\u5d4c\u5165\u5230\u4f60\u7684\u7ed3\u6784\uff08struct\uff09\u91cc\uff0c\u8fd9\u6837\uff0c\u8fd9\u4e2a\u7ed3\u6784\uff08struct\uff09\u4e0d\u4ec5\u4ec5\u53ef\u4ee5\u83b7\u5f97\u88ab\u5d4c\u5165\u8005\u7684\u6570\u636e\u8fd8\u53ef\u4ee5\u83b7\u5f97\u5b83\u7684\u65b9\u6cd5\u3002\u5982\u679c\u4f60\u6709\u4e00\u4e9b\u516c\u5171\u884c\u4e3a\uff0c\u6bd4\u5982\u67d0\u4e9b\u7c7b\u578b\u91cc\u90fd\u6709\u4e00\u4e2aname\u65b9\u6cd5\uff0c\u5728Java\u91cc\u7684\u8bdd\u4f60\u4f1a\u8ba4\u4e3a\u8fd9\u662f\u4e00\u7ec4\u5b50\u7c7b\uff08\u7ee7\u627f\u6765\u7684\u65b9\u6cd5\uff09\uff0c\u5728Go\u91cc\uff0c\u4f60\u53ea\u9700\u62ff\u5230\u4e00\u4e2a\u62e5\u6709name\u65b9\u6cd5\u7684\u7c7b\u578b\uff0c\u653e\u5728\u6240\u6709\u4f60\u8981\u5b9e\u73b0\u8fd9\u4e2a\u65b9\u6cd5\u7684\u7ed3\u6784\u91cc\uff0c\u5b83\u4eec\u5c31\u4f1a\u81ea\u52a8\u83b7\u5f97name\u65b9\u6cd5\uff0c\u800c\u4e0d\u7528\u5728\u6bcf\u4e2a\u7ed3\u6784\u91cc\u90fd\u53bb\u5199\u8fd9\u4e2a\u65b9\u6cd5\u3002\u8fd9\u662f\u4e2a\u5f88\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u4f46\u6709\u4e0d\u5c11\u6709\u8da3\u7684\u7ed3\u6784\u5316\u7684\u4e1c\u897f\u4f7f\u7528\u5230\u4e86\u5d4c\u5165\u3002 \u800c\u4e14\uff0c\u4f60\u8fd8\u53ef\u4ee5\u628a\u591a\u4e2a\u4e1c\u897f\u5d4c\u5165\u5230\u4e00\u4e2a\u5355\u4e00\u7ed3\u6784\u4e2d\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u60f3\u8c61\u6210\u591a\u91cd\u7ee7\u627f\uff0c\u4e0d\u8fc7\u8fd9\u4f1a\u8ba9\u4eba\u66f4\u52a0\u8ff7\u60d1\uff0c\u5b9e\u9645\u5728Go\u91cc\u5b83\u662f\u5f88\u7b80\u5355\u7684\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u4f60\u53ef\u4ee5\u653e\u4efb\u4f55\u4e1c\u897f\u5728\u91cc\u9762\uff0c\u57fa\u672c\u4e0a\u8054\u5408\u4e86\u6240\u6709\u7684\u65b9\u6cd5\uff0c\u5bf9\u6bcf\u4e2a\u65b9\u6cd5\u96c6\u5408\uff0c\u4f60\u53ea\u9700\u5199\u4e00\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u62e5\u6709\u5176\u6240\u6709\u884c\u4e3a\u3002","title":"18. \u5982\u679c\u6211\u6709\u4e00\u4e9b\u884c\u4e3a\u8981\u5b9e\u73b0\uff0c\u800c\u4e14\u60f3\u653e\u5728\u591a\u4e2astructs\u91cc\uff0c\u600e\u4e48\u53bb\u5171\u4eab\u8fd9\u4e9b\u884c\u4e3a\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#19","text":"\u547d\u540d\u51b2\u7a81\u5b9e\u9645\u4e0a\u5e76\u6ca1\u4ec0\u4e48\uff0cGo\u662f\u9759\u6001\u5904\u7406\u8fd9\u4e00\u95ee\u9898\u7684\u3002\u5176\u89c4\u5219\u662f\uff0c\u5982\u679c\u6709\u591a\u5c42\u5d4c\u5165\uff0c\u5219\u6700\u9ad8\u5c42\u4f18\u5148\uff1b\u5982\u679c\u540c\u4e00\u5c42\u6709\u4e24\u4e2a\u76f8\u540c\u7684\u540d\u5b57\u6216\u76f8\u540c\u7684\u65b9\u6cd5\uff0cGo\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u9759\u6001\u9519\u8bef\u3002\u4f60\u4e0d\u7528\u81ea\u5df1\u68c0\u67e5\uff0c\u53ea\u9700\u7559\u610f\u8fd9\u4e2a\u9519\u8bef\u5373\u53ef\u3002\u547d\u540d\u51b2\u7a81\u662f\u9759\u6001\u68c0\u67e5\u7684\uff0c\u800c\u4e14\u89c4\u5219\u975e\u5e38\u7b80\u5355\uff0c\u5728\u5b9e\u8df5\u4e2d\u547d\u540d\u51b2\u7a81\u53d1\u751f\u7684\u4e5f\u5e76\u4e0d\u591a\u3002","title":"19. \u5982\u679c\u6709\u591a\u91cd\u7ee7\u627f\u547d\u540d\u51b2\u7a81\u7684\u95ee\u9898\u8be5\u600e\u4e48\u529e\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#20","text":"\u63a5\u53e3\u4e00\u4e2a\u6709\u610f\u601d\u7684\u5730\u65b9\u662f\u4ed6\u4eec\u53ea\u662f\u96c6\u5408\uff0c\u65b9\u6cd5\u7684\u96c6\u5408\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709\u7a7a\u96c6\u5408\uff0c\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u7684\u63a5\u53e3\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u7a7a\u63a5\u53e3\u3002\u7cfb\u7edf\u4e2d\u4efb\u4f55\u4e1c\u897f\u90fd\u7b26\u5408\u7a7a\u63a5\u53e3\u7684\u8981\u6c42\u3002\u7a7a\u63a5\u53e3\u6709\u70b9\u7c7b\u4f3c\u4e8eJava\u7684Object\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0cint\u3001float\u548cstring\u4e5f\u7b26\u5408\u7a7a\u63a5\u53e3\uff0cGo\u5e76\u4e0d\u9700\u8981\u4e00\u4e2a\u5b9e\u9645\u7684\u7c7b\uff0c\u56e0\u4e3aGo\u91cc\u6ca1\u6709\u7c7b\u7684\u6982\u5ff5\uff0c\u6240\u6709\u4e1c\u897f\u90fd\u662f\u7edf\u4e00\u7684\uff0c\u8fd9\u6709\u70b9\u50cfvoid \uff0c\u53ea\u4e0d\u8fc7void \u662f\u9488\u5bf9\u6307\u9488\u800c\u4e0d\u662f\u503c\u3002 \u4f46\u662f\u4e00\u4e2a\u7a7a\u63a5\u53e3\u503c\u53ef\u4ee5\u4ee3\u8868\u7cfb\u7edf\u4e2d\u7684\u4efb\u4f55\u4e1c\u897f\uff0c\u975e\u5e38\u5177\u6709\u666e\u904d\u6027\u3002\u6240\u4ee5\uff0c\u5982\u679c\u521b\u5efa\u4e00\u4e2a\u7a7a\u63a5\u53e3\u6570\u7ec4\uff0c\u5b9e\u9645\u4e0a\u4f60\u5c31\u6709\u4e86\u4e00\u4e2a\u591a\u6001\u6027\u5bb9\u5668\uff0c\u5982\u679c\u4f60\u60f3\u518d\u628a\u5b83\u62ff\u51fa\u6765\uff0cGo\u91cc\u9762\u6709\u7c7b\u578b\u5f00\u5173\uff0c\u4f60\u53ef\u4ee5\u5728\u89e3\u5305\u7684\u65f6\u5019\u8be2\u95ee\u91cc\u9762\u7684\u7c7b\u578b\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b89\u5168\u7684\u8fdb\u884c\u89e3\u5305\u64cd\u4f5c\u3002","title":"20. \u56e0\u4e3a\u7cfb\u7edf\u4e2d\u6ca1\u6709\u6839\u5bf9\u8c61\u6216\u6839\u7c7b\uff0c\u5982\u679c\u6211\u60f3\u5f97\u5230\u4e00\u4e2a\u62e5\u6709\u4e0d\u540c\u7c7b\u578b\u7684\u7ed3\u6784\u7684\u5217\u8868\uff0c\u5e94\u8be5\u600e\u4e48\u529e\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#21-gogoroutinescoroutines","text":"Coroutines\u548cGoroutines\u662f\u4e0d\u540c\u7684\uff0c\u5b83\u4eec\u7684\u540d\u5b57\u53cd\u5e94\u4e86\u8fd9\u4e00\u70b9\u3002\u6211\u4eec\u7ed9\u5b83\u8d77\u4e86\u4e2a\u65b0\u540d\uff0c\u56e0\u4e3a\u6709\u592a\u591a\u672f\u8bed\u4e86\uff0c\u8fdb\u7a0b\uff08processes\uff09\u3001\u7ebf\u7a0b\uff08threads\uff09\u3001\u8f7b\u91cf\u7ea7\u7ebf\u7a0b\u3001\u5f26\uff08chords\uff09\uff0c\u8fd9\u4e9b\u4e1c\u897f\u6709\u6570\u4e0d\u6e05\u7684\u540d\u5b57\uff0c\u800cGoroutines\u4e5f\u5e76\u4e0d\u65b0\u9c9c\uff0c\u540c\u6837\u7684\u6982\u5ff5\u5728\u5176\u5b83\u7cfb\u7edf\u91cc\u5df2\u7ecf\u90fd\u6709\u4e86\u3002\u4f46\u662f\u8fd9\u4e2a\u6982\u5ff5\u548c\u524d\u9762\u90a3\u4e9b\u540d\u5b57\u6709\u5f88\u5927\u4e0d\u540c\uff0c\u6211\u5e0c\u671b\u6211\u4eec\u81ea\u5df1\u8d77\u540d\u5b57\u6765\u547d\u540d\u5b83\u4eec\u3002Goroutine\u80cc\u540e\u7684\u542b\u4e49\u662f\uff1a\u5b83\u662f\u4e00\u4e2acoroutine\uff0c\u4f46\u662f\u5b83\u5728\u963b\u585e\u4e4b\u540e\u4f1a\u8f6c\u79fb\u5230\u5176\u5b83coroutine\uff0c\u540c\u4e00\u7ebf\u7a0b\u4e0a\u7684\u5176\u5b83coroutines\u4e5f\u4f1a\u8f6c\u79fb\uff0c\u56e0\u6b64\u5b83\u4eec\u4e0d\u4f1a\u963b\u585e\u3002 \u56e0\u6b64\uff0c\u4ece\u6839\u672c\u4e0a\u8bb2Goroutines\u662fcoroutines\u7684\u4e00\u4e2a\u5206\u652f\uff0c\u53ef\u5728\u8db3\u591f\u591a\u7684\u64cd\u4f5c\u7ebf\u7a0b\u4e0a\u83b7\u5f97\u591a\u8def\u7279\u6027\uff0c\u4e0d\u4f1a\u6709Goroutines\u4f1a\u88ab\u5176\u4ed6coroutine\u963b\u585e\u3002\u5982\u679c\u5b83\u4eec\u53ea\u662f\u534f\u4f5c\u7684\u8bdd\uff0c\u53ea\u9700\u4e00\u4e2a\u7ebf\u7a0b\u5373\u53ef\u3002\u4f46\u662f\u5982\u679c\u6709\u5f88\u591aIO\u64cd\u4f5c\u7684\u8bdd\uff0c\u5c31\u4f1a\u6709\u8bb8\u591a\u64cd\u4f5c\u7cfb\u7edf\u52a8\u4f5c\uff0c\u4e5f\u5c31\u4f1a\u6709\u8bb8\u591a\u8bb8\u591a\u7ebf\u7a0b\u3002\u4f46\u662fGoroutines\u8fd8\u662f\u975e\u5e38\u5ec9\u4ef7\u7684\uff0c\u5b83\u4eec\u53ef\u4ee5\u6709\u6570\u5341\u4e07\u4e4b\u4f17\uff0c\u603b\u4f53\u8fd0\u884c\u826f\u597d\u5e76\u53ea\u5360\u7528\u5408\u7406\u6570\u91cf\u7684\u5185\u5b58\uff0c\u5b83\u4eec\u521b\u5efa\u8d77\u6765\u5f88\u5ec9\u4ef7\u5e76\u6709\u5783\u573e\u56de\u6536\u529f\u80fd\uff0c\u4e00\u5207\u90fd\u975e\u5e38\u7b80\u5355\u3002","title":"21. Go\u91cc\u6709\u53eb\u505aGoroutines\u7684\u4e1c\u897f\uff0c\u5b83\u4eec\u548ccoroutines\u6709\u4ec0\u4e48\u533a\u522b\uff1f\u4e0d\u4e00\u6837\u4e48\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#22-mnmcoroutinesn","text":"\u5bf9\u7684\uff0c\u4f46\u662fcoroutines\u7684\u6570\u91cf\u548c\u7ebf\u7a0b\u7684\u6570\u91cf\u662f\u6309\u7167\u7a0b\u5e8f\u6240\u505a\u5de5\u4f5c\u52a8\u6001\u51b3\u5b9a\u7684\u3002","title":"22. \u4f60\u63d0\u5230\u4f60\u4eec\u4f7f\u7528\u4e86m:n\u7ebf\u7a0b\u6a21\u578b\uff0c\u5373m\u4e2acoroutines\u6620\u5c04\u5230n\u4e2a\u7ebf\u7a0b\u4e0a\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#23-goroutines","text":"\u662f\u7684\uff0c\u4e00\u65e6\u6709\u4e24\u4e2a\u72ec\u7acb\u6267\u884c\u7684\u529f\u80fd\uff0c\u5982\u679cGoroutine\u4eec\u8981\u76f8\u4e92\u534f\u4f5c\u5b83\u4eec\u5c31\u9700\u8981\u76f8\u4e92\u5bf9\u8bdd\u3002\u6240\u4ee5\u5c31\u6709\u4e86\u901a\u9053\u8fd9\u4e2a\u6982\u5ff5\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7c7b\u578b\u6d88\u606f\u961f\u5217\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u6765\u53d1\u9001\u503c\uff0c\u5982\u679c\u4f60\u5728Goroutine\u4e2d\u6301\u6709\u901a\u9053\u7684\u4e00\u7aef\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u53d1\u9001\u7c7b\u578b\u503c\u7ed9\u53e6\u5916\u4e00\u7aef\uff0c\u90a3\u4e00\u7aef\u5219\u4f1a\u5f97\u5230\u60f3\u8981\u7684\u4e1c\u897f\u3002\u901a\u9053\u6709\u540c\u6b65\u548c\u5f02\u6b65\u4e4b\u5206\uff0c\u6211\u4eec\u5c3d\u53ef\u80fd\u4f7f\u7528\u540c\u6b65\u901a\u9053\uff0c\u56e0\u4e3a\u540c\u6b65\u901a\u9053\u7684\u6784\u601d\u975e\u5e38\u597d\uff0c\u4f60\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c\u540c\u6b65\u548c\u901a\u4fe1\uff0c\u6240\u6709\u4e1c\u897f\u8fd0\u884c\u8d77\u6765\u90fd\u6b65\u8c03\u4e00\u81f4\u3002 \u4f46\u662f\u6709\u65f6\u7531\u4e8e\u6548\u7387\u539f\u56e0\u6216\u8c03\u5ea6\u539f\u56e0\uff0c\u5bf9\u6d88\u606f\u8fdb\u884c\u7f13\u5b58\u4e5f\u662f\u6709\u610f\u4e49\u7684\u3002\u4f60\u53ef\u4ee5\u5411\u901a\u9053\u53d1\u9001\u6574\u578b\u6d88\u606f\u3001\u5b57\u7b26\u4e32\u3001\u7ed3\u6784\u3001\u6307\u5411\u7ed3\u6784\u7684\u6307\u9488\u7b49\u4efb\u4f55\u4e1c\u897f\uff0c\u975e\u5e38\u6709\u610f\u601d\u7684\u4e8b\uff0c\u4f60\u53ef\u4ee5\u5728\u901a\u9053\u4e0a\u53d1\u9001\u53e6\u4e00\u4e2a\u901a\u9053\u3002\u8fd9\u6837\uff0c\u6211\u5c31\u80fd\u591f\u628a\u4e0e\u4ed6\u4eba\u7684\u901a\u4fe1\u53d1\u9001\u7ed9\u4f60\uff0c\u8fd9\u662f\u975e\u5e38\u6709\u610f\u601d\u7684\u6982\u5ff5\u3002","title":"23. Goroutines\u6709\u7528\u4e8e\u901a\u4fe1\u7684\u901a\u9053\u5417\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#24","text":"\u4e0d\u5bf9\uff0c\u540c\u6b65\u662f\u6ca1\u6709\u7f13\u5b58\u7684\uff1b\u5f02\u6b65\u548c\u7f13\u5b58\u662f\u4e00\u4e2a\u610f\u601d\uff0c\u56e0\u4e3a\u6709\u4e86\u7f13\u5b58\uff0c\u6211\u624d\u80fd\u628a\u503c\u653e\u5728\u7f13\u5b58\u7684\u7a7a\u95f4\u91cc\u8fdb\u884c\u4fdd\u5b58\u3002\u4f46\u662f\u5982\u679c\u6ca1\u6709\u7f13\u5b58\uff0c\u6211\u5fc5\u987b\u7b49\u7740\u522b\u4eba\u628a\u503c\u62ff\u8d70\uff0c\u56e0\u6b64\u65e0\u7f13\u5b58\u548c\u540c\u6b65\u662f\u4e00\u4e2a\u610f\u601d\u3002","title":"24. \u4f60\u63d0\u5230\u4f60\u4eec\u6709\u7f13\u5b58\u7684\u540c\u6b65\u901a\u9053\u548c\u5f02\u6b65\u901a\u9053\u3002"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#25-goroutine","text":"\u5bf9\uff0c\u4f46\u662f\u8f7b\u91cf\u7ea7\u7684\u3002","title":"25. \u6bcf\u4e2aGoroutine\u5c31\u50cf\u662f\u4e00\u4e2a\u5c0f\u7684\u7ebf\u7a0b\uff0c\u53ef\u4ee5\u8fd9\u4e48\u7ed9\u8bfb\u8005\u89e3\u91ca\u5427\u3002"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#26-goroutines","text":"\u6ca1\u9519\uff0cGoroutines\u5728\u88ab\u521b\u5efa\u7684\u65f6\u5019\uff0c\u53ea\u6709\u975e\u5e38\u5c0f\u7684\u4e00\u4e2a\u6808\u2014\u20144K\uff0c\u53ef\u80fd\u6709\u70b9\u5c0f\u5427\uff0c\u8fd9\u4e2a\u6808\u662f\u5728\u5806\u4e2d\u7684\uff0c\u5f53\u7136\uff0c\u4f60\u77e5\u9053\u5982\u679c\u5728C\u8bed\u8a00\u91cc\u6709\u8fd9\u4e48\u4e00\u4e2a\u5c0f\u6808\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u5f53\u4f60\u8c03\u7528\u51fd\u6570\u6216\u5206\u914d\u6570\u7ec4\u4e4b\u7c7b\u7684\u4e1c\u897f\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u9a6c\u4e0a\u6ea2\u51fa\u3002\u5728Go\u91cc\u5219\u4e0d\u4f1a\u53d1\u751f\u8fd9\u6837\u7684\u4e8b\u60c5\uff0c\u6bcf\u4e2a\u51fd\u6570\u7684\u5f00\u5934\u90fd\u4f1a\u6709\u82e5\u5e72\u6307\u4ee4\u4ee5\u68c0\u67e5\u6808\u6307\u9488\u662f\u5426\u8fbe\u5230\u5176\u754c\u9650\uff0c\u5982\u679c\u5230\u8fbe\u754c\u9650\uff0c\u5b83\u4f1a\u94fe\u63a5\u5230\u5176\u5b83\u5757\u4e0a\uff0c\u8fd9\u79cd\u8fde\u63a5\u7684\u6808\u53eb\u505a\u5206\u6bb5\u6808\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86\u6bd4\u521a\u5f00\u59cb\u542f\u52a8\u65f6\u66f4\u591a\u7684\u6808\uff0c\u4f60\u5c31\u6709\u4e86\u8fd9\u79cd\u6808\u5757\u94fe\u63a5\u4e32\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u5206\u6bb5\u6808\u3002 \u7531\u4e8e\u53ea\u6709\u82e5\u5e72\u6307\u4ee4\uff0c\u8fd9\u79cd\u673a\u5236\u975e\u5e38\u5ec9\u4ef7\u3002\u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u5206\u914d\u591a\u4e2a\u6808\u5757\uff0c\u4f46\u662fGo\u7f16\u8bd1\u5668\u66f4\u503e\u5411\u4e8e\u5c06\u5927\u7684\u4e1c\u897f\u79fb\u5230\u5806\u4e0a\uff0c\u56e0\u6b64\u5b9e\u9645\u4e0a\u5178\u578b\u7684\u7528\u6cd5\u662f\uff0c\u4f60\u5fc5\u987b\u5728\u8fbe\u52304K\u8fb9\u754c\u4e4b\u524d\u8c03\u7528\u51e0\u4e2a\u65b9\u6cd5\uff0c\u867d\u7136\u8fd9\u5e76\u4e0d\u7ecf\u5e38\u53d1\u751f\u3002\u4f46\u662f\u6709\u4e00\u70b9\u5f88\u91cd\u8981\uff1a\u5b83\u4eec\u521b\u5efa\u8d77\u6765\u5f88\u5ec9\u4ef7\uff0c\u56e0\u4e3a\u4ec5\u6709\u4e00\u6b21\u5185\u5b58\u5206\u914d\uff0c\u800c\u4e14\u5206\u914d\u7684\u5185\u5b58\u975e\u5e38\u5c0f\uff0c\u5728\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Goroutine\u65f6\u4f60\u4e0d\u7528\u6307\u660e\u6808\u7684\u5c3a\u5bf8\uff0c\u8fd9\u662f\u5f88\u597d\u7684\u4e00\u79cd\u62bd\u8c61\uff0c\u4f60\u6839\u672c\u4e0d\u7528\u62c5\u5fc3\u6808\u7684\u5927\u5c0f\u95ee\u9898\u3002\u4e4b\u540e\uff0c\u6808\u4f1a\u968f\u9700\u6c42\u589e\u957f\u6216\u7f29\u5c0f\uff0c\u4f60\u4e0d\u7528\u62c5\u5fc3\u9012\u5f52\u4f1a\u6709\u95ee\u9898\uff0c\u4f60\u4e5f\u4e0d\u7528\u62c5\u5fc3\u5927\u7684\u7f13\u5b58\u6216\u4efb\u4f55\u5bf9\u7a0b\u5e8f\u5458\u5b8c\u5168\u4e0d\u53ef\u89c1\u7684\u4e1c\u897f\uff0c\u4e00\u5207\u7531Go\u8bed\u8a00\u6765\u6253\u7406\uff0c\u8fd9\u662f\u4e00\u95e8\u8bed\u8a00\u7684\u6574\u4f53\u6784\u601d\u3002","title":"26. \u5b83\u4eec\u662f\u8f7b\u91cf\u7ea7\u7684\u3002\u4f46\u662f\u6bcf\u4e2a\u7ebf\u7a0b\u540c\u6837\u90fd\u9884\u5206\u914d\u6808\u7a7a\u95f4\uff0c\u56e0\u800c\u5b83\u4eec\u975e\u5e38\u8017\u8d39\u8d44\uff0cGoroutines\u662f\u600e\u4e48\u5904\u7406\u7684\u5462\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#27-go","text":"\u6211\u8ba4\u4e3a\u8fd9\u662f\u4e2a\u975e\u5e38\u96be\u7684\u95ee\u9898\uff0c\u6211\u4eec\u4e5f\u8fd8\u6ca1\u6709\u89e3\u51b3\u5b83\uff0c\u6211\u4eec\u7684\u5783\u573e\u56de\u6536\u5668\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u5ef6\u8fdf\u95ee\u9898\uff0c\u5783\u573e\u56de\u6536\u5668\u53ef\u80fd\u4f1a\u505c\u987f\uff0c\u4f46\u662f\u6211\u4eec\u7684\u770b\u6cd5\u662f\uff0c\u6211\u4eec\u76f8\u4fe1\u5c3d\u7ba1\u8fd9\u662f\u4e00\u4e2a\u7814\u7a76\u8bfe\u9898\uff0c\u867d\u8fd8\u6ca1\u89e3\u51b3\u4f46\u662f\u6211\u4eec\u6b63\u5728\u52aa\u529b\u3002\u5bf9\u4e8e\u73b0\u4eca\u7684\u5e76\u884c\u673a\uff0c\u901a\u8fc7\u628a\u673a\u5668\u5185\u6838\u7684\u4e00\u4e9b\u788e\u7247\u4e13\u95e8\u5206\u7ed9\u4f5c\u4e3a\u540e\u53f0\u4efb\u52a1\u7684\u5783\u573e\u56de\u6536\u6765\u8fdb\u884c\u5e76\u884c\u56de\u6536\u662f\u53ef\u884c\u7684\u3002\u5728\u8fd9\u4e00\u9886\u57df\u6709\u5f88\u591a\u5de5\u4f5c\u8981\u505a\uff0c\u4e5f\u53d6\u5f97\u4e86\u4e0d\u5c11\u6210\u529f\uff0c\u4f46\u8fd9\u662f\u4e2a\u5f88\u5fae\u5999\u7684\u95ee\u9898\uff0c\u6211\u4e0d\u8ba4\u4e3a\u800c\u6211\u4eec\u4f1a\u628a\u5ef6\u8fdf\u964d\u4e3a0\uff0c\u4f46\u662f\u6211\u76f8\u4fe1\u6211\u4eec\u53ef\u4ee5\u8ba9\u5ef6\u8fdf\u5c3d\u53ef\u80fd\u4f4e\uff0c\u8fd9\u6837\u5bf9\u4e8e\u7edd\u5927\u591a\u6570\u7cfb\u7edf\u8f6f\u4ef6\u6765\u8bb2\u5b83\u4e0d\u518d\u662f\u4e2a\u95ee\u9898\u3002\u6211\u4e0d\u4fdd\u8bc1\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u4e0d\u4f1a\u6709\u663e\u8457\u5ef6\u8fdf\uff0c\u4f46\u662f\u6211\u60f3\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u6210\u529f\uff0c\u800c\u4e14\u8fd9\u662fGo\u8bed\u8a00\u4e2d\u4e00\u4e2a\u6bd4\u8f83\u6d3b\u8dc3\u7684\u9886\u57df\u3002","title":"27. \u6211\u4eec\u518d\u6765\u8c08\u8c08\u81ea\u52a8\u5316\u65b9\u9762\u7684\u4e1c\u897f\uff0c\u6700\u521d\u4f60\u4eec\u662f\u5c06Go\u8bed\u8a00\u4f5c\u4e3a\u7cfb\u7edf\u7ea7\u8bed\u8a00\u6765\u63a8\u5e7f\u7684\uff0c\u4e00\u4e2a\u6709\u8da3\u7684\u9009\u62e9\u662f\u4f7f\u7528\u4e86\u5783\u573e\u56de\u6536\u5668\uff0c\u4f46\u662f\u5b83\u901f\u5ea6\u5e76\u4e0d\u5feb\u6216\u8005\u8bf4\u6709\u5783\u573e\u56de\u6536\u95f4\u6b47\u95ee\u9898\uff0c\u5982\u679c\u7528\u5b83\u5199\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7684\u8bdd\uff0c\u8fd9\u662f\u975e\u5e38\u70e6\u4eba\u7684\u3002\u4f60\u4eec\u662f\u600e\u4e48\u770b\u8fd9\u4e00\u95ee\u9898\u7684\uff1f"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#28","text":"Go\u53ef\u4ee5\u8ba9\u4f60\u6df1\u5165\u5230\u5185\u5b58\u5e03\u5c40\uff0c\u4f60\u53ef\u4ee5\u5206\u914d\u81ea\u5df1\u7684\u7a7a\u95f4\uff0c\u5982\u679c\u4f60\u60f3\u7684\u8bdd\u53ef\u4ee5\u81ea\u5df1\u505a\u5185\u5b58\u7ba1\u7406\u3002\u867d\u7136\u6ca1\u6709alloc\u548cfree\u65b9\u6cd5\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u7f13\u5b58\u628a\u4e1c\u897f\u653e\u8fdb\u53bb\uff0c\u8fd9\u4e2a\u6280\u5de7\u53ef\u7528\u6765\u907f\u514d\u4ea7\u751f\u4e0d\u5fc5\u8981\u7684\u5783\u573e\u3002\u5c31\u50cf\u5728C\u8bed\u8a00\u4e00\u6837\uff0c\u5728C\u91cc\uff0c\u5982\u679c\u4f60\u8001\u662fmalloc\u548cfree\uff0c\u4ee3\u4ef7\u5f88\u5927\u3002\u56e0\u6b64\uff0c\u4f60\u5206\u914d\u4e00\u4e2a\u5bf9\u8c61\u6570\u7ec4\u5e76\u628a\u5b83\u4eec\u94fe\u63a5\u5728\u4e00\u8d77\uff0c\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u7ba1\u7406\u4f60\u81ea\u5df1\u7684\u7a7a\u95f4\uff0c\u800c\u4e14\u8fd8\u4e0d\u7528malloc\u548cfree\uff0c\u90a3\u4e48\u901f\u5ea6\u4f1a\u5f88\u5feb\u3002\u4f60\u53ef\u4ee5\u505a\u4e0eGo\u6240\u505a\u76f8\u540c\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3aGo\u8d4b\u4e88\u4f60\u4e0e\u5e95\u5c42\u4e8b\u7269\u5b89\u5168\u6253\u4ea4\u9053\u7684\u80fd\u529b\uff0c\u56e0\u6b64\u4e0d\u7528\u6b3a\u9a97\u7c7b\u578b\u7cfb\u7edf\u6765\u8fbe\u5230\u76ee\u7684\uff0c\u4f60\u5b9e\u9645\u4e0a\u53ef\u4ee5\u81ea\u5df1\u6765\u505a\u3002 \u524d\u9762\u6211\u8868\u8fbe\u4e86\u8fd9\u6837\u7684\u89c2\u70b9\uff0c\u5728Java\u91cc\uff0c\u65e0\u8bba\u4f55\u65f6\u4f60\u5728\u7ed3\u6784\u91cc\u5d4c\u5165\u5176\u5b83\u4e1c\u897f\uff0c\u90fd\u662f\u901a\u8fc7\u6307\u9488\u6765\u5b9e\u73b0\u7684\uff0c\u4f46\u5728Go\u91cc\u4f60\u53ef\u4ee5\u628a\u5b83\u653e\u5728\u4e00\u4e2a\u5355\u4e00\u7ed3\u6784\u4e2d\u3002\u56e0\u6b64\u5982\u679c\u4f60\u6709\u4e00\u4e9b\u9700\u8981\u82e5\u5e72\u7f13\u5b58\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f60\u53ef\u4ee5\u628a\u7f13\u5b58\u653e\u5728\u7ed3\u6784\u7684\u5185\u5b58\u91cc\uff0c\u8fd9\u4e0d\u4ec5\u610f\u5473\u7740\u9ad8\u6548\uff08\u56e0\u4e3a\u4f60\u4e0d\u7528\u95f4\u63a5\u5f97\u5230\u7f13\u5b58\uff09\uff0c\u800c\u4e14\u8fd8\u610f\u5473\u7740\u5355\u4e00\u7ed3\u6784\u53ef\u4ee5\u5728\u4e00\u6b65\u4e4b\u5185\u8fdb\u884c\u5185\u5b58\u5206\u914d\u4e0e\u5783\u573e\u56de\u6536\u3002\u8fd9\u6837\u5f00\u9500\u5c31\u4f1a\u51cf\u5c11\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u8003\u8651\u4e00\u4e0b\u5783\u573e\u56de\u6536\u7684\u5b9e\u9645\u60c5\u51b5\uff0c\u5f53\u4f60\u6b63\u5728\u8bbe\u8ba1\u6027\u80fd\u8981\u6c42\u4e0d\u9ad8\u7684\u4e1c\u897f\u65f6\uff0c\u4f60\u4e0d\u5e94\u8be5\u603b\u662f\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u5982\u679c\u662f\u9ad8\u6027\u80fd\u8981\u6c42\u7684\uff0c\u8003\u8651\u5230\u5185\u5b58\u5e03\u5c40\uff0c\u5c3d\u7ba1Go\u662f\u5177\u6709\u771f\u6b63\u5783\u573e\u56de\u6536\u7279\u6027\u7684\u8bed\u8a00\uff0c\u5b83\u8fd8\u662f\u7ed9\u4e86\u4f60\u5de5\u5177\uff0c\u8ba9\u4f60\u81ea\u5df1\u6765\u63a7\u5236\u6709\u591a\u5c11\u5185\u5b58\u548c\u4ea7\u751f\u4e86\u7684\u5783\u573e\u3002\u6211\u60f3\u8fd9\u662f\u5f88\u591a\u4eba\u5bb9\u6613\u5ffd\u7565\u7684\u3002","title":"28. \u6709\u6ca1\u6709\u65b9\u6cd5\u80fd\u591f\u907f\u514d\u76f4\u9762\u5783\u573e\u56de\u6536\u5668\uff0c\u6bd4\u5982\u7528\u4e00\u4e9b\u5927\u5bb9\u91cf\u7f13\u5b58\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6570\u636e\u6254\u8fdb\u53bb\u3002"},{"location":"golang/Rob%20Pike%E8%B0%88Google%20Go/#29-go","text":"\u6211\u4eec\u662f\u628a\u4ed6\u8bbe\u8ba1\u4e3a\u4e00\u79cd\u7cfb\u7edf\u7ea7\u8bed\u8a00\uff0c\u56e0\u4e3a\u6211\u4eec\u5728Google\u6240\u505a\u7684\u5de5\u4f5c\u662f\u7cfb\u7edf\u7ea7\u7684\uff0c\u5bf9\u5427\uff1fWeb\u670d\u52a1\u5668\u548c\u6570\u636e\u5e93\u7cfb\u7edf\u3001\u4ee5\u53ca\u5b58\u50a8\u7cfb\u7edf\u7b49\uff0c\u8fd9\u4e9b\u90fd\u662f\u7cfb\u7edf\u3002\u4f46\u4e0d\u662f\u64cd\u4f5c\u7cfb\u7edf\uff0c\u6211\u4e0d\u77e5\u9053Go\u662f\u5426\u80fd\u6210\u4e3a\u4e00\u4e2a\u597d\u7684\u64cd\u4f5c\u7cfb\u7edf\u8bed\u8a00\uff0c\u4f46\u662f\u4e5f\u4e0d\u80fd\u8bf4\u5b83\u4e0d\u4f1a\u6210\u4e3a\u8fd9\u6837\u7684\u8bed\u8a00\u3002\u6709\u8da3\u7684\u662f\u7531\u4e8e\u6211\u4eec\u8bbe\u8ba1\u8bed\u8a00\u65f6\u6240\u91c7\u7528\u7684\u65b9\u6cd5\uff0cGo\u6700\u7ec8\u6210\u4e3a\u4e86\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u901a\u7528\u8bed\u8a00\uff0c\u8fd9\u6709\u70b9\u51fa\u4e4e\u6211\u4eec\u610f\u6599\u3002\u6211\u60f3\u5927\u591a\u6570\u7528\u6237\u5e76\u6ca1\u6709\u5b9e\u9645\u4ece\u7cfb\u7edf\u89c2\u70b9\u6765\u8003\u8651\u8fc7\u5b83\uff0c\u5c3d\u7ba1\u5f88\u591a\u4eba\u505a\u8fc7\u4e00\u70b9Web\u670d\u52a1\u5668\u6216\u7c7b\u4f3c\u4e1c\u897f\u3002 Go\u7528\u6765\u505a\u5f88\u591a\u5e94\u7528\u7c7b\u7684\u4e1c\u897f\u4e5f\u975e\u5e38\u4e0d\u9519\uff0c\u5b83\u5c06\u4f1a\u6709\u66f4\u597d\u7684\u51fd\u6570\u5e93\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u5de5\u5177\u4ee5\u53ca\u4e00\u4e9bGo\u66f4\u6709\u7528\u7684\u4e1c\u897f\uff0cGo\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u901a\u7528\u8bed\u8a00\uff0c\u5b83\u662f\u6211\u7528\u8fc7\u7684\u6700\u9ad8\u4ea7\u7684\u8bed\u8a00\u3002","title":"29. \u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1aGo\u662f\u7cfb\u7edf\u7ea7\u8bed\u8a00\u8fd8\u662f\u5e94\u7528\u7ea7\u8bed\u8a00\uff1f"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/","text":"forked from uber_go_guide_cn uber-go/guide \u7684\u4e2d\u6587\u7ffb\u8bd1 English Uber Go \u8bed\u8a00\u7f16\u7801\u89c4\u8303 Uber \u662f\u4e00\u5bb6\u7f8e\u56fd\u7845\u8c37\u7684\u79d1\u6280\u516c\u53f8\uff0c\u4e5f\u662f Go \u8bed\u8a00\u7684\u65e9\u671f adopter\u3002\u5176\u5f00\u6e90\u4e86\u5f88\u591a golang \u9879\u76ee\uff0c\u8bf8\u5982\u88ab Gopher \u5708\u719f\u77e5\u7684 zap \u3001 jaeger \u7b49\u30022018 \u5e74\u5e74\u672b Uber \u5c06\u5185\u90e8\u7684 Go \u98ce\u683c\u89c4\u8303 \u5f00\u6e90\u5230 GitHub\uff0c\u7ecf\u8fc7\u4e00\u5e74\u7684\u79ef\u7d2f\u548c\u66f4\u65b0\uff0c\u8be5\u89c4\u8303\u5df2\u7ecf\u521d\u5177\u89c4\u6a21\uff0c\u5e76\u53d7\u5230\u5e7f\u5927 Gopher \u7684\u5173\u6ce8\u3002\u672c\u6587\u662f\u8be5\u89c4\u8303\u7684\u4e2d\u6587\u7248\u672c\u3002\u672c\u7248\u672c\u4f1a\u6839\u636e\u539f\u7248\u5b9e\u65f6\u66f4\u65b0\u3002 ## \u7248\u672c \u5f53\u524d\u66f4\u65b0\u7248\u672c\uff1a2021-07-09 \u7248\u672c\u5730\u5740\uff1a commit:#130 \u76ee\u5f55 uber-go/guide \u7684\u4e2d\u6587\u7ffb\u8bd1 English Uber Go \u8bed\u8a00\u7f16\u7801\u89c4\u8303 \u7248\u672c \u76ee\u5f55 \u4ecb\u7ecd \u6307\u5bfc\u539f\u5219 \u6307\u5411 interface \u7684\u6307\u9488 Interface \u5408\u7406\u6027\u9a8c\u8bc1 \u63a5\u6536\u5668 (receiver) \u4e0e\u63a5\u53e3 \u96f6\u503c Mutex \u662f\u6709\u6548\u7684 \u5728\u8fb9\u754c\u5904\u62f7\u8d1d Slices \u548c Maps \u63a5\u6536 Slices \u548c Maps \u8fd4\u56de slices \u6216 maps \u4f7f\u7528 defer \u91ca\u653e\u8d44\u6e90 Channel \u7684 size \u8981\u4e48\u662f 1\uff0c\u8981\u4e48\u662f\u65e0\u7f13\u51b2\u7684 \u679a\u4e3e\u4ece 1 \u5f00\u59cb \u4f7f\u7528 time \u5904\u7406\u65f6\u95f4 \u4f7f\u7528 time.Time \u8868\u8fbe\u77ac\u65f6\u65f6\u95f4 \u4f7f\u7528 time.Duration \u8868\u8fbe\u65f6\u95f4\u6bb5 \u5bf9\u5916\u90e8\u7cfb\u7edf\u4f7f\u7528 time.Time \u548c time.Duration \u9519\u8bef\u7c7b\u578b \u9519\u8bef\u5305\u88c5 (Error Wrapping) \u5904\u7406\u7c7b\u578b\u65ad\u8a00\u5931\u8d25 \u4e0d\u8981 panic \u4f7f\u7528 go.uber.org/atomic \u907f\u514d\u53ef\u53d8\u5168\u5c40\u53d8\u91cf \u907f\u514d\u5728\u516c\u5171\u7ed3\u6784\u4e2d\u5d4c\u5165\u7c7b\u578b \u907f\u514d\u4f7f\u7528\u5185\u7f6e\u540d\u79f0 \u907f\u514d\u4f7f\u7528 init() \u8ffd\u52a0\u65f6\u4f18\u5148\u6307\u5b9a\u5207\u7247\u5bb9\u91cf \u4e3b\u51fd\u6570\u9000\u51fa\u65b9\u5f0f(Exit) \u4e00\u6b21\u6027\u9000\u51fa \u6027\u80fd \u4f18\u5148\u4f7f\u7528 strconv \u800c\u4e0d\u662f fmt \u907f\u514d\u5b57\u7b26\u4e32\u5230\u5b57\u8282\u7684\u8f6c\u6362 \u6307\u5b9a\u5bb9\u5668\u5bb9\u91cf \u6307\u5b9aMap\u5bb9\u91cf\u63d0\u793a \u6307\u5b9a\u5207\u7247\u5bb9\u91cf \u89c4\u8303 \u4e00\u81f4\u6027 \u76f8\u4f3c\u7684\u58f0\u660e\u653e\u5728\u4e00\u7ec4 import \u5206\u7ec4 \u5305\u540d \u51fd\u6570\u540d \u5bfc\u5165\u522b\u540d \u51fd\u6570\u5206\u7ec4\u4e0e\u987a\u5e8f \u51cf\u5c11\u5d4c\u5957 \u4e0d\u5fc5\u8981\u7684 else \u9876\u5c42\u53d8\u91cf\u58f0\u660e \u5bf9\u4e8e\u672a\u5bfc\u51fa\u7684\u9876\u5c42\u5e38\u91cf\u548c\u53d8\u91cf\uff0c\u4f7f\u7528_\u4f5c\u4e3a\u524d\u7f00 \u7ed3\u6784\u4f53\u4e2d\u7684\u5d4c\u5165 \u4f7f\u7528\u5b57\u6bb5\u540d\u521d\u59cb\u5316\u7ed3\u6784\u4f53 \u672c\u5730\u53d8\u91cf\u58f0\u660e nil \u662f\u4e00\u4e2a\u6709\u6548\u7684 slice \u7f29\u5c0f\u53d8\u91cf\u4f5c\u7528\u57df \u907f\u514d\u53c2\u6570\u8bed\u4e49\u4e0d\u660e\u786e(Avoid Naked Parameters) \u4f7f\u7528\u539f\u59cb\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u907f\u514d\u8f6c\u4e49 \u521d\u59cb\u5316\u7ed3\u6784\u4f53 \u4f7f\u7528\u5b57\u6bb5\u540d\u521d\u59cb\u5316\u7ed3\u6784 \u7701\u7565\u7ed3\u6784\u4e2d\u7684\u96f6\u503c\u5b57\u6bb5 \u5bf9\u96f6\u503c\u7ed3\u6784\u4f7f\u7528 var \u521d\u59cb\u5316 Struct \u5f15\u7528 \u521d\u59cb\u5316 Maps \u5b57\u7b26\u4e32 string format \u547d\u540d Printf \u6837\u5f0f\u7684\u51fd\u6570 \u7f16\u7a0b\u6a21\u5f0f \u8868\u9a71\u52a8\u6d4b\u8bd5 \u529f\u80fd\u9009\u9879 Linting Lint Runners Stargazers over time \u4ecb\u7ecd \u6837\u5f0f (style) \u662f\u652f\u914d\u6211\u4eec\u4ee3\u7801\u7684\u60ef\u4f8b\u3002\u672f\u8bed \u6837\u5f0f \u6709\u70b9\u7528\u8bcd\u4e0d\u5f53\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u7ea6\u5b9a\u6db5\u76d6\u7684\u8303\u56f4\u4e0d\u9650\u4e8e\u7531 gofmt \u66ff\u6211\u4eec\u5904\u7406\u7684\u6e90\u6587\u4ef6\u683c\u5f0f\u3002 \u672c\u6307\u5357\u7684\u76ee\u7684\u662f\u901a\u8fc7\u8be6\u7ec6\u63cf\u8ff0\u5728 Uber \u7f16\u5199 Go \u4ee3\u7801\u7684\u6ce8\u610f\u4e8b\u9879\u6765\u7ba1\u7406\u8fd9\u79cd\u590d\u6742\u6027\u3002\u8fd9\u4e9b\u89c4\u5219\u7684\u5b58\u5728\u662f\u4e3a\u4e86\u4f7f\u4ee3\u7801\u5e93\u6613\u4e8e\u7ba1\u7406\uff0c\u540c\u65f6\u4ecd\u7136\u5141\u8bb8\u5de5\u7a0b\u5e08\u66f4\u6709\u6548\u5730\u4f7f\u7528 Go \u8bed\u8a00\u529f\u80fd\u3002 \u8be5\u6307\u5357\u6700\u521d\u7531 Prashant Varanasi \u548c Simon Newton \u7f16\u5199\uff0c\u76ee\u7684\u662f\u4f7f\u4e00\u4e9b\u540c\u4e8b\u80fd\u5feb\u901f\u4f7f\u7528 Go\u3002\u591a\u5e74\u6765\uff0c\u8be5\u6307\u5357\u5df2\u6839\u636e\u5176\u4ed6\u4eba\u7684\u53cd\u9988\u8fdb\u884c\u4e86\u4fee\u6539\u3002 \u672c\u6587\u6863\u8bb0\u5f55\u4e86\u6211\u4eec\u5728 Uber \u9075\u5faa\u7684 Go \u4ee3\u7801\u4e2d\u7684\u60ef\u7528\u7ea6\u5b9a\u3002\u5176\u4e2d\u8bb8\u591a\u662f Go \u7684\u901a\u7528\u51c6\u5219\uff0c\u800c\u5176\u4ed6\u6269\u5c55\u51c6\u5219\u4f9d\u8d56\u4e8e\u4e0b\u9762\u5916\u90e8\u7684\u6307\u5357\uff1a Effective Go Go Common Mistakes Go Code Review Comments \u6240\u6709\u4ee3\u7801\u90fd\u5e94\u8be5\u901a\u8fc7 golint \u548c go vet \u7684\u68c0\u67e5\u5e76\u65e0\u9519\u8bef\u3002\u6211\u4eec\u5efa\u8bae\u60a8\u5c06\u7f16\u8f91\u5668\u8bbe\u7f6e\u4e3a\uff1a \u4fdd\u5b58\u65f6\u8fd0\u884c goimports \u8fd0\u884c golint \u548c go vet \u68c0\u67e5\u9519\u8bef \u60a8\u53ef\u4ee5\u5728\u4ee5\u4e0b Go \u7f16\u8f91\u5668\u5de5\u5177\u652f\u6301\u9875\u9762\u4e2d\u627e\u5230\u66f4\u4e3a\u8be6\u7ec6\u7684\u4fe1\u606f\uff1a https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins \u6307\u5bfc\u539f\u5219 \u6307\u5411 interface \u7684\u6307\u9488 \u60a8\u51e0\u4e4e\u4e0d\u9700\u8981\u6307\u5411\u63a5\u53e3\u7c7b\u578b\u7684\u6307\u9488\u3002\u60a8\u5e94\u8be5\u5c06\u63a5\u53e3\u4f5c\u4e3a\u503c\u8fdb\u884c\u4f20\u9012\uff0c\u5728\u8fd9\u6837\u7684\u4f20\u9012\u8fc7\u7a0b\u4e2d\uff0c\u5b9e\u8d28\u4e0a\u4f20\u9012\u7684\u5e95\u5c42\u6570\u636e\u4ecd\u7136\u53ef\u4ee5\u662f\u6307\u9488\u3002 \u63a5\u53e3\u5b9e\u8d28\u4e0a\u5728\u5e95\u5c42\u7528\u4e24\u4e2a\u5b57\u6bb5\u8868\u793a\uff1a \u4e00\u4e2a\u6307\u5411\u67d0\u4e9b\u7279\u5b9a\u7c7b\u578b\u4fe1\u606f\u7684\u6307\u9488\u3002\u60a8\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\"type\"\u3002 \u6570\u636e\u6307\u9488\u3002\u5982\u679c\u5b58\u50a8\u7684\u6570\u636e\u662f\u6307\u9488\uff0c\u5219\u76f4\u63a5\u5b58\u50a8\u3002\u5982\u679c\u5b58\u50a8\u7684\u6570\u636e\u662f\u4e00\u4e2a\u503c\uff0c\u5219\u5b58\u50a8\u6307\u5411\u8be5\u503c\u7684\u6307\u9488\u3002 \u5982\u679c\u5e0c\u671b\u63a5\u53e3\u65b9\u6cd5\u4fee\u6539\u57fa\u7840\u6570\u636e\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u6307\u9488\u4f20\u9012(\u5c06\u5bf9\u8c61\u6307\u9488\u8d4b\u503c\u7ed9\u63a5\u53e3\u53d8\u91cf)\u3002 type F interface { f() } type S1 struct{} func (s S1) f() {} type S2 struct{} func (s *S2) f() {} // f1.f()\u65e0\u6cd5\u4fee\u6539\u5e95\u5c42\u6570\u636e // f2.f() \u53ef\u4ee5\u4fee\u6539\u5e95\u5c42\u6570\u636e,\u7ed9\u63a5\u53e3\u53d8\u91cff2\u8d4b\u503c\u65f6\u4f7f\u7528\u7684\u662f\u5bf9\u8c61\u6307\u9488 var f1 F = S1{} var f2 F = &S2{} Interface \u5408\u7406\u6027\u9a8c\u8bc1 \u5728\u7f16\u8bd1\u65f6\u9a8c\u8bc1\u63a5\u53e3\u7684\u7b26\u5408\u6027\u3002\u8fd9\u5305\u62ec\uff1a \u5c06\u5b9e\u73b0\u7279\u5b9a\u63a5\u53e3\u7684\u5bfc\u51fa\u7c7b\u578b\u4f5c\u4e3a\u63a5\u53e3API \u7684\u4e00\u90e8\u5206\u8fdb\u884c\u68c0\u67e5 \u5b9e\u73b0\u540c\u4e00\u63a5\u53e3\u7684(\u5bfc\u51fa\u548c\u975e\u5bfc\u51fa)\u7c7b\u578b\u5c5e\u4e8e\u5b9e\u73b0\u7c7b\u578b\u7684\u96c6\u5408 \u4efb\u4f55\u8fdd\u53cd\u63a5\u53e3\u5408\u7406\u6027\u68c0\u67e5\u7684\u573a\u666f,\u90fd\u4f1a\u7ec8\u6b62\u7f16\u8bd1,\u5e76\u901a\u77e5\u7ed9\u7528\u6237 \u8865\u5145:\u4e0a\u97623\u6761\u662f\u7f16\u8bd1\u5668\u5bf9\u63a5\u53e3\u7684\u68c0\u67e5\u673a\u5236, \u5927\u4f53\u610f\u601d\u662f\u9519\u8bef\u4f7f\u7528\u63a5\u53e3\u4f1a\u5728\u7f16\u8bd1\u671f\u62a5\u9519. \u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u673a\u5236\u8ba9\u90e8\u5206\u95ee\u9898\u5728\u7f16\u8bd1\u671f\u66b4\u9732. Bad Good // \u5982\u679cHandler\u6ca1\u6709\u5b9e\u73b0http.Handler,\u4f1a\u5728\u8fd0\u884c\u65f6\u62a5\u9519 type Handler struct { // ... } func (h *Handler) ServeHTTP( w http.ResponseWriter, r *http.Request, ) { ... } type Handler struct { // ... } // \u7528\u4e8e\u89e6\u53d1\u7f16\u8bd1\u671f\u7684\u63a5\u53e3\u7684\u5408\u7406\u6027\u68c0\u67e5\u673a\u5236 // \u5982\u679cHandler\u6ca1\u6709\u5b9e\u73b0http.Handler,\u4f1a\u5728\u7f16\u8bd1\u671f\u62a5\u9519 var _ http.Handler = (*Handler)(nil) func (h *Handler) ServeHTTP( w http.ResponseWriter, r *http.Request, ) { // ... } \u5982\u679c *Handler \u4e0e http.Handler \u7684\u63a5\u53e3\u4e0d\u5339\u914d, \u90a3\u4e48\u8bed\u53e5 var _ http.Handler = (*Handler)(nil) \u5c06\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7. \u8d4b\u503c\u7684\u53f3\u8fb9\u5e94\u8be5\u662f\u65ad\u8a00\u7c7b\u578b\u7684\u96f6\u503c\u3002 \u5bf9\u4e8e\u6307\u9488\u7c7b\u578b\uff08\u5982 *Handler \uff09\u3001\u5207\u7247\u548c\u6620\u5c04\uff0c\u8fd9\u662f nil \uff1b \u5bf9\u4e8e\u7ed3\u6784\u7c7b\u578b\uff0c\u8fd9\u662f\u7a7a\u7ed3\u6784\u3002 type LogHandler struct { h http.Handler log *zap.Logger } var _ http.Handler = LogHandler{} func (h LogHandler) ServeHTTP( w http.ResponseWriter, r *http.Request, ) { // ... } \u63a5\u6536\u5668 (receiver) \u4e0e\u63a5\u53e3 \u4f7f\u7528\u503c\u63a5\u6536\u5668\u7684\u65b9\u6cd5\u65e2\u53ef\u4ee5\u901a\u8fc7\u503c\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u8c03\u7528\u3002 \u5e26\u6307\u9488\u63a5\u6536\u5668\u7684\u65b9\u6cd5\u53ea\u80fd\u901a\u8fc7\u6307\u9488\u6216 addressable values \u8c03\u7528. \u4f8b\u5982\uff0c type S struct { data string } func (s S) Read() string { return s.data } func (s *S) Write(str string) { s.data = str } sVals := map[int]S{1: {\"A\"}} // \u4f60\u53ea\u80fd\u901a\u8fc7\u503c\u8c03\u7528 Read sVals[1].Read() // \u8fd9\u4e0d\u80fd\u7f16\u8bd1\u901a\u8fc7\uff1a // sVals[1].Write(\"test\") sPtrs := map[int]*S{1: {\"A\"}} // \u901a\u8fc7\u6307\u9488\u65e2\u53ef\u4ee5\u8c03\u7528 Read\uff0c\u4e5f\u53ef\u4ee5\u8c03\u7528 Write \u65b9\u6cd5 sPtrs[1].Read() sPtrs[1].Write(\"test\") \u7c7b\u4f3c\u7684,\u5373\u4f7f\u65b9\u6cd5\u6709\u4e86\u503c\u63a5\u6536\u5668,\u4e5f\u540c\u6837\u53ef\u4ee5\u7528\u6307\u9488\u63a5\u6536\u5668\u6765\u6ee1\u8db3\u63a5\u53e3. type F interface { f() } type S1 struct{} func (s S1) f() {} type S2 struct{} func (s *S2) f() {} s1Val := S1{} s1Ptr := &S1{} s2Val := S2{} s2Ptr := &S2{} var i F i = s1Val i = s1Ptr i = s2Ptr // \u4e0b\u9762\u4ee3\u7801\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\u3002\u56e0\u4e3a s2Val \u662f\u4e00\u4e2a\u503c\uff0c\u800c S2 \u7684 f \u65b9\u6cd5\u4e2d\u6ca1\u6709\u4f7f\u7528\u503c\u63a5\u6536\u5668 // i = s2Val Effective Go \u4e2d\u6709\u4e00\u6bb5\u5173\u4e8e pointers vs. values \u7684\u7cbe\u5f69\u8bb2\u89e3\u3002 \u8865\u5145: \u4e00\u4e2a\u7c7b\u578b\u53ef\u4ee5\u6709\u503c\u63a5\u6536\u5668\u65b9\u6cd5\u96c6\u548c\u6307\u9488\u63a5\u6536\u5668\u65b9\u6cd5\u96c6 \u503c\u63a5\u6536\u5668\u65b9\u6cd5\u96c6\u662f\u6307\u9488\u63a5\u6536\u5668\u65b9\u6cd5\u96c6\u7684\u5b50\u96c6,\u53cd\u4e4b\u4e0d\u662f \u89c4\u5219 \u503c\u5bf9\u8c61\u53ea\u53ef\u4ee5\u4f7f\u7528\u503c\u63a5\u6536\u5668\u65b9\u6cd5\u96c6 \u6307\u9488\u5bf9\u8c61\u53ef\u4ee5\u4f7f\u7528 \u503c\u63a5\u6536\u5668\u65b9\u6cd5\u96c6 + \u6307\u9488\u63a5\u6536\u5668\u65b9\u6cd5\u96c6 \u63a5\u53e3\u7684\u5339\u914d(\u6216\u8005\u53eb\u5b9e\u73b0) \u7c7b\u578b\u5b9e\u73b0\u4e86\u63a5\u53e3\u7684\u6240\u6709\u65b9\u6cd5,\u53eb\u5339\u914d \u5177\u4f53\u7684\u8bb2,\u8981\u4e48\u662f\u7c7b\u578b\u7684\u503c\u65b9\u6cd5\u96c6\u5339\u914d\u63a5\u53e3,\u8981\u4e48\u662f\u6307\u9488\u65b9\u6cd5\u96c6\u5339\u914d\u63a5\u53e3 \u5177\u4f53\u7684\u5339\u914d\u5206\u4e24\u79cd: \u503c\u65b9\u6cd5\u96c6\u548c\u63a5\u53e3\u5339\u914d \u7ed9\u63a5\u53e3\u53d8\u91cf\u8d4b\u503c\u7684\u4e0d\u7ba1\u662f\u503c\u8fd8\u662f\u6307\u9488\u5bf9\u8c61,\u90fdok,\u56e0\u4e3a\u90fd\u5305\u542b\u503c\u65b9\u6cd5\u96c6 \u6307\u9488\u65b9\u6cd5\u96c6\u548c\u63a5\u53e3\u5339\u914d \u53ea\u80fd\u5c06\u6307\u9488\u5bf9\u8c61\u8d4b\u503c\u7ed9\u63a5\u53e3\u53d8\u91cf,\u56e0\u4e3a\u53ea\u6709\u6307\u9488\u65b9\u6cd5\u96c6\u548c\u63a5\u53e3\u5339\u914d \u5982\u679c\u5c06\u503c\u5bf9\u8c61\u8d4b\u503c\u7ed9\u63a5\u53e3\u53d8\u91cf,\u4f1a\u5728\u7f16\u8bd1\u671f\u62a5\u9519(\u4f1a\u89e6\u53d1\u63a5\u53e3\u5408\u7406\u6027\u68c0\u67e5\u673a\u5236) \u4e3a\u5565 i = s2Val \u4f1a\u62a5\u9519,\u56e0\u4e3a\u503c\u65b9\u6cd5\u96c6\u548c\u63a5\u53e3\u4e0d\u5339\u914d. \u96f6\u503c Mutex \u662f\u6709\u6548\u7684 \u96f6\u503c sync.Mutex \u548c sync.RWMutex \u662f\u6709\u6548\u7684\u3002\u6240\u4ee5\u6307\u5411 mutex \u7684\u6307\u9488\u57fa\u672c\u662f\u4e0d\u5fc5\u8981\u7684\u3002 Bad Good mu := new(sync.Mutex) mu.Lock() var mu sync.Mutex mu.Lock() \u5982\u679c\u4f60\u4f7f\u7528\u7ed3\u6784\u4f53\u6307\u9488\uff0cmutex \u5e94\u8be5\u4f5c\u4e3a\u7ed3\u6784\u4f53\u7684\u975e\u6307\u9488\u5b57\u6bb5\u3002\u5373\u4f7f\u8be5\u7ed3\u6784\u4f53\u4e0d\u88ab\u5bfc\u51fa\uff0c\u4e5f\u4e0d\u8981\u76f4\u63a5\u628a mutex \u5d4c\u5165\u5230\u7ed3\u6784\u4f53\u4e2d\u3002 Bad Good type SMap struct { sync.Mutex data map[string]string } func NewSMap() *SMap { return &SMap{ data: make(map[string]string), } } func (m *SMap) Get(k string) string { m.Lock() defer m.Unlock() return m.data[k] } type SMap struct { mu sync.Mutex data map[string]string } func NewSMap() *SMap { return &SMap{ data: make(map[string]string), } } func (m *SMap) Get(k string) string { m.mu.Lock() defer m.mu.Unlock() return m.data[k] } `Mutex` \u5b57\u6bb5\uff0c `Lock` \u548c `Unlock` \u65b9\u6cd5\u662f `SMap` \u5bfc\u51fa\u7684 API \u4e2d\u4e0d\u523b\u610f\u8bf4\u660e\u7684\u4e00\u90e8\u5206\u3002 mutex \u53ca\u5176\u65b9\u6cd5\u662f `SMap` \u7684\u5b9e\u73b0\u7ec6\u8282\uff0c\u5bf9\u5176\u8c03\u7528\u8005\u4e0d\u53ef\u89c1\u3002 \u5728\u8fb9\u754c\u5904\u62f7\u8d1d Slices \u548c Maps slices \u548c maps \u5305\u542b\u4e86\u6307\u5411\u5e95\u5c42\u6570\u636e\u7684\u6307\u9488\uff0c\u56e0\u6b64\u5728\u9700\u8981\u590d\u5236\u5b83\u4eec\u65f6\u8981\u7279\u522b\u6ce8\u610f\u3002 \u63a5\u6536 Slices \u548c Maps \u8bf7\u8bb0\u4f4f\uff0c\u5f53 map \u6216 slice \u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u4f20\u5165\u65f6\uff0c\u5982\u679c\u60a8\u5b58\u50a8\u4e86\u5bf9\u5b83\u4eec\u7684\u5f15\u7528\uff0c\u5219\u7528\u6237\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u3002 Bad Good func (d *Driver) SetTrips(trips []Trip) { d.trips = trips } trips := ... d1.SetTrips(trips) // \u4f60\u662f\u8981\u4fee\u6539 d1.trips \u5417\uff1f trips[0] = ... func (d *Driver) SetTrips(trips []Trip) { d.trips = make([]Trip, len(trips)) copy(d.trips, trips) } trips := ... d1.SetTrips(trips) // \u8fd9\u91cc\u6211\u4eec\u4fee\u6539 trips[0]\uff0c\u4f46\u4e0d\u4f1a\u5f71\u54cd\u5230 d1.trips trips[0] = ... \u8fd4\u56de slices \u6216 maps \u540c\u6837\uff0c\u8bf7\u6ce8\u610f\u7528\u6237\u5bf9\u66b4\u9732\u5185\u90e8\u72b6\u6001\u7684 map \u6216 slice \u7684\u4fee\u6539\u3002 Bad Good type Stats struct { mu sync.Mutex counters map[string]int } // Snapshot \u8fd4\u56de\u5f53\u524d\u72b6\u6001\u3002 func (s *Stats) Snapshot() map[string]int { s.mu.Lock() defer s.mu.Unlock() return s.counters } // snapshot \u4e0d\u518d\u53d7\u4e92\u65a5\u9501\u4fdd\u62a4 // \u56e0\u6b64\u5bf9 snapshot \u7684\u4efb\u4f55\u8bbf\u95ee\u90fd\u5c06\u53d7\u5230\u6570\u636e\u7ade\u4e89\u7684\u5f71\u54cd // \u5f71\u54cd stats.counters snapshot := stats.Snapshot() type Stats struct { mu sync.Mutex counters map[string]int } func (s *Stats) Snapshot() map[string]int { s.mu.Lock() defer s.mu.Unlock() result := make(map[string]int, len(s.counters)) for k, v := range s.counters { result[k] = v } return result } // snapshot \u73b0\u5728\u662f\u4e00\u4e2a\u62f7\u8d1d snapshot := stats.Snapshot() \u4f7f\u7528 defer \u91ca\u653e\u8d44\u6e90 \u4f7f\u7528 defer \u91ca\u653e\u8d44\u6e90\uff0c\u8bf8\u5982\u6587\u4ef6\u548c\u9501\u3002 Bad Good p.Lock() if p.count < 10 { p.Unlock() return p.count } p.count++ newCount := p.count p.Unlock() return newCount // \u5f53\u6709\u591a\u4e2a return \u5206\u652f\u65f6\uff0c\u5f88\u5bb9\u6613\u9057\u5fd8 unlock p.Lock() defer p.Unlock() if p.count < 10 { return p.count } p.count++ return p.count // \u66f4\u53ef\u8bfb Defer \u7684\u5f00\u9500\u975e\u5e38\u5c0f\uff0c\u53ea\u6709\u5728\u60a8\u53ef\u4ee5\u8bc1\u660e\u51fd\u6570\u6267\u884c\u65f6\u95f4\u5904\u4e8e\u7eb3\u79d2\u7ea7\u7684\u7a0b\u5ea6\u65f6\uff0c\u624d\u5e94\u907f\u514d\u8fd9\u6837\u505a\u3002\u4f7f\u7528 defer \u63d0\u5347\u53ef\u8bfb\u6027\u662f\u503c\u5f97\u7684\uff0c\u56e0\u4e3a\u4f7f\u7528\u5b83\u4eec\u7684\u6210\u672c\u5fae\u4e0d\u8db3\u9053\u3002\u5c24\u5176\u9002\u7528\u4e8e\u90a3\u4e9b\u4e0d\u4ec5\u4ec5\u662f\u7b80\u5355\u5185\u5b58\u8bbf\u95ee\u7684\u8f83\u5927\u7684\u65b9\u6cd5\uff0c\u5728\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\u5176\u4ed6\u8ba1\u7b97\u7684\u8d44\u6e90\u6d88\u8017\u8fdc\u8d85\u8fc7 defer \u3002 Channel \u7684 size \u8981\u4e48\u662f 1\uff0c\u8981\u4e48\u662f\u65e0\u7f13\u51b2\u7684 channel \u901a\u5e38 size \u5e94\u4e3a 1 \u6216\u662f\u65e0\u7f13\u51b2\u7684\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cchannel \u662f\u65e0\u7f13\u51b2\u7684\uff0c\u5176 size \u4e3a\u96f6\u3002\u4efb\u4f55\u5176\u4ed6\u5c3a\u5bf8\u90fd\u5fc5\u987b\u7ecf\u8fc7\u4e25\u683c\u7684\u5ba1\u67e5\u3002\u6211\u4eec\u9700\u8981\u8003\u8651\u5982\u4f55\u786e\u5b9a\u5927\u5c0f\uff0c\u8003\u8651\u662f\u4ec0\u4e48\u963b\u6b62\u4e86 channel \u5728\u9ad8\u8d1f\u8f7d\u4e0b\u548c\u963b\u585e\u5199\u65f6\u7684\u5199\u5165\uff0c\u4ee5\u53ca\u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6\u7cfb\u7edf\u903b\u8f91\u6709\u54ea\u4e9b\u53d8\u5316\u3002(\u7ffb\u8bd1\u89e3\u91ca\uff1a\u6309\u7167\u539f\u6587\u610f\u601d\u662f\u9700\u8981\u754c\u5b9a\u901a\u9053\u8fb9\u754c\uff0c\u7ade\u6001\u6761\u4ef6\uff0c\u4ee5\u53ca\u903b\u8f91\u4e0a\u4e0b\u6587\u68b3\u7406) Bad Good // \u5e94\u8be5\u8db3\u4ee5\u6ee1\u8db3\u4efb\u4f55\u60c5\u51b5\uff01 c := make(chan int, 64) // \u5927\u5c0f\uff1a1 c := make(chan int, 1) // \u6216\u8005 // \u65e0\u7f13\u51b2 channel\uff0c\u5927\u5c0f\u4e3a 0 c := make(chan int) \u679a\u4e3e\u4ece 1 \u5f00\u59cb \u5728 Go \u4e2d\u5f15\u5165\u679a\u4e3e\u7684\u6807\u51c6\u65b9\u6cd5\u662f\u58f0\u660e\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7c7b\u578b\u548c\u4e00\u4e2a\u4f7f\u7528\u4e86 iota \u7684 const \u7ec4\u3002\u7531\u4e8e\u53d8\u91cf\u7684\u9ed8\u8ba4\u503c\u4e3a 0\uff0c\u56e0\u6b64\u901a\u5e38\u5e94\u4ee5\u975e\u96f6\u503c\u5f00\u5934\u679a\u4e3e\u3002 Bad Good type Operation int const ( Add Operation = iota Subtract Multiply ) // Add=0, Subtract=1, Multiply=2 type Operation int const ( Add Operation = iota + 1 Subtract Multiply ) // Add=1, Subtract=2, Multiply=3 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u96f6\u503c\u662f\u6709\u610f\u4e49\u7684\uff08\u679a\u4e3e\u4ece\u96f6\u5f00\u59cb\uff09\uff0c\u4f8b\u5982\uff0c\u5f53\u96f6\u503c\u662f\u7406\u60f3\u7684\u9ed8\u8ba4\u884c\u4e3a\u65f6\u3002 type LogOutput int const ( LogToStdout LogOutput = iota LogToFile LogToRemote ) // LogToStdout=0, LogToFile=1, LogToRemote=2 \u4f7f\u7528 time \u5904\u7406\u65f6\u95f4 \u65f6\u95f4\u5904\u7406\u5f88\u590d\u6742\u3002\u5173\u4e8e\u65f6\u95f4\u7684\u9519\u8bef\u5047\u8bbe\u901a\u5e38\u5305\u62ec\u4ee5\u4e0b\u51e0\u70b9\u3002 \u4e00\u5929\u6709 24 \u5c0f\u65f6 \u4e00\u5c0f\u65f6\u6709 60 \u5206\u949f \u4e00\u5468\u6709\u4e03\u5929 \u4e00\u5e74 365 \u5929 \u8fd8\u6709\u66f4\u591a \u4f8b\u5982\uff0c 1 \u8868\u793a\u5728\u4e00\u4e2a\u65f6\u95f4\u70b9\u4e0a\u52a0\u4e0a 24 \u5c0f\u65f6\u5e76\u4e0d\u603b\u662f\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u65e5\u5386\u65e5\u3002 \u56e0\u6b64\uff0c\u5728\u5904\u7406\u65f6\u95f4\u65f6\u59cb\u7ec8\u4f7f\u7528 [ \"time\" ] \u5305\uff0c\u56e0\u4e3a\u5b83\u6709\u52a9\u4e8e\u4ee5\u66f4\u5b89\u5168\u3001\u66f4\u51c6\u786e\u7684\u65b9\u5f0f\u5904\u7406\u8fd9\u4e9b\u4e0d\u6b63\u786e\u7684\u5047\u8bbe\u3002 \u4f7f\u7528 time.Time \u8868\u8fbe\u77ac\u65f6\u65f6\u95f4 \u5728\u5904\u7406\u65f6\u95f4\u7684\u77ac\u95f4\u65f6\u4f7f\u7528 [ time.Time ]\uff0c\u5728\u6bd4\u8f83\u3001\u6dfb\u52a0\u6216\u51cf\u53bb\u65f6\u95f4\u65f6\u4f7f\u7528 time.Time \u4e2d\u7684\u65b9\u6cd5\u3002 Bad Good func isActive(now, start, stop int) bool { return start <= now && now < stop } func isActive(now, start, stop time.Time) bool { return (start.Before(now) || start.Equal(now)) && now.Before(stop) } \u4f7f\u7528 time.Duration \u8868\u8fbe\u65f6\u95f4\u6bb5 \u5728\u5904\u7406\u65f6\u95f4\u6bb5\u65f6\u4f7f\u7528 [ time.Duration ] . Bad Good func poll(delay int) { for { // ... time.Sleep(time.Duration(delay) * time.Millisecond) } } poll(10) // \u662f\u51e0\u79d2\u949f\u8fd8\u662f\u51e0\u6beb\u79d2? func poll(delay time.Duration) { for { // ... time.Sleep(delay) } } poll(10*time.Second) \u56de\u5230\u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5728\u4e00\u4e2a\u65f6\u95f4\u77ac\u95f4\u52a0\u4e0a 24 \u5c0f\u65f6\uff0c\u6211\u4eec\u7528\u4e8e\u6dfb\u52a0\u65f6\u95f4\u7684\u65b9\u6cd5\u53d6\u51b3\u4e8e\u610f\u56fe\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e0b\u4e00\u4e2a\u65e5\u5386\u65e5(\u5f53\u524d\u5929\u7684\u4e0b\u4e00\u5929)\u7684\u540c\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528 [ Time.AddDate ]\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u60f3\u4fdd\u8bc1\u67d0\u4e00\u65f6\u523b\u6bd4\u524d\u4e00\u65f6\u523b\u665a 24 \u5c0f\u65f6\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528 [ Time.Add ]\u3002 newDay := t.AddDate(0 /* years */, 0 /* months */, 1 /* days */) maybeNewDay := t.Add(24 * time.Hour) \u5bf9\u5916\u90e8\u7cfb\u7edf\u4f7f\u7528 time.Time \u548c time.Duration \u5c3d\u53ef\u80fd\u5728\u4e0e\u5916\u90e8\u7cfb\u7edf\u7684\u4ea4\u4e92\u4e2d\u4f7f\u7528 time.Duration \u548c time.Time \u4f8b\u5982 : Command-line \u6807\u5fd7: [ flag ] \u901a\u8fc7 [ time.ParseDuration ] \u652f\u6301 time.Duration JSON: [ encoding/json ] \u901a\u8fc7\u5176 [ UnmarshalJSON method] \u65b9\u6cd5\u652f\u6301\u5c06 time.Time \u7f16\u7801\u4e3a RFC 3339 \u5b57\u7b26\u4e32 SQL: [ database/sql ] \u652f\u6301\u5c06 DATETIME \u6216 TIMESTAMP \u5217\u8f6c\u6362\u4e3a time.Time \uff0c\u5982\u679c\u5e95\u5c42\u9a71\u52a8\u7a0b\u5e8f\u652f\u6301\u5219\u8fd4\u56de YAML: [ gopkg.in/yaml.v2 ] \u652f\u6301\u5c06 time.Time \u4f5c\u4e3a RFC 3339 \u5b57\u7b26\u4e32\uff0c\u5e76\u901a\u8fc7 [ time.ParseDuration ] \u652f\u6301 time.Duration \u3002 \u5f53\u4e0d\u80fd\u5728\u8fd9\u4e9b\u4ea4\u4e92\u4e2d\u4f7f\u7528 time.Duration \u65f6\uff0c\u8bf7\u4f7f\u7528 int \u6216 float64 \uff0c\u5e76\u5728\u5b57\u6bb5\u540d\u79f0\u4e2d\u5305\u542b\u5355\u4f4d\u3002 \u4f8b\u5982\uff0c\u7531\u4e8e encoding/json \u4e0d\u652f\u6301 time.Duration \uff0c\u56e0\u6b64\u8be5\u5355\u4f4d\u5305\u542b\u5728\u5b57\u6bb5\u7684\u540d\u79f0\u4e2d\u3002 Bad Good // {\"interval\": 2} type Config struct { Interval int `json:\"interval\"` } // {\"intervalMillis\": 2000} type Config struct { IntervalMillis int `json:\"intervalMillis\"` } \u5f53\u5728\u8fd9\u4e9b\u4ea4\u4e92\u4e2d\u4e0d\u80fd\u4f7f\u7528 time.Time \u65f6\uff0c\u9664\u975e\u8fbe\u6210\u4e00\u81f4\uff0c\u5426\u5219\u4f7f\u7528 string \u548c RFC 3339 \u4e2d\u5b9a\u4e49\u7684\u683c\u5f0f\u65f6\u95f4\u6233\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c[ Time.UnmarshalText ] \u4f7f\u7528\u6b64\u683c\u5f0f\uff0c\u5e76\u53ef\u901a\u8fc7 [ time.RFC3339 ] \u5728 Time.Format \u548c time.Parse \u4e2d\u4f7f\u7528\u3002 \u5c3d\u7ba1\u8fd9\u5728\u5b9e\u8df5\u4e2d\u5e76\u4e0d\u6210\u95ee\u9898\uff0c\u4f46\u8bf7\u8bb0\u4f4f\uff0c \"time\" \u5305\u4e0d\u652f\u6301\u89e3\u6790\u95f0\u79d2\u65f6\u95f4\u6233\uff08 8728 \uff09\uff0c\u4e5f\u4e0d\u5728\u8ba1\u7b97\u4e2d\u8003\u8651\u95f0\u79d2\uff08 15190 \uff09\u3002\u5982\u679c\u60a8\u6bd4\u8f83\u4e24\u4e2a\u65f6\u95f4\u77ac\u95f4\uff0c\u5219\u5dee\u5f02\u5c06\u4e0d\u5305\u62ec\u8fd9\u4e24\u4e2a\u77ac\u95f4\u4e4b\u95f4\u53ef\u80fd\u53d1\u751f\u7684\u95f0\u79d2\u3002 \u9519\u8bef\u7c7b\u578b Go \u4e2d\u6709\u591a\u79cd\u58f0\u660e\u9519\u8bef\uff08Error) \u7684\u9009\u9879\uff1a [ errors.New ] \u5bf9\u4e8e\u7b80\u5355\u9759\u6001\u5b57\u7b26\u4e32\u7684\u9519\u8bef [ fmt.Errorf ] \u7528\u4e8e\u683c\u5f0f\u5316\u7684\u9519\u8bef\u5b57\u7b26\u4e32 \u5b9e\u73b0 Error() \u65b9\u6cd5\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b \u7528 [ \"pkg/errors\".Wrap ] \u7684 Wrapped errors \u8fd4\u56de\u9519\u8bef\u65f6\uff0c\u8bf7\u8003\u8651\u4ee5\u4e0b\u56e0\u7d20\u4ee5\u786e\u5b9a\u6700\u4f73\u9009\u62e9\uff1a \u8fd9\u662f\u4e00\u4e2a\u4e0d\u9700\u8981\u989d\u5916\u4fe1\u606f\u7684\u7b80\u5355\u9519\u8bef\u5417\uff1f\u5982\u679c\u662f\u8fd9\u6837\uff0c[ errors.New ] \u8db3\u591f\u4e86\u3002 \u5ba2\u6237\u9700\u8981\u68c0\u6d4b\u5e76\u5904\u7406\u6b64\u9519\u8bef\u5417\uff1f\u5982\u679c\u662f\u8fd9\u6837\uff0c\u5219\u5e94\u4f7f\u7528\u81ea\u5b9a\u4e49\u7c7b\u578b\u5e76\u5b9e\u73b0\u8be5 Error() \u65b9\u6cd5\u3002 \u60a8\u662f\u5426\u6b63\u5728\u4f20\u64ad\u4e0b\u6e38\u51fd\u6570\u8fd4\u56de\u7684\u9519\u8bef\uff1f\u5982\u679c\u662f\u8fd9\u6837\uff0c\u8bf7\u67e5\u770b\u672c\u6587\u540e\u9762\u6709\u5173\u9519\u8bef\u5305\u88c5 section on error wrapping \u90e8\u5206\u7684\u5185\u5bb9\u3002 \u5426\u5219 [ fmt.Errorf ] \u5c31\u53ef\u4ee5\u4e86\u3002 \u5982\u679c\u5ba2\u6237\u7aef\u9700\u8981\u68c0\u6d4b\u9519\u8bef\uff0c\u5e76\u4e14\u60a8\u5df2\u4f7f\u7528\u521b\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u9519\u8bef [ errors.New ]\uff0c\u8bf7\u4f7f\u7528\u4e00\u4e2a\u9519\u8bef\u53d8\u91cf\u3002 Bad Good // package foo func Open() error { return errors.New(\"could not open\") } // package bar func use() { if err := foo.Open(); err != nil { if err.Error() == \"could not open\" { // handle } else { panic(\"unknown error\") } } } // package foo var ErrCouldNotOpen = errors.New(\"could not open\") func Open() error { return ErrCouldNotOpen } // package bar if err := foo.Open(); err != nil { if errors.Is(err, foo.ErrCouldNotOpen) { // handle } else { panic(\"unknown error\") } } \u5982\u679c\u60a8\u6709\u53ef\u80fd\u9700\u8981\u5ba2\u6237\u7aef\u68c0\u6d4b\u7684\u9519\u8bef\uff0c\u5e76\u4e14\u60f3\u5411\u5176\u4e2d\u6dfb\u52a0\u66f4\u591a\u4fe1\u606f\uff08\u4f8b\u5982\uff0c\u5b83\u4e0d\u662f\u9759\u6001\u5b57\u7b26\u4e32\uff09\uff0c\u5219\u5e94\u4f7f\u7528\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002 Bad Good func open(file string) error { return fmt.Errorf(\"file %q not found\", file) } func use() { if err := open(\"testfile.txt\"); err != nil { if strings.Contains(err.Error(), \"not found\") { // handle } else { panic(\"unknown error\") } } } type errNotFound struct { file string } func (e errNotFound) Error() string { return fmt.Sprintf(\"file %q not found\", e.file) } func open(file string) error { return errNotFound{file: file} } func use() { if err := open(\"testfile.txt\"); err != nil { if _, ok := err.(errNotFound); ok { // handle } else { panic(\"unknown error\") } } } \u76f4\u63a5\u5bfc\u51fa\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\u65f6\u8981\u5c0f\u5fc3\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u6210\u4e3a\u7a0b\u5e8f\u5305\u516c\u5171 API \u7684\u4e00\u90e8\u5206\u3002\u6700\u597d\u516c\u5f00\u5339\u914d\u5668\u529f\u80fd\u4ee5\u68c0\u67e5\u9519\u8bef\u3002 // package foo type errNotFound struct { file string } func (e errNotFound) Error() string { return fmt.Sprintf(\"file %q not found\", e.file) } func IsNotFoundError(err error) bool { _, ok := err.(errNotFound) return ok } func Open(file string) error { return errNotFound{file: file} } // package bar if err := foo.Open(\"foo\"); err != nil { if foo.IsNotFoundError(err) { // handle } else { panic(\"unknown error\") } } \u9519\u8bef\u5305\u88c5 (Error Wrapping) \u4e00\u4e2a\uff08\u51fd\u6570/\u65b9\u6cd5\uff09\u8c03\u7528\u5931\u8d25\u65f6\uff0c\u6709\u4e09\u79cd\u4e3b\u8981\u7684\u9519\u8bef\u4f20\u64ad\u65b9\u5f0f\uff1a \u5982\u679c\u6ca1\u6709\u8981\u6dfb\u52a0\u7684\u5176\u4ed6\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14\u60a8\u60f3\u8981\u7ef4\u62a4\u539f\u59cb\u9519\u8bef\u7c7b\u578b\uff0c\u5219\u8fd4\u56de\u539f\u59cb\u9519\u8bef\u3002 \u6dfb\u52a0\u4e0a\u4e0b\u6587\uff0c\u4f7f\u7528 [ \"pkg/errors\".Wrap ] \u4ee5\u4fbf\u9519\u8bef\u6d88\u606f\u63d0\u4f9b\u66f4\u591a\u4e0a\u4e0b\u6587 ,[ \"pkg/errors\".Cause ] \u53ef\u7528\u4e8e\u63d0\u53d6\u539f\u59cb\u9519\u8bef\u3002 \u5982\u679c\u8c03\u7528\u8005\u4e0d\u9700\u8981\u68c0\u6d4b\u6216\u5904\u7406\u7684\u7279\u5b9a\u9519\u8bef\u60c5\u51b5\uff0c\u4f7f\u7528 [ fmt.Errorf ]\u3002 \u5efa\u8bae\u5728\u53ef\u80fd\u7684\u5730\u65b9\u6dfb\u52a0\u4e0a\u4e0b\u6587\uff0c\u4ee5\u4f7f\u60a8\u83b7\u5f97\u8bf8\u5982\u201c\u8c03\u7528\u670d\u52a1 foo\uff1a\u8fde\u63a5\u88ab\u62d2\u7edd\u201d\u4e4b\u7c7b\u7684\u66f4\u6709\u7528\u7684\u9519\u8bef\uff0c\u800c\u4e0d\u662f\u8bf8\u5982\u201c\u8fde\u63a5\u88ab\u62d2\u7edd\u201d\u4e4b\u7c7b\u7684\u6a21\u7cca\u9519\u8bef\u3002 \u5728\u5c06\u4e0a\u4e0b\u6587\u6dfb\u52a0\u5230\u8fd4\u56de\u7684\u9519\u8bef\u65f6\uff0c\u8bf7\u907f\u514d\u4f7f\u7528\u201cfailed to\u201d\u4e4b\u7c7b\u7684\u77ed\u8bed\u4ee5\u4fdd\u6301\u4e0a\u4e0b\u6587\u7b80\u6d01\uff0c\u8fd9\u4e9b\u77ed\u8bed\u4f1a\u9648\u8ff0\u660e\u663e\u7684\u5185\u5bb9\uff0c\u5e76\u968f\u7740\u9519\u8bef\u5728\u5806\u6808\u4e2d\u7684\u6e17\u900f\u800c\u9010\u6e10\u5806\u79ef\uff1a Bad Good s, err := store.New() if err != nil { return fmt.Errorf( \"failed to create new store: %v\", err) } s, err := store.New() if err != nil { return fmt.Errorf( \"new store: %v\", err) } failed to x: failed to y: failed to create new store: the error x: y: new store: the error \u4f46\u662f\uff0c\u4e00\u65e6\u5c06\u9519\u8bef\u53d1\u9001\u5230\u53e6\u4e00\u4e2a\u7cfb\u7edf\uff0c\u5c31\u5e94\u8be5\u660e\u786e\u6d88\u606f\u662f\u9519\u8bef\u6d88\u606f\uff08\u4f8b\u5982\u4f7f\u7528 err \u6807\u8bb0\uff0c\u6216\u5728\u65e5\u5fd7\u4e2d\u4ee5\u201dFailed\u201d\u4e3a\u524d\u7f00\uff09\u3002 \u53e6\u8bf7\u53c2\u89c1 Don't just check errors, handle them gracefully . \u4e0d\u8981\u53ea\u662f\u68c0\u67e5\u9519\u8bef\uff0c\u8981\u4f18\u96c5\u5730\u5904\u7406\u9519\u8bef \u5904\u7406\u7c7b\u578b\u65ad\u8a00\u5931\u8d25 type assertion \u7684\u5355\u4e2a\u8fd4\u56de\u503c\u5f62\u5f0f\u9488\u5bf9\u4e0d\u6b63\u786e\u7684\u7c7b\u578b\u5c06\u4ea7\u751f panic\u3002\u56e0\u6b64\uff0c\u8bf7\u59cb\u7ec8\u4f7f\u7528\u201ccomma ok\u201d\u7684\u60ef\u7528\u6cd5\u3002 Bad Good t := i.(string) t, ok := i.(string) if !ok { // \u4f18\u96c5\u5730\u5904\u7406\u9519\u8bef } \u4e0d\u8981 panic \u5728\u751f\u4ea7\u73af\u5883\u4e2d\u8fd0\u884c\u7684\u4ee3\u7801\u5fc5\u987b\u907f\u514d\u51fa\u73b0 panic\u3002panic \u662f cascading failures \u7ea7\u8054\u5931\u8d25\u7684\u4e3b\u8981\u6839\u6e90 \u3002\u5982\u679c\u53d1\u751f\u9519\u8bef\uff0c\u8be5\u51fd\u6570\u5fc5\u987b\u8fd4\u56de\u9519\u8bef\uff0c\u5e76\u5141\u8bb8\u8c03\u7528\u65b9\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u5b83\u3002 Bad Good func run(args []string) { if len(args) == 0 { panic(\"an argument is required\") } // ... } func main() { run(os.Args[1:]) } func run(args []string) error { if len(args) == 0 { return errors.New(\"an argument is required\") } // ... return nil } func main() { if err := run(os.Args[1:]); err != nil { fmt.Fprintln(os.Stderr, err) os.Exit(1) } } panic/recover \u4e0d\u662f\u9519\u8bef\u5904\u7406\u7b56\u7565\u3002\u4ec5\u5f53\u53d1\u751f\u4e0d\u53ef\u6062\u590d\u7684\u4e8b\u60c5\uff08\u4f8b\u5982\uff1anil \u5f15\u7528\uff09\u65f6\uff0c\u7a0b\u5e8f\u624d\u5fc5\u987b panic\u3002\u7a0b\u5e8f\u521d\u59cb\u5316\u662f\u4e00\u4e2a\u4f8b\u5916\uff1a\u7a0b\u5e8f\u542f\u52a8\u65f6\u5e94\u4f7f\u7a0b\u5e8f\u4e2d\u6b62\u7684\u4e0d\u826f\u60c5\u51b5\u53ef\u80fd\u4f1a\u5f15\u8d77 panic\u3002 var _statusTemplate = template.Must(template.New(\"name\").Parse(\"_statusHTML\")) \u5373\u4f7f\u5728\u6d4b\u8bd5\u4ee3\u7801\u4e2d\uff0c\u4e5f\u4f18\u5148\u4f7f\u7528 t.Fatal \u6216\u8005 t.FailNow \u800c\u4e0d\u662f panic \u6765\u786e\u4fdd\u5931\u8d25\u88ab\u6807\u8bb0\u3002 Bad Good // func TestFoo(t *testing.T) f, err := ioutil.TempFile(\"\", \"test\") if err != nil { panic(\"failed to set up test\") } // func TestFoo(t *testing.T) f, err := ioutil.TempFile(\"\", \"test\") if err != nil { t.Fatal(\"failed to set up test\") } \u4f7f\u7528 go.uber.org/atomic \u4f7f\u7528 sync/atomic \u5305\u7684\u539f\u5b50\u64cd\u4f5c\u5bf9\u539f\u59cb\u7c7b\u578b ( int32 , int64 \u7b49\uff09\u8fdb\u884c\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5f88\u5bb9\u6613\u5fd8\u8bb0\u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u6765\u8bfb\u53d6\u6216\u4fee\u6539\u53d8\u91cf\u3002 go.uber.org/atomic \u901a\u8fc7\u9690\u85cf\u57fa\u7840\u7c7b\u578b\u4e3a\u8fd9\u4e9b\u64cd\u4f5c\u589e\u52a0\u4e86\u7c7b\u578b\u5b89\u5168\u6027\u3002\u6b64\u5916\uff0c\u5b83\u5305\u62ec\u4e00\u4e2a\u65b9\u4fbf\u7684 atomic.Bool \u7c7b\u578b\u3002 Bad Good type foo struct { running int32 // atomic } func (f* foo) start() { if atomic.SwapInt32(&f.running, 1) == 1 { // already running\u2026 return } // start the Foo } func (f *foo) isRunning() bool { return f.running == 1 // race! } type foo struct { running atomic.Bool } func (f *foo) start() { if f.running.Swap(true) { // already running\u2026 return } // start the Foo } func (f *foo) isRunning() bool { return f.running.Load() } \u907f\u514d\u53ef\u53d8\u5168\u5c40\u53d8\u91cf \u4f7f\u7528\u9009\u62e9\u4f9d\u8d56\u6ce8\u5165\u65b9\u5f0f\u907f\u514d\u6539\u53d8\u5168\u5c40\u53d8\u91cf\u3002 \u65e2\u9002\u7528\u4e8e\u51fd\u6570\u6307\u9488\u53c8\u9002\u7528\u4e8e\u5176\u4ed6\u503c\u7c7b\u578b Bad Good // sign.go var _timeNow = time.Now func sign(msg string) string { now := _timeNow() return signWithTime(msg, now) } // sign.go type signer struct { now func() time.Time } func newSigner() *signer { return &signer{ now: time.Now, } } func (s *signer) Sign(msg string) string { now := s.now() return signWithTime(msg, now) } // sign_test.go func TestSign(t *testing.T) { oldTimeNow := _timeNow _timeNow = func() time.Time { return someFixedTime } defer func() { _timeNow = oldTimeNow }() assert.Equal(t, want, sign(give)) } // sign_test.go func TestSigner(t *testing.T) { s := newSigner() s.now = func() time.Time { return someFixedTime } assert.Equal(t, want, s.Sign(give)) } \u907f\u514d\u5728\u516c\u5171\u7ed3\u6784\u4e2d\u5d4c\u5165\u7c7b\u578b \u8fd9\u4e9b\u5d4c\u5165\u7684\u7c7b\u578b\u6cc4\u6f0f\u5b9e\u73b0\u7ec6\u8282\u3001\u7981\u6b62\u7c7b\u578b\u6f14\u5316\u548c\u6a21\u7cca\u7684\u6587\u6863\u3002 \u5047\u8bbe\u60a8\u4f7f\u7528\u5171\u4eab\u7684 AbstractList \u5b9e\u73b0\u4e86\u591a\u79cd\u5217\u8868\u7c7b\u578b\uff0c\u8bf7\u907f\u514d\u5728\u5177\u4f53\u7684\u5217\u8868\u5b9e\u73b0\u4e2d\u5d4c\u5165 AbstractList \u3002 \u76f8\u53cd\uff0c\u53ea\u9700\u624b\u52a8\u5c06\u65b9\u6cd5\u5199\u5165\u5177\u4f53\u7684\u5217\u8868\uff0c\u8be5\u5217\u8868\u5c06\u59d4\u6258\u7ed9\u62bd\u8c61\u5217\u8868\u3002 type AbstractList struct {} // \u6dfb\u52a0\u5c06\u5b9e\u4f53\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 func (l *AbstractList) Add(e Entity) { // ... } // \u79fb\u9664\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u5b9e\u4f53\u3002 func (l *AbstractList) Remove(e Entity) { // ... } Bad Good // ConcreteList \u662f\u4e00\u4e2a\u5b9e\u4f53\u5217\u8868\u3002 type ConcreteList struct { *AbstractList } // ConcreteList \u662f\u4e00\u4e2a\u5b9e\u4f53\u5217\u8868\u3002 type ConcreteList struct { list *AbstractList } // \u6dfb\u52a0\u5c06\u5b9e\u4f53\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 func (l *ConcreteList) Add(e Entity) { l.list.Add(e) } // \u79fb\u9664\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u5b9e\u4f53\u3002 func (l *ConcreteList) Remove(e Entity) { l.list.Remove(e) } Go \u5141\u8bb8 \u7c7b\u578b\u5d4c\u5165 \u4f5c\u4e3a\u7ee7\u627f\u548c\u7ec4\u5408\u4e4b\u95f4\u7684\u6298\u8877\u3002 \u5916\u90e8\u7c7b\u578b\u83b7\u53d6\u5d4c\u5165\u7c7b\u578b\u7684\u65b9\u6cd5\u7684\u9690\u5f0f\u526f\u672c\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u59d4\u6258\u7ed9\u5d4c\u5165\u5b9e\u4f8b\u7684\u540c\u4e00\u65b9\u6cd5\u3002 \u7ed3\u6784\u8fd8\u83b7\u5f97\u4e0e\u7c7b\u578b\u540c\u540d\u7684\u5b57\u6bb5\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u5d4c\u5165\u7684\u7c7b\u578b\u662f public\uff0c\u90a3\u4e48\u5b57\u6bb5\u662f public\u3002\u4e3a\u4e86\u4fdd\u6301\u5411\u540e\u517c\u5bb9\u6027\uff0c\u5916\u90e8\u7c7b\u578b\u7684\u6bcf\u4e2a\u672a\u6765\u7248\u672c\u90fd\u5fc5\u987b\u4fdd\u7559\u5d4c\u5165\u7c7b\u578b\u3002 \u5f88\u5c11\u9700\u8981\u5d4c\u5165\u7c7b\u578b\u3002 \u8fd9\u662f\u4e00\u79cd\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u907f\u514d\u7f16\u5199\u5197\u957f\u7684\u59d4\u6258\u65b9\u6cd5\u3002 \u5373\u4f7f\u5d4c\u5165\u517c\u5bb9\u7684\u62bd\u8c61\u5217\u8868 interface \uff0c\u800c\u4e0d\u662f\u7ed3\u6784\u4f53\uff0c\u8fd9\u5c06\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u66f4\u5927\u7684\u7075\u6d3b\u6027\u6765\u6539\u53d8\u672a\u6765\uff0c\u4f46\u4ecd\u7136\u6cc4\u9732\u4e86\u5177\u4f53\u5217\u8868\u4f7f\u7528\u62bd\u8c61\u5b9e\u73b0\u7684\u7ec6\u8282\u3002 Bad Good // AbstractList \u662f\u5404\u79cd\u5b9e\u4f53\u5217\u8868\u7684\u901a\u7528\u5b9e\u73b0\u3002 type AbstractList interface { Add(Entity) Remove(Entity) } // ConcreteList \u662f\u4e00\u4e2a\u5b9e\u4f53\u5217\u8868\u3002 type ConcreteList struct { AbstractList } // ConcreteList \u662f\u4e00\u4e2a\u5b9e\u4f53\u5217\u8868\u3002 type ConcreteList struct { list AbstractList } // \u6dfb\u52a0\u5c06\u5b9e\u4f53\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 func (l *ConcreteList) Add(e Entity) { l.list.Add(e) } // \u79fb\u9664\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u5b9e\u4f53\u3002 func (l *ConcreteList) Remove(e Entity) { l.list.Remove(e) } \u65e0\u8bba\u662f\u4f7f\u7528\u5d4c\u5165\u5f0f\u7ed3\u6784\u8fd8\u662f\u4f7f\u7528\u5d4c\u5165\u5f0f\u63a5\u53e3\uff0c\u5d4c\u5165\u5f0f\u7c7b\u578b\u90fd\u4f1a\u9650\u5236\u7c7b\u578b\u7684\u6f14\u5316. \u5411\u5d4c\u5165\u5f0f\u63a5\u53e3\u6dfb\u52a0\u65b9\u6cd5\u662f\u4e00\u4e2a\u7834\u574f\u6027\u7684\u6539\u53d8\u3002 \u5220\u9664\u5d4c\u5165\u7c7b\u578b\u662f\u4e00\u4e2a\u7834\u574f\u6027\u7684\u6539\u53d8\u3002 \u5373\u4f7f\u4f7f\u7528\u6ee1\u8db3\u76f8\u540c\u63a5\u53e3\u7684\u66ff\u4ee3\u65b9\u6cd5\u66ff\u6362\u5d4c\u5165\u7c7b\u578b\uff0c\u4e5f\u662f\u4e00\u4e2a\u7834\u574f\u6027\u7684\u6539\u53d8\u3002 \u5c3d\u7ba1\u7f16\u5199\u8fd9\u4e9b\u59d4\u6258\u65b9\u6cd5\u662f\u4e4f\u5473\u7684\uff0c\u4f46\u662f\u989d\u5916\u7684\u5de5\u4f5c\u9690\u85cf\u4e86\u5b9e\u73b0\u7ec6\u8282\uff0c\u7559\u4e0b\u4e86\u66f4\u591a\u7684\u66f4\u6539\u673a\u4f1a\uff0c\u8fd8\u6d88\u9664\u4e86\u5728\u6587\u6863\u4e2d\u53d1\u73b0\u5b8c\u6574\u5217\u8868\u63a5\u53e3\u7684\u95f4\u63a5\u6027\u64cd\u4f5c\u3002 \u907f\u514d\u4f7f\u7528\u5185\u7f6e\u540d\u79f0 Go\u8bed\u8a00\u89c4\u8303 language specification \u6982\u8ff0\u4e86\u51e0\u4e2a\u5185\u7f6e\u7684\uff0c \u4e0d\u5e94\u5728Go\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u540d\u79f0\u6807\u8bc6 predeclared identifiers \u3002 \u6839\u636e\u4e0a\u4e0b\u6587\u7684\u4e0d\u540c\uff0c\u5c06\u8fd9\u4e9b\u6807\u8bc6\u7b26\u4f5c\u4e3a\u540d\u79f0\u91cd\u590d\u4f7f\u7528\uff0c \u5c06\u5728\u5f53\u524d\u4f5c\u7528\u57df\uff08\u6216\u4efb\u4f55\u5d4c\u5957\u4f5c\u7528\u57df\uff09\u4e2d\u9690\u85cf\u539f\u59cb\u6807\u8bc6\u7b26\uff0c\u6216\u8005\u6df7\u6dc6\u4ee3\u7801\u3002 \u5728\u6700\u597d\u7684\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\uff1b\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6837\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u5f15\u5165\u6f5c\u5728\u7684\u3001\u96be\u4ee5\u6062\u590d\u7684\u9519\u8bef\u3002 Bad Good var error string // `error` \u4f5c\u7528\u57df\u9690\u5f0f\u8986\u76d6 // or func handleErrorMessage(error string) { // `error` \u4f5c\u7528\u57df\u9690\u5f0f\u8986\u76d6 } var errorMessage string // `error` \u6307\u5411\u5185\u7f6e\u7684\u975e\u8986\u76d6 // or func handleErrorMessage(msg string) { // `error` \u6307\u5411\u5185\u7f6e\u7684\u975e\u8986\u76d6 } type Foo struct { // \u867d\u7136\u8fd9\u4e9b\u5b57\u6bb5\u5728\u6280\u672f\u4e0a\u4e0d\u6784\u6210\u9634\u5f71\uff0c\u4f46`error`\u6216`string`\u5b57\u7b26\u4e32\u7684\u91cd\u6620\u5c04\u73b0\u5728\u662f\u4e0d\u660e\u786e\u7684\u3002 error error string string } func (f Foo) Error() error { // `error` \u548c `f.error` \u5728\u89c6\u89c9\u4e0a\u662f\u76f8\u4f3c\u7684 return f.error } func (f Foo) String() string { // `string` and `f.string` \u5728\u89c6\u89c9\u4e0a\u662f\u76f8\u4f3c\u7684 return f.string } type Foo struct { // `error` and `string` \u73b0\u5728\u662f\u660e\u786e\u7684\u3002 err error str string } func (f Foo) Error() error { return f.err } func (f Foo) String() string { return f.str } \u6ce8\u610f\uff0c\u7f16\u8bd1\u5668\u5728\u4f7f\u7528\u9884\u5148\u5206\u9694\u7684\u6807\u8bc6\u7b26\u65f6\u4e0d\u4f1a\u751f\u6210\u9519\u8bef\uff0c \u4f46\u662f\u8bf8\u5982 go vet \u4e4b\u7c7b\u7684\u5de5\u5177\u4f1a\u6b63\u786e\u5730\u6307\u51fa\u8fd9\u4e9b\u548c\u5176\u4ed6\u60c5\u51b5\u4e0b\u7684\u9690\u5f0f\u95ee\u9898\u3002 \u907f\u514d\u4f7f\u7528 init() \u5c3d\u53ef\u80fd\u907f\u514d\u4f7f\u7528 init() \u3002\u5f53 init() \u662f\u4e0d\u53ef\u907f\u514d\u6216\u53ef\u53d6\u7684\uff0c\u4ee3\u7801\u5e94\u5148\u5c1d\u8bd5\uff1a \u65e0\u8bba\u7a0b\u5e8f\u73af\u5883\u6216\u8c03\u7528\u5982\u4f55\uff0c\u90fd\u8981\u5b8c\u5168\u786e\u5b9a\u3002 \u907f\u514d\u4f9d\u8d56\u4e8e\u5176\u4ed6 init() \u51fd\u6570\u7684\u987a\u5e8f\u6216\u526f\u4f5c\u7528\u3002\u867d\u7136 init() \u987a\u5e8f\u662f\u660e\u786e\u7684\uff0c\u4f46\u4ee3\u7801\u53ef\u4ee5\u66f4\u6539\uff0c \u56e0\u6b64 init() \u51fd\u6570\u4e4b\u95f4\u7684\u5173\u7cfb\u53ef\u80fd\u4f1a\u4f7f\u4ee3\u7801\u53d8\u5f97\u8106\u5f31\u548c\u5bb9\u6613\u51fa\u9519\u3002 \u907f\u514d\u8bbf\u95ee\u6216\u64cd\u4f5c\u5168\u5c40\u6216\u73af\u5883\u72b6\u6001\uff0c\u5982\u673a\u5668\u4fe1\u606f\u3001\u73af\u5883\u53d8\u91cf\u3001\u5de5\u4f5c\u76ee\u5f55\u3001\u7a0b\u5e8f\u53c2\u6570/\u8f93\u5165\u7b49\u3002 \u907f\u514d I/O \uff0c\u5305\u62ec\u6587\u4ef6\u7cfb\u7edf\u3001\u7f51\u7edc\u548c\u7cfb\u7edf\u8c03\u7528\u3002 \u4e0d\u80fd\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\u7684\u4ee3\u7801\u53ef\u80fd\u5c5e\u4e8e\u8981\u4f5c\u4e3a main() \u8c03\u7528\u7684\u4e00\u90e8\u5206\uff08\u6216\u7a0b\u5e8f\u751f\u547d\u5468\u671f\u4e2d\u7684\u5176\u4ed6\u5730\u65b9\uff09\uff0c \u6216\u8005\u4f5c\u4e3a main() \u672c\u8eab\u7684\u4e00\u90e8\u5206\u5199\u5165\u3002\u7279\u522b\u662f\uff0c\u6253\u7b97\u7531\u5176\u4ed6\u7a0b\u5e8f\u4f7f\u7528\u7684\u5e93\u5e94\u8be5\u7279\u522b\u6ce8\u610f\u5b8c\u5168\u786e\u5b9a\u6027\uff0c \u800c\u4e0d\u662f\u6267\u884c\u201cinit magic\u201d Bad Good type Foo struct { // ... } var _defaultFoo Foo func init() { _defaultFoo = Foo{ // ... } } var _defaultFoo = Foo{ // ... } // or, \u4e3a\u4e86\u66f4\u597d\u7684\u53ef\u6d4b\u8bd5\u6027: var _defaultFoo = defaultFoo() func defaultFoo() Foo { return Foo{ // ... } } type Config struct { // ... } var _config Config func init() { // Bad: \u57fa\u4e8e\u5f53\u524d\u76ee\u5f55 cwd, _ := os.Getwd() // Bad: I/O raw, _ := ioutil.ReadFile( path.Join(cwd, \"config\", \"config.yaml\"), ) yaml.Unmarshal(raw, &_config) } type Config struct { // ... } func loadConfig() Config { cwd, err := os.Getwd() // handle err raw, err := ioutil.ReadFile( path.Join(cwd, \"config\", \"config.yaml\"), ) // handle err var config Config yaml.Unmarshal(raw, &config) return config } \u8003\u8651\u5230\u4e0a\u8ff0\u60c5\u51b5\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c init() \u53ef\u80fd\u66f4\u53ef\u53d6\u6216\u662f\u5fc5\u8981\u7684\uff0c\u53ef\u80fd\u5305\u62ec\uff1a \u4e0d\u80fd\u8868\u793a\u4e3a\u5355\u4e2a\u8d4b\u503c\u7684\u590d\u6742\u8868\u8fbe\u5f0f\u3002 \u53ef\u63d2\u5165\u7684\u94a9\u5b50\uff0c\u5982 database/sql \u3001\u7f16\u7801\u7c7b\u578b\u6ce8\u518c\u8868\u7b49\u3002 \u5bf9 Google Cloud Functions \u548c\u5176\u4ed6\u5f62\u5f0f\u7684\u786e\u5b9a\u6027\u9884\u8ba1\u7b97\u7684\u4f18\u5316\u3002 \u8ffd\u52a0\u65f6\u4f18\u5148\u6307\u5b9a\u5207\u7247\u5bb9\u91cf \u8ffd\u52a0\u65f6\u4f18\u5148\u6307\u5b9a\u5207\u7247\u5bb9\u91cf \u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u521d\u59cb\u5316\u8981\u8ffd\u52a0\u7684\u5207\u7247\u65f6\u4e3a make() \u63d0\u4f9b\u4e00\u4e2a\u5bb9\u91cf\u503c\u3002 Bad Good for n := 0; n < b.N; n++ { data := make([]int, 0) for k := 0; k < size; k++{ data = append(data, k) } } for n := 0; n < b.N; n++ { data := make([]int, 0, size) for k := 0; k < size; k++{ data = append(data, k) } } BenchmarkBad-4 100000000 2.48s BenchmarkGood-4 100000000 0.21s \u4e3b\u51fd\u6570\u9000\u51fa\u65b9\u5f0f(Exit) Go\u7a0b\u5e8f\u4f7f\u7528[ os.Exit ] \u6216\u8005 [ log.Fatal* ] \u7acb\u5373\u9000\u51fa (\u4f7f\u7528 panic \u4e0d\u662f\u9000\u51fa\u7a0b\u5e8f\u7684\u597d\u65b9\u6cd5\uff0c\u8bf7 don't panic .) \u4ec5\u5728 main\uff08\uff09 \u4e2d\u8c03\u7528\u5176\u4e2d\u4e00\u4e2a os.Exit \u6216\u8005 log.Fatal* \u3002\u6240\u6709\u5176\u4ed6\u51fd\u6570\u5e94\u5c06\u9519\u8bef\u8fd4\u56de\u5230\u4fe1\u53f7\u5931\u8d25\u4e2d\u3002 Bad Good func main() { body := readFile(path) fmt.Println(body) } func readFile(path string) string { f, err := os.Open(path) if err != nil { log.Fatal(err) } b, err := ioutil.ReadAll(f) if err != nil { log.Fatal(err) } return string(b) } func main() { body, err := readFile(path) if err != nil { log.Fatal(err) } fmt.Println(body) } func readFile(path string) (string, error) { f, err := os.Open(path) if err != nil { return \"\", err } b, err := ioutil.ReadAll(f) if err != nil { return \"\", err } return string(b), nil } \u539f\u5219\u4e0a\uff1a\u9000\u51fa\u7684\u5177\u6709\u591a\u79cd\u529f\u80fd\u7684\u7a0b\u5e8f\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\uff1a \u4e0d\u660e\u663e\u7684\u63a7\u5236\u6d41\uff1a\u4efb\u4f55\u51fd\u6570\u90fd\u53ef\u4ee5\u9000\u51fa\u7a0b\u5e8f\uff0c\u56e0\u6b64\u5f88\u96be\u5bf9\u63a7\u5236\u6d41\u8fdb\u884c\u63a8\u7406\u3002 \u96be\u4ee5\u6d4b\u8bd5\uff1a\u9000\u51fa\u7a0b\u5e8f\u7684\u51fd\u6570\u4e5f\u5c06\u9000\u51fa\u8c03\u7528\u5b83\u7684\u6d4b\u8bd5\u3002\u8fd9\u4f7f\u5f97\u51fd\u6570\u5f88\u96be\u6d4b\u8bd5\uff0c\u5e76\u5f15\u5165\u4e86\u8df3\u8fc7 go test \u5c1a\u672a\u8fd0\u884c\u7684\u5176\u4ed6\u6d4b\u8bd5\u7684\u98ce\u9669\u3002 \u8df3\u8fc7\u6e05\u7406\uff1a\u5f53\u51fd\u6570\u9000\u51fa\u7a0b\u5e8f\u65f6\uff0c\u4f1a\u8df3\u8fc7\u5df2\u7ecf\u8fdb\u5165 defer \u961f\u5217\u91cc\u7684\u51fd\u6570\u8c03\u7528\u3002\u8fd9\u589e\u52a0\u4e86\u8df3\u8fc7\u91cd\u8981\u6e05\u7406\u4efb\u52a1\u7684\u98ce\u9669\u3002 \u4e00\u6b21\u6027\u9000\u51fa \u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u4f60\u7684 main\uff08\uff09 \u51fd\u6570\u4e2d \u6700\u591a\u4e00\u6b21 \u8c03\u7528 os.Exit \u6216\u8005 log.Fatal \u3002\u5982\u679c\u6709\u591a\u4e2a\u9519\u8bef\u573a\u666f\u505c\u6b62\u7a0b\u5e8f\u6267\u884c\uff0c\u8bf7\u5c06\u8be5\u903b\u8f91\u653e\u5728\u5355\u72ec\u7684\u51fd\u6570\u4e0b\u5e76\u4ece\u4e2d\u8fd4\u56de\u9519\u8bef\u3002 \u8fd9\u4f1a\u7f29\u77ed main() \u51fd\u6570\uff0c\u5e76\u5c06\u6240\u6709\u5173\u952e\u4e1a\u52a1\u903b\u8f91\u653e\u5165\u4e00\u4e2a\u5355\u72ec\u7684\u3001\u53ef\u6d4b\u8bd5\u7684\u51fd\u6570\u4e2d\u3002 Bad Good package main func main() { args := os.Args[1:] if len(args) != 1 { log.Fatal(\"missing file\") } name := args[0] f, err := os.Open(name) if err != nil { log.Fatal(err) } defer f.Close() // \u5982\u679c\u6211\u4eec\u8c03\u7528log.Fatal \u5728\u8fd9\u6761\u7ebf\u4e4b\u540e // f.Close \u5c06\u4f1a\u88ab\u6267\u884c. b, err := ioutil.ReadAll(f) if err != nil { log.Fatal(err) } // ... } package main func main() { if err := run(); err != nil { log.Fatal(err) } } func run() error { args := os.Args[1:] if len(args) != 1 { return errors.New(\"missing file\") } name := args[0] f, err := os.Open(name) if err != nil { return err } defer f.Close() b, err := ioutil.ReadAll(f) if err != nil { return err } // ... } \u6027\u80fd \u6027\u80fd\u65b9\u9762\u7684\u7279\u5b9a\u51c6\u5219\u53ea\u9002\u7528\u4e8e\u9ad8\u9891\u573a\u666f\u3002 \u4f18\u5148\u4f7f\u7528 strconv \u800c\u4e0d\u662f fmt \u5c06\u539f\u8bed\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u6216\u4ece\u5b57\u7b26\u4e32\u8f6c\u6362\u65f6\uff0c strconv \u901f\u5ea6\u6bd4 fmt \u5feb\u3002 Bad Good for i := 0; i < b.N; i++ { s := fmt.Sprint(rand.Int()) } for i := 0; i < b.N; i++ { s := strconv.Itoa(rand.Int()) } BenchmarkFmtSprint-4 143 ns/op 2 allocs/op BenchmarkStrconv-4 64.2 ns/op 1 allocs/op \u907f\u514d\u5b57\u7b26\u4e32\u5230\u5b57\u8282\u7684\u8f6c\u6362 \u4e0d\u8981\u53cd\u590d\u4ece\u56fa\u5b9a\u5b57\u7b26\u4e32\u521b\u5efa\u5b57\u8282 slice\u3002\u76f8\u53cd\uff0c\u8bf7\u6267\u884c\u4e00\u6b21\u8f6c\u6362\u5e76\u6355\u83b7\u7ed3\u679c\u3002 Bad Good for i := 0; i < b.N; i++ { w.Write([]byte(\"Hello world\")) } data := []byte(\"Hello world\") for i := 0; i < b.N; i++ { w.Write(data) } BenchmarkBad-4 50000000 22.2 ns/op BenchmarkGood-4 500000000 3.25 ns/op \u6307\u5b9a\u5bb9\u5668\u5bb9\u91cf \u5c3d\u53ef\u80fd\u6307\u5b9a\u5bb9\u5668\u5bb9\u91cf\uff0c\u4ee5\u4fbf\u4e3a\u5bb9\u5668\u9884\u5148\u5206\u914d\u5185\u5b58\u3002\u8fd9\u5c06\u5728\u6dfb\u52a0\u5143\u7d20\u65f6\u6700\u5c0f\u5316\u540e\u7eed\u5206\u914d\uff08\u901a\u8fc7\u590d\u5236\u548c\u8c03\u6574\u5bb9\u5668\u5927\u5c0f\uff09\u3002 \u6307\u5b9aMap\u5bb9\u91cf\u63d0\u793a \u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u4f7f\u7528 make() \u521d\u59cb\u5316\u7684\u65f6\u5019\u63d0\u4f9b\u5bb9\u91cf\u4fe1\u606f make(map[T1]T2, hint) \u5411 make() \u63d0\u4f9b\u5bb9\u91cf\u63d0\u793a\u4f1a\u5728\u521d\u59cb\u5316\u65f6\u5c1d\u8bd5\u8c03\u6574map\u7684\u5927\u5c0f\uff0c\u8fd9\u5c06\u51cf\u5c11\u5728\u5c06\u5143\u7d20\u6dfb\u52a0\u5230map\u65f6\u4e3amap\u91cd\u65b0\u5206\u914d\u5185\u5b58\u3002 \u6ce8\u610f\uff0c\u4e0eslices\u4e0d\u540c\u3002map capacity\u63d0\u793a\u5e76\u4e0d\u4fdd\u8bc1\u5b8c\u5168\u7684\u62a2\u5360\u5f0f\u5206\u914d\uff0c\u800c\u662f\u7528\u4e8e\u4f30\u8ba1\u6240\u9700\u7684hashmap bucket\u7684\u6570\u91cf\u3002 \u56e0\u6b64\uff0c\u5728\u5c06\u5143\u7d20\u6dfb\u52a0\u5230map\u65f6\uff0c\u751a\u81f3\u5728\u6307\u5b9amap\u5bb9\u91cf\u65f6\uff0c\u4ecd\u53ef\u80fd\u53d1\u751f\u5206\u914d\u3002 Bad Good m := make(map[string]os.FileInfo) files, _ := ioutil.ReadDir(\"./files\") for _, f := range files { m[f.Name()] = f } files, _ := ioutil.ReadDir(\"./files\") m := make(map[string]os.FileInfo, len(files)) for _, f := range files { m[f.Name()] = f } `m` \u662f\u5728\u6ca1\u6709\u5927\u5c0f\u63d0\u793a\u7684\u60c5\u51b5\u4e0b\u521b\u5efa\u7684\uff1b \u5728\u8fd0\u884c\u65f6\u53ef\u80fd\u4f1a\u6709\u66f4\u591a\u5206\u914d\u3002 `m` \u662f\u6709\u5927\u5c0f\u63d0\u793a\u521b\u5efa\u7684\uff1b\u5728\u8fd0\u884c\u65f6\u53ef\u80fd\u4f1a\u6709\u66f4\u5c11\u7684\u5206\u914d\u3002 \u6307\u5b9a\u5207\u7247\u5bb9\u91cf \u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u4f7f\u7528 make() \u521d\u59cb\u5316\u5207\u7247\u65f6\u63d0\u4f9b\u5bb9\u91cf\u4fe1\u606f\uff0c\u7279\u522b\u662f\u5728\u8ffd\u52a0\u5207\u7247\u65f6\u3002 make([]T, length, capacity) \u4e0emaps\u4e0d\u540c\uff0cslice capacity\u4e0d\u662f\u4e00\u4e2a\u63d0\u793a\uff1a\u7f16\u8bd1\u5668\u5c06\u4e3a\u63d0\u4f9b\u7ed9 make() \u7684slice\u7684\u5bb9\u91cf\u5206\u914d\u8db3\u591f\u7684\u5185\u5b58\uff0c \u8fd9\u610f\u5473\u7740\u540e\u7eed\u7684append()`\u64cd\u4f5c\u5c06\u5bfc\u81f4\u96f6\u5206\u914d\uff08\u76f4\u5230slice\u7684\u957f\u5ea6\u4e0e\u5bb9\u91cf\u5339\u914d\uff0c\u5728\u6b64\u4e4b\u540e\uff0c\u4efb\u4f55append\u90fd\u53ef\u80fd\u8c03\u6574\u5927\u5c0f\u4ee5\u5bb9\u7eb3\u5176\u4ed6\u5143\u7d20\uff09\u3002 Bad Good for n := 0; n < b.N; n++ { data := make([]int, 0) for k := 0; k < size; k++{ data = append(data, k) } } for n := 0; n < b.N; n++ { data := make([]int, 0, size) for k := 0; k < size; k++{ data = append(data, k) } } BenchmarkBad-4 100000000 2.48s BenchmarkGood-4 100000000 0.21s \u89c4\u8303 \u4e00\u81f4\u6027 \u672c\u6587\u4e2d\u6982\u8ff0\u7684\u4e00\u4e9b\u6807\u51c6\u90fd\u662f\u5ba2\u89c2\u6027\u7684\u8bc4\u4f30\uff0c\u662f\u6839\u636e\u573a\u666f\u3001\u4e0a\u4e0b\u6587\u3001\u6216\u8005\u4e3b\u89c2\u6027\u7684\u5224\u65ad\uff1b \u4f46\u662f\u6700\u91cd\u8981\u7684\u662f\uff0c \u4fdd\u6301\u4e00\u81f4 . \u4e00\u81f4\u6027\u7684\u4ee3\u7801\u66f4\u5bb9\u6613\u7ef4\u62a4\u3001\u662f\u66f4\u5408\u7406\u7684\u3001\u9700\u8981\u66f4\u5c11\u7684\u5b66\u4e60\u6210\u672c\u3001\u5e76\u4e14\u968f\u7740\u65b0\u7684\u7ea6\u5b9a\u51fa\u73b0\u6216\u8005\u51fa\u73b0\u9519\u8bef\u540e\u66f4\u5bb9\u6613\u8fc1\u79fb\u3001\u66f4\u65b0\u3001\u4fee\u590d bug \u76f8\u53cd\uff0c\u5728\u4e00\u4e2a\u4ee3\u7801\u5e93\u4e2d\u5305\u542b\u591a\u4e2a\u5b8c\u5168\u4e0d\u540c\u6216\u51b2\u7a81\u7684\u4ee3\u7801\u98ce\u683c\u4f1a\u5bfc\u81f4\u7ef4\u62a4\u6210\u672c\u5f00\u9500\u3001\u4e0d\u786e\u5b9a\u6027\u548c\u8ba4\u77e5\u504f\u5dee\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u4f1a\u76f4\u63a5\u5bfc\u81f4\u901f\u5ea6\u964d\u4f4e\u3001\u4ee3\u7801\u5ba1\u67e5\u75db\u82e6\u3001\u800c\u4e14\u589e\u52a0 bug \u6570\u91cf\u3002 \u5c06\u8fd9\u4e9b\u6807\u51c6\u5e94\u7528\u4e8e\u4ee3\u7801\u5e93\u65f6\uff0c\u5efa\u8bae\u5728 package\uff08\u6216\u66f4\u5927\uff09\u7ea7\u522b\u8fdb\u884c\u66f4\u6539\uff0c\u5b50\u5305\u7ea7\u522b\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5c06\u591a\u4e2a\u6837\u5f0f\u5f15\u5165\u5230\u540c\u4e00\u4ee3\u7801\u4e2d\uff0c\u8fdd\u53cd\u4e86\u4e0a\u8ff0\u5173\u6ce8\u70b9\u3002 \u76f8\u4f3c\u7684\u58f0\u660e\u653e\u5728\u4e00\u7ec4 Go \u8bed\u8a00\u652f\u6301\u5c06\u76f8\u4f3c\u7684\u58f0\u660e\u653e\u5728\u4e00\u4e2a\u7ec4\u5185\u3002 Bad Good import \"a\" import \"b\" import ( \"a\" \"b\" ) \u8fd9\u540c\u6837\u9002\u7528\u4e8e\u5e38\u91cf\u3001\u53d8\u91cf\u548c\u7c7b\u578b\u58f0\u660e\uff1a Bad Good const a = 1 const b = 2 var a = 1 var b = 2 type Area float64 type Volume float64 const ( a = 1 b = 2 ) var ( a = 1 b = 2 ) type ( Area float64 Volume float64 ) \u4ec5\u5c06\u76f8\u5173\u7684\u58f0\u660e\u653e\u5728\u4e00\u7ec4\u3002\u4e0d\u8981\u5c06\u4e0d\u76f8\u5173\u7684\u58f0\u660e\u653e\u5728\u4e00\u7ec4\u3002 Bad Good type Operation int const ( Add Operation = iota + 1 Subtract Multiply EnvVar = \"MY_ENV\" ) type Operation int const ( Add Operation = iota + 1 Subtract Multiply ) const EnvVar = \"MY_ENV\" \u5206\u7ec4\u4f7f\u7528\u7684\u4f4d\u7f6e\u6ca1\u6709\u9650\u5236\uff0c\u4f8b\u5982\uff1a\u4f60\u53ef\u4ee5\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u5b83\u4eec\uff1a Bad Good func f() string { var red = color.New(0xff0000) var green = color.New(0x00ff00) var blue = color.New(0x0000ff) ... } func f() string { var ( red = color.New(0xff0000) green = color.New(0x00ff00) blue = color.New(0x0000ff) ) ... } import \u5206\u7ec4 \u5bfc\u5165\u5e94\u8be5\u5206\u4e3a\u4e24\u7ec4\uff1a \u6807\u51c6\u5e93 \u5176\u4ed6\u5e93 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f goimports \u5e94\u7528\u7684\u5206\u7ec4\u3002 Bad Good import ( \"fmt\" \"os\" \"go.uber.org/atomic\" \"golang.org/x/sync/errgroup\" ) import ( \"fmt\" \"os\" \"go.uber.org/atomic\" \"golang.org/x/sync/errgroup\" ) \u5305\u540d \u5f53\u547d\u540d\u5305\u65f6\uff0c\u8bf7\u6309\u4e0b\u9762\u89c4\u5219\u9009\u62e9\u4e00\u4e2a\u540d\u79f0\uff1a \u5168\u90e8\u5c0f\u5199\u3002\u6ca1\u6709\u5927\u5199\u6216\u4e0b\u5212\u7ebf\u3002 \u5927\u591a\u6570\u4f7f\u7528\u547d\u540d\u5bfc\u5165\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u9700\u8981\u91cd\u547d\u540d\u3002 \u7b80\u77ed\u800c\u7b80\u6d01\u3002\u8bf7\u8bb0\u4f4f\uff0c\u5728\u6bcf\u4e2a\u4f7f\u7528\u7684\u5730\u65b9\u90fd\u5b8c\u6574\u6807\u8bc6\u4e86\u8be5\u540d\u79f0\u3002 \u4e0d\u7528\u590d\u6570\u3002\u4f8b\u5982 net/url \uff0c\u800c\u4e0d\u662f net/urls \u3002 \u4e0d\u8981\u7528\u201ccommon\u201d\uff0c\u201cutil\u201d\uff0c\u201cshared\u201d\u6216\u201clib\u201d\u3002\u8fd9\u4e9b\u662f\u4e0d\u597d\u7684\uff0c\u4fe1\u606f\u91cf\u4e0d\u8db3\u7684\u540d\u79f0\u3002 \u53e6\u8bf7\u53c2\u9605 Package Names \u548c Go \u5305\u6837\u5f0f\u6307\u5357 . \u51fd\u6570\u540d \u6211\u4eec\u9075\u5faa Go \u793e\u533a\u5173\u4e8e\u4f7f\u7528 MixedCaps \u4f5c\u4e3a\u51fd\u6570\u540d \u7684\u7ea6\u5b9a\u3002\u6709\u4e00\u4e2a\u4f8b\u5916\uff0c\u4e3a\u4e86\u5bf9\u76f8\u5173\u7684\u6d4b\u8bd5\u7528\u4f8b\u8fdb\u884c\u5206\u7ec4\uff0c\u51fd\u6570\u540d\u53ef\u80fd\u5305\u542b\u4e0b\u5212\u7ebf\uff0c\u5982\uff1a TestMyFunction_WhatIsBeingTested . \u5bfc\u5165\u522b\u540d \u5982\u679c\u7a0b\u5e8f\u5305\u540d\u79f0\u4e0e\u5bfc\u5165\u8def\u5f84\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e0d\u5339\u914d\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u5bfc\u5165\u522b\u540d\u3002 import ( \"net/http\" client \"example.com/client-go\" trace \"example.com/trace/v2\" ) \u5728\u6240\u6709\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u9664\u975e\u5bfc\u5165\u4e4b\u95f4\u6709\u76f4\u63a5\u51b2\u7a81\uff0c\u5426\u5219\u5e94\u907f\u514d\u5bfc\u5165\u522b\u540d\u3002 Bad Good import ( \"fmt\" \"os\" nettrace \"golang.net/x/trace\" ) import ( \"fmt\" \"os\" \"runtime/trace\" nettrace \"golang.net/x/trace\" ) \u51fd\u6570\u5206\u7ec4\u4e0e\u987a\u5e8f \u51fd\u6570\u5e94\u6309\u7c97\u7565\u7684\u8c03\u7528\u987a\u5e8f\u6392\u5e8f\u3002 \u540c\u4e00\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u5e94\u6309\u63a5\u6536\u8005\u5206\u7ec4\u3002 \u56e0\u6b64\uff0c\u5bfc\u51fa\u7684\u51fd\u6570\u5e94\u5148\u51fa\u73b0\u5728\u6587\u4ef6\u4e2d\uff0c\u653e\u5728 struct , const , var \u5b9a\u4e49\u7684\u540e\u9762\u3002 \u5728\u5b9a\u4e49\u7c7b\u578b\u4e4b\u540e\uff0c\u4f46\u5728\u63a5\u6536\u8005\u7684\u5176\u4f59\u65b9\u6cd5\u4e4b\u524d\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e2a newXYZ() / NewXYZ() \u7531\u4e8e\u51fd\u6570\u662f\u6309\u63a5\u6536\u8005\u5206\u7ec4\u7684\uff0c\u56e0\u6b64\u666e\u901a\u5de5\u5177\u51fd\u6570\u5e94\u5728\u6587\u4ef6\u672b\u5c3e\u51fa\u73b0\u3002 Bad Good func (s *something) Cost() { return calcCost(s.weights) } type something struct{ ... } func calcCost(n []int) int {...} func (s *something) Stop() {...} func newSomething() *something { return &something{} } type something struct{ ... } func newSomething() *something { return &something{} } func (s *something) Cost() { return calcCost(s.weights) } func (s *something) Stop() {...} func calcCost(n []int) int {...} \u51cf\u5c11\u5d4c\u5957 \u4ee3\u7801\u5e94\u901a\u8fc7\u5c3d\u53ef\u80fd\u5148\u5904\u7406\u9519\u8bef\u60c5\u51b5/\u7279\u6b8a\u60c5\u51b5\u5e76\u5c3d\u65e9\u8fd4\u56de\u6216\u7ee7\u7eed\u5faa\u73af\u6765\u51cf\u5c11\u5d4c\u5957\u3002\u51cf\u5c11\u5d4c\u5957\u591a\u4e2a\u7ea7\u522b\u7684\u4ee3\u7801\u7684\u4ee3\u7801\u91cf\u3002 Bad Good for _, v := range data { if v.F1 == 1 { v = process(v) if err := v.Call(); err == nil { v.Send() } else { return err } } else { log.Printf(\"Invalid v: %v\", v) } } for _, v := range data { if v.F1 != 1 { log.Printf(\"Invalid v: %v\", v) continue } v = process(v) if err := v.Call(); err != nil { return err } v.Send() } \u4e0d\u5fc5\u8981\u7684 else \u5982\u679c\u5728 if \u7684\u4e24\u4e2a\u5206\u652f\u4e2d\u90fd\u8bbe\u7f6e\u4e86\u53d8\u91cf\uff0c\u5219\u53ef\u4ee5\u5c06\u5176\u66ff\u6362\u4e3a\u5355\u4e2a if\u3002 Bad Good var a int if b { a = 100 } else { a = 10 } a := 10 if b { a = 100 } \u9876\u5c42\u53d8\u91cf\u58f0\u660e \u5728\u9876\u5c42\uff0c\u4f7f\u7528\u6807\u51c6 var \u5173\u952e\u5b57\u3002\u8bf7\u52ff\u6307\u5b9a\u7c7b\u578b\uff0c\u9664\u975e\u5b83\u4e0e\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4e0d\u540c\u3002 Bad Good var _s string = F() func F() string { return \"A\" } var _s = F() // \u7531\u4e8e F \u5df2\u7ecf\u660e\u786e\u4e86\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u56e0\u6b64\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u663e\u5f0f\u6307\u5b9a_s \u7684\u7c7b\u578b // \u8fd8\u662f\u90a3\u79cd\u7c7b\u578b func F() string { return \"A\" } \u5982\u679c\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4e0e\u6240\u9700\u7684\u7c7b\u578b\u4e0d\u5b8c\u5168\u5339\u914d\uff0c\u8bf7\u6307\u5b9a\u7c7b\u578b\u3002 type myError struct{} func (myError) Error() string { return \"error\" } func F() myError { return myError{} } var _e error = F() // F \u8fd4\u56de\u4e00\u4e2a myError \u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4f46\u662f\u6211\u4eec\u8981 error \u7c7b\u578b \u5bf9\u4e8e\u672a\u5bfc\u51fa\u7684\u9876\u5c42\u5e38\u91cf\u548c\u53d8\u91cf\uff0c\u4f7f\u7528_\u4f5c\u4e3a\u524d\u7f00 \u5728\u672a\u5bfc\u51fa\u7684\u9876\u7ea7 vars \u548c consts \uff0c \u524d\u9762\u52a0\u4e0a\u524d\u7f00_\uff0c\u4ee5\u4f7f\u5b83\u4eec\u5728\u4f7f\u7528\u65f6\u660e\u786e\u8868\u793a\u5b83\u4eec\u662f\u5168\u5c40\u7b26\u53f7\u3002 \u4f8b\u5916\uff1a\u672a\u5bfc\u51fa\u7684\u9519\u8bef\u503c\uff0c\u5e94\u4ee5 err \u5f00\u5934\u3002 \u57fa\u672c\u4f9d\u636e\uff1a\u9876\u7ea7\u53d8\u91cf\u548c\u5e38\u91cf\u5177\u6709\u5305\u8303\u56f4\u4f5c\u7528\u57df\u3002\u4f7f\u7528\u901a\u7528\u540d\u79f0\u53ef\u80fd\u5f88\u5bb9\u6613\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u610f\u5916\u4f7f\u7528\u9519\u8bef\u7684\u503c\u3002 Bad Good // foo.go const ( defaultPort = 8080 defaultUser = \"user\" ) // bar.go func Bar() { defaultPort := 9090 ... fmt.Println(\"Default port\", defaultPort) // We will not see a compile error if the first line of // Bar() is deleted. } // foo.go const ( _defaultPort = 8080 _defaultUser = \"user\" ) \u7ed3\u6784\u4f53\u4e2d\u7684\u5d4c\u5165 \u5d4c\u5165\u5f0f\u7c7b\u578b\uff08\u4f8b\u5982 mutex\uff09\u5e94\u4f4d\u4e8e\u7ed3\u6784\u4f53\u5185\u7684\u5b57\u6bb5\u5217\u8868\u7684\u9876\u90e8\uff0c\u5e76\u4e14\u5fc5\u987b\u6709\u4e00\u4e2a\u7a7a\u884c\u5c06\u5d4c\u5165\u5f0f\u5b57\u6bb5\u4e0e\u5e38\u89c4\u5b57\u6bb5\u5206\u9694\u5f00\u3002 Bad Good type Client struct { version int http.Client } type Client struct { http.Client version int } \u5185\u5d4c\u5e94\u8be5\u63d0\u4f9b\u5207\u5b9e\u7684\u597d\u5904\uff0c\u6bd4\u5982\u4ee5\u8bed\u4e49\u4e0a\u5408\u9002\u7684\u65b9\u5f0f\u6dfb\u52a0\u6216\u589e\u5f3a\u529f\u80fd\u3002 \u5b83\u5e94\u8be5\u5728\u5bf9\u7528\u6237\u4e0d\u5229\u5f71\u54cd\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\uff08\u53e6\u8bf7\u53c2\u89c1\uff1a \u907f\u514d\u5728\u516c\u5171\u7ed3\u6784\u4e2d\u5d4c\u5165\u7c7b\u578b Avoid Embedding Types in Public Structs \uff09\u3002 \u5d4c\u5165 \u4e0d\u5e94\u8be5 : \u7eaf\u7cb9\u662f\u4e3a\u4e86\u7f8e\u89c2\u6216\u65b9\u4fbf\u3002 \u4f7f\u5916\u90e8\u7c7b\u578b\u66f4\u96be\u6784\u9020\u6216\u4f7f\u7528\u3002 \u5f71\u54cd\u5916\u90e8\u7c7b\u578b\u7684\u96f6\u503c\u3002\u5982\u679c\u5916\u90e8\u7c7b\u578b\u6709\u4e00\u4e2a\u6709\u7528\u7684\u96f6\u503c\uff0c\u5219\u5728\u5d4c\u5165\u5185\u90e8\u7c7b\u578b\u4e4b\u540e\u5e94\u8be5\u4ecd\u7136\u6709\u4e00\u4e2a\u6709\u7528\u7684\u96f6\u503c\u3002 \u4f5c\u4e3a\u5d4c\u5165\u5185\u90e8\u7c7b\u578b\u7684\u526f\u4f5c\u7528\uff0c\u4ece\u5916\u90e8\u7c7b\u578b\u516c\u5f00\u4e0d\u76f8\u5173\u7684\u51fd\u6570\u6216\u5b57\u6bb5\u3002 \u516c\u5f00\u672a\u5bfc\u51fa\u7684\u7c7b\u578b\u3002 \u5f71\u54cd\u5916\u90e8\u7c7b\u578b\u7684\u590d\u5236\u5f62\u5f0f\u3002 \u66f4\u6539\u5916\u90e8\u7c7b\u578b\u7684API\u6216\u7c7b\u578b\u8bed\u4e49\u3002 \u5d4c\u5165\u5185\u90e8\u7c7b\u578b\u7684\u975e\u89c4\u8303\u5f62\u5f0f\u3002 \u516c\u5f00\u5916\u90e8\u7c7b\u578b\u7684\u5b9e\u73b0\u8be6\u7ec6\u4fe1\u606f\u3002 \u5141\u8bb8\u7528\u6237\u89c2\u5bdf\u6216\u63a7\u5236\u7c7b\u578b\u5185\u90e8\u3002 \u901a\u8fc7\u5305\u88c5\u7684\u65b9\u5f0f\u6539\u53d8\u5185\u90e8\u51fd\u6570\u7684\u4e00\u822c\u884c\u4e3a\uff0c\u8fd9\u79cd\u5305\u88c5\u65b9\u5f0f\u4f1a\u7ed9\u7528\u6237\u5e26\u6765\u4e00\u4e9b\u610f\u6599\u4e4b\u5916\u60c5\u51b5\u3002 \u7b80\u5355\u5730\u8bf4\uff0c\u6709\u610f\u8bc6\u5730\u548c\u6709\u76ee\u7684\u5730\u5d4c\u5165\u3002\u4e00\u79cd\u5f88\u597d\u7684\u6d4b\u8bd5\u4f53\u9a8c\u662f\uff0c \"\u662f\u5426\u6240\u6709\u8fd9\u4e9b\u5bfc\u51fa\u7684\u5185\u90e8\u65b9\u6cd5/\u5b57\u6bb5\u90fd\u5c06\u76f4\u63a5\u6dfb\u52a0\u5230\u5916\u90e8\u7c7b\u578b\" \u5982\u679c\u7b54\u6848\u662f some \u6216 no \uff0c\u4e0d\u8981\u5d4c\u5165\u5185\u90e8\u7c7b\u578b-\u800c\u662f\u4f7f\u7528\u5b57\u6bb5\u3002 Bad Good type A struct { // Bad: A.Lock() and A.Unlock() \u73b0\u5728\u53ef\u7528 // \u4e0d\u63d0\u4f9b\u4efb\u4f55\u529f\u80fd\u6027\u597d\u5904\uff0c\u5e76\u5141\u8bb8\u7528\u6237\u63a7\u5236\u6709\u5173A\u7684\u5185\u90e8\u7ec6\u8282\u3002 sync.Mutex } type countingWriteCloser struct { // Good: Write() \u5728\u5916\u5c42\u63d0\u4f9b\u7528\u4e8e\u7279\u5b9a\u76ee\u7684\uff0c // \u5e76\u4e14\u59d4\u6258\u5de5\u4f5c\u5230\u5185\u90e8\u7c7b\u578b\u7684Write()\u4e2d\u3002 io.WriteCloser count int } func (w *countingWriteCloser) Write(bs []byte) (int, error) { w.count += len(bs) return w.WriteCloser.Write(bs) } type Book struct { // Bad: \u6307\u9488\u66f4\u6539\u96f6\u503c\u7684\u6709\u7528\u6027 io.ReadWriter // other fields } // later var b Book b.Read(...) // panic: nil pointer b.String() // panic: nil pointer b.Write(...) // panic: nil pointer type Book struct { // Good: \u6709\u7528\u7684\u96f6\u503c bytes.Buffer // other fields } // later var b Book b.Read(...) // ok b.String() // ok b.Write(...) // ok type Client struct { sync.Mutex sync.WaitGroup bytes.Buffer url.URL } type Client struct { mtx sync.Mutex wg sync.WaitGroup buf bytes.Buffer url url.URL } \u4f7f\u7528\u5b57\u6bb5\u540d\u521d\u59cb\u5316\u7ed3\u6784\u4f53 \u521d\u59cb\u5316\u7ed3\u6784\u4f53\u65f6\uff0c\u5e94\u8be5\u6307\u5b9a\u5b57\u6bb5\u540d\u79f0\u3002\u73b0\u5728\u7531 [ go vet ] \u5f3a\u5236\u6267\u884c\u3002 Bad Good k := User{\"John\", \"Doe\", true} k := User{ FirstName: \"John\", LastName: \"Doe\", Admin: true, } \u4f8b\u5916\uff1a\u5982\u679c\u6709 3 \u4e2a\u6216\u66f4\u5c11\u7684\u5b57\u6bb5\uff0c\u5219\u53ef\u4ee5\u5728\u6d4b\u8bd5\u8868\u4e2d\u7701\u7565\u5b57\u6bb5\u540d\u79f0\u3002 tests := []struct{ op Operation want string }{ {Add, \"add\"}, {Subtract, \"subtract\"}, } \u672c\u5730\u53d8\u91cf\u58f0\u660e \u5982\u679c\u5c06\u53d8\u91cf\u660e\u786e\u8bbe\u7f6e\u4e3a\u67d0\u4e2a\u503c\uff0c\u5219\u5e94\u4f7f\u7528\u77ed\u53d8\u91cf\u58f0\u660e\u5f62\u5f0f ( := )\u3002 Bad Good var s = \"foo\" s := \"foo\" \u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c var \u4f7f\u7528\u5173\u952e\u5b57\u65f6\u9ed8\u8ba4\u503c\u4f1a\u66f4\u6e05\u6670\u3002\u4f8b\u5982\uff0c\u58f0\u660e\u7a7a\u5207\u7247\u3002 Bad Good func f(list []int) { filtered := []int{} for _, v := range list { if v > 10 { filtered = append(filtered, v) } } } func f(list []int) { var filtered []int for _, v := range list { if v > 10 { filtered = append(filtered, v) } } } nil \u662f\u4e00\u4e2a\u6709\u6548\u7684 slice nil \u662f\u4e00\u4e2a\u6709\u6548\u7684\u957f\u5ea6\u4e3a 0 \u7684 slice\uff0c\u8fd9\u610f\u5473\u7740\uff0c \u60a8\u4e0d\u5e94\u660e\u786e\u8fd4\u56de\u957f\u5ea6\u4e3a\u96f6\u7684\u5207\u7247\u3002\u5e94\u8be5\u8fd4\u56de nil \u6765\u4ee3\u66ff\u3002 Bad Good ```go if x == \"\" { return []int{} } ``` ```go if x == \"\" { return nil } ``` \u8981\u68c0\u67e5\u5207\u7247\u662f\u5426\u4e3a\u7a7a\uff0c\u8bf7\u59cb\u7ec8\u4f7f\u7528 len(s) == 0 \u3002\u800c\u975e nil \u3002 Bad Good ```go func isEmpty(s []string) bool { return s == nil } ``` ```go func isEmpty(s []string) bool { return len(s) == 0 } ``` \u96f6\u503c\u5207\u7247\uff08\u7528 var \u58f0\u660e\u7684\u5207\u7247\uff09\u53ef\u7acb\u5373\u4f7f\u7528\uff0c\u65e0\u9700\u8c03\u7528 make() \u521b\u5efa\u3002 Bad Good ```go nums := []int{} // or, nums := make([]int) if add1 { nums = append(nums, 1) } if add2 { nums = append(nums, 2) } ``` ```go var nums []int if add1 { nums = append(nums, 1) } if add2 { nums = append(nums, 2) } ``` \u8bb0\u4f4f\uff0c\u867d\u7136nil\u5207\u7247\u662f\u6709\u6548\u7684\u5207\u7247\uff0c\u4f46\u5b83\u4e0d\u7b49\u4e8e\u957f\u5ea6\u4e3a0\u7684\u5207\u7247\uff08\u4e00\u4e2a\u4e3anil\uff0c\u53e6\u4e00\u4e2a\u4e0d\u662f\uff09\uff0c\u5e76\u4e14\u5728\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff08\u4f8b\u5982\u5e8f\u5217\u5316\uff09\uff0c\u8fd9\u4e24\u4e2a\u5207\u7247\u7684\u5904\u7406\u65b9\u5f0f\u53ef\u80fd\u4e0d\u540c\u3002 \u7f29\u5c0f\u53d8\u91cf\u4f5c\u7528\u57df \u5982\u679c\u6709\u53ef\u80fd\uff0c\u5c3d\u91cf\u7f29\u5c0f\u53d8\u91cf\u4f5c\u7528\u8303\u56f4\u3002\u9664\u975e\u5b83\u4e0e \u51cf\u5c11\u5d4c\u5957 \u7684\u89c4\u5219\u51b2\u7a81\u3002 Bad Good err := ioutil.WriteFile(name, data, 0644) if err != nil { return err } if err := ioutil.WriteFile(name, data, 0644); err != nil { return err } \u5982\u679c\u9700\u8981\u5728 if \u4e4b\u5916\u4f7f\u7528\u51fd\u6570\u8c03\u7528\u7684\u7ed3\u679c\uff0c\u5219\u4e0d\u5e94\u5c1d\u8bd5\u7f29\u5c0f\u8303\u56f4\u3002 Bad Good if data, err := ioutil.ReadFile(name); err == nil { err = cfg.Decode(data) if err != nil { return err } fmt.Println(cfg) return nil } else { return err } data, err := ioutil.ReadFile(name) if err != nil { return err } if err := cfg.Decode(data); err != nil { return err } fmt.Println(cfg) return nil \u907f\u514d\u53c2\u6570\u8bed\u4e49\u4e0d\u660e\u786e(Avoid Naked Parameters) \u51fd\u6570\u8c03\u7528\u4e2d\u7684 \u610f\u4e49\u4e0d\u660e\u786e\u7684\u53c2\u6570 \u53ef\u80fd\u4f1a\u635f\u5bb3\u53ef\u8bfb\u6027\u3002\u5f53\u53c2\u6570\u540d\u79f0\u7684\u542b\u4e49\u4e0d\u660e\u663e\u65f6\uff0c\u8bf7\u4e3a\u53c2\u6570\u6dfb\u52a0 C \u6837\u5f0f\u6ce8\u91ca ( /* ... */ ) Bad Good // func printInfo(name string, isLocal, done bool) printInfo(\"foo\", true, true) // func printInfo(name string, isLocal, done bool) printInfo(\"foo\", true /* isLocal */, true /* done */) \u5bf9\u4e8e\u4e0a\u9762\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u8fd8\u6709\u4e00\u79cd\u66f4\u597d\u7684\u5904\u7406\u65b9\u5f0f\u662f\u5c06\u4e0a\u9762\u7684 bool \u7c7b\u578b\u6362\u6210\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002\u5c06\u6765\uff0c\u8be5\u53c2\u6570\u53ef\u4ee5\u652f\u6301\u4e0d\u4ec5\u4ec5\u5c40\u9650\u4e8e\u4e24\u4e2a\u72b6\u6001\uff08true/false\uff09\u3002 type Region int const ( UnknownRegion Region = iota Local ) type Status int const ( StatusReady Status= iota + 1 StatusDone // Maybe we will have a StatusInProgress in the future. ) func printInfo(name string, region Region, status Status) \u4f7f\u7528\u539f\u59cb\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u907f\u514d\u8f6c\u4e49 Go \u652f\u6301\u4f7f\u7528 \u539f\u59cb\u5b57\u7b26\u4e32\u5b57\u9762\u503c \uff0c\u4e5f\u5c31\u662f \" ` \" \u6765\u8868\u793a\u539f\u751f\u5b57\u7b26\u4e32\uff0c\u5728\u9700\u8981\u8f6c\u4e49\u7684\u573a\u666f\u4e0b\uff0c\u6211\u4eec\u5e94\u8be5\u5c3d\u91cf\u4f7f\u7528\u8fd9\u79cd\u65b9\u6848\u6765\u66ff\u6362\u3002 \u53ef\u4ee5\u8de8\u8d8a\u591a\u884c\u5e76\u5305\u542b\u5f15\u53f7\u3002\u4f7f\u7528\u8fd9\u4e9b\u5b57\u7b26\u4e32\u53ef\u4ee5\u907f\u514d\u66f4\u96be\u9605\u8bfb\u7684\u624b\u5de5\u8f6c\u4e49\u7684\u5b57\u7b26\u4e32\u3002 Bad Good wantError := \"unknown name:\\\"test\\\"\" wantError := `unknown error:\"test\"` \u521d\u59cb\u5316\u7ed3\u6784\u4f53 \u4f7f\u7528\u5b57\u6bb5\u540d\u521d\u59cb\u5316\u7ed3\u6784 \u521d\u59cb\u5316\u7ed3\u6784\u65f6\uff0c\u51e0\u4e4e\u5e94\u8be5\u59cb\u7ec8\u6307\u5b9a\u5b57\u6bb5\u540d\u3002\u76ee\u524d\u7531[ go vet ]\u5f3a\u5236\u6267\u884c\u3002 Bad Good k := User{\"John\", \"Doe\", true} k := User{ FirstName: \"John\", LastName: \"Doe\", Admin: true, } \u4f8b\u5916\uff1a\u5f53\u67093\u4e2a\u6216\u66f4\u5c11\u7684\u5b57\u6bb5\u65f6\uff0c\u6d4b\u8bd5\u8868\u4e2d\u7684\u5b57\u6bb5\u540d may \u53ef\u4ee5\u7701\u7565\u3002 tests := []struct{ op Operation want string }{ {Add, \"add\"}, {Subtract, \"subtract\"}, } \u7701\u7565\u7ed3\u6784\u4e2d\u7684\u96f6\u503c\u5b57\u6bb5 \u521d\u59cb\u5316\u5177\u6709\u5b57\u6bb5\u540d\u7684\u7ed3\u6784\u65f6\uff0c\u9664\u975e\u63d0\u4f9b\u6709\u610f\u4e49\u7684\u4e0a\u4e0b\u6587\uff0c\u5426\u5219\u5ffd\u7565\u503c\u4e3a\u96f6\u7684\u5b57\u6bb5\u3002 \u4e5f\u5c31\u662f\uff0c\u8ba9\u6211\u4eec\u81ea\u52a8\u5c06\u8fd9\u4e9b\u8bbe\u7f6e\u4e3a\u96f6\u503c Bad Good user := User{ FirstName: \"John\", LastName: \"Doe\", MiddleName: \"\", Admin: false, } user := User{ FirstName: \"John\", LastName: \"Doe\", } \u8fd9\u6709\u52a9\u4e8e\u901a\u8fc7\u7701\u7565\u8be5\u4e0a\u4e0b\u6587\u4e2d\u7684\u9ed8\u8ba4\u503c\u6765\u51cf\u5c11\u9605\u8bfb\u7684\u969c\u788d\u3002\u53ea\u6307\u5b9a\u6709\u610f\u4e49\u7684\u503c\u3002 \u5728\u5b57\u6bb5\u540d\u63d0\u4f9b\u6709\u610f\u4e49\u4e0a\u4e0b\u6587\u7684\u5730\u65b9\u5305\u542b\u96f6\u503c\u3002\u4f8b\u5982\uff0c \u8868\u9a71\u52a8\u6d4b\u8bd5 \u4e2d\u7684\u6d4b\u8bd5\u7528\u4f8b\u53ef\u4ee5\u53d7\u76ca\u4e8e\u5b57\u6bb5\u7684\u540d\u79f0\uff0c\u5373\u4f7f\u5b83\u4eec\u662f\u96f6\u503c\u7684\u3002 tests := []struct{ give string want int }{ {give: \"0\", want: 0}, // ... } \u5bf9\u96f6\u503c\u7ed3\u6784\u4f7f\u7528 var \u5982\u679c\u5728\u58f0\u660e\u4e2d\u7701\u7565\u4e86\u7ed3\u6784\u7684\u6240\u6709\u5b57\u6bb5\uff0c\u8bf7\u4f7f\u7528 var \u58f0\u660e\u7ed3\u6784\u3002 Bad Good user := User{} var user User \u8fd9\u5c06\u96f6\u503c\u7ed3\u6784\u4e0e\u90a3\u4e9b\u5177\u6709\u7c7b\u4f3c\u4e8e\u4e3a[\u521d\u59cb\u5316 Maps]\u521b\u5efa\u7684,\u533a\u522b\u4e8e\u975e\u96f6\u503c\u5b57\u6bb5\u7684\u7ed3\u6784\u533a\u5206\u5f00\u6765\uff0c \u5e76\u4e0e\u6211\u4eec\u66f4\u559c\u6b22\u7684 declare empty slices \u65b9\u5f0f\u76f8\u5339\u914d\u3002 \u521d\u59cb\u5316 Struct \u5f15\u7528 \u5728\u521d\u59cb\u5316\u7ed3\u6784\u5f15\u7528\u65f6\uff0c\u8bf7\u4f7f\u7528 &T{} \u4ee3\u66ff new(T) \uff0c\u4ee5\u4f7f\u5176\u4e0e\u7ed3\u6784\u4f53\u521d\u59cb\u5316\u4e00\u81f4\u3002 Bad Good sval := T{Name: \"foo\"} // inconsistent sptr := new(T) sptr.Name = \"bar\" sval := T{Name: \"foo\"} sptr := &T{Name: \"bar\"} \u521d\u59cb\u5316 Maps \u5bf9\u4e8e\u7a7a map \u8bf7\u4f7f\u7528 make(..) \u521d\u59cb\u5316\uff0c \u5e76\u4e14 map \u662f\u901a\u8fc7\u7f16\u7a0b\u65b9\u5f0f\u586b\u5145\u7684\u3002 \u8fd9\u4f7f\u5f97 map \u521d\u59cb\u5316\u5728\u8868\u73b0\u4e0a\u4e0d\u540c\u4e8e\u58f0\u660e\uff0c\u5e76\u4e14\u5b83\u8fd8\u53ef\u4ee5\u65b9\u4fbf\u5730\u5728 make \u540e\u6dfb\u52a0\u5927\u5c0f\u63d0\u793a\u3002 Bad Good var ( // m1 \u8bfb\u5199\u5b89\u5168; // m2 \u5728\u5199\u5165\u65f6\u4f1a panic m1 = map[T1]T2{} m2 map[T1]T2 ) var ( // m1 \u8bfb\u5199\u5b89\u5168; // m2 \u5728\u5199\u5165\u65f6\u4f1a panic m1 = make(map[T1]T2) m2 map[T1]T2 ) \u58f0\u660e\u548c\u521d\u59cb\u5316\u770b\u8d77\u6765\u975e\u5e38\u76f8\u4f3c\u7684\u3002 \u58f0\u660e\u548c\u521d\u59cb\u5316\u770b\u8d77\u6765\u5dee\u522b\u975e\u5e38\u5927\u3002 \u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u8bf7\u5728\u521d\u59cb\u5316\u65f6\u63d0\u4f9b map \u5bb9\u91cf\u5927\u5c0f\uff0c\u8be6\u7ec6\u8bf7\u770b \u6307\u5b9aMap\u5bb9\u91cf\u63d0\u793a \u3002 \u53e6\u5916\uff0c\u5982\u679c map \u5305\u542b\u56fa\u5b9a\u7684\u5143\u7d20\u5217\u8868\uff0c\u5219\u4f7f\u7528 map literals(map \u521d\u59cb\u5316\u5217\u8868) \u521d\u59cb\u5316\u6620\u5c04\u3002 Bad Good m := make(map[T1]T2, 3) m[k1] = v1 m[k2] = v2 m[k3] = v3 m := map[T1]T2{ k1: v1, k2: v2, k3: v3, } \u57fa\u672c\u51c6\u5219\u662f\uff1a\u5728\u521d\u59cb\u5316\u65f6\u4f7f\u7528 map \u521d\u59cb\u5316\u5217\u8868 \u6765\u6dfb\u52a0\u4e00\u7ec4\u56fa\u5b9a\u7684\u5143\u7d20\u3002\u5426\u5219\u4f7f\u7528 make (\u5982\u679c\u53ef\u4ee5\uff0c\u8bf7\u5c3d\u91cf\u6307\u5b9a map \u5bb9\u91cf)\u3002 \u5b57\u7b26\u4e32 string format \u5982\u679c\u4f60\u5728\u51fd\u6570\u5916\u58f0\u660e Printf -style \u51fd\u6570\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u8bf7\u5c06\u5176\u8bbe\u7f6e\u4e3a const \u5e38\u91cf\u3002 \u8fd9\u6709\u52a9\u4e8e go vet \u5bf9\u683c\u5f0f\u5b57\u7b26\u4e32\u6267\u884c\u9759\u6001\u5206\u6790\u3002 Bad Good msg := \"unexpected values %v, %v\\n\" fmt.Printf(msg, 1, 2) const msg = \"unexpected values %v, %v\\n\" fmt.Printf(msg, 1, 2) \u547d\u540d Printf \u6837\u5f0f\u7684\u51fd\u6570 \u58f0\u660e Printf -style \u51fd\u6570\u65f6\uff0c\u8bf7\u786e\u4fdd go vet \u53ef\u4ee5\u68c0\u6d4b\u5230\u5b83\u5e76\u68c0\u67e5\u683c\u5f0f\u5b57\u7b26\u4e32\u3002 \u8fd9\u610f\u5473\u7740\u60a8\u5e94\u5c3d\u53ef\u80fd\u4f7f\u7528\u9884\u5b9a\u4e49\u7684 Printf -style \u51fd\u6570\u540d\u79f0\u3002 go vet \u5c06\u9ed8\u8ba4\u68c0\u67e5\u8fd9\u4e9b\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Printf \u7cfb\u5217 \u3002 \u5982\u679c\u4e0d\u80fd\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u8bf7\u4ee5 f \u7ed3\u675f\u9009\u62e9\u7684\u540d\u79f0\uff1a Wrapf \uff0c\u800c\u4e0d\u662f Wrap \u3002 go vet \u53ef\u4ee5\u8981\u6c42\u68c0\u67e5\u7279\u5b9a\u7684 Printf \u6837\u5f0f\u540d\u79f0\uff0c\u4f46\u540d\u79f0\u5fc5\u987b\u4ee5 f \u7ed3\u5c3e\u3002 $ go vet -printfuncs=wrapf,statusf \u53e6\u8bf7\u53c2\u9605 go vet: Printf family check . \u7f16\u7a0b\u6a21\u5f0f \u8868\u9a71\u52a8\u6d4b\u8bd5 \u5f53\u6d4b\u8bd5\u903b\u8f91\u662f\u91cd\u590d\u7684\u65f6\u5019\uff0c\u901a\u8fc7 subtests \u4f7f\u7528 table \u9a71\u52a8\u7684\u65b9\u5f0f\u7f16\u5199 case \u4ee3\u7801\u770b\u4e0a\u53bb\u4f1a\u66f4\u7b80\u6d01\u3002 Bad Good // func TestSplitHostPort(t *testing.T) host, port, err := net.SplitHostPort(\"192.0.2.0:8000\") require.NoError(t, err) assert.Equal(t, \"192.0.2.0\", host) assert.Equal(t, \"8000\", port) host, port, err = net.SplitHostPort(\"192.0.2.0:http\") require.NoError(t, err) assert.Equal(t, \"192.0.2.0\", host) assert.Equal(t, \"http\", port) host, port, err = net.SplitHostPort(\":8000\") require.NoError(t, err) assert.Equal(t, \"\", host) assert.Equal(t, \"8000\", port) host, port, err = net.SplitHostPort(\"1:8\") require.NoError(t, err) assert.Equal(t, \"1\", host) assert.Equal(t, \"8\", port) // func TestSplitHostPort(t *testing.T) tests := []struct{ give string wantHost string wantPort string }{ { give: \"192.0.2.0:8000\", wantHost: \"192.0.2.0\", wantPort: \"8000\", }, { give: \"192.0.2.0:http\", wantHost: \"192.0.2.0\", wantPort: \"http\", }, { give: \":8000\", wantHost: \"\", wantPort: \"8000\", }, { give: \"1:8\", wantHost: \"1\", wantPort: \"8\", }, } for _, tt := range tests { t.Run(tt.give, func(t *testing.T) { host, port, err := net.SplitHostPort(tt.give) require.NoError(t, err) assert.Equal(t, tt.wantHost, host) assert.Equal(t, tt.wantPort, port) }) } \u5f88\u660e\u663e\uff0c\u4f7f\u7528 test table \u7684\u65b9\u5f0f\u5728\u4ee3\u7801\u903b\u8f91\u6269\u5c55\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u65b0\u589e test case\uff0c\u90fd\u4f1a\u663e\u5f97\u66f4\u52a0\u7684\u6e05\u6670\u3002 \u6211\u4eec\u9075\u5faa\u8fd9\u6837\u7684\u7ea6\u5b9a\uff1a\u5c06\u7ed3\u6784\u4f53\u5207\u7247\u79f0\u4e3a tests \u3002 \u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u79f0\u4e3a tt \u3002\u6b64\u5916\uff0c\u6211\u4eec\u9f13\u52b1\u4f7f\u7528 give \u548c want \u524d\u7f00\u8bf4\u660e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7684\u8f93\u5165\u548c\u8f93\u51fa\u503c\u3002 tests := []struct{ give string wantHost string wantPort string }{ // ... } for _, tt := range tests { // ... } \u529f\u80fd\u9009\u9879 \u529f\u80fd\u9009\u9879\u662f\u4e00\u79cd\u6a21\u5f0f\uff0c\u60a8\u53ef\u4ee5\u5728\u5176\u4e2d\u58f0\u660e\u4e00\u4e2a\u4e0d\u900f\u660e Option \u7c7b\u578b\uff0c\u8be5\u7c7b\u578b\u5728\u67d0\u4e9b\u5185\u90e8\u7ed3\u6784\u4e2d\u8bb0\u5f55\u4fe1\u606f\u3002\u60a8\u63a5\u53d7\u8fd9\u4e9b\u9009\u9879\u7684\u53ef\u53d8\u7f16\u53f7\uff0c\u5e76\u6839\u636e\u5185\u90e8\u7ed3\u6784\u4e0a\u7684\u9009\u9879\u8bb0\u5f55\u7684\u5168\u90e8\u4fe1\u606f\u91c7\u53d6\u884c\u52a8\u3002 \u5c06\u6b64\u6a21\u5f0f\u7528\u4e8e\u60a8\u9700\u8981\u6269\u5c55\u7684\u6784\u9020\u51fd\u6570\u548c\u5176\u4ed6\u516c\u5171 API \u4e2d\u7684\u53ef\u9009\u53c2\u6570\uff0c\u5c24\u5176\u662f\u5728\u8fd9\u4e9b\u529f\u80fd\u4e0a\u5df2\u7ecf\u5177\u6709\u4e09\u4e2a\u6216\u66f4\u591a\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u3002 Bad Good // package db func Open( addr string, cache bool, logger *zap.Logger ) (*Connection, error) { // ... } // package db type Option interface { // ... } func WithCache(c bool) Option { // ... } func WithLogger(log *zap.Logger) Option { // ... } // Open creates a connection. func Open( addr string, opts ...Option, ) (*Connection, error) { // ... } \u5fc5\u987b\u59cb\u7ec8\u63d0\u4f9b\u7f13\u5b58\u548c\u8bb0\u5f55\u5668\u53c2\u6570\uff0c\u5373\u4f7f\u7528\u6237\u5e0c\u671b\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002 db.Open(addr, db.DefaultCache, zap.NewNop()) db.Open(addr, db.DefaultCache, log) db.Open(addr, false /* cache */, zap.NewNop()) db.Open(addr, false /* cache */, log) \u53ea\u6709\u5728\u9700\u8981\u65f6\u624d\u63d0\u4f9b\u9009\u9879\u3002 db.Open(addr) db.Open(addr, db.WithLogger(log)) db.Open(addr, db.WithCache(false)) db.Open( addr, db.WithCache(false), db.WithLogger(log), ) Our suggested way of implementing this pattern is with an Option interface that holds an unexported method, recording options on an unexported options struct. \u6211\u4eec\u5efa\u8bae\u5b9e\u73b0\u6b64\u6a21\u5f0f\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u4e00\u4e2a Option \u63a5\u53e3\uff0c\u8be5\u63a5\u53e3\u4fdd\u5b58\u4e00\u4e2a\u672a\u5bfc\u51fa\u7684\u65b9\u6cd5\uff0c\u5728\u4e00\u4e2a\u672a\u5bfc\u51fa\u7684 options \u7ed3\u6784\u4e0a\u8bb0\u5f55\u9009\u9879\u3002 type options struct { cache bool logger *zap.Logger } type Option interface { apply(*options) } type cacheOption bool func (c cacheOption) apply(opts *options) { opts.cache = bool(c) } func WithCache(c bool) Option { return cacheOption(c) } type loggerOption struct { Log *zap.Logger } func (l loggerOption) apply(opts *options) { opts.logger = l.Log } func WithLogger(log *zap.Logger) Option { return loggerOption{Log: log} } // Open creates a connection. func Open( addr string, opts ...Option, ) (*Connection, error) { options := options{ cache: defaultCache, logger: zap.NewNop(), } for _, o := range opts { o.apply(&options) } // ... } \u6ce8\u610f: \u8fd8\u6709\u4e00\u79cd\u4f7f\u7528\u95ed\u5305\u5b9e\u73b0\u8fd9\u4e2a\u6a21\u5f0f\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u6211\u4eec\u76f8\u4fe1\u4e0a\u9762\u7684\u6a21\u5f0f\u4e3a\u4f5c\u8005\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u7075\u6d3b\u6027\uff0c\u5e76\u4e14\u66f4\u5bb9\u6613\u5bf9\u7528\u6237\u8fdb\u884c\u8c03\u8bd5\u548c\u6d4b\u8bd5\u3002\u7279\u522b\u662f\uff0c\u5728\u4e0d\u53ef\u80fd\u8fdb\u884c\u6bd4\u8f83\u7684\u60c5\u51b5\u4e0b\u5b83\u5141\u8bb8\u5728\u6d4b\u8bd5\u548c\u6a21\u62df\u4e2d\u5bf9\u9009\u9879\u8fdb\u884c\u6bd4\u8f83\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u5141\u8bb8\u9009\u9879\u5b9e\u73b0\u5176\u4ed6\u63a5\u53e3\uff0c\u5305\u62ec fmt.Stringer \uff0c\u5141\u8bb8\u7528\u6237\u8bfb\u53d6\u9009\u9879\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002 \u8fd8\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u8d44\u6599\uff1a Self-referential functions and the design of options Functional options for friendly APIs Linting \u6bd4\u4efb\u4f55 \"blessed\" linter \u96c6\u66f4\u91cd\u8981\u7684\u662f\uff0clint\u5728\u4e00\u4e2a\u4ee3\u7801\u5e93\u4e2d\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\u3002 \u6211\u4eec\u5efa\u8bae\u81f3\u5c11\u4f7f\u7528\u4ee5\u4e0blinters\uff0c\u56e0\u4e3a\u6211\u8ba4\u4e3a\u5b83\u4eec\u6709\u52a9\u4e8e\u53d1\u73b0\u6700\u5e38\u89c1\u7684\u95ee\u9898\uff0c\u5e76\u5728\u4e0d\u9700\u8981\u89c4\u5b9a\u7684\u60c5\u51b5\u4e0b\u4e3a\u4ee3\u7801\u8d28\u91cf\u5efa\u7acb\u4e00\u4e2a\u9ad8\u6807\u51c6\uff1a errcheck \u4ee5\u786e\u4fdd\u9519\u8bef\u5f97\u5230\u5904\u7406 goimports \u683c\u5f0f\u5316\u4ee3\u7801\u548c\u7ba1\u7406 imports golint \u6307\u51fa\u5e38\u89c1\u7684\u6587\u4f53\u9519\u8bef govet \u5206\u6790\u4ee3\u7801\u4e2d\u7684\u5e38\u89c1\u9519\u8bef staticcheck \u5404\u79cd\u9759\u6001\u5206\u6790\u68c0\u67e5 Lint Runners \u6211\u4eec\u63a8\u8350 golangci-lint \u4f5c\u4e3ago-to lint\u7684\u8fd0\u884c\u7a0b\u5e8f\uff0c\u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u5b83\u5728\u8f83\u5927\u7684\u4ee3\u7801\u5e93\u4e2d\u7684\u6027\u80fd\u4ee5\u53ca\u80fd\u591f\u540c\u65f6\u914d\u7f6e\u548c\u4f7f\u7528\u8bb8\u591a\u89c4\u8303\u3002\u8fd9\u4e2arepo\u6709\u4e00\u4e2a\u793a\u4f8b\u914d\u7f6e\u6587\u4ef6 .golangci.yml \u548c\u63a8\u8350\u7684linter\u8bbe\u7f6e\u3002 golangci-lint \u6709 various-linters \u53ef\u4f9b\u4f7f\u7528\u3002\u5efa\u8bae\u5c06\u4e0a\u8ff0linters\u4f5c\u4e3a\u57fa\u672cset\uff0c\u6211\u4eec\u9f13\u52b1\u56e2\u961f\u6dfb\u52a0\u5bf9\u4ed6\u4eec\u7684\u9879\u76ee\u6709\u610f\u4e49\u7684\u4efb\u4f55\u9644\u52a0linters\u3002 Stargazers over time","title":"Uber Go \u8bed\u8a00\u7f16\u7801\u89c4\u8303\u4e2d\u6587\u7248"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#forked-from-uber_go_guide_cn","text":"","title":"forked from uber_go_guide_cn"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#uber-goguide","text":"","title":"uber-go/guide \u7684\u4e2d\u6587\u7ffb\u8bd1"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#english","text":"","title":"English"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#uber-go","text":"Uber \u662f\u4e00\u5bb6\u7f8e\u56fd\u7845\u8c37\u7684\u79d1\u6280\u516c\u53f8\uff0c\u4e5f\u662f Go \u8bed\u8a00\u7684\u65e9\u671f adopter\u3002\u5176\u5f00\u6e90\u4e86\u5f88\u591a golang \u9879\u76ee\uff0c\u8bf8\u5982\u88ab Gopher \u5708\u719f\u77e5\u7684 zap \u3001 jaeger \u7b49\u30022018 \u5e74\u5e74\u672b Uber \u5c06\u5185\u90e8\u7684 Go \u98ce\u683c\u89c4\u8303 \u5f00\u6e90\u5230 GitHub\uff0c\u7ecf\u8fc7\u4e00\u5e74\u7684\u79ef\u7d2f\u548c\u66f4\u65b0\uff0c\u8be5\u89c4\u8303\u5df2\u7ecf\u521d\u5177\u89c4\u6a21\uff0c\u5e76\u53d7\u5230\u5e7f\u5927 Gopher \u7684\u5173\u6ce8\u3002\u672c\u6587\u662f\u8be5\u89c4\u8303\u7684\u4e2d\u6587\u7248\u672c\u3002\u672c\u7248\u672c\u4f1a\u6839\u636e\u539f\u7248\u5b9e\u65f6\u66f4\u65b0\u3002 ## \u7248\u672c \u5f53\u524d\u66f4\u65b0\u7248\u672c\uff1a2021-07-09 \u7248\u672c\u5730\u5740\uff1a commit:#130","title":"Uber Go \u8bed\u8a00\u7f16\u7801\u89c4\u8303"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_1","text":"uber-go/guide \u7684\u4e2d\u6587\u7ffb\u8bd1 English Uber Go \u8bed\u8a00\u7f16\u7801\u89c4\u8303 \u7248\u672c \u76ee\u5f55 \u4ecb\u7ecd \u6307\u5bfc\u539f\u5219 \u6307\u5411 interface \u7684\u6307\u9488 Interface \u5408\u7406\u6027\u9a8c\u8bc1 \u63a5\u6536\u5668 (receiver) \u4e0e\u63a5\u53e3 \u96f6\u503c Mutex \u662f\u6709\u6548\u7684 \u5728\u8fb9\u754c\u5904\u62f7\u8d1d Slices \u548c Maps \u63a5\u6536 Slices \u548c Maps \u8fd4\u56de slices \u6216 maps \u4f7f\u7528 defer \u91ca\u653e\u8d44\u6e90 Channel \u7684 size \u8981\u4e48\u662f 1\uff0c\u8981\u4e48\u662f\u65e0\u7f13\u51b2\u7684 \u679a\u4e3e\u4ece 1 \u5f00\u59cb \u4f7f\u7528 time \u5904\u7406\u65f6\u95f4 \u4f7f\u7528 time.Time \u8868\u8fbe\u77ac\u65f6\u65f6\u95f4 \u4f7f\u7528 time.Duration \u8868\u8fbe\u65f6\u95f4\u6bb5 \u5bf9\u5916\u90e8\u7cfb\u7edf\u4f7f\u7528 time.Time \u548c time.Duration \u9519\u8bef\u7c7b\u578b \u9519\u8bef\u5305\u88c5 (Error Wrapping) \u5904\u7406\u7c7b\u578b\u65ad\u8a00\u5931\u8d25 \u4e0d\u8981 panic \u4f7f\u7528 go.uber.org/atomic \u907f\u514d\u53ef\u53d8\u5168\u5c40\u53d8\u91cf \u907f\u514d\u5728\u516c\u5171\u7ed3\u6784\u4e2d\u5d4c\u5165\u7c7b\u578b \u907f\u514d\u4f7f\u7528\u5185\u7f6e\u540d\u79f0 \u907f\u514d\u4f7f\u7528 init() \u8ffd\u52a0\u65f6\u4f18\u5148\u6307\u5b9a\u5207\u7247\u5bb9\u91cf \u4e3b\u51fd\u6570\u9000\u51fa\u65b9\u5f0f(Exit) \u4e00\u6b21\u6027\u9000\u51fa \u6027\u80fd \u4f18\u5148\u4f7f\u7528 strconv \u800c\u4e0d\u662f fmt \u907f\u514d\u5b57\u7b26\u4e32\u5230\u5b57\u8282\u7684\u8f6c\u6362 \u6307\u5b9a\u5bb9\u5668\u5bb9\u91cf \u6307\u5b9aMap\u5bb9\u91cf\u63d0\u793a \u6307\u5b9a\u5207\u7247\u5bb9\u91cf \u89c4\u8303 \u4e00\u81f4\u6027 \u76f8\u4f3c\u7684\u58f0\u660e\u653e\u5728\u4e00\u7ec4 import \u5206\u7ec4 \u5305\u540d \u51fd\u6570\u540d \u5bfc\u5165\u522b\u540d \u51fd\u6570\u5206\u7ec4\u4e0e\u987a\u5e8f \u51cf\u5c11\u5d4c\u5957 \u4e0d\u5fc5\u8981\u7684 else \u9876\u5c42\u53d8\u91cf\u58f0\u660e \u5bf9\u4e8e\u672a\u5bfc\u51fa\u7684\u9876\u5c42\u5e38\u91cf\u548c\u53d8\u91cf\uff0c\u4f7f\u7528_\u4f5c\u4e3a\u524d\u7f00 \u7ed3\u6784\u4f53\u4e2d\u7684\u5d4c\u5165 \u4f7f\u7528\u5b57\u6bb5\u540d\u521d\u59cb\u5316\u7ed3\u6784\u4f53 \u672c\u5730\u53d8\u91cf\u58f0\u660e nil \u662f\u4e00\u4e2a\u6709\u6548\u7684 slice \u7f29\u5c0f\u53d8\u91cf\u4f5c\u7528\u57df \u907f\u514d\u53c2\u6570\u8bed\u4e49\u4e0d\u660e\u786e(Avoid Naked Parameters) \u4f7f\u7528\u539f\u59cb\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u907f\u514d\u8f6c\u4e49 \u521d\u59cb\u5316\u7ed3\u6784\u4f53 \u4f7f\u7528\u5b57\u6bb5\u540d\u521d\u59cb\u5316\u7ed3\u6784 \u7701\u7565\u7ed3\u6784\u4e2d\u7684\u96f6\u503c\u5b57\u6bb5 \u5bf9\u96f6\u503c\u7ed3\u6784\u4f7f\u7528 var \u521d\u59cb\u5316 Struct \u5f15\u7528 \u521d\u59cb\u5316 Maps \u5b57\u7b26\u4e32 string format \u547d\u540d Printf \u6837\u5f0f\u7684\u51fd\u6570 \u7f16\u7a0b\u6a21\u5f0f \u8868\u9a71\u52a8\u6d4b\u8bd5 \u529f\u80fd\u9009\u9879 Linting Lint Runners Stargazers over time","title":"\u76ee\u5f55"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_2","text":"\u6837\u5f0f (style) \u662f\u652f\u914d\u6211\u4eec\u4ee3\u7801\u7684\u60ef\u4f8b\u3002\u672f\u8bed \u6837\u5f0f \u6709\u70b9\u7528\u8bcd\u4e0d\u5f53\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u7ea6\u5b9a\u6db5\u76d6\u7684\u8303\u56f4\u4e0d\u9650\u4e8e\u7531 gofmt \u66ff\u6211\u4eec\u5904\u7406\u7684\u6e90\u6587\u4ef6\u683c\u5f0f\u3002 \u672c\u6307\u5357\u7684\u76ee\u7684\u662f\u901a\u8fc7\u8be6\u7ec6\u63cf\u8ff0\u5728 Uber \u7f16\u5199 Go \u4ee3\u7801\u7684\u6ce8\u610f\u4e8b\u9879\u6765\u7ba1\u7406\u8fd9\u79cd\u590d\u6742\u6027\u3002\u8fd9\u4e9b\u89c4\u5219\u7684\u5b58\u5728\u662f\u4e3a\u4e86\u4f7f\u4ee3\u7801\u5e93\u6613\u4e8e\u7ba1\u7406\uff0c\u540c\u65f6\u4ecd\u7136\u5141\u8bb8\u5de5\u7a0b\u5e08\u66f4\u6709\u6548\u5730\u4f7f\u7528 Go \u8bed\u8a00\u529f\u80fd\u3002 \u8be5\u6307\u5357\u6700\u521d\u7531 Prashant Varanasi \u548c Simon Newton \u7f16\u5199\uff0c\u76ee\u7684\u662f\u4f7f\u4e00\u4e9b\u540c\u4e8b\u80fd\u5feb\u901f\u4f7f\u7528 Go\u3002\u591a\u5e74\u6765\uff0c\u8be5\u6307\u5357\u5df2\u6839\u636e\u5176\u4ed6\u4eba\u7684\u53cd\u9988\u8fdb\u884c\u4e86\u4fee\u6539\u3002 \u672c\u6587\u6863\u8bb0\u5f55\u4e86\u6211\u4eec\u5728 Uber \u9075\u5faa\u7684 Go \u4ee3\u7801\u4e2d\u7684\u60ef\u7528\u7ea6\u5b9a\u3002\u5176\u4e2d\u8bb8\u591a\u662f Go \u7684\u901a\u7528\u51c6\u5219\uff0c\u800c\u5176\u4ed6\u6269\u5c55\u51c6\u5219\u4f9d\u8d56\u4e8e\u4e0b\u9762\u5916\u90e8\u7684\u6307\u5357\uff1a Effective Go Go Common Mistakes Go Code Review Comments \u6240\u6709\u4ee3\u7801\u90fd\u5e94\u8be5\u901a\u8fc7 golint \u548c go vet \u7684\u68c0\u67e5\u5e76\u65e0\u9519\u8bef\u3002\u6211\u4eec\u5efa\u8bae\u60a8\u5c06\u7f16\u8f91\u5668\u8bbe\u7f6e\u4e3a\uff1a \u4fdd\u5b58\u65f6\u8fd0\u884c goimports \u8fd0\u884c golint \u548c go vet \u68c0\u67e5\u9519\u8bef \u60a8\u53ef\u4ee5\u5728\u4ee5\u4e0b Go \u7f16\u8f91\u5668\u5de5\u5177\u652f\u6301\u9875\u9762\u4e2d\u627e\u5230\u66f4\u4e3a\u8be6\u7ec6\u7684\u4fe1\u606f\uff1a https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins","title":"\u4ecb\u7ecd"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_3","text":"","title":"\u6307\u5bfc\u539f\u5219"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#interface","text":"\u60a8\u51e0\u4e4e\u4e0d\u9700\u8981\u6307\u5411\u63a5\u53e3\u7c7b\u578b\u7684\u6307\u9488\u3002\u60a8\u5e94\u8be5\u5c06\u63a5\u53e3\u4f5c\u4e3a\u503c\u8fdb\u884c\u4f20\u9012\uff0c\u5728\u8fd9\u6837\u7684\u4f20\u9012\u8fc7\u7a0b\u4e2d\uff0c\u5b9e\u8d28\u4e0a\u4f20\u9012\u7684\u5e95\u5c42\u6570\u636e\u4ecd\u7136\u53ef\u4ee5\u662f\u6307\u9488\u3002 \u63a5\u53e3\u5b9e\u8d28\u4e0a\u5728\u5e95\u5c42\u7528\u4e24\u4e2a\u5b57\u6bb5\u8868\u793a\uff1a \u4e00\u4e2a\u6307\u5411\u67d0\u4e9b\u7279\u5b9a\u7c7b\u578b\u4fe1\u606f\u7684\u6307\u9488\u3002\u60a8\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\"type\"\u3002 \u6570\u636e\u6307\u9488\u3002\u5982\u679c\u5b58\u50a8\u7684\u6570\u636e\u662f\u6307\u9488\uff0c\u5219\u76f4\u63a5\u5b58\u50a8\u3002\u5982\u679c\u5b58\u50a8\u7684\u6570\u636e\u662f\u4e00\u4e2a\u503c\uff0c\u5219\u5b58\u50a8\u6307\u5411\u8be5\u503c\u7684\u6307\u9488\u3002 \u5982\u679c\u5e0c\u671b\u63a5\u53e3\u65b9\u6cd5\u4fee\u6539\u57fa\u7840\u6570\u636e\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u6307\u9488\u4f20\u9012(\u5c06\u5bf9\u8c61\u6307\u9488\u8d4b\u503c\u7ed9\u63a5\u53e3\u53d8\u91cf)\u3002 type F interface { f() } type S1 struct{} func (s S1) f() {} type S2 struct{} func (s *S2) f() {} // f1.f()\u65e0\u6cd5\u4fee\u6539\u5e95\u5c42\u6570\u636e // f2.f() \u53ef\u4ee5\u4fee\u6539\u5e95\u5c42\u6570\u636e,\u7ed9\u63a5\u53e3\u53d8\u91cff2\u8d4b\u503c\u65f6\u4f7f\u7528\u7684\u662f\u5bf9\u8c61\u6307\u9488 var f1 F = S1{} var f2 F = &S2{}","title":"\u6307\u5411 interface \u7684\u6307\u9488"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#interface_1","text":"\u5728\u7f16\u8bd1\u65f6\u9a8c\u8bc1\u63a5\u53e3\u7684\u7b26\u5408\u6027\u3002\u8fd9\u5305\u62ec\uff1a \u5c06\u5b9e\u73b0\u7279\u5b9a\u63a5\u53e3\u7684\u5bfc\u51fa\u7c7b\u578b\u4f5c\u4e3a\u63a5\u53e3API \u7684\u4e00\u90e8\u5206\u8fdb\u884c\u68c0\u67e5 \u5b9e\u73b0\u540c\u4e00\u63a5\u53e3\u7684(\u5bfc\u51fa\u548c\u975e\u5bfc\u51fa)\u7c7b\u578b\u5c5e\u4e8e\u5b9e\u73b0\u7c7b\u578b\u7684\u96c6\u5408 \u4efb\u4f55\u8fdd\u53cd\u63a5\u53e3\u5408\u7406\u6027\u68c0\u67e5\u7684\u573a\u666f,\u90fd\u4f1a\u7ec8\u6b62\u7f16\u8bd1,\u5e76\u901a\u77e5\u7ed9\u7528\u6237 \u8865\u5145:\u4e0a\u97623\u6761\u662f\u7f16\u8bd1\u5668\u5bf9\u63a5\u53e3\u7684\u68c0\u67e5\u673a\u5236, \u5927\u4f53\u610f\u601d\u662f\u9519\u8bef\u4f7f\u7528\u63a5\u53e3\u4f1a\u5728\u7f16\u8bd1\u671f\u62a5\u9519. \u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u673a\u5236\u8ba9\u90e8\u5206\u95ee\u9898\u5728\u7f16\u8bd1\u671f\u66b4\u9732. Bad Good // \u5982\u679cHandler\u6ca1\u6709\u5b9e\u73b0http.Handler,\u4f1a\u5728\u8fd0\u884c\u65f6\u62a5\u9519 type Handler struct { // ... } func (h *Handler) ServeHTTP( w http.ResponseWriter, r *http.Request, ) { ... } type Handler struct { // ... } // \u7528\u4e8e\u89e6\u53d1\u7f16\u8bd1\u671f\u7684\u63a5\u53e3\u7684\u5408\u7406\u6027\u68c0\u67e5\u673a\u5236 // \u5982\u679cHandler\u6ca1\u6709\u5b9e\u73b0http.Handler,\u4f1a\u5728\u7f16\u8bd1\u671f\u62a5\u9519 var _ http.Handler = (*Handler)(nil) func (h *Handler) ServeHTTP( w http.ResponseWriter, r *http.Request, ) { // ... } \u5982\u679c *Handler \u4e0e http.Handler \u7684\u63a5\u53e3\u4e0d\u5339\u914d, \u90a3\u4e48\u8bed\u53e5 var _ http.Handler = (*Handler)(nil) \u5c06\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7. \u8d4b\u503c\u7684\u53f3\u8fb9\u5e94\u8be5\u662f\u65ad\u8a00\u7c7b\u578b\u7684\u96f6\u503c\u3002 \u5bf9\u4e8e\u6307\u9488\u7c7b\u578b\uff08\u5982 *Handler \uff09\u3001\u5207\u7247\u548c\u6620\u5c04\uff0c\u8fd9\u662f nil \uff1b \u5bf9\u4e8e\u7ed3\u6784\u7c7b\u578b\uff0c\u8fd9\u662f\u7a7a\u7ed3\u6784\u3002 type LogHandler struct { h http.Handler log *zap.Logger } var _ http.Handler = LogHandler{} func (h LogHandler) ServeHTTP( w http.ResponseWriter, r *http.Request, ) { // ... }","title":"Interface \u5408\u7406\u6027\u9a8c\u8bc1"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#receiver","text":"\u4f7f\u7528\u503c\u63a5\u6536\u5668\u7684\u65b9\u6cd5\u65e2\u53ef\u4ee5\u901a\u8fc7\u503c\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u8c03\u7528\u3002 \u5e26\u6307\u9488\u63a5\u6536\u5668\u7684\u65b9\u6cd5\u53ea\u80fd\u901a\u8fc7\u6307\u9488\u6216 addressable values \u8c03\u7528. \u4f8b\u5982\uff0c type S struct { data string } func (s S) Read() string { return s.data } func (s *S) Write(str string) { s.data = str } sVals := map[int]S{1: {\"A\"}} // \u4f60\u53ea\u80fd\u901a\u8fc7\u503c\u8c03\u7528 Read sVals[1].Read() // \u8fd9\u4e0d\u80fd\u7f16\u8bd1\u901a\u8fc7\uff1a // sVals[1].Write(\"test\") sPtrs := map[int]*S{1: {\"A\"}} // \u901a\u8fc7\u6307\u9488\u65e2\u53ef\u4ee5\u8c03\u7528 Read\uff0c\u4e5f\u53ef\u4ee5\u8c03\u7528 Write \u65b9\u6cd5 sPtrs[1].Read() sPtrs[1].Write(\"test\") \u7c7b\u4f3c\u7684,\u5373\u4f7f\u65b9\u6cd5\u6709\u4e86\u503c\u63a5\u6536\u5668,\u4e5f\u540c\u6837\u53ef\u4ee5\u7528\u6307\u9488\u63a5\u6536\u5668\u6765\u6ee1\u8db3\u63a5\u53e3. type F interface { f() } type S1 struct{} func (s S1) f() {} type S2 struct{} func (s *S2) f() {} s1Val := S1{} s1Ptr := &S1{} s2Val := S2{} s2Ptr := &S2{} var i F i = s1Val i = s1Ptr i = s2Ptr // \u4e0b\u9762\u4ee3\u7801\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\u3002\u56e0\u4e3a s2Val \u662f\u4e00\u4e2a\u503c\uff0c\u800c S2 \u7684 f \u65b9\u6cd5\u4e2d\u6ca1\u6709\u4f7f\u7528\u503c\u63a5\u6536\u5668 // i = s2Val Effective Go \u4e2d\u6709\u4e00\u6bb5\u5173\u4e8e pointers vs. values \u7684\u7cbe\u5f69\u8bb2\u89e3\u3002 \u8865\u5145: \u4e00\u4e2a\u7c7b\u578b\u53ef\u4ee5\u6709\u503c\u63a5\u6536\u5668\u65b9\u6cd5\u96c6\u548c\u6307\u9488\u63a5\u6536\u5668\u65b9\u6cd5\u96c6 \u503c\u63a5\u6536\u5668\u65b9\u6cd5\u96c6\u662f\u6307\u9488\u63a5\u6536\u5668\u65b9\u6cd5\u96c6\u7684\u5b50\u96c6,\u53cd\u4e4b\u4e0d\u662f \u89c4\u5219 \u503c\u5bf9\u8c61\u53ea\u53ef\u4ee5\u4f7f\u7528\u503c\u63a5\u6536\u5668\u65b9\u6cd5\u96c6 \u6307\u9488\u5bf9\u8c61\u53ef\u4ee5\u4f7f\u7528 \u503c\u63a5\u6536\u5668\u65b9\u6cd5\u96c6 + \u6307\u9488\u63a5\u6536\u5668\u65b9\u6cd5\u96c6 \u63a5\u53e3\u7684\u5339\u914d(\u6216\u8005\u53eb\u5b9e\u73b0) \u7c7b\u578b\u5b9e\u73b0\u4e86\u63a5\u53e3\u7684\u6240\u6709\u65b9\u6cd5,\u53eb\u5339\u914d \u5177\u4f53\u7684\u8bb2,\u8981\u4e48\u662f\u7c7b\u578b\u7684\u503c\u65b9\u6cd5\u96c6\u5339\u914d\u63a5\u53e3,\u8981\u4e48\u662f\u6307\u9488\u65b9\u6cd5\u96c6\u5339\u914d\u63a5\u53e3 \u5177\u4f53\u7684\u5339\u914d\u5206\u4e24\u79cd: \u503c\u65b9\u6cd5\u96c6\u548c\u63a5\u53e3\u5339\u914d \u7ed9\u63a5\u53e3\u53d8\u91cf\u8d4b\u503c\u7684\u4e0d\u7ba1\u662f\u503c\u8fd8\u662f\u6307\u9488\u5bf9\u8c61,\u90fdok,\u56e0\u4e3a\u90fd\u5305\u542b\u503c\u65b9\u6cd5\u96c6 \u6307\u9488\u65b9\u6cd5\u96c6\u548c\u63a5\u53e3\u5339\u914d \u53ea\u80fd\u5c06\u6307\u9488\u5bf9\u8c61\u8d4b\u503c\u7ed9\u63a5\u53e3\u53d8\u91cf,\u56e0\u4e3a\u53ea\u6709\u6307\u9488\u65b9\u6cd5\u96c6\u548c\u63a5\u53e3\u5339\u914d \u5982\u679c\u5c06\u503c\u5bf9\u8c61\u8d4b\u503c\u7ed9\u63a5\u53e3\u53d8\u91cf,\u4f1a\u5728\u7f16\u8bd1\u671f\u62a5\u9519(\u4f1a\u89e6\u53d1\u63a5\u53e3\u5408\u7406\u6027\u68c0\u67e5\u673a\u5236) \u4e3a\u5565 i = s2Val \u4f1a\u62a5\u9519,\u56e0\u4e3a\u503c\u65b9\u6cd5\u96c6\u548c\u63a5\u53e3\u4e0d\u5339\u914d.","title":"\u63a5\u6536\u5668 (receiver) \u4e0e\u63a5\u53e3"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#mutex","text":"\u96f6\u503c sync.Mutex \u548c sync.RWMutex \u662f\u6709\u6548\u7684\u3002\u6240\u4ee5\u6307\u5411 mutex \u7684\u6307\u9488\u57fa\u672c\u662f\u4e0d\u5fc5\u8981\u7684\u3002 Bad Good mu := new(sync.Mutex) mu.Lock() var mu sync.Mutex mu.Lock() \u5982\u679c\u4f60\u4f7f\u7528\u7ed3\u6784\u4f53\u6307\u9488\uff0cmutex \u5e94\u8be5\u4f5c\u4e3a\u7ed3\u6784\u4f53\u7684\u975e\u6307\u9488\u5b57\u6bb5\u3002\u5373\u4f7f\u8be5\u7ed3\u6784\u4f53\u4e0d\u88ab\u5bfc\u51fa\uff0c\u4e5f\u4e0d\u8981\u76f4\u63a5\u628a mutex \u5d4c\u5165\u5230\u7ed3\u6784\u4f53\u4e2d\u3002 Bad Good type SMap struct { sync.Mutex data map[string]string } func NewSMap() *SMap { return &SMap{ data: make(map[string]string), } } func (m *SMap) Get(k string) string { m.Lock() defer m.Unlock() return m.data[k] } type SMap struct { mu sync.Mutex data map[string]string } func NewSMap() *SMap { return &SMap{ data: make(map[string]string), } } func (m *SMap) Get(k string) string { m.mu.Lock() defer m.mu.Unlock() return m.data[k] } `Mutex` \u5b57\u6bb5\uff0c `Lock` \u548c `Unlock` \u65b9\u6cd5\u662f `SMap` \u5bfc\u51fa\u7684 API \u4e2d\u4e0d\u523b\u610f\u8bf4\u660e\u7684\u4e00\u90e8\u5206\u3002 mutex \u53ca\u5176\u65b9\u6cd5\u662f `SMap` \u7684\u5b9e\u73b0\u7ec6\u8282\uff0c\u5bf9\u5176\u8c03\u7528\u8005\u4e0d\u53ef\u89c1\u3002","title":"\u96f6\u503c Mutex \u662f\u6709\u6548\u7684"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#slices-maps","text":"slices \u548c maps \u5305\u542b\u4e86\u6307\u5411\u5e95\u5c42\u6570\u636e\u7684\u6307\u9488\uff0c\u56e0\u6b64\u5728\u9700\u8981\u590d\u5236\u5b83\u4eec\u65f6\u8981\u7279\u522b\u6ce8\u610f\u3002","title":"\u5728\u8fb9\u754c\u5904\u62f7\u8d1d Slices \u548c Maps"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#slices-maps_1","text":"\u8bf7\u8bb0\u4f4f\uff0c\u5f53 map \u6216 slice \u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u4f20\u5165\u65f6\uff0c\u5982\u679c\u60a8\u5b58\u50a8\u4e86\u5bf9\u5b83\u4eec\u7684\u5f15\u7528\uff0c\u5219\u7528\u6237\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u3002 Bad Good func (d *Driver) SetTrips(trips []Trip) { d.trips = trips } trips := ... d1.SetTrips(trips) // \u4f60\u662f\u8981\u4fee\u6539 d1.trips \u5417\uff1f trips[0] = ... func (d *Driver) SetTrips(trips []Trip) { d.trips = make([]Trip, len(trips)) copy(d.trips, trips) } trips := ... d1.SetTrips(trips) // \u8fd9\u91cc\u6211\u4eec\u4fee\u6539 trips[0]\uff0c\u4f46\u4e0d\u4f1a\u5f71\u54cd\u5230 d1.trips trips[0] = ...","title":"\u63a5\u6536 Slices \u548c Maps"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#slices-maps_2","text":"\u540c\u6837\uff0c\u8bf7\u6ce8\u610f\u7528\u6237\u5bf9\u66b4\u9732\u5185\u90e8\u72b6\u6001\u7684 map \u6216 slice \u7684\u4fee\u6539\u3002 Bad Good type Stats struct { mu sync.Mutex counters map[string]int } // Snapshot \u8fd4\u56de\u5f53\u524d\u72b6\u6001\u3002 func (s *Stats) Snapshot() map[string]int { s.mu.Lock() defer s.mu.Unlock() return s.counters } // snapshot \u4e0d\u518d\u53d7\u4e92\u65a5\u9501\u4fdd\u62a4 // \u56e0\u6b64\u5bf9 snapshot \u7684\u4efb\u4f55\u8bbf\u95ee\u90fd\u5c06\u53d7\u5230\u6570\u636e\u7ade\u4e89\u7684\u5f71\u54cd // \u5f71\u54cd stats.counters snapshot := stats.Snapshot() type Stats struct { mu sync.Mutex counters map[string]int } func (s *Stats) Snapshot() map[string]int { s.mu.Lock() defer s.mu.Unlock() result := make(map[string]int, len(s.counters)) for k, v := range s.counters { result[k] = v } return result } // snapshot \u73b0\u5728\u662f\u4e00\u4e2a\u62f7\u8d1d snapshot := stats.Snapshot()","title":"\u8fd4\u56de slices \u6216 maps"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#defer","text":"\u4f7f\u7528 defer \u91ca\u653e\u8d44\u6e90\uff0c\u8bf8\u5982\u6587\u4ef6\u548c\u9501\u3002 Bad Good p.Lock() if p.count < 10 { p.Unlock() return p.count } p.count++ newCount := p.count p.Unlock() return newCount // \u5f53\u6709\u591a\u4e2a return \u5206\u652f\u65f6\uff0c\u5f88\u5bb9\u6613\u9057\u5fd8 unlock p.Lock() defer p.Unlock() if p.count < 10 { return p.count } p.count++ return p.count // \u66f4\u53ef\u8bfb Defer \u7684\u5f00\u9500\u975e\u5e38\u5c0f\uff0c\u53ea\u6709\u5728\u60a8\u53ef\u4ee5\u8bc1\u660e\u51fd\u6570\u6267\u884c\u65f6\u95f4\u5904\u4e8e\u7eb3\u79d2\u7ea7\u7684\u7a0b\u5ea6\u65f6\uff0c\u624d\u5e94\u907f\u514d\u8fd9\u6837\u505a\u3002\u4f7f\u7528 defer \u63d0\u5347\u53ef\u8bfb\u6027\u662f\u503c\u5f97\u7684\uff0c\u56e0\u4e3a\u4f7f\u7528\u5b83\u4eec\u7684\u6210\u672c\u5fae\u4e0d\u8db3\u9053\u3002\u5c24\u5176\u9002\u7528\u4e8e\u90a3\u4e9b\u4e0d\u4ec5\u4ec5\u662f\u7b80\u5355\u5185\u5b58\u8bbf\u95ee\u7684\u8f83\u5927\u7684\u65b9\u6cd5\uff0c\u5728\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\u5176\u4ed6\u8ba1\u7b97\u7684\u8d44\u6e90\u6d88\u8017\u8fdc\u8d85\u8fc7 defer \u3002","title":"\u4f7f\u7528 defer \u91ca\u653e\u8d44\u6e90"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#channel-size-1","text":"channel \u901a\u5e38 size \u5e94\u4e3a 1 \u6216\u662f\u65e0\u7f13\u51b2\u7684\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cchannel \u662f\u65e0\u7f13\u51b2\u7684\uff0c\u5176 size \u4e3a\u96f6\u3002\u4efb\u4f55\u5176\u4ed6\u5c3a\u5bf8\u90fd\u5fc5\u987b\u7ecf\u8fc7\u4e25\u683c\u7684\u5ba1\u67e5\u3002\u6211\u4eec\u9700\u8981\u8003\u8651\u5982\u4f55\u786e\u5b9a\u5927\u5c0f\uff0c\u8003\u8651\u662f\u4ec0\u4e48\u963b\u6b62\u4e86 channel \u5728\u9ad8\u8d1f\u8f7d\u4e0b\u548c\u963b\u585e\u5199\u65f6\u7684\u5199\u5165\uff0c\u4ee5\u53ca\u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6\u7cfb\u7edf\u903b\u8f91\u6709\u54ea\u4e9b\u53d8\u5316\u3002(\u7ffb\u8bd1\u89e3\u91ca\uff1a\u6309\u7167\u539f\u6587\u610f\u601d\u662f\u9700\u8981\u754c\u5b9a\u901a\u9053\u8fb9\u754c\uff0c\u7ade\u6001\u6761\u4ef6\uff0c\u4ee5\u53ca\u903b\u8f91\u4e0a\u4e0b\u6587\u68b3\u7406) Bad Good // \u5e94\u8be5\u8db3\u4ee5\u6ee1\u8db3\u4efb\u4f55\u60c5\u51b5\uff01 c := make(chan int, 64) // \u5927\u5c0f\uff1a1 c := make(chan int, 1) // \u6216\u8005 // \u65e0\u7f13\u51b2 channel\uff0c\u5927\u5c0f\u4e3a 0 c := make(chan int)","title":"Channel \u7684 size \u8981\u4e48\u662f 1\uff0c\u8981\u4e48\u662f\u65e0\u7f13\u51b2\u7684"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#1","text":"\u5728 Go \u4e2d\u5f15\u5165\u679a\u4e3e\u7684\u6807\u51c6\u65b9\u6cd5\u662f\u58f0\u660e\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7c7b\u578b\u548c\u4e00\u4e2a\u4f7f\u7528\u4e86 iota \u7684 const \u7ec4\u3002\u7531\u4e8e\u53d8\u91cf\u7684\u9ed8\u8ba4\u503c\u4e3a 0\uff0c\u56e0\u6b64\u901a\u5e38\u5e94\u4ee5\u975e\u96f6\u503c\u5f00\u5934\u679a\u4e3e\u3002 Bad Good type Operation int const ( Add Operation = iota Subtract Multiply ) // Add=0, Subtract=1, Multiply=2 type Operation int const ( Add Operation = iota + 1 Subtract Multiply ) // Add=1, Subtract=2, Multiply=3 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u96f6\u503c\u662f\u6709\u610f\u4e49\u7684\uff08\u679a\u4e3e\u4ece\u96f6\u5f00\u59cb\uff09\uff0c\u4f8b\u5982\uff0c\u5f53\u96f6\u503c\u662f\u7406\u60f3\u7684\u9ed8\u8ba4\u884c\u4e3a\u65f6\u3002 type LogOutput int const ( LogToStdout LogOutput = iota LogToFile LogToRemote ) // LogToStdout=0, LogToFile=1, LogToRemote=2","title":"\u679a\u4e3e\u4ece 1 \u5f00\u59cb"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#time","text":"\u65f6\u95f4\u5904\u7406\u5f88\u590d\u6742\u3002\u5173\u4e8e\u65f6\u95f4\u7684\u9519\u8bef\u5047\u8bbe\u901a\u5e38\u5305\u62ec\u4ee5\u4e0b\u51e0\u70b9\u3002 \u4e00\u5929\u6709 24 \u5c0f\u65f6 \u4e00\u5c0f\u65f6\u6709 60 \u5206\u949f \u4e00\u5468\u6709\u4e03\u5929 \u4e00\u5e74 365 \u5929 \u8fd8\u6709\u66f4\u591a \u4f8b\u5982\uff0c 1 \u8868\u793a\u5728\u4e00\u4e2a\u65f6\u95f4\u70b9\u4e0a\u52a0\u4e0a 24 \u5c0f\u65f6\u5e76\u4e0d\u603b\u662f\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u65e5\u5386\u65e5\u3002 \u56e0\u6b64\uff0c\u5728\u5904\u7406\u65f6\u95f4\u65f6\u59cb\u7ec8\u4f7f\u7528 [ \"time\" ] \u5305\uff0c\u56e0\u4e3a\u5b83\u6709\u52a9\u4e8e\u4ee5\u66f4\u5b89\u5168\u3001\u66f4\u51c6\u786e\u7684\u65b9\u5f0f\u5904\u7406\u8fd9\u4e9b\u4e0d\u6b63\u786e\u7684\u5047\u8bbe\u3002","title":"\u4f7f\u7528 time \u5904\u7406\u65f6\u95f4"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#timetime","text":"\u5728\u5904\u7406\u65f6\u95f4\u7684\u77ac\u95f4\u65f6\u4f7f\u7528 [ time.Time ]\uff0c\u5728\u6bd4\u8f83\u3001\u6dfb\u52a0\u6216\u51cf\u53bb\u65f6\u95f4\u65f6\u4f7f\u7528 time.Time \u4e2d\u7684\u65b9\u6cd5\u3002 Bad Good func isActive(now, start, stop int) bool { return start <= now && now < stop } func isActive(now, start, stop time.Time) bool { return (start.Before(now) || start.Equal(now)) && now.Before(stop) }","title":"\u4f7f\u7528 time.Time \u8868\u8fbe\u77ac\u65f6\u65f6\u95f4"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#timeduration","text":"\u5728\u5904\u7406\u65f6\u95f4\u6bb5\u65f6\u4f7f\u7528 [ time.Duration ] . Bad Good func poll(delay int) { for { // ... time.Sleep(time.Duration(delay) * time.Millisecond) } } poll(10) // \u662f\u51e0\u79d2\u949f\u8fd8\u662f\u51e0\u6beb\u79d2? func poll(delay time.Duration) { for { // ... time.Sleep(delay) } } poll(10*time.Second) \u56de\u5230\u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5728\u4e00\u4e2a\u65f6\u95f4\u77ac\u95f4\u52a0\u4e0a 24 \u5c0f\u65f6\uff0c\u6211\u4eec\u7528\u4e8e\u6dfb\u52a0\u65f6\u95f4\u7684\u65b9\u6cd5\u53d6\u51b3\u4e8e\u610f\u56fe\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e0b\u4e00\u4e2a\u65e5\u5386\u65e5(\u5f53\u524d\u5929\u7684\u4e0b\u4e00\u5929)\u7684\u540c\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528 [ Time.AddDate ]\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u60f3\u4fdd\u8bc1\u67d0\u4e00\u65f6\u523b\u6bd4\u524d\u4e00\u65f6\u523b\u665a 24 \u5c0f\u65f6\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528 [ Time.Add ]\u3002 newDay := t.AddDate(0 /* years */, 0 /* months */, 1 /* days */) maybeNewDay := t.Add(24 * time.Hour)","title":"\u4f7f\u7528 time.Duration \u8868\u8fbe\u65f6\u95f4\u6bb5"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#timetime-timeduration","text":"\u5c3d\u53ef\u80fd\u5728\u4e0e\u5916\u90e8\u7cfb\u7edf\u7684\u4ea4\u4e92\u4e2d\u4f7f\u7528 time.Duration \u548c time.Time \u4f8b\u5982 : Command-line \u6807\u5fd7: [ flag ] \u901a\u8fc7 [ time.ParseDuration ] \u652f\u6301 time.Duration JSON: [ encoding/json ] \u901a\u8fc7\u5176 [ UnmarshalJSON method] \u65b9\u6cd5\u652f\u6301\u5c06 time.Time \u7f16\u7801\u4e3a RFC 3339 \u5b57\u7b26\u4e32 SQL: [ database/sql ] \u652f\u6301\u5c06 DATETIME \u6216 TIMESTAMP \u5217\u8f6c\u6362\u4e3a time.Time \uff0c\u5982\u679c\u5e95\u5c42\u9a71\u52a8\u7a0b\u5e8f\u652f\u6301\u5219\u8fd4\u56de YAML: [ gopkg.in/yaml.v2 ] \u652f\u6301\u5c06 time.Time \u4f5c\u4e3a RFC 3339 \u5b57\u7b26\u4e32\uff0c\u5e76\u901a\u8fc7 [ time.ParseDuration ] \u652f\u6301 time.Duration \u3002 \u5f53\u4e0d\u80fd\u5728\u8fd9\u4e9b\u4ea4\u4e92\u4e2d\u4f7f\u7528 time.Duration \u65f6\uff0c\u8bf7\u4f7f\u7528 int \u6216 float64 \uff0c\u5e76\u5728\u5b57\u6bb5\u540d\u79f0\u4e2d\u5305\u542b\u5355\u4f4d\u3002 \u4f8b\u5982\uff0c\u7531\u4e8e encoding/json \u4e0d\u652f\u6301 time.Duration \uff0c\u56e0\u6b64\u8be5\u5355\u4f4d\u5305\u542b\u5728\u5b57\u6bb5\u7684\u540d\u79f0\u4e2d\u3002 Bad Good // {\"interval\": 2} type Config struct { Interval int `json:\"interval\"` } // {\"intervalMillis\": 2000} type Config struct { IntervalMillis int `json:\"intervalMillis\"` } \u5f53\u5728\u8fd9\u4e9b\u4ea4\u4e92\u4e2d\u4e0d\u80fd\u4f7f\u7528 time.Time \u65f6\uff0c\u9664\u975e\u8fbe\u6210\u4e00\u81f4\uff0c\u5426\u5219\u4f7f\u7528 string \u548c RFC 3339 \u4e2d\u5b9a\u4e49\u7684\u683c\u5f0f\u65f6\u95f4\u6233\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c[ Time.UnmarshalText ] \u4f7f\u7528\u6b64\u683c\u5f0f\uff0c\u5e76\u53ef\u901a\u8fc7 [ time.RFC3339 ] \u5728 Time.Format \u548c time.Parse \u4e2d\u4f7f\u7528\u3002 \u5c3d\u7ba1\u8fd9\u5728\u5b9e\u8df5\u4e2d\u5e76\u4e0d\u6210\u95ee\u9898\uff0c\u4f46\u8bf7\u8bb0\u4f4f\uff0c \"time\" \u5305\u4e0d\u652f\u6301\u89e3\u6790\u95f0\u79d2\u65f6\u95f4\u6233\uff08 8728 \uff09\uff0c\u4e5f\u4e0d\u5728\u8ba1\u7b97\u4e2d\u8003\u8651\u95f0\u79d2\uff08 15190 \uff09\u3002\u5982\u679c\u60a8\u6bd4\u8f83\u4e24\u4e2a\u65f6\u95f4\u77ac\u95f4\uff0c\u5219\u5dee\u5f02\u5c06\u4e0d\u5305\u62ec\u8fd9\u4e24\u4e2a\u77ac\u95f4\u4e4b\u95f4\u53ef\u80fd\u53d1\u751f\u7684\u95f0\u79d2\u3002","title":"\u5bf9\u5916\u90e8\u7cfb\u7edf\u4f7f\u7528 time.Time \u548c time.Duration"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_4","text":"Go \u4e2d\u6709\u591a\u79cd\u58f0\u660e\u9519\u8bef\uff08Error) \u7684\u9009\u9879\uff1a [ errors.New ] \u5bf9\u4e8e\u7b80\u5355\u9759\u6001\u5b57\u7b26\u4e32\u7684\u9519\u8bef [ fmt.Errorf ] \u7528\u4e8e\u683c\u5f0f\u5316\u7684\u9519\u8bef\u5b57\u7b26\u4e32 \u5b9e\u73b0 Error() \u65b9\u6cd5\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b \u7528 [ \"pkg/errors\".Wrap ] \u7684 Wrapped errors \u8fd4\u56de\u9519\u8bef\u65f6\uff0c\u8bf7\u8003\u8651\u4ee5\u4e0b\u56e0\u7d20\u4ee5\u786e\u5b9a\u6700\u4f73\u9009\u62e9\uff1a \u8fd9\u662f\u4e00\u4e2a\u4e0d\u9700\u8981\u989d\u5916\u4fe1\u606f\u7684\u7b80\u5355\u9519\u8bef\u5417\uff1f\u5982\u679c\u662f\u8fd9\u6837\uff0c[ errors.New ] \u8db3\u591f\u4e86\u3002 \u5ba2\u6237\u9700\u8981\u68c0\u6d4b\u5e76\u5904\u7406\u6b64\u9519\u8bef\u5417\uff1f\u5982\u679c\u662f\u8fd9\u6837\uff0c\u5219\u5e94\u4f7f\u7528\u81ea\u5b9a\u4e49\u7c7b\u578b\u5e76\u5b9e\u73b0\u8be5 Error() \u65b9\u6cd5\u3002 \u60a8\u662f\u5426\u6b63\u5728\u4f20\u64ad\u4e0b\u6e38\u51fd\u6570\u8fd4\u56de\u7684\u9519\u8bef\uff1f\u5982\u679c\u662f\u8fd9\u6837\uff0c\u8bf7\u67e5\u770b\u672c\u6587\u540e\u9762\u6709\u5173\u9519\u8bef\u5305\u88c5 section on error wrapping \u90e8\u5206\u7684\u5185\u5bb9\u3002 \u5426\u5219 [ fmt.Errorf ] \u5c31\u53ef\u4ee5\u4e86\u3002 \u5982\u679c\u5ba2\u6237\u7aef\u9700\u8981\u68c0\u6d4b\u9519\u8bef\uff0c\u5e76\u4e14\u60a8\u5df2\u4f7f\u7528\u521b\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u9519\u8bef [ errors.New ]\uff0c\u8bf7\u4f7f\u7528\u4e00\u4e2a\u9519\u8bef\u53d8\u91cf\u3002 Bad Good // package foo func Open() error { return errors.New(\"could not open\") } // package bar func use() { if err := foo.Open(); err != nil { if err.Error() == \"could not open\" { // handle } else { panic(\"unknown error\") } } } // package foo var ErrCouldNotOpen = errors.New(\"could not open\") func Open() error { return ErrCouldNotOpen } // package bar if err := foo.Open(); err != nil { if errors.Is(err, foo.ErrCouldNotOpen) { // handle } else { panic(\"unknown error\") } } \u5982\u679c\u60a8\u6709\u53ef\u80fd\u9700\u8981\u5ba2\u6237\u7aef\u68c0\u6d4b\u7684\u9519\u8bef\uff0c\u5e76\u4e14\u60f3\u5411\u5176\u4e2d\u6dfb\u52a0\u66f4\u591a\u4fe1\u606f\uff08\u4f8b\u5982\uff0c\u5b83\u4e0d\u662f\u9759\u6001\u5b57\u7b26\u4e32\uff09\uff0c\u5219\u5e94\u4f7f\u7528\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002 Bad Good func open(file string) error { return fmt.Errorf(\"file %q not found\", file) } func use() { if err := open(\"testfile.txt\"); err != nil { if strings.Contains(err.Error(), \"not found\") { // handle } else { panic(\"unknown error\") } } } type errNotFound struct { file string } func (e errNotFound) Error() string { return fmt.Sprintf(\"file %q not found\", e.file) } func open(file string) error { return errNotFound{file: file} } func use() { if err := open(\"testfile.txt\"); err != nil { if _, ok := err.(errNotFound); ok { // handle } else { panic(\"unknown error\") } } } \u76f4\u63a5\u5bfc\u51fa\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\u65f6\u8981\u5c0f\u5fc3\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u6210\u4e3a\u7a0b\u5e8f\u5305\u516c\u5171 API \u7684\u4e00\u90e8\u5206\u3002\u6700\u597d\u516c\u5f00\u5339\u914d\u5668\u529f\u80fd\u4ee5\u68c0\u67e5\u9519\u8bef\u3002 // package foo type errNotFound struct { file string } func (e errNotFound) Error() string { return fmt.Sprintf(\"file %q not found\", e.file) } func IsNotFoundError(err error) bool { _, ok := err.(errNotFound) return ok } func Open(file string) error { return errNotFound{file: file} } // package bar if err := foo.Open(\"foo\"); err != nil { if foo.IsNotFoundError(err) { // handle } else { panic(\"unknown error\") } }","title":"\u9519\u8bef\u7c7b\u578b"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#error-wrapping","text":"\u4e00\u4e2a\uff08\u51fd\u6570/\u65b9\u6cd5\uff09\u8c03\u7528\u5931\u8d25\u65f6\uff0c\u6709\u4e09\u79cd\u4e3b\u8981\u7684\u9519\u8bef\u4f20\u64ad\u65b9\u5f0f\uff1a \u5982\u679c\u6ca1\u6709\u8981\u6dfb\u52a0\u7684\u5176\u4ed6\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14\u60a8\u60f3\u8981\u7ef4\u62a4\u539f\u59cb\u9519\u8bef\u7c7b\u578b\uff0c\u5219\u8fd4\u56de\u539f\u59cb\u9519\u8bef\u3002 \u6dfb\u52a0\u4e0a\u4e0b\u6587\uff0c\u4f7f\u7528 [ \"pkg/errors\".Wrap ] \u4ee5\u4fbf\u9519\u8bef\u6d88\u606f\u63d0\u4f9b\u66f4\u591a\u4e0a\u4e0b\u6587 ,[ \"pkg/errors\".Cause ] \u53ef\u7528\u4e8e\u63d0\u53d6\u539f\u59cb\u9519\u8bef\u3002 \u5982\u679c\u8c03\u7528\u8005\u4e0d\u9700\u8981\u68c0\u6d4b\u6216\u5904\u7406\u7684\u7279\u5b9a\u9519\u8bef\u60c5\u51b5\uff0c\u4f7f\u7528 [ fmt.Errorf ]\u3002 \u5efa\u8bae\u5728\u53ef\u80fd\u7684\u5730\u65b9\u6dfb\u52a0\u4e0a\u4e0b\u6587\uff0c\u4ee5\u4f7f\u60a8\u83b7\u5f97\u8bf8\u5982\u201c\u8c03\u7528\u670d\u52a1 foo\uff1a\u8fde\u63a5\u88ab\u62d2\u7edd\u201d\u4e4b\u7c7b\u7684\u66f4\u6709\u7528\u7684\u9519\u8bef\uff0c\u800c\u4e0d\u662f\u8bf8\u5982\u201c\u8fde\u63a5\u88ab\u62d2\u7edd\u201d\u4e4b\u7c7b\u7684\u6a21\u7cca\u9519\u8bef\u3002 \u5728\u5c06\u4e0a\u4e0b\u6587\u6dfb\u52a0\u5230\u8fd4\u56de\u7684\u9519\u8bef\u65f6\uff0c\u8bf7\u907f\u514d\u4f7f\u7528\u201cfailed to\u201d\u4e4b\u7c7b\u7684\u77ed\u8bed\u4ee5\u4fdd\u6301\u4e0a\u4e0b\u6587\u7b80\u6d01\uff0c\u8fd9\u4e9b\u77ed\u8bed\u4f1a\u9648\u8ff0\u660e\u663e\u7684\u5185\u5bb9\uff0c\u5e76\u968f\u7740\u9519\u8bef\u5728\u5806\u6808\u4e2d\u7684\u6e17\u900f\u800c\u9010\u6e10\u5806\u79ef\uff1a Bad Good s, err := store.New() if err != nil { return fmt.Errorf( \"failed to create new store: %v\", err) } s, err := store.New() if err != nil { return fmt.Errorf( \"new store: %v\", err) } failed to x: failed to y: failed to create new store: the error x: y: new store: the error \u4f46\u662f\uff0c\u4e00\u65e6\u5c06\u9519\u8bef\u53d1\u9001\u5230\u53e6\u4e00\u4e2a\u7cfb\u7edf\uff0c\u5c31\u5e94\u8be5\u660e\u786e\u6d88\u606f\u662f\u9519\u8bef\u6d88\u606f\uff08\u4f8b\u5982\u4f7f\u7528 err \u6807\u8bb0\uff0c\u6216\u5728\u65e5\u5fd7\u4e2d\u4ee5\u201dFailed\u201d\u4e3a\u524d\u7f00\uff09\u3002 \u53e6\u8bf7\u53c2\u89c1 Don't just check errors, handle them gracefully . \u4e0d\u8981\u53ea\u662f\u68c0\u67e5\u9519\u8bef\uff0c\u8981\u4f18\u96c5\u5730\u5904\u7406\u9519\u8bef","title":"\u9519\u8bef\u5305\u88c5 (Error Wrapping)"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_5","text":"type assertion \u7684\u5355\u4e2a\u8fd4\u56de\u503c\u5f62\u5f0f\u9488\u5bf9\u4e0d\u6b63\u786e\u7684\u7c7b\u578b\u5c06\u4ea7\u751f panic\u3002\u56e0\u6b64\uff0c\u8bf7\u59cb\u7ec8\u4f7f\u7528\u201ccomma ok\u201d\u7684\u60ef\u7528\u6cd5\u3002 Bad Good t := i.(string) t, ok := i.(string) if !ok { // \u4f18\u96c5\u5730\u5904\u7406\u9519\u8bef }","title":"\u5904\u7406\u7c7b\u578b\u65ad\u8a00\u5931\u8d25"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#panic","text":"\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u8fd0\u884c\u7684\u4ee3\u7801\u5fc5\u987b\u907f\u514d\u51fa\u73b0 panic\u3002panic \u662f cascading failures \u7ea7\u8054\u5931\u8d25\u7684\u4e3b\u8981\u6839\u6e90 \u3002\u5982\u679c\u53d1\u751f\u9519\u8bef\uff0c\u8be5\u51fd\u6570\u5fc5\u987b\u8fd4\u56de\u9519\u8bef\uff0c\u5e76\u5141\u8bb8\u8c03\u7528\u65b9\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u5b83\u3002 Bad Good func run(args []string) { if len(args) == 0 { panic(\"an argument is required\") } // ... } func main() { run(os.Args[1:]) } func run(args []string) error { if len(args) == 0 { return errors.New(\"an argument is required\") } // ... return nil } func main() { if err := run(os.Args[1:]); err != nil { fmt.Fprintln(os.Stderr, err) os.Exit(1) } } panic/recover \u4e0d\u662f\u9519\u8bef\u5904\u7406\u7b56\u7565\u3002\u4ec5\u5f53\u53d1\u751f\u4e0d\u53ef\u6062\u590d\u7684\u4e8b\u60c5\uff08\u4f8b\u5982\uff1anil \u5f15\u7528\uff09\u65f6\uff0c\u7a0b\u5e8f\u624d\u5fc5\u987b panic\u3002\u7a0b\u5e8f\u521d\u59cb\u5316\u662f\u4e00\u4e2a\u4f8b\u5916\uff1a\u7a0b\u5e8f\u542f\u52a8\u65f6\u5e94\u4f7f\u7a0b\u5e8f\u4e2d\u6b62\u7684\u4e0d\u826f\u60c5\u51b5\u53ef\u80fd\u4f1a\u5f15\u8d77 panic\u3002 var _statusTemplate = template.Must(template.New(\"name\").Parse(\"_statusHTML\")) \u5373\u4f7f\u5728\u6d4b\u8bd5\u4ee3\u7801\u4e2d\uff0c\u4e5f\u4f18\u5148\u4f7f\u7528 t.Fatal \u6216\u8005 t.FailNow \u800c\u4e0d\u662f panic \u6765\u786e\u4fdd\u5931\u8d25\u88ab\u6807\u8bb0\u3002 Bad Good // func TestFoo(t *testing.T) f, err := ioutil.TempFile(\"\", \"test\") if err != nil { panic(\"failed to set up test\") } // func TestFoo(t *testing.T) f, err := ioutil.TempFile(\"\", \"test\") if err != nil { t.Fatal(\"failed to set up test\") }","title":"\u4e0d\u8981 panic"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#gouberorgatomic","text":"\u4f7f\u7528 sync/atomic \u5305\u7684\u539f\u5b50\u64cd\u4f5c\u5bf9\u539f\u59cb\u7c7b\u578b ( int32 , int64 \u7b49\uff09\u8fdb\u884c\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5f88\u5bb9\u6613\u5fd8\u8bb0\u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u6765\u8bfb\u53d6\u6216\u4fee\u6539\u53d8\u91cf\u3002 go.uber.org/atomic \u901a\u8fc7\u9690\u85cf\u57fa\u7840\u7c7b\u578b\u4e3a\u8fd9\u4e9b\u64cd\u4f5c\u589e\u52a0\u4e86\u7c7b\u578b\u5b89\u5168\u6027\u3002\u6b64\u5916\uff0c\u5b83\u5305\u62ec\u4e00\u4e2a\u65b9\u4fbf\u7684 atomic.Bool \u7c7b\u578b\u3002 Bad Good type foo struct { running int32 // atomic } func (f* foo) start() { if atomic.SwapInt32(&f.running, 1) == 1 { // already running\u2026 return } // start the Foo } func (f *foo) isRunning() bool { return f.running == 1 // race! } type foo struct { running atomic.Bool } func (f *foo) start() { if f.running.Swap(true) { // already running\u2026 return } // start the Foo } func (f *foo) isRunning() bool { return f.running.Load() }","title":"\u4f7f\u7528 go.uber.org/atomic"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_6","text":"\u4f7f\u7528\u9009\u62e9\u4f9d\u8d56\u6ce8\u5165\u65b9\u5f0f\u907f\u514d\u6539\u53d8\u5168\u5c40\u53d8\u91cf\u3002 \u65e2\u9002\u7528\u4e8e\u51fd\u6570\u6307\u9488\u53c8\u9002\u7528\u4e8e\u5176\u4ed6\u503c\u7c7b\u578b Bad Good // sign.go var _timeNow = time.Now func sign(msg string) string { now := _timeNow() return signWithTime(msg, now) } // sign.go type signer struct { now func() time.Time } func newSigner() *signer { return &signer{ now: time.Now, } } func (s *signer) Sign(msg string) string { now := s.now() return signWithTime(msg, now) } // sign_test.go func TestSign(t *testing.T) { oldTimeNow := _timeNow _timeNow = func() time.Time { return someFixedTime } defer func() { _timeNow = oldTimeNow }() assert.Equal(t, want, sign(give)) } // sign_test.go func TestSigner(t *testing.T) { s := newSigner() s.now = func() time.Time { return someFixedTime } assert.Equal(t, want, s.Sign(give)) }","title":"\u907f\u514d\u53ef\u53d8\u5168\u5c40\u53d8\u91cf"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_7","text":"\u8fd9\u4e9b\u5d4c\u5165\u7684\u7c7b\u578b\u6cc4\u6f0f\u5b9e\u73b0\u7ec6\u8282\u3001\u7981\u6b62\u7c7b\u578b\u6f14\u5316\u548c\u6a21\u7cca\u7684\u6587\u6863\u3002 \u5047\u8bbe\u60a8\u4f7f\u7528\u5171\u4eab\u7684 AbstractList \u5b9e\u73b0\u4e86\u591a\u79cd\u5217\u8868\u7c7b\u578b\uff0c\u8bf7\u907f\u514d\u5728\u5177\u4f53\u7684\u5217\u8868\u5b9e\u73b0\u4e2d\u5d4c\u5165 AbstractList \u3002 \u76f8\u53cd\uff0c\u53ea\u9700\u624b\u52a8\u5c06\u65b9\u6cd5\u5199\u5165\u5177\u4f53\u7684\u5217\u8868\uff0c\u8be5\u5217\u8868\u5c06\u59d4\u6258\u7ed9\u62bd\u8c61\u5217\u8868\u3002 type AbstractList struct {} // \u6dfb\u52a0\u5c06\u5b9e\u4f53\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 func (l *AbstractList) Add(e Entity) { // ... } // \u79fb\u9664\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u5b9e\u4f53\u3002 func (l *AbstractList) Remove(e Entity) { // ... } Bad Good // ConcreteList \u662f\u4e00\u4e2a\u5b9e\u4f53\u5217\u8868\u3002 type ConcreteList struct { *AbstractList } // ConcreteList \u662f\u4e00\u4e2a\u5b9e\u4f53\u5217\u8868\u3002 type ConcreteList struct { list *AbstractList } // \u6dfb\u52a0\u5c06\u5b9e\u4f53\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 func (l *ConcreteList) Add(e Entity) { l.list.Add(e) } // \u79fb\u9664\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u5b9e\u4f53\u3002 func (l *ConcreteList) Remove(e Entity) { l.list.Remove(e) } Go \u5141\u8bb8 \u7c7b\u578b\u5d4c\u5165 \u4f5c\u4e3a\u7ee7\u627f\u548c\u7ec4\u5408\u4e4b\u95f4\u7684\u6298\u8877\u3002 \u5916\u90e8\u7c7b\u578b\u83b7\u53d6\u5d4c\u5165\u7c7b\u578b\u7684\u65b9\u6cd5\u7684\u9690\u5f0f\u526f\u672c\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u59d4\u6258\u7ed9\u5d4c\u5165\u5b9e\u4f8b\u7684\u540c\u4e00\u65b9\u6cd5\u3002 \u7ed3\u6784\u8fd8\u83b7\u5f97\u4e0e\u7c7b\u578b\u540c\u540d\u7684\u5b57\u6bb5\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u5d4c\u5165\u7684\u7c7b\u578b\u662f public\uff0c\u90a3\u4e48\u5b57\u6bb5\u662f public\u3002\u4e3a\u4e86\u4fdd\u6301\u5411\u540e\u517c\u5bb9\u6027\uff0c\u5916\u90e8\u7c7b\u578b\u7684\u6bcf\u4e2a\u672a\u6765\u7248\u672c\u90fd\u5fc5\u987b\u4fdd\u7559\u5d4c\u5165\u7c7b\u578b\u3002 \u5f88\u5c11\u9700\u8981\u5d4c\u5165\u7c7b\u578b\u3002 \u8fd9\u662f\u4e00\u79cd\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u907f\u514d\u7f16\u5199\u5197\u957f\u7684\u59d4\u6258\u65b9\u6cd5\u3002 \u5373\u4f7f\u5d4c\u5165\u517c\u5bb9\u7684\u62bd\u8c61\u5217\u8868 interface \uff0c\u800c\u4e0d\u662f\u7ed3\u6784\u4f53\uff0c\u8fd9\u5c06\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u66f4\u5927\u7684\u7075\u6d3b\u6027\u6765\u6539\u53d8\u672a\u6765\uff0c\u4f46\u4ecd\u7136\u6cc4\u9732\u4e86\u5177\u4f53\u5217\u8868\u4f7f\u7528\u62bd\u8c61\u5b9e\u73b0\u7684\u7ec6\u8282\u3002 Bad Good // AbstractList \u662f\u5404\u79cd\u5b9e\u4f53\u5217\u8868\u7684\u901a\u7528\u5b9e\u73b0\u3002 type AbstractList interface { Add(Entity) Remove(Entity) } // ConcreteList \u662f\u4e00\u4e2a\u5b9e\u4f53\u5217\u8868\u3002 type ConcreteList struct { AbstractList } // ConcreteList \u662f\u4e00\u4e2a\u5b9e\u4f53\u5217\u8868\u3002 type ConcreteList struct { list AbstractList } // \u6dfb\u52a0\u5c06\u5b9e\u4f53\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 func (l *ConcreteList) Add(e Entity) { l.list.Add(e) } // \u79fb\u9664\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u5b9e\u4f53\u3002 func (l *ConcreteList) Remove(e Entity) { l.list.Remove(e) } \u65e0\u8bba\u662f\u4f7f\u7528\u5d4c\u5165\u5f0f\u7ed3\u6784\u8fd8\u662f\u4f7f\u7528\u5d4c\u5165\u5f0f\u63a5\u53e3\uff0c\u5d4c\u5165\u5f0f\u7c7b\u578b\u90fd\u4f1a\u9650\u5236\u7c7b\u578b\u7684\u6f14\u5316. \u5411\u5d4c\u5165\u5f0f\u63a5\u53e3\u6dfb\u52a0\u65b9\u6cd5\u662f\u4e00\u4e2a\u7834\u574f\u6027\u7684\u6539\u53d8\u3002 \u5220\u9664\u5d4c\u5165\u7c7b\u578b\u662f\u4e00\u4e2a\u7834\u574f\u6027\u7684\u6539\u53d8\u3002 \u5373\u4f7f\u4f7f\u7528\u6ee1\u8db3\u76f8\u540c\u63a5\u53e3\u7684\u66ff\u4ee3\u65b9\u6cd5\u66ff\u6362\u5d4c\u5165\u7c7b\u578b\uff0c\u4e5f\u662f\u4e00\u4e2a\u7834\u574f\u6027\u7684\u6539\u53d8\u3002 \u5c3d\u7ba1\u7f16\u5199\u8fd9\u4e9b\u59d4\u6258\u65b9\u6cd5\u662f\u4e4f\u5473\u7684\uff0c\u4f46\u662f\u989d\u5916\u7684\u5de5\u4f5c\u9690\u85cf\u4e86\u5b9e\u73b0\u7ec6\u8282\uff0c\u7559\u4e0b\u4e86\u66f4\u591a\u7684\u66f4\u6539\u673a\u4f1a\uff0c\u8fd8\u6d88\u9664\u4e86\u5728\u6587\u6863\u4e2d\u53d1\u73b0\u5b8c\u6574\u5217\u8868\u63a5\u53e3\u7684\u95f4\u63a5\u6027\u64cd\u4f5c\u3002","title":"\u907f\u514d\u5728\u516c\u5171\u7ed3\u6784\u4e2d\u5d4c\u5165\u7c7b\u578b"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_8","text":"Go\u8bed\u8a00\u89c4\u8303 language specification \u6982\u8ff0\u4e86\u51e0\u4e2a\u5185\u7f6e\u7684\uff0c \u4e0d\u5e94\u5728Go\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u540d\u79f0\u6807\u8bc6 predeclared identifiers \u3002 \u6839\u636e\u4e0a\u4e0b\u6587\u7684\u4e0d\u540c\uff0c\u5c06\u8fd9\u4e9b\u6807\u8bc6\u7b26\u4f5c\u4e3a\u540d\u79f0\u91cd\u590d\u4f7f\u7528\uff0c \u5c06\u5728\u5f53\u524d\u4f5c\u7528\u57df\uff08\u6216\u4efb\u4f55\u5d4c\u5957\u4f5c\u7528\u57df\uff09\u4e2d\u9690\u85cf\u539f\u59cb\u6807\u8bc6\u7b26\uff0c\u6216\u8005\u6df7\u6dc6\u4ee3\u7801\u3002 \u5728\u6700\u597d\u7684\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\uff1b\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6837\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u5f15\u5165\u6f5c\u5728\u7684\u3001\u96be\u4ee5\u6062\u590d\u7684\u9519\u8bef\u3002 Bad Good var error string // `error` \u4f5c\u7528\u57df\u9690\u5f0f\u8986\u76d6 // or func handleErrorMessage(error string) { // `error` \u4f5c\u7528\u57df\u9690\u5f0f\u8986\u76d6 } var errorMessage string // `error` \u6307\u5411\u5185\u7f6e\u7684\u975e\u8986\u76d6 // or func handleErrorMessage(msg string) { // `error` \u6307\u5411\u5185\u7f6e\u7684\u975e\u8986\u76d6 } type Foo struct { // \u867d\u7136\u8fd9\u4e9b\u5b57\u6bb5\u5728\u6280\u672f\u4e0a\u4e0d\u6784\u6210\u9634\u5f71\uff0c\u4f46`error`\u6216`string`\u5b57\u7b26\u4e32\u7684\u91cd\u6620\u5c04\u73b0\u5728\u662f\u4e0d\u660e\u786e\u7684\u3002 error error string string } func (f Foo) Error() error { // `error` \u548c `f.error` \u5728\u89c6\u89c9\u4e0a\u662f\u76f8\u4f3c\u7684 return f.error } func (f Foo) String() string { // `string` and `f.string` \u5728\u89c6\u89c9\u4e0a\u662f\u76f8\u4f3c\u7684 return f.string } type Foo struct { // `error` and `string` \u73b0\u5728\u662f\u660e\u786e\u7684\u3002 err error str string } func (f Foo) Error() error { return f.err } func (f Foo) String() string { return f.str } \u6ce8\u610f\uff0c\u7f16\u8bd1\u5668\u5728\u4f7f\u7528\u9884\u5148\u5206\u9694\u7684\u6807\u8bc6\u7b26\u65f6\u4e0d\u4f1a\u751f\u6210\u9519\u8bef\uff0c \u4f46\u662f\u8bf8\u5982 go vet \u4e4b\u7c7b\u7684\u5de5\u5177\u4f1a\u6b63\u786e\u5730\u6307\u51fa\u8fd9\u4e9b\u548c\u5176\u4ed6\u60c5\u51b5\u4e0b\u7684\u9690\u5f0f\u95ee\u9898\u3002","title":"\u907f\u514d\u4f7f\u7528\u5185\u7f6e\u540d\u79f0"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#init","text":"\u5c3d\u53ef\u80fd\u907f\u514d\u4f7f\u7528 init() \u3002\u5f53 init() \u662f\u4e0d\u53ef\u907f\u514d\u6216\u53ef\u53d6\u7684\uff0c\u4ee3\u7801\u5e94\u5148\u5c1d\u8bd5\uff1a \u65e0\u8bba\u7a0b\u5e8f\u73af\u5883\u6216\u8c03\u7528\u5982\u4f55\uff0c\u90fd\u8981\u5b8c\u5168\u786e\u5b9a\u3002 \u907f\u514d\u4f9d\u8d56\u4e8e\u5176\u4ed6 init() \u51fd\u6570\u7684\u987a\u5e8f\u6216\u526f\u4f5c\u7528\u3002\u867d\u7136 init() \u987a\u5e8f\u662f\u660e\u786e\u7684\uff0c\u4f46\u4ee3\u7801\u53ef\u4ee5\u66f4\u6539\uff0c \u56e0\u6b64 init() \u51fd\u6570\u4e4b\u95f4\u7684\u5173\u7cfb\u53ef\u80fd\u4f1a\u4f7f\u4ee3\u7801\u53d8\u5f97\u8106\u5f31\u548c\u5bb9\u6613\u51fa\u9519\u3002 \u907f\u514d\u8bbf\u95ee\u6216\u64cd\u4f5c\u5168\u5c40\u6216\u73af\u5883\u72b6\u6001\uff0c\u5982\u673a\u5668\u4fe1\u606f\u3001\u73af\u5883\u53d8\u91cf\u3001\u5de5\u4f5c\u76ee\u5f55\u3001\u7a0b\u5e8f\u53c2\u6570/\u8f93\u5165\u7b49\u3002 \u907f\u514d I/O \uff0c\u5305\u62ec\u6587\u4ef6\u7cfb\u7edf\u3001\u7f51\u7edc\u548c\u7cfb\u7edf\u8c03\u7528\u3002 \u4e0d\u80fd\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\u7684\u4ee3\u7801\u53ef\u80fd\u5c5e\u4e8e\u8981\u4f5c\u4e3a main() \u8c03\u7528\u7684\u4e00\u90e8\u5206\uff08\u6216\u7a0b\u5e8f\u751f\u547d\u5468\u671f\u4e2d\u7684\u5176\u4ed6\u5730\u65b9\uff09\uff0c \u6216\u8005\u4f5c\u4e3a main() \u672c\u8eab\u7684\u4e00\u90e8\u5206\u5199\u5165\u3002\u7279\u522b\u662f\uff0c\u6253\u7b97\u7531\u5176\u4ed6\u7a0b\u5e8f\u4f7f\u7528\u7684\u5e93\u5e94\u8be5\u7279\u522b\u6ce8\u610f\u5b8c\u5168\u786e\u5b9a\u6027\uff0c \u800c\u4e0d\u662f\u6267\u884c\u201cinit magic\u201d Bad Good type Foo struct { // ... } var _defaultFoo Foo func init() { _defaultFoo = Foo{ // ... } } var _defaultFoo = Foo{ // ... } // or, \u4e3a\u4e86\u66f4\u597d\u7684\u53ef\u6d4b\u8bd5\u6027: var _defaultFoo = defaultFoo() func defaultFoo() Foo { return Foo{ // ... } } type Config struct { // ... } var _config Config func init() { // Bad: \u57fa\u4e8e\u5f53\u524d\u76ee\u5f55 cwd, _ := os.Getwd() // Bad: I/O raw, _ := ioutil.ReadFile( path.Join(cwd, \"config\", \"config.yaml\"), ) yaml.Unmarshal(raw, &_config) } type Config struct { // ... } func loadConfig() Config { cwd, err := os.Getwd() // handle err raw, err := ioutil.ReadFile( path.Join(cwd, \"config\", \"config.yaml\"), ) // handle err var config Config yaml.Unmarshal(raw, &config) return config } \u8003\u8651\u5230\u4e0a\u8ff0\u60c5\u51b5\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c init() \u53ef\u80fd\u66f4\u53ef\u53d6\u6216\u662f\u5fc5\u8981\u7684\uff0c\u53ef\u80fd\u5305\u62ec\uff1a \u4e0d\u80fd\u8868\u793a\u4e3a\u5355\u4e2a\u8d4b\u503c\u7684\u590d\u6742\u8868\u8fbe\u5f0f\u3002 \u53ef\u63d2\u5165\u7684\u94a9\u5b50\uff0c\u5982 database/sql \u3001\u7f16\u7801\u7c7b\u578b\u6ce8\u518c\u8868\u7b49\u3002 \u5bf9 Google Cloud Functions \u548c\u5176\u4ed6\u5f62\u5f0f\u7684\u786e\u5b9a\u6027\u9884\u8ba1\u7b97\u7684\u4f18\u5316\u3002","title":"\u907f\u514d\u4f7f\u7528 init()"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_9","text":"\u8ffd\u52a0\u65f6\u4f18\u5148\u6307\u5b9a\u5207\u7247\u5bb9\u91cf \u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u521d\u59cb\u5316\u8981\u8ffd\u52a0\u7684\u5207\u7247\u65f6\u4e3a make() \u63d0\u4f9b\u4e00\u4e2a\u5bb9\u91cf\u503c\u3002 Bad Good for n := 0; n < b.N; n++ { data := make([]int, 0) for k := 0; k < size; k++{ data = append(data, k) } } for n := 0; n < b.N; n++ { data := make([]int, 0, size) for k := 0; k < size; k++{ data = append(data, k) } } BenchmarkBad-4 100000000 2.48s BenchmarkGood-4 100000000 0.21s","title":"\u8ffd\u52a0\u65f6\u4f18\u5148\u6307\u5b9a\u5207\u7247\u5bb9\u91cf"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#exit","text":"Go\u7a0b\u5e8f\u4f7f\u7528[ os.Exit ] \u6216\u8005 [ log.Fatal* ] \u7acb\u5373\u9000\u51fa (\u4f7f\u7528 panic \u4e0d\u662f\u9000\u51fa\u7a0b\u5e8f\u7684\u597d\u65b9\u6cd5\uff0c\u8bf7 don't panic .) \u4ec5\u5728 main\uff08\uff09 \u4e2d\u8c03\u7528\u5176\u4e2d\u4e00\u4e2a os.Exit \u6216\u8005 log.Fatal* \u3002\u6240\u6709\u5176\u4ed6\u51fd\u6570\u5e94\u5c06\u9519\u8bef\u8fd4\u56de\u5230\u4fe1\u53f7\u5931\u8d25\u4e2d\u3002 Bad Good func main() { body := readFile(path) fmt.Println(body) } func readFile(path string) string { f, err := os.Open(path) if err != nil { log.Fatal(err) } b, err := ioutil.ReadAll(f) if err != nil { log.Fatal(err) } return string(b) } func main() { body, err := readFile(path) if err != nil { log.Fatal(err) } fmt.Println(body) } func readFile(path string) (string, error) { f, err := os.Open(path) if err != nil { return \"\", err } b, err := ioutil.ReadAll(f) if err != nil { return \"\", err } return string(b), nil } \u539f\u5219\u4e0a\uff1a\u9000\u51fa\u7684\u5177\u6709\u591a\u79cd\u529f\u80fd\u7684\u7a0b\u5e8f\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\uff1a \u4e0d\u660e\u663e\u7684\u63a7\u5236\u6d41\uff1a\u4efb\u4f55\u51fd\u6570\u90fd\u53ef\u4ee5\u9000\u51fa\u7a0b\u5e8f\uff0c\u56e0\u6b64\u5f88\u96be\u5bf9\u63a7\u5236\u6d41\u8fdb\u884c\u63a8\u7406\u3002 \u96be\u4ee5\u6d4b\u8bd5\uff1a\u9000\u51fa\u7a0b\u5e8f\u7684\u51fd\u6570\u4e5f\u5c06\u9000\u51fa\u8c03\u7528\u5b83\u7684\u6d4b\u8bd5\u3002\u8fd9\u4f7f\u5f97\u51fd\u6570\u5f88\u96be\u6d4b\u8bd5\uff0c\u5e76\u5f15\u5165\u4e86\u8df3\u8fc7 go test \u5c1a\u672a\u8fd0\u884c\u7684\u5176\u4ed6\u6d4b\u8bd5\u7684\u98ce\u9669\u3002 \u8df3\u8fc7\u6e05\u7406\uff1a\u5f53\u51fd\u6570\u9000\u51fa\u7a0b\u5e8f\u65f6\uff0c\u4f1a\u8df3\u8fc7\u5df2\u7ecf\u8fdb\u5165 defer \u961f\u5217\u91cc\u7684\u51fd\u6570\u8c03\u7528\u3002\u8fd9\u589e\u52a0\u4e86\u8df3\u8fc7\u91cd\u8981\u6e05\u7406\u4efb\u52a1\u7684\u98ce\u9669\u3002","title":"\u4e3b\u51fd\u6570\u9000\u51fa\u65b9\u5f0f(Exit)"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_10","text":"\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u4f60\u7684 main\uff08\uff09 \u51fd\u6570\u4e2d \u6700\u591a\u4e00\u6b21 \u8c03\u7528 os.Exit \u6216\u8005 log.Fatal \u3002\u5982\u679c\u6709\u591a\u4e2a\u9519\u8bef\u573a\u666f\u505c\u6b62\u7a0b\u5e8f\u6267\u884c\uff0c\u8bf7\u5c06\u8be5\u903b\u8f91\u653e\u5728\u5355\u72ec\u7684\u51fd\u6570\u4e0b\u5e76\u4ece\u4e2d\u8fd4\u56de\u9519\u8bef\u3002 \u8fd9\u4f1a\u7f29\u77ed main() \u51fd\u6570\uff0c\u5e76\u5c06\u6240\u6709\u5173\u952e\u4e1a\u52a1\u903b\u8f91\u653e\u5165\u4e00\u4e2a\u5355\u72ec\u7684\u3001\u53ef\u6d4b\u8bd5\u7684\u51fd\u6570\u4e2d\u3002 Bad Good package main func main() { args := os.Args[1:] if len(args) != 1 { log.Fatal(\"missing file\") } name := args[0] f, err := os.Open(name) if err != nil { log.Fatal(err) } defer f.Close() // \u5982\u679c\u6211\u4eec\u8c03\u7528log.Fatal \u5728\u8fd9\u6761\u7ebf\u4e4b\u540e // f.Close \u5c06\u4f1a\u88ab\u6267\u884c. b, err := ioutil.ReadAll(f) if err != nil { log.Fatal(err) } // ... } package main func main() { if err := run(); err != nil { log.Fatal(err) } } func run() error { args := os.Args[1:] if len(args) != 1 { return errors.New(\"missing file\") } name := args[0] f, err := os.Open(name) if err != nil { return err } defer f.Close() b, err := ioutil.ReadAll(f) if err != nil { return err } // ... }","title":"\u4e00\u6b21\u6027\u9000\u51fa"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_11","text":"\u6027\u80fd\u65b9\u9762\u7684\u7279\u5b9a\u51c6\u5219\u53ea\u9002\u7528\u4e8e\u9ad8\u9891\u573a\u666f\u3002","title":"\u6027\u80fd"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#strconv-fmt","text":"\u5c06\u539f\u8bed\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u6216\u4ece\u5b57\u7b26\u4e32\u8f6c\u6362\u65f6\uff0c strconv \u901f\u5ea6\u6bd4 fmt \u5feb\u3002 Bad Good for i := 0; i < b.N; i++ { s := fmt.Sprint(rand.Int()) } for i := 0; i < b.N; i++ { s := strconv.Itoa(rand.Int()) } BenchmarkFmtSprint-4 143 ns/op 2 allocs/op BenchmarkStrconv-4 64.2 ns/op 1 allocs/op","title":"\u4f18\u5148\u4f7f\u7528 strconv \u800c\u4e0d\u662f fmt"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_12","text":"\u4e0d\u8981\u53cd\u590d\u4ece\u56fa\u5b9a\u5b57\u7b26\u4e32\u521b\u5efa\u5b57\u8282 slice\u3002\u76f8\u53cd\uff0c\u8bf7\u6267\u884c\u4e00\u6b21\u8f6c\u6362\u5e76\u6355\u83b7\u7ed3\u679c\u3002 Bad Good for i := 0; i < b.N; i++ { w.Write([]byte(\"Hello world\")) } data := []byte(\"Hello world\") for i := 0; i < b.N; i++ { w.Write(data) } BenchmarkBad-4 50000000 22.2 ns/op BenchmarkGood-4 500000000 3.25 ns/op","title":"\u907f\u514d\u5b57\u7b26\u4e32\u5230\u5b57\u8282\u7684\u8f6c\u6362"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_13","text":"\u5c3d\u53ef\u80fd\u6307\u5b9a\u5bb9\u5668\u5bb9\u91cf\uff0c\u4ee5\u4fbf\u4e3a\u5bb9\u5668\u9884\u5148\u5206\u914d\u5185\u5b58\u3002\u8fd9\u5c06\u5728\u6dfb\u52a0\u5143\u7d20\u65f6\u6700\u5c0f\u5316\u540e\u7eed\u5206\u914d\uff08\u901a\u8fc7\u590d\u5236\u548c\u8c03\u6574\u5bb9\u5668\u5927\u5c0f\uff09\u3002","title":"\u6307\u5b9a\u5bb9\u5668\u5bb9\u91cf"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#map","text":"\u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u4f7f\u7528 make() \u521d\u59cb\u5316\u7684\u65f6\u5019\u63d0\u4f9b\u5bb9\u91cf\u4fe1\u606f make(map[T1]T2, hint) \u5411 make() \u63d0\u4f9b\u5bb9\u91cf\u63d0\u793a\u4f1a\u5728\u521d\u59cb\u5316\u65f6\u5c1d\u8bd5\u8c03\u6574map\u7684\u5927\u5c0f\uff0c\u8fd9\u5c06\u51cf\u5c11\u5728\u5c06\u5143\u7d20\u6dfb\u52a0\u5230map\u65f6\u4e3amap\u91cd\u65b0\u5206\u914d\u5185\u5b58\u3002 \u6ce8\u610f\uff0c\u4e0eslices\u4e0d\u540c\u3002map capacity\u63d0\u793a\u5e76\u4e0d\u4fdd\u8bc1\u5b8c\u5168\u7684\u62a2\u5360\u5f0f\u5206\u914d\uff0c\u800c\u662f\u7528\u4e8e\u4f30\u8ba1\u6240\u9700\u7684hashmap bucket\u7684\u6570\u91cf\u3002 \u56e0\u6b64\uff0c\u5728\u5c06\u5143\u7d20\u6dfb\u52a0\u5230map\u65f6\uff0c\u751a\u81f3\u5728\u6307\u5b9amap\u5bb9\u91cf\u65f6\uff0c\u4ecd\u53ef\u80fd\u53d1\u751f\u5206\u914d\u3002 Bad Good m := make(map[string]os.FileInfo) files, _ := ioutil.ReadDir(\"./files\") for _, f := range files { m[f.Name()] = f } files, _ := ioutil.ReadDir(\"./files\") m := make(map[string]os.FileInfo, len(files)) for _, f := range files { m[f.Name()] = f } `m` \u662f\u5728\u6ca1\u6709\u5927\u5c0f\u63d0\u793a\u7684\u60c5\u51b5\u4e0b\u521b\u5efa\u7684\uff1b \u5728\u8fd0\u884c\u65f6\u53ef\u80fd\u4f1a\u6709\u66f4\u591a\u5206\u914d\u3002 `m` \u662f\u6709\u5927\u5c0f\u63d0\u793a\u521b\u5efa\u7684\uff1b\u5728\u8fd0\u884c\u65f6\u53ef\u80fd\u4f1a\u6709\u66f4\u5c11\u7684\u5206\u914d\u3002","title":"\u6307\u5b9aMap\u5bb9\u91cf\u63d0\u793a"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_14","text":"\u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u4f7f\u7528 make() \u521d\u59cb\u5316\u5207\u7247\u65f6\u63d0\u4f9b\u5bb9\u91cf\u4fe1\u606f\uff0c\u7279\u522b\u662f\u5728\u8ffd\u52a0\u5207\u7247\u65f6\u3002 make([]T, length, capacity) \u4e0emaps\u4e0d\u540c\uff0cslice capacity\u4e0d\u662f\u4e00\u4e2a\u63d0\u793a\uff1a\u7f16\u8bd1\u5668\u5c06\u4e3a\u63d0\u4f9b\u7ed9 make() \u7684slice\u7684\u5bb9\u91cf\u5206\u914d\u8db3\u591f\u7684\u5185\u5b58\uff0c \u8fd9\u610f\u5473\u7740\u540e\u7eed\u7684append()`\u64cd\u4f5c\u5c06\u5bfc\u81f4\u96f6\u5206\u914d\uff08\u76f4\u5230slice\u7684\u957f\u5ea6\u4e0e\u5bb9\u91cf\u5339\u914d\uff0c\u5728\u6b64\u4e4b\u540e\uff0c\u4efb\u4f55append\u90fd\u53ef\u80fd\u8c03\u6574\u5927\u5c0f\u4ee5\u5bb9\u7eb3\u5176\u4ed6\u5143\u7d20\uff09\u3002 Bad Good for n := 0; n < b.N; n++ { data := make([]int, 0) for k := 0; k < size; k++{ data = append(data, k) } } for n := 0; n < b.N; n++ { data := make([]int, 0, size) for k := 0; k < size; k++{ data = append(data, k) } } BenchmarkBad-4 100000000 2.48s BenchmarkGood-4 100000000 0.21s","title":"\u6307\u5b9a\u5207\u7247\u5bb9\u91cf"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_15","text":"","title":"\u89c4\u8303"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_16","text":"\u672c\u6587\u4e2d\u6982\u8ff0\u7684\u4e00\u4e9b\u6807\u51c6\u90fd\u662f\u5ba2\u89c2\u6027\u7684\u8bc4\u4f30\uff0c\u662f\u6839\u636e\u573a\u666f\u3001\u4e0a\u4e0b\u6587\u3001\u6216\u8005\u4e3b\u89c2\u6027\u7684\u5224\u65ad\uff1b \u4f46\u662f\u6700\u91cd\u8981\u7684\u662f\uff0c \u4fdd\u6301\u4e00\u81f4 . \u4e00\u81f4\u6027\u7684\u4ee3\u7801\u66f4\u5bb9\u6613\u7ef4\u62a4\u3001\u662f\u66f4\u5408\u7406\u7684\u3001\u9700\u8981\u66f4\u5c11\u7684\u5b66\u4e60\u6210\u672c\u3001\u5e76\u4e14\u968f\u7740\u65b0\u7684\u7ea6\u5b9a\u51fa\u73b0\u6216\u8005\u51fa\u73b0\u9519\u8bef\u540e\u66f4\u5bb9\u6613\u8fc1\u79fb\u3001\u66f4\u65b0\u3001\u4fee\u590d bug \u76f8\u53cd\uff0c\u5728\u4e00\u4e2a\u4ee3\u7801\u5e93\u4e2d\u5305\u542b\u591a\u4e2a\u5b8c\u5168\u4e0d\u540c\u6216\u51b2\u7a81\u7684\u4ee3\u7801\u98ce\u683c\u4f1a\u5bfc\u81f4\u7ef4\u62a4\u6210\u672c\u5f00\u9500\u3001\u4e0d\u786e\u5b9a\u6027\u548c\u8ba4\u77e5\u504f\u5dee\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u4f1a\u76f4\u63a5\u5bfc\u81f4\u901f\u5ea6\u964d\u4f4e\u3001\u4ee3\u7801\u5ba1\u67e5\u75db\u82e6\u3001\u800c\u4e14\u589e\u52a0 bug \u6570\u91cf\u3002 \u5c06\u8fd9\u4e9b\u6807\u51c6\u5e94\u7528\u4e8e\u4ee3\u7801\u5e93\u65f6\uff0c\u5efa\u8bae\u5728 package\uff08\u6216\u66f4\u5927\uff09\u7ea7\u522b\u8fdb\u884c\u66f4\u6539\uff0c\u5b50\u5305\u7ea7\u522b\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5c06\u591a\u4e2a\u6837\u5f0f\u5f15\u5165\u5230\u540c\u4e00\u4ee3\u7801\u4e2d\uff0c\u8fdd\u53cd\u4e86\u4e0a\u8ff0\u5173\u6ce8\u70b9\u3002","title":"\u4e00\u81f4\u6027"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_17","text":"Go \u8bed\u8a00\u652f\u6301\u5c06\u76f8\u4f3c\u7684\u58f0\u660e\u653e\u5728\u4e00\u4e2a\u7ec4\u5185\u3002 Bad Good import \"a\" import \"b\" import ( \"a\" \"b\" ) \u8fd9\u540c\u6837\u9002\u7528\u4e8e\u5e38\u91cf\u3001\u53d8\u91cf\u548c\u7c7b\u578b\u58f0\u660e\uff1a Bad Good const a = 1 const b = 2 var a = 1 var b = 2 type Area float64 type Volume float64 const ( a = 1 b = 2 ) var ( a = 1 b = 2 ) type ( Area float64 Volume float64 ) \u4ec5\u5c06\u76f8\u5173\u7684\u58f0\u660e\u653e\u5728\u4e00\u7ec4\u3002\u4e0d\u8981\u5c06\u4e0d\u76f8\u5173\u7684\u58f0\u660e\u653e\u5728\u4e00\u7ec4\u3002 Bad Good type Operation int const ( Add Operation = iota + 1 Subtract Multiply EnvVar = \"MY_ENV\" ) type Operation int const ( Add Operation = iota + 1 Subtract Multiply ) const EnvVar = \"MY_ENV\" \u5206\u7ec4\u4f7f\u7528\u7684\u4f4d\u7f6e\u6ca1\u6709\u9650\u5236\uff0c\u4f8b\u5982\uff1a\u4f60\u53ef\u4ee5\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u5b83\u4eec\uff1a Bad Good func f() string { var red = color.New(0xff0000) var green = color.New(0x00ff00) var blue = color.New(0x0000ff) ... } func f() string { var ( red = color.New(0xff0000) green = color.New(0x00ff00) blue = color.New(0x0000ff) ) ... }","title":"\u76f8\u4f3c\u7684\u58f0\u660e\u653e\u5728\u4e00\u7ec4"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#import","text":"\u5bfc\u5165\u5e94\u8be5\u5206\u4e3a\u4e24\u7ec4\uff1a \u6807\u51c6\u5e93 \u5176\u4ed6\u5e93 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f goimports \u5e94\u7528\u7684\u5206\u7ec4\u3002 Bad Good import ( \"fmt\" \"os\" \"go.uber.org/atomic\" \"golang.org/x/sync/errgroup\" ) import ( \"fmt\" \"os\" \"go.uber.org/atomic\" \"golang.org/x/sync/errgroup\" )","title":"import \u5206\u7ec4"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_18","text":"\u5f53\u547d\u540d\u5305\u65f6\uff0c\u8bf7\u6309\u4e0b\u9762\u89c4\u5219\u9009\u62e9\u4e00\u4e2a\u540d\u79f0\uff1a \u5168\u90e8\u5c0f\u5199\u3002\u6ca1\u6709\u5927\u5199\u6216\u4e0b\u5212\u7ebf\u3002 \u5927\u591a\u6570\u4f7f\u7528\u547d\u540d\u5bfc\u5165\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u9700\u8981\u91cd\u547d\u540d\u3002 \u7b80\u77ed\u800c\u7b80\u6d01\u3002\u8bf7\u8bb0\u4f4f\uff0c\u5728\u6bcf\u4e2a\u4f7f\u7528\u7684\u5730\u65b9\u90fd\u5b8c\u6574\u6807\u8bc6\u4e86\u8be5\u540d\u79f0\u3002 \u4e0d\u7528\u590d\u6570\u3002\u4f8b\u5982 net/url \uff0c\u800c\u4e0d\u662f net/urls \u3002 \u4e0d\u8981\u7528\u201ccommon\u201d\uff0c\u201cutil\u201d\uff0c\u201cshared\u201d\u6216\u201clib\u201d\u3002\u8fd9\u4e9b\u662f\u4e0d\u597d\u7684\uff0c\u4fe1\u606f\u91cf\u4e0d\u8db3\u7684\u540d\u79f0\u3002 \u53e6\u8bf7\u53c2\u9605 Package Names \u548c Go \u5305\u6837\u5f0f\u6307\u5357 .","title":"\u5305\u540d"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_19","text":"\u6211\u4eec\u9075\u5faa Go \u793e\u533a\u5173\u4e8e\u4f7f\u7528 MixedCaps \u4f5c\u4e3a\u51fd\u6570\u540d \u7684\u7ea6\u5b9a\u3002\u6709\u4e00\u4e2a\u4f8b\u5916\uff0c\u4e3a\u4e86\u5bf9\u76f8\u5173\u7684\u6d4b\u8bd5\u7528\u4f8b\u8fdb\u884c\u5206\u7ec4\uff0c\u51fd\u6570\u540d\u53ef\u80fd\u5305\u542b\u4e0b\u5212\u7ebf\uff0c\u5982\uff1a TestMyFunction_WhatIsBeingTested .","title":"\u51fd\u6570\u540d"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_20","text":"\u5982\u679c\u7a0b\u5e8f\u5305\u540d\u79f0\u4e0e\u5bfc\u5165\u8def\u5f84\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e0d\u5339\u914d\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u5bfc\u5165\u522b\u540d\u3002 import ( \"net/http\" client \"example.com/client-go\" trace \"example.com/trace/v2\" ) \u5728\u6240\u6709\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u9664\u975e\u5bfc\u5165\u4e4b\u95f4\u6709\u76f4\u63a5\u51b2\u7a81\uff0c\u5426\u5219\u5e94\u907f\u514d\u5bfc\u5165\u522b\u540d\u3002 Bad Good import ( \"fmt\" \"os\" nettrace \"golang.net/x/trace\" ) import ( \"fmt\" \"os\" \"runtime/trace\" nettrace \"golang.net/x/trace\" )","title":"\u5bfc\u5165\u522b\u540d"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_21","text":"\u51fd\u6570\u5e94\u6309\u7c97\u7565\u7684\u8c03\u7528\u987a\u5e8f\u6392\u5e8f\u3002 \u540c\u4e00\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u5e94\u6309\u63a5\u6536\u8005\u5206\u7ec4\u3002 \u56e0\u6b64\uff0c\u5bfc\u51fa\u7684\u51fd\u6570\u5e94\u5148\u51fa\u73b0\u5728\u6587\u4ef6\u4e2d\uff0c\u653e\u5728 struct , const , var \u5b9a\u4e49\u7684\u540e\u9762\u3002 \u5728\u5b9a\u4e49\u7c7b\u578b\u4e4b\u540e\uff0c\u4f46\u5728\u63a5\u6536\u8005\u7684\u5176\u4f59\u65b9\u6cd5\u4e4b\u524d\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e2a newXYZ() / NewXYZ() \u7531\u4e8e\u51fd\u6570\u662f\u6309\u63a5\u6536\u8005\u5206\u7ec4\u7684\uff0c\u56e0\u6b64\u666e\u901a\u5de5\u5177\u51fd\u6570\u5e94\u5728\u6587\u4ef6\u672b\u5c3e\u51fa\u73b0\u3002 Bad Good func (s *something) Cost() { return calcCost(s.weights) } type something struct{ ... } func calcCost(n []int) int {...} func (s *something) Stop() {...} func newSomething() *something { return &something{} } type something struct{ ... } func newSomething() *something { return &something{} } func (s *something) Cost() { return calcCost(s.weights) } func (s *something) Stop() {...} func calcCost(n []int) int {...}","title":"\u51fd\u6570\u5206\u7ec4\u4e0e\u987a\u5e8f"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_22","text":"\u4ee3\u7801\u5e94\u901a\u8fc7\u5c3d\u53ef\u80fd\u5148\u5904\u7406\u9519\u8bef\u60c5\u51b5/\u7279\u6b8a\u60c5\u51b5\u5e76\u5c3d\u65e9\u8fd4\u56de\u6216\u7ee7\u7eed\u5faa\u73af\u6765\u51cf\u5c11\u5d4c\u5957\u3002\u51cf\u5c11\u5d4c\u5957\u591a\u4e2a\u7ea7\u522b\u7684\u4ee3\u7801\u7684\u4ee3\u7801\u91cf\u3002 Bad Good for _, v := range data { if v.F1 == 1 { v = process(v) if err := v.Call(); err == nil { v.Send() } else { return err } } else { log.Printf(\"Invalid v: %v\", v) } } for _, v := range data { if v.F1 != 1 { log.Printf(\"Invalid v: %v\", v) continue } v = process(v) if err := v.Call(); err != nil { return err } v.Send() }","title":"\u51cf\u5c11\u5d4c\u5957"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#else","text":"\u5982\u679c\u5728 if \u7684\u4e24\u4e2a\u5206\u652f\u4e2d\u90fd\u8bbe\u7f6e\u4e86\u53d8\u91cf\uff0c\u5219\u53ef\u4ee5\u5c06\u5176\u66ff\u6362\u4e3a\u5355\u4e2a if\u3002 Bad Good var a int if b { a = 100 } else { a = 10 } a := 10 if b { a = 100 }","title":"\u4e0d\u5fc5\u8981\u7684 else"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_23","text":"\u5728\u9876\u5c42\uff0c\u4f7f\u7528\u6807\u51c6 var \u5173\u952e\u5b57\u3002\u8bf7\u52ff\u6307\u5b9a\u7c7b\u578b\uff0c\u9664\u975e\u5b83\u4e0e\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4e0d\u540c\u3002 Bad Good var _s string = F() func F() string { return \"A\" } var _s = F() // \u7531\u4e8e F \u5df2\u7ecf\u660e\u786e\u4e86\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u56e0\u6b64\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u663e\u5f0f\u6307\u5b9a_s \u7684\u7c7b\u578b // \u8fd8\u662f\u90a3\u79cd\u7c7b\u578b func F() string { return \"A\" } \u5982\u679c\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4e0e\u6240\u9700\u7684\u7c7b\u578b\u4e0d\u5b8c\u5168\u5339\u914d\uff0c\u8bf7\u6307\u5b9a\u7c7b\u578b\u3002 type myError struct{} func (myError) Error() string { return \"error\" } func F() myError { return myError{} } var _e error = F() // F \u8fd4\u56de\u4e00\u4e2a myError \u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4f46\u662f\u6211\u4eec\u8981 error \u7c7b\u578b","title":"\u9876\u5c42\u53d8\u91cf\u58f0\u660e"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_","text":"\u5728\u672a\u5bfc\u51fa\u7684\u9876\u7ea7 vars \u548c consts \uff0c \u524d\u9762\u52a0\u4e0a\u524d\u7f00_\uff0c\u4ee5\u4f7f\u5b83\u4eec\u5728\u4f7f\u7528\u65f6\u660e\u786e\u8868\u793a\u5b83\u4eec\u662f\u5168\u5c40\u7b26\u53f7\u3002 \u4f8b\u5916\uff1a\u672a\u5bfc\u51fa\u7684\u9519\u8bef\u503c\uff0c\u5e94\u4ee5 err \u5f00\u5934\u3002 \u57fa\u672c\u4f9d\u636e\uff1a\u9876\u7ea7\u53d8\u91cf\u548c\u5e38\u91cf\u5177\u6709\u5305\u8303\u56f4\u4f5c\u7528\u57df\u3002\u4f7f\u7528\u901a\u7528\u540d\u79f0\u53ef\u80fd\u5f88\u5bb9\u6613\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u610f\u5916\u4f7f\u7528\u9519\u8bef\u7684\u503c\u3002 Bad Good // foo.go const ( defaultPort = 8080 defaultUser = \"user\" ) // bar.go func Bar() { defaultPort := 9090 ... fmt.Println(\"Default port\", defaultPort) // We will not see a compile error if the first line of // Bar() is deleted. } // foo.go const ( _defaultPort = 8080 _defaultUser = \"user\" )","title":"\u5bf9\u4e8e\u672a\u5bfc\u51fa\u7684\u9876\u5c42\u5e38\u91cf\u548c\u53d8\u91cf\uff0c\u4f7f\u7528_\u4f5c\u4e3a\u524d\u7f00"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_24","text":"\u5d4c\u5165\u5f0f\u7c7b\u578b\uff08\u4f8b\u5982 mutex\uff09\u5e94\u4f4d\u4e8e\u7ed3\u6784\u4f53\u5185\u7684\u5b57\u6bb5\u5217\u8868\u7684\u9876\u90e8\uff0c\u5e76\u4e14\u5fc5\u987b\u6709\u4e00\u4e2a\u7a7a\u884c\u5c06\u5d4c\u5165\u5f0f\u5b57\u6bb5\u4e0e\u5e38\u89c4\u5b57\u6bb5\u5206\u9694\u5f00\u3002 Bad Good type Client struct { version int http.Client } type Client struct { http.Client version int } \u5185\u5d4c\u5e94\u8be5\u63d0\u4f9b\u5207\u5b9e\u7684\u597d\u5904\uff0c\u6bd4\u5982\u4ee5\u8bed\u4e49\u4e0a\u5408\u9002\u7684\u65b9\u5f0f\u6dfb\u52a0\u6216\u589e\u5f3a\u529f\u80fd\u3002 \u5b83\u5e94\u8be5\u5728\u5bf9\u7528\u6237\u4e0d\u5229\u5f71\u54cd\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\uff08\u53e6\u8bf7\u53c2\u89c1\uff1a \u907f\u514d\u5728\u516c\u5171\u7ed3\u6784\u4e2d\u5d4c\u5165\u7c7b\u578b Avoid Embedding Types in Public Structs \uff09\u3002 \u5d4c\u5165 \u4e0d\u5e94\u8be5 : \u7eaf\u7cb9\u662f\u4e3a\u4e86\u7f8e\u89c2\u6216\u65b9\u4fbf\u3002 \u4f7f\u5916\u90e8\u7c7b\u578b\u66f4\u96be\u6784\u9020\u6216\u4f7f\u7528\u3002 \u5f71\u54cd\u5916\u90e8\u7c7b\u578b\u7684\u96f6\u503c\u3002\u5982\u679c\u5916\u90e8\u7c7b\u578b\u6709\u4e00\u4e2a\u6709\u7528\u7684\u96f6\u503c\uff0c\u5219\u5728\u5d4c\u5165\u5185\u90e8\u7c7b\u578b\u4e4b\u540e\u5e94\u8be5\u4ecd\u7136\u6709\u4e00\u4e2a\u6709\u7528\u7684\u96f6\u503c\u3002 \u4f5c\u4e3a\u5d4c\u5165\u5185\u90e8\u7c7b\u578b\u7684\u526f\u4f5c\u7528\uff0c\u4ece\u5916\u90e8\u7c7b\u578b\u516c\u5f00\u4e0d\u76f8\u5173\u7684\u51fd\u6570\u6216\u5b57\u6bb5\u3002 \u516c\u5f00\u672a\u5bfc\u51fa\u7684\u7c7b\u578b\u3002 \u5f71\u54cd\u5916\u90e8\u7c7b\u578b\u7684\u590d\u5236\u5f62\u5f0f\u3002 \u66f4\u6539\u5916\u90e8\u7c7b\u578b\u7684API\u6216\u7c7b\u578b\u8bed\u4e49\u3002 \u5d4c\u5165\u5185\u90e8\u7c7b\u578b\u7684\u975e\u89c4\u8303\u5f62\u5f0f\u3002 \u516c\u5f00\u5916\u90e8\u7c7b\u578b\u7684\u5b9e\u73b0\u8be6\u7ec6\u4fe1\u606f\u3002 \u5141\u8bb8\u7528\u6237\u89c2\u5bdf\u6216\u63a7\u5236\u7c7b\u578b\u5185\u90e8\u3002 \u901a\u8fc7\u5305\u88c5\u7684\u65b9\u5f0f\u6539\u53d8\u5185\u90e8\u51fd\u6570\u7684\u4e00\u822c\u884c\u4e3a\uff0c\u8fd9\u79cd\u5305\u88c5\u65b9\u5f0f\u4f1a\u7ed9\u7528\u6237\u5e26\u6765\u4e00\u4e9b\u610f\u6599\u4e4b\u5916\u60c5\u51b5\u3002 \u7b80\u5355\u5730\u8bf4\uff0c\u6709\u610f\u8bc6\u5730\u548c\u6709\u76ee\u7684\u5730\u5d4c\u5165\u3002\u4e00\u79cd\u5f88\u597d\u7684\u6d4b\u8bd5\u4f53\u9a8c\u662f\uff0c \"\u662f\u5426\u6240\u6709\u8fd9\u4e9b\u5bfc\u51fa\u7684\u5185\u90e8\u65b9\u6cd5/\u5b57\u6bb5\u90fd\u5c06\u76f4\u63a5\u6dfb\u52a0\u5230\u5916\u90e8\u7c7b\u578b\" \u5982\u679c\u7b54\u6848\u662f some \u6216 no \uff0c\u4e0d\u8981\u5d4c\u5165\u5185\u90e8\u7c7b\u578b-\u800c\u662f\u4f7f\u7528\u5b57\u6bb5\u3002 Bad Good type A struct { // Bad: A.Lock() and A.Unlock() \u73b0\u5728\u53ef\u7528 // \u4e0d\u63d0\u4f9b\u4efb\u4f55\u529f\u80fd\u6027\u597d\u5904\uff0c\u5e76\u5141\u8bb8\u7528\u6237\u63a7\u5236\u6709\u5173A\u7684\u5185\u90e8\u7ec6\u8282\u3002 sync.Mutex } type countingWriteCloser struct { // Good: Write() \u5728\u5916\u5c42\u63d0\u4f9b\u7528\u4e8e\u7279\u5b9a\u76ee\u7684\uff0c // \u5e76\u4e14\u59d4\u6258\u5de5\u4f5c\u5230\u5185\u90e8\u7c7b\u578b\u7684Write()\u4e2d\u3002 io.WriteCloser count int } func (w *countingWriteCloser) Write(bs []byte) (int, error) { w.count += len(bs) return w.WriteCloser.Write(bs) } type Book struct { // Bad: \u6307\u9488\u66f4\u6539\u96f6\u503c\u7684\u6709\u7528\u6027 io.ReadWriter // other fields } // later var b Book b.Read(...) // panic: nil pointer b.String() // panic: nil pointer b.Write(...) // panic: nil pointer type Book struct { // Good: \u6709\u7528\u7684\u96f6\u503c bytes.Buffer // other fields } // later var b Book b.Read(...) // ok b.String() // ok b.Write(...) // ok type Client struct { sync.Mutex sync.WaitGroup bytes.Buffer url.URL } type Client struct { mtx sync.Mutex wg sync.WaitGroup buf bytes.Buffer url url.URL }","title":"\u7ed3\u6784\u4f53\u4e2d\u7684\u5d4c\u5165"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_25","text":"\u521d\u59cb\u5316\u7ed3\u6784\u4f53\u65f6\uff0c\u5e94\u8be5\u6307\u5b9a\u5b57\u6bb5\u540d\u79f0\u3002\u73b0\u5728\u7531 [ go vet ] \u5f3a\u5236\u6267\u884c\u3002 Bad Good k := User{\"John\", \"Doe\", true} k := User{ FirstName: \"John\", LastName: \"Doe\", Admin: true, } \u4f8b\u5916\uff1a\u5982\u679c\u6709 3 \u4e2a\u6216\u66f4\u5c11\u7684\u5b57\u6bb5\uff0c\u5219\u53ef\u4ee5\u5728\u6d4b\u8bd5\u8868\u4e2d\u7701\u7565\u5b57\u6bb5\u540d\u79f0\u3002 tests := []struct{ op Operation want string }{ {Add, \"add\"}, {Subtract, \"subtract\"}, }","title":"\u4f7f\u7528\u5b57\u6bb5\u540d\u521d\u59cb\u5316\u7ed3\u6784\u4f53"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_26","text":"\u5982\u679c\u5c06\u53d8\u91cf\u660e\u786e\u8bbe\u7f6e\u4e3a\u67d0\u4e2a\u503c\uff0c\u5219\u5e94\u4f7f\u7528\u77ed\u53d8\u91cf\u58f0\u660e\u5f62\u5f0f ( := )\u3002 Bad Good var s = \"foo\" s := \"foo\" \u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c var \u4f7f\u7528\u5173\u952e\u5b57\u65f6\u9ed8\u8ba4\u503c\u4f1a\u66f4\u6e05\u6670\u3002\u4f8b\u5982\uff0c\u58f0\u660e\u7a7a\u5207\u7247\u3002 Bad Good func f(list []int) { filtered := []int{} for _, v := range list { if v > 10 { filtered = append(filtered, v) } } } func f(list []int) { var filtered []int for _, v := range list { if v > 10 { filtered = append(filtered, v) } } }","title":"\u672c\u5730\u53d8\u91cf\u58f0\u660e"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#nil-slice","text":"nil \u662f\u4e00\u4e2a\u6709\u6548\u7684\u957f\u5ea6\u4e3a 0 \u7684 slice\uff0c\u8fd9\u610f\u5473\u7740\uff0c \u60a8\u4e0d\u5e94\u660e\u786e\u8fd4\u56de\u957f\u5ea6\u4e3a\u96f6\u7684\u5207\u7247\u3002\u5e94\u8be5\u8fd4\u56de nil \u6765\u4ee3\u66ff\u3002 Bad Good ```go if x == \"\" { return []int{} } ``` ```go if x == \"\" { return nil } ``` \u8981\u68c0\u67e5\u5207\u7247\u662f\u5426\u4e3a\u7a7a\uff0c\u8bf7\u59cb\u7ec8\u4f7f\u7528 len(s) == 0 \u3002\u800c\u975e nil \u3002 Bad Good ```go func isEmpty(s []string) bool { return s == nil } ``` ```go func isEmpty(s []string) bool { return len(s) == 0 } ``` \u96f6\u503c\u5207\u7247\uff08\u7528 var \u58f0\u660e\u7684\u5207\u7247\uff09\u53ef\u7acb\u5373\u4f7f\u7528\uff0c\u65e0\u9700\u8c03\u7528 make() \u521b\u5efa\u3002 Bad Good ```go nums := []int{} // or, nums := make([]int) if add1 { nums = append(nums, 1) } if add2 { nums = append(nums, 2) } ``` ```go var nums []int if add1 { nums = append(nums, 1) } if add2 { nums = append(nums, 2) } ``` \u8bb0\u4f4f\uff0c\u867d\u7136nil\u5207\u7247\u662f\u6709\u6548\u7684\u5207\u7247\uff0c\u4f46\u5b83\u4e0d\u7b49\u4e8e\u957f\u5ea6\u4e3a0\u7684\u5207\u7247\uff08\u4e00\u4e2a\u4e3anil\uff0c\u53e6\u4e00\u4e2a\u4e0d\u662f\uff09\uff0c\u5e76\u4e14\u5728\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff08\u4f8b\u5982\u5e8f\u5217\u5316\uff09\uff0c\u8fd9\u4e24\u4e2a\u5207\u7247\u7684\u5904\u7406\u65b9\u5f0f\u53ef\u80fd\u4e0d\u540c\u3002","title":"nil \u662f\u4e00\u4e2a\u6709\u6548\u7684 slice"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_27","text":"\u5982\u679c\u6709\u53ef\u80fd\uff0c\u5c3d\u91cf\u7f29\u5c0f\u53d8\u91cf\u4f5c\u7528\u8303\u56f4\u3002\u9664\u975e\u5b83\u4e0e \u51cf\u5c11\u5d4c\u5957 \u7684\u89c4\u5219\u51b2\u7a81\u3002 Bad Good err := ioutil.WriteFile(name, data, 0644) if err != nil { return err } if err := ioutil.WriteFile(name, data, 0644); err != nil { return err } \u5982\u679c\u9700\u8981\u5728 if \u4e4b\u5916\u4f7f\u7528\u51fd\u6570\u8c03\u7528\u7684\u7ed3\u679c\uff0c\u5219\u4e0d\u5e94\u5c1d\u8bd5\u7f29\u5c0f\u8303\u56f4\u3002 Bad Good if data, err := ioutil.ReadFile(name); err == nil { err = cfg.Decode(data) if err != nil { return err } fmt.Println(cfg) return nil } else { return err } data, err := ioutil.ReadFile(name) if err != nil { return err } if err := cfg.Decode(data); err != nil { return err } fmt.Println(cfg) return nil","title":"\u7f29\u5c0f\u53d8\u91cf\u4f5c\u7528\u57df"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#avoid-naked-parameters","text":"\u51fd\u6570\u8c03\u7528\u4e2d\u7684 \u610f\u4e49\u4e0d\u660e\u786e\u7684\u53c2\u6570 \u53ef\u80fd\u4f1a\u635f\u5bb3\u53ef\u8bfb\u6027\u3002\u5f53\u53c2\u6570\u540d\u79f0\u7684\u542b\u4e49\u4e0d\u660e\u663e\u65f6\uff0c\u8bf7\u4e3a\u53c2\u6570\u6dfb\u52a0 C \u6837\u5f0f\u6ce8\u91ca ( /* ... */ ) Bad Good // func printInfo(name string, isLocal, done bool) printInfo(\"foo\", true, true) // func printInfo(name string, isLocal, done bool) printInfo(\"foo\", true /* isLocal */, true /* done */) \u5bf9\u4e8e\u4e0a\u9762\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u8fd8\u6709\u4e00\u79cd\u66f4\u597d\u7684\u5904\u7406\u65b9\u5f0f\u662f\u5c06\u4e0a\u9762\u7684 bool \u7c7b\u578b\u6362\u6210\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002\u5c06\u6765\uff0c\u8be5\u53c2\u6570\u53ef\u4ee5\u652f\u6301\u4e0d\u4ec5\u4ec5\u5c40\u9650\u4e8e\u4e24\u4e2a\u72b6\u6001\uff08true/false\uff09\u3002 type Region int const ( UnknownRegion Region = iota Local ) type Status int const ( StatusReady Status= iota + 1 StatusDone // Maybe we will have a StatusInProgress in the future. ) func printInfo(name string, region Region, status Status)","title":"\u907f\u514d\u53c2\u6570\u8bed\u4e49\u4e0d\u660e\u786e(Avoid Naked Parameters)"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_28","text":"Go \u652f\u6301\u4f7f\u7528 \u539f\u59cb\u5b57\u7b26\u4e32\u5b57\u9762\u503c \uff0c\u4e5f\u5c31\u662f \" ` \" \u6765\u8868\u793a\u539f\u751f\u5b57\u7b26\u4e32\uff0c\u5728\u9700\u8981\u8f6c\u4e49\u7684\u573a\u666f\u4e0b\uff0c\u6211\u4eec\u5e94\u8be5\u5c3d\u91cf\u4f7f\u7528\u8fd9\u79cd\u65b9\u6848\u6765\u66ff\u6362\u3002 \u53ef\u4ee5\u8de8\u8d8a\u591a\u884c\u5e76\u5305\u542b\u5f15\u53f7\u3002\u4f7f\u7528\u8fd9\u4e9b\u5b57\u7b26\u4e32\u53ef\u4ee5\u907f\u514d\u66f4\u96be\u9605\u8bfb\u7684\u624b\u5de5\u8f6c\u4e49\u7684\u5b57\u7b26\u4e32\u3002 Bad Good wantError := \"unknown name:\\\"test\\\"\" wantError := `unknown error:\"test\"`","title":"\u4f7f\u7528\u539f\u59cb\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u907f\u514d\u8f6c\u4e49"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_29","text":"","title":"\u521d\u59cb\u5316\u7ed3\u6784\u4f53"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_30","text":"\u521d\u59cb\u5316\u7ed3\u6784\u65f6\uff0c\u51e0\u4e4e\u5e94\u8be5\u59cb\u7ec8\u6307\u5b9a\u5b57\u6bb5\u540d\u3002\u76ee\u524d\u7531[ go vet ]\u5f3a\u5236\u6267\u884c\u3002 Bad Good k := User{\"John\", \"Doe\", true} k := User{ FirstName: \"John\", LastName: \"Doe\", Admin: true, } \u4f8b\u5916\uff1a\u5f53\u67093\u4e2a\u6216\u66f4\u5c11\u7684\u5b57\u6bb5\u65f6\uff0c\u6d4b\u8bd5\u8868\u4e2d\u7684\u5b57\u6bb5\u540d may \u53ef\u4ee5\u7701\u7565\u3002 tests := []struct{ op Operation want string }{ {Add, \"add\"}, {Subtract, \"subtract\"}, }","title":"\u4f7f\u7528\u5b57\u6bb5\u540d\u521d\u59cb\u5316\u7ed3\u6784"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_31","text":"\u521d\u59cb\u5316\u5177\u6709\u5b57\u6bb5\u540d\u7684\u7ed3\u6784\u65f6\uff0c\u9664\u975e\u63d0\u4f9b\u6709\u610f\u4e49\u7684\u4e0a\u4e0b\u6587\uff0c\u5426\u5219\u5ffd\u7565\u503c\u4e3a\u96f6\u7684\u5b57\u6bb5\u3002 \u4e5f\u5c31\u662f\uff0c\u8ba9\u6211\u4eec\u81ea\u52a8\u5c06\u8fd9\u4e9b\u8bbe\u7f6e\u4e3a\u96f6\u503c Bad Good user := User{ FirstName: \"John\", LastName: \"Doe\", MiddleName: \"\", Admin: false, } user := User{ FirstName: \"John\", LastName: \"Doe\", } \u8fd9\u6709\u52a9\u4e8e\u901a\u8fc7\u7701\u7565\u8be5\u4e0a\u4e0b\u6587\u4e2d\u7684\u9ed8\u8ba4\u503c\u6765\u51cf\u5c11\u9605\u8bfb\u7684\u969c\u788d\u3002\u53ea\u6307\u5b9a\u6709\u610f\u4e49\u7684\u503c\u3002 \u5728\u5b57\u6bb5\u540d\u63d0\u4f9b\u6709\u610f\u4e49\u4e0a\u4e0b\u6587\u7684\u5730\u65b9\u5305\u542b\u96f6\u503c\u3002\u4f8b\u5982\uff0c \u8868\u9a71\u52a8\u6d4b\u8bd5 \u4e2d\u7684\u6d4b\u8bd5\u7528\u4f8b\u53ef\u4ee5\u53d7\u76ca\u4e8e\u5b57\u6bb5\u7684\u540d\u79f0\uff0c\u5373\u4f7f\u5b83\u4eec\u662f\u96f6\u503c\u7684\u3002 tests := []struct{ give string want int }{ {give: \"0\", want: 0}, // ... }","title":"\u7701\u7565\u7ed3\u6784\u4e2d\u7684\u96f6\u503c\u5b57\u6bb5"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#var","text":"\u5982\u679c\u5728\u58f0\u660e\u4e2d\u7701\u7565\u4e86\u7ed3\u6784\u7684\u6240\u6709\u5b57\u6bb5\uff0c\u8bf7\u4f7f\u7528 var \u58f0\u660e\u7ed3\u6784\u3002 Bad Good user := User{} var user User \u8fd9\u5c06\u96f6\u503c\u7ed3\u6784\u4e0e\u90a3\u4e9b\u5177\u6709\u7c7b\u4f3c\u4e8e\u4e3a[\u521d\u59cb\u5316 Maps]\u521b\u5efa\u7684,\u533a\u522b\u4e8e\u975e\u96f6\u503c\u5b57\u6bb5\u7684\u7ed3\u6784\u533a\u5206\u5f00\u6765\uff0c \u5e76\u4e0e\u6211\u4eec\u66f4\u559c\u6b22\u7684 declare empty slices \u65b9\u5f0f\u76f8\u5339\u914d\u3002","title":"\u5bf9\u96f6\u503c\u7ed3\u6784\u4f7f\u7528 var"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#struct","text":"\u5728\u521d\u59cb\u5316\u7ed3\u6784\u5f15\u7528\u65f6\uff0c\u8bf7\u4f7f\u7528 &T{} \u4ee3\u66ff new(T) \uff0c\u4ee5\u4f7f\u5176\u4e0e\u7ed3\u6784\u4f53\u521d\u59cb\u5316\u4e00\u81f4\u3002 Bad Good sval := T{Name: \"foo\"} // inconsistent sptr := new(T) sptr.Name = \"bar\" sval := T{Name: \"foo\"} sptr := &T{Name: \"bar\"}","title":"\u521d\u59cb\u5316 Struct \u5f15\u7528"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#maps","text":"\u5bf9\u4e8e\u7a7a map \u8bf7\u4f7f\u7528 make(..) \u521d\u59cb\u5316\uff0c \u5e76\u4e14 map \u662f\u901a\u8fc7\u7f16\u7a0b\u65b9\u5f0f\u586b\u5145\u7684\u3002 \u8fd9\u4f7f\u5f97 map \u521d\u59cb\u5316\u5728\u8868\u73b0\u4e0a\u4e0d\u540c\u4e8e\u58f0\u660e\uff0c\u5e76\u4e14\u5b83\u8fd8\u53ef\u4ee5\u65b9\u4fbf\u5730\u5728 make \u540e\u6dfb\u52a0\u5927\u5c0f\u63d0\u793a\u3002 Bad Good var ( // m1 \u8bfb\u5199\u5b89\u5168; // m2 \u5728\u5199\u5165\u65f6\u4f1a panic m1 = map[T1]T2{} m2 map[T1]T2 ) var ( // m1 \u8bfb\u5199\u5b89\u5168; // m2 \u5728\u5199\u5165\u65f6\u4f1a panic m1 = make(map[T1]T2) m2 map[T1]T2 ) \u58f0\u660e\u548c\u521d\u59cb\u5316\u770b\u8d77\u6765\u975e\u5e38\u76f8\u4f3c\u7684\u3002 \u58f0\u660e\u548c\u521d\u59cb\u5316\u770b\u8d77\u6765\u5dee\u522b\u975e\u5e38\u5927\u3002 \u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u8bf7\u5728\u521d\u59cb\u5316\u65f6\u63d0\u4f9b map \u5bb9\u91cf\u5927\u5c0f\uff0c\u8be6\u7ec6\u8bf7\u770b \u6307\u5b9aMap\u5bb9\u91cf\u63d0\u793a \u3002 \u53e6\u5916\uff0c\u5982\u679c map \u5305\u542b\u56fa\u5b9a\u7684\u5143\u7d20\u5217\u8868\uff0c\u5219\u4f7f\u7528 map literals(map \u521d\u59cb\u5316\u5217\u8868) \u521d\u59cb\u5316\u6620\u5c04\u3002 Bad Good m := make(map[T1]T2, 3) m[k1] = v1 m[k2] = v2 m[k3] = v3 m := map[T1]T2{ k1: v1, k2: v2, k3: v3, } \u57fa\u672c\u51c6\u5219\u662f\uff1a\u5728\u521d\u59cb\u5316\u65f6\u4f7f\u7528 map \u521d\u59cb\u5316\u5217\u8868 \u6765\u6dfb\u52a0\u4e00\u7ec4\u56fa\u5b9a\u7684\u5143\u7d20\u3002\u5426\u5219\u4f7f\u7528 make (\u5982\u679c\u53ef\u4ee5\uff0c\u8bf7\u5c3d\u91cf\u6307\u5b9a map \u5bb9\u91cf)\u3002","title":"\u521d\u59cb\u5316 Maps"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#string-format","text":"\u5982\u679c\u4f60\u5728\u51fd\u6570\u5916\u58f0\u660e Printf -style \u51fd\u6570\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u8bf7\u5c06\u5176\u8bbe\u7f6e\u4e3a const \u5e38\u91cf\u3002 \u8fd9\u6709\u52a9\u4e8e go vet \u5bf9\u683c\u5f0f\u5b57\u7b26\u4e32\u6267\u884c\u9759\u6001\u5206\u6790\u3002 Bad Good msg := \"unexpected values %v, %v\\n\" fmt.Printf(msg, 1, 2) const msg = \"unexpected values %v, %v\\n\" fmt.Printf(msg, 1, 2)","title":"\u5b57\u7b26\u4e32 string format"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#printf","text":"\u58f0\u660e Printf -style \u51fd\u6570\u65f6\uff0c\u8bf7\u786e\u4fdd go vet \u53ef\u4ee5\u68c0\u6d4b\u5230\u5b83\u5e76\u68c0\u67e5\u683c\u5f0f\u5b57\u7b26\u4e32\u3002 \u8fd9\u610f\u5473\u7740\u60a8\u5e94\u5c3d\u53ef\u80fd\u4f7f\u7528\u9884\u5b9a\u4e49\u7684 Printf -style \u51fd\u6570\u540d\u79f0\u3002 go vet \u5c06\u9ed8\u8ba4\u68c0\u67e5\u8fd9\u4e9b\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Printf \u7cfb\u5217 \u3002 \u5982\u679c\u4e0d\u80fd\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u8bf7\u4ee5 f \u7ed3\u675f\u9009\u62e9\u7684\u540d\u79f0\uff1a Wrapf \uff0c\u800c\u4e0d\u662f Wrap \u3002 go vet \u53ef\u4ee5\u8981\u6c42\u68c0\u67e5\u7279\u5b9a\u7684 Printf \u6837\u5f0f\u540d\u79f0\uff0c\u4f46\u540d\u79f0\u5fc5\u987b\u4ee5 f \u7ed3\u5c3e\u3002 $ go vet -printfuncs=wrapf,statusf \u53e6\u8bf7\u53c2\u9605 go vet: Printf family check .","title":"\u547d\u540d Printf \u6837\u5f0f\u7684\u51fd\u6570"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_32","text":"","title":"\u7f16\u7a0b\u6a21\u5f0f"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_33","text":"\u5f53\u6d4b\u8bd5\u903b\u8f91\u662f\u91cd\u590d\u7684\u65f6\u5019\uff0c\u901a\u8fc7 subtests \u4f7f\u7528 table \u9a71\u52a8\u7684\u65b9\u5f0f\u7f16\u5199 case \u4ee3\u7801\u770b\u4e0a\u53bb\u4f1a\u66f4\u7b80\u6d01\u3002 Bad Good // func TestSplitHostPort(t *testing.T) host, port, err := net.SplitHostPort(\"192.0.2.0:8000\") require.NoError(t, err) assert.Equal(t, \"192.0.2.0\", host) assert.Equal(t, \"8000\", port) host, port, err = net.SplitHostPort(\"192.0.2.0:http\") require.NoError(t, err) assert.Equal(t, \"192.0.2.0\", host) assert.Equal(t, \"http\", port) host, port, err = net.SplitHostPort(\":8000\") require.NoError(t, err) assert.Equal(t, \"\", host) assert.Equal(t, \"8000\", port) host, port, err = net.SplitHostPort(\"1:8\") require.NoError(t, err) assert.Equal(t, \"1\", host) assert.Equal(t, \"8\", port) // func TestSplitHostPort(t *testing.T) tests := []struct{ give string wantHost string wantPort string }{ { give: \"192.0.2.0:8000\", wantHost: \"192.0.2.0\", wantPort: \"8000\", }, { give: \"192.0.2.0:http\", wantHost: \"192.0.2.0\", wantPort: \"http\", }, { give: \":8000\", wantHost: \"\", wantPort: \"8000\", }, { give: \"1:8\", wantHost: \"1\", wantPort: \"8\", }, } for _, tt := range tests { t.Run(tt.give, func(t *testing.T) { host, port, err := net.SplitHostPort(tt.give) require.NoError(t, err) assert.Equal(t, tt.wantHost, host) assert.Equal(t, tt.wantPort, port) }) } \u5f88\u660e\u663e\uff0c\u4f7f\u7528 test table \u7684\u65b9\u5f0f\u5728\u4ee3\u7801\u903b\u8f91\u6269\u5c55\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u65b0\u589e test case\uff0c\u90fd\u4f1a\u663e\u5f97\u66f4\u52a0\u7684\u6e05\u6670\u3002 \u6211\u4eec\u9075\u5faa\u8fd9\u6837\u7684\u7ea6\u5b9a\uff1a\u5c06\u7ed3\u6784\u4f53\u5207\u7247\u79f0\u4e3a tests \u3002 \u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u79f0\u4e3a tt \u3002\u6b64\u5916\uff0c\u6211\u4eec\u9f13\u52b1\u4f7f\u7528 give \u548c want \u524d\u7f00\u8bf4\u660e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7684\u8f93\u5165\u548c\u8f93\u51fa\u503c\u3002 tests := []struct{ give string wantHost string wantPort string }{ // ... } for _, tt := range tests { // ... }","title":"\u8868\u9a71\u52a8\u6d4b\u8bd5"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#_34","text":"\u529f\u80fd\u9009\u9879\u662f\u4e00\u79cd\u6a21\u5f0f\uff0c\u60a8\u53ef\u4ee5\u5728\u5176\u4e2d\u58f0\u660e\u4e00\u4e2a\u4e0d\u900f\u660e Option \u7c7b\u578b\uff0c\u8be5\u7c7b\u578b\u5728\u67d0\u4e9b\u5185\u90e8\u7ed3\u6784\u4e2d\u8bb0\u5f55\u4fe1\u606f\u3002\u60a8\u63a5\u53d7\u8fd9\u4e9b\u9009\u9879\u7684\u53ef\u53d8\u7f16\u53f7\uff0c\u5e76\u6839\u636e\u5185\u90e8\u7ed3\u6784\u4e0a\u7684\u9009\u9879\u8bb0\u5f55\u7684\u5168\u90e8\u4fe1\u606f\u91c7\u53d6\u884c\u52a8\u3002 \u5c06\u6b64\u6a21\u5f0f\u7528\u4e8e\u60a8\u9700\u8981\u6269\u5c55\u7684\u6784\u9020\u51fd\u6570\u548c\u5176\u4ed6\u516c\u5171 API \u4e2d\u7684\u53ef\u9009\u53c2\u6570\uff0c\u5c24\u5176\u662f\u5728\u8fd9\u4e9b\u529f\u80fd\u4e0a\u5df2\u7ecf\u5177\u6709\u4e09\u4e2a\u6216\u66f4\u591a\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u3002 Bad Good // package db func Open( addr string, cache bool, logger *zap.Logger ) (*Connection, error) { // ... } // package db type Option interface { // ... } func WithCache(c bool) Option { // ... } func WithLogger(log *zap.Logger) Option { // ... } // Open creates a connection. func Open( addr string, opts ...Option, ) (*Connection, error) { // ... } \u5fc5\u987b\u59cb\u7ec8\u63d0\u4f9b\u7f13\u5b58\u548c\u8bb0\u5f55\u5668\u53c2\u6570\uff0c\u5373\u4f7f\u7528\u6237\u5e0c\u671b\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002 db.Open(addr, db.DefaultCache, zap.NewNop()) db.Open(addr, db.DefaultCache, log) db.Open(addr, false /* cache */, zap.NewNop()) db.Open(addr, false /* cache */, log) \u53ea\u6709\u5728\u9700\u8981\u65f6\u624d\u63d0\u4f9b\u9009\u9879\u3002 db.Open(addr) db.Open(addr, db.WithLogger(log)) db.Open(addr, db.WithCache(false)) db.Open( addr, db.WithCache(false), db.WithLogger(log), ) Our suggested way of implementing this pattern is with an Option interface that holds an unexported method, recording options on an unexported options struct. \u6211\u4eec\u5efa\u8bae\u5b9e\u73b0\u6b64\u6a21\u5f0f\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u4e00\u4e2a Option \u63a5\u53e3\uff0c\u8be5\u63a5\u53e3\u4fdd\u5b58\u4e00\u4e2a\u672a\u5bfc\u51fa\u7684\u65b9\u6cd5\uff0c\u5728\u4e00\u4e2a\u672a\u5bfc\u51fa\u7684 options \u7ed3\u6784\u4e0a\u8bb0\u5f55\u9009\u9879\u3002 type options struct { cache bool logger *zap.Logger } type Option interface { apply(*options) } type cacheOption bool func (c cacheOption) apply(opts *options) { opts.cache = bool(c) } func WithCache(c bool) Option { return cacheOption(c) } type loggerOption struct { Log *zap.Logger } func (l loggerOption) apply(opts *options) { opts.logger = l.Log } func WithLogger(log *zap.Logger) Option { return loggerOption{Log: log} } // Open creates a connection. func Open( addr string, opts ...Option, ) (*Connection, error) { options := options{ cache: defaultCache, logger: zap.NewNop(), } for _, o := range opts { o.apply(&options) } // ... } \u6ce8\u610f: \u8fd8\u6709\u4e00\u79cd\u4f7f\u7528\u95ed\u5305\u5b9e\u73b0\u8fd9\u4e2a\u6a21\u5f0f\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u6211\u4eec\u76f8\u4fe1\u4e0a\u9762\u7684\u6a21\u5f0f\u4e3a\u4f5c\u8005\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u7075\u6d3b\u6027\uff0c\u5e76\u4e14\u66f4\u5bb9\u6613\u5bf9\u7528\u6237\u8fdb\u884c\u8c03\u8bd5\u548c\u6d4b\u8bd5\u3002\u7279\u522b\u662f\uff0c\u5728\u4e0d\u53ef\u80fd\u8fdb\u884c\u6bd4\u8f83\u7684\u60c5\u51b5\u4e0b\u5b83\u5141\u8bb8\u5728\u6d4b\u8bd5\u548c\u6a21\u62df\u4e2d\u5bf9\u9009\u9879\u8fdb\u884c\u6bd4\u8f83\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u5141\u8bb8\u9009\u9879\u5b9e\u73b0\u5176\u4ed6\u63a5\u53e3\uff0c\u5305\u62ec fmt.Stringer \uff0c\u5141\u8bb8\u7528\u6237\u8bfb\u53d6\u9009\u9879\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002 \u8fd8\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u8d44\u6599\uff1a Self-referential functions and the design of options Functional options for friendly APIs","title":"\u529f\u80fd\u9009\u9879"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#linting","text":"\u6bd4\u4efb\u4f55 \"blessed\" linter \u96c6\u66f4\u91cd\u8981\u7684\u662f\uff0clint\u5728\u4e00\u4e2a\u4ee3\u7801\u5e93\u4e2d\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\u3002 \u6211\u4eec\u5efa\u8bae\u81f3\u5c11\u4f7f\u7528\u4ee5\u4e0blinters\uff0c\u56e0\u4e3a\u6211\u8ba4\u4e3a\u5b83\u4eec\u6709\u52a9\u4e8e\u53d1\u73b0\u6700\u5e38\u89c1\u7684\u95ee\u9898\uff0c\u5e76\u5728\u4e0d\u9700\u8981\u89c4\u5b9a\u7684\u60c5\u51b5\u4e0b\u4e3a\u4ee3\u7801\u8d28\u91cf\u5efa\u7acb\u4e00\u4e2a\u9ad8\u6807\u51c6\uff1a errcheck \u4ee5\u786e\u4fdd\u9519\u8bef\u5f97\u5230\u5904\u7406 goimports \u683c\u5f0f\u5316\u4ee3\u7801\u548c\u7ba1\u7406 imports golint \u6307\u51fa\u5e38\u89c1\u7684\u6587\u4f53\u9519\u8bef govet \u5206\u6790\u4ee3\u7801\u4e2d\u7684\u5e38\u89c1\u9519\u8bef staticcheck \u5404\u79cd\u9759\u6001\u5206\u6790\u68c0\u67e5","title":"Linting"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#lint-runners","text":"\u6211\u4eec\u63a8\u8350 golangci-lint \u4f5c\u4e3ago-to lint\u7684\u8fd0\u884c\u7a0b\u5e8f\uff0c\u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u5b83\u5728\u8f83\u5927\u7684\u4ee3\u7801\u5e93\u4e2d\u7684\u6027\u80fd\u4ee5\u53ca\u80fd\u591f\u540c\u65f6\u914d\u7f6e\u548c\u4f7f\u7528\u8bb8\u591a\u89c4\u8303\u3002\u8fd9\u4e2arepo\u6709\u4e00\u4e2a\u793a\u4f8b\u914d\u7f6e\u6587\u4ef6 .golangci.yml \u548c\u63a8\u8350\u7684linter\u8bbe\u7f6e\u3002 golangci-lint \u6709 various-linters \u53ef\u4f9b\u4f7f\u7528\u3002\u5efa\u8bae\u5c06\u4e0a\u8ff0linters\u4f5c\u4e3a\u57fa\u672cset\uff0c\u6211\u4eec\u9f13\u52b1\u56e2\u961f\u6dfb\u52a0\u5bf9\u4ed6\u4eec\u7684\u9879\u76ee\u6709\u610f\u4e49\u7684\u4efb\u4f55\u9644\u52a0linters\u3002","title":"Lint Runners"},{"location":"golang/Uber%20Go%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E4%B8%AD%E6%96%87%E7%89%88/#stargazers-over-time","text":"","title":"Stargazers over time"}]}